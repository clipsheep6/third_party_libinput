diff -Naur third_party_libinput_bak/COPYING third_party_libinput_new/COPYING
--- third_party_libinput_bak/COPYING	2023-03-28 10:49:58.364608100 +0800
+++ third_party_libinput_new/COPYING	2023-03-29 17:20:48.436333100 +0800
@@ -31,4 +31,4 @@
 version libinput is compiled against. The header is used during compilation
 only, libinput does not link against GPL libraries.
 
-[1] https://gitlab.freedesktop.org/libinput/libinput/blob/master/include/linux/input.h
+[1] https://gitlab.freedesktop.org/libinput/libinput/blob/main/include/linux/input.h
diff -Naur third_party_libinput_bak/README.OpenSource third_party_libinput_new/README.OpenSource
--- third_party_libinput_bak/README.OpenSource	2023-03-28 10:49:58.364608100 +0800
+++ third_party_libinput_new/README.OpenSource	2023-03-29 17:18:46.238059800 +0800
@@ -3,8 +3,8 @@
    "Name":"libinput",
    "License":"MIT License",
    "License File":"COPYING",
-   "Version Number":"1.16.4",
-   "Owner":"pengfei.hou@huawei.com",
+   "Version Number":"1.19.4",
+   "Owner":"gaoshangqi1@huawei.com",
    "Upstream URL":"https://github.com/wayland-project/libinput",
    "Description": "libinput is a library that provides a full input stack for display servers and other applications that need to handle input devices provided by the kernel"
   }
diff -Naur third_party_libinput_bak/README.md third_party_libinput_new/README.md
--- third_party_libinput_bak/README.md	2023-03-28 10:49:58.364608100 +0800
+++ third_party_libinput_new/README.md	2023-03-29 17:16:44.829572400 +0800
@@ -60,8 +60,8 @@
 repository. Developers are encouraged to look at those tools for a
 real-world (yet simple) example on how to use libinput.
 
-- A commandline debugging tool: https://gitlab.freedesktop.org/libinput/libinput/tree/master/tools/libinput-debug-events.c
-- A GTK application that draws cursor/touch/tablet positions: https://gitlab.freedesktop.org/libinput/libinput/tree/master/tools/libinput-debug-gui.c
+- A commandline debugging tool: https://gitlab.freedesktop.org/libinput/libinput/tree/main/tools/libinput-debug-events.c
+- A GTK application that draws cursor/touch/tablet positions: https://gitlab.freedesktop.org/libinput/libinput/tree/main/tools/libinput-debug-gui.c
 
 License
 -------
@@ -75,7 +75,7 @@
 > and/or sell copies of the Software, and to permit persons to whom the
 > Software is furnished to do so, subject to the following conditions: [...]
 
-See the [COPYING](https://gitlab.freedesktop.org/libinput/libinput/tree/master/COPYING)
+See the [COPYING](https://gitlab.freedesktop.org/libinput/libinput/tree/main/COPYING)
 file for the full license information.
 
 About
diff -Naur third_party_libinput_bak/completion/zsh/_libinput third_party_libinput_new/completion/zsh/_libinput
--- third_party_libinput_bak/completion/zsh/_libinput	2023-03-28 10:49:58.364608100 +0800
+++ third_party_libinput_new/completion/zsh/_libinput	2023-03-29 15:30:48.545607800 +0800
@@ -163,12 +163,35 @@
 		':device:_files -W /dev/input/ -P /dev/input/'
 }
 
+(( $+functions[_libinput_analyze_per-slot-delta] )) || _libinput_analyze_per-slot-delta()
+{
+	_arguments \
+		'--help[Show help message and exit]' \
+		':recording:_files'
+}
+
+(( $+functions[_libinput_analyze_touch-down-state] )) || _libinput_analyze_touch-down-state()
+{
+	_arguments \
+		'--help[Show help message and exit]' \
+		':recording:_files'
+}
+
+(( $+functions[_libinput_analyze_recording] )) || _libinput_analyze_recording()
+{
+	_arguments \
+		'--help[Show help message and exit]' \
+		':recording:_files'
+}
+
 (( $+functions[_libinput_analyze] )) || _libinput_analyze()
 {
 	local curcontext=$curcontext state line ret=1
 	local features
 	features=(
 		"per-slot-delta:analyze relative movement per touch per slot"
+		"recording:analyze a recording by printing a pretty table"
+		"touch-down-state:analyze a recording for logical touch down states"
 	)
 
 	_arguments -C \
@@ -196,10 +219,11 @@
 		'--help[Show help message and exit]' \
 		'--all[Record all /dev/input/event* devices available on the system]' \
 		'--autorestart=[Terminate the current recording after s seconds of device inactivity]' \
-		{-o+,--output=}'[Speficy the output file to use]:file:_files -g "*.yml"' \
+		{-o+,--output=}'[Specify the output file to use]:file:_files -g "*.yml"' \
 		'--multiple[Record multiple devices at once]' \
 		'--show-keycodes[Show keycodes as-is in the recording]' \
 		'--with-libinput[Record libinput events alongside device events]' \
+		'--with-hidraw[Record hidraw events alongside device events]' \
 		'*::device:_files -W /dev/input/ -P /dev/input/'
 }
 
diff -Naur third_party_libinput_bak/completion/zsh/meson.build third_party_libinput_new/completion/zsh/meson.build
--- third_party_libinput_bak/completion/zsh/meson.build	2023-03-28 10:49:58.364608100 +0800
+++ third_party_libinput_new/completion/zsh/meson.build	2023-03-29 15:31:05.203339000 +0800
@@ -1,6 +1,6 @@
 zshcompletiondir = get_option('zshcompletiondir')
 if zshcompletiondir == ''
-		zshcompletiondir = join_paths(get_option('datadir'), 'zsh', 'site-functions')
+		zshcompletiondir = get_option('datadir') / 'zsh' / 'site-functions'
 endif
 
 if zshcompletiondir != 'no'
diff -Naur third_party_libinput_bak/doc/api/libinput.doxygen.in third_party_libinput_new/doc/api/libinput.doxygen.in
--- third_party_libinput_bak/doc/api/libinput.doxygen.in	2023-03-28 10:49:58.364608100 +0800
+++ third_party_libinput_new/doc/api/libinput.doxygen.in	2023-03-29 15:32:12.142853400 +0800
@@ -11,8 +11,9 @@
 QUIET                  = YES
 INPUT                  = "@builddir@"
 IMAGE_PATH             = "@builddir@"
+OUTPUT_DIRECTORY       = doc
 GENERATE_HTML          = YES
-HTML_OUTPUT            = api
+HTML_OUTPUT            = html
 SEARCHENGINE           = NO
 USE_MATHJAX            = YES
 MATHJAX_RELPATH        = https://cdn.mathjax.org/mathjax/latest
diff -Naur third_party_libinput_bak/doc/api/meson.build third_party_libinput_new/doc/api/meson.build
--- third_party_libinput_bak/doc/api/meson.build	2023-03-28 10:49:58.364608100 +0800
+++ third_party_libinput_new/doc/api/meson.build	2023-03-29 15:32:55.452797700 +0800
@@ -9,26 +9,6 @@
 	error('Program "dot" not found or not executable. Try building with -Ddocumentation=false')
 endif
 
-doxygen_version_cmd = run_command(doxygen.path(), '--version')
-if doxygen_version_cmd.returncode() != 0
-	error('Command "doxygen --version" failed.')
-endif
-doxygen_version = doxygen_version_cmd.stdout()
-if doxygen_version.version_compare('< 1.8.3')
-	error('doxygen needs to be at least version 1.8.3 (have @0@)'.format(doxygen_version))
-endif
-grep = find_program('grep')
-dot_version_cmd = run_command(dot.path(), '-V')
-if dot_version_cmd.returncode() != 0
-	error('Command "dot -V" failed.')
-endif
-# dot -V output is (to stderr):
-# 	dot - graphviz version 2.38.0 (20140413.2041)
-dot_version = dot_version_cmd.stderr().split(' ')[4]
-if dot_version.version_compare('< 2.26')
-	error('Graphviz dot needs to be at least version 2.26 (have @0@)'.format(dot_version))
-endif
-
 mainpage = vcs_tag(command : ['git', 'log', '-1', '--format=%h'],
 		 fallback : 'unknown',
 		 input : 'mainpage.dox',
@@ -46,19 +26,11 @@
 	'style/libinputdoxygen.css',
 )
 
-config_noop = configuration_data()
-# Set a dummy replacement to silence meson warnings:
-# meson.build:487: WARNING: Got an empty configuration_data() object and
-# 		   found no substitutions in the input file 'foo'. If you
-# 		   want to copy a file to the build dir, use the 'copy:'
-# 		   keyword argument added in 0.47.0
-config_noop.set('dummy', 'dummy')
-
 doxyfiles = []
 foreach f : src_doxygen
 	df = configure_file(input: f,
 			    output: '@PLAINNAME@',
-			    configuration : config_noop)
+			    copy : true)
 	doxyfiles += [ df ]
 endforeach
 
@@ -73,7 +45,7 @@
 
 custom_target('doxygen',
 	      input : [ doxyfiles, doxyfile, mainpage ] + src_doxygen,
-	      output : [ '.' ],
+	      output : [ 'html' ],
 	      command : [ doxygen, doxyfile ],
 	      install : false,
 	      depends: [ mainpage ],
diff -Naur third_party_libinput_bak/doc/button-debouncing-state-machine.svg third_party_libinput_new/doc/button-debouncing-state-machine.svg
--- third_party_libinput_bak/doc/button-debouncing-state-machine.svg	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/button-debouncing-state-machine.svg	2023-03-29 15:43:42.000783700 +0800
@@ -1,3 +1,3 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
-<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1863px" height="1911px" viewBox="-0.5 -0.5 1863 1911" content="&lt;mxfile modified=&quot;2019-03-06T02:00:35.486Z&quot; host=&quot;www.draw.io&quot; agent=&quot;Mozilla/5.0 (X11; Linux x86_64; rv:64.0) Gecko/20100101 Firefox/64.0&quot; etag=&quot;vkHiu0IQZw_6aWYCIVwM&quot; version=&quot;10.3.5&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;27c35eac-9917-780f-69cd-550de3271581&quot; name=&quot;Page-1&quot;&gt;7R1bd6M2+tfk7O6DfZCEQDzmOs122pk2mc7OvszBGMe0jvEBnEt/fcXVICEFEy6yPXmYMTIC/N3vnKHLx5cPgb1Z/uLP3dUZ1OYvZ+jqDEJEdEj/i1desxWLgHTlIfDm6Vpp4c77280WtWx1683dsHJi5PuryNtUFx1/vXadqLJmB4H/XD1t4a+qd93YDy63cOfYK371qzePlukqgcZu/SfXe1jmdwaGlX7zaOcnZ78kXNpz/7m0hK7P0GXg+1H66fHl0l3F0Mvhku67EXxbPFjgrqNGGyzkANcyiWUQguyJmaEmjF7zH+vO6W/PDv0gWvoP/tpeXe9WLwJ/u5678RU1erSMHlf0I6Af/3Sj6DVDn72NfLq0u8JH399k59GHDV7/F++f4vzwW3a55ODqpXL0mh052+ApuW98Ef6nZ9AI/W3guPW/1yAZ+djBgxsJYJJdJwZE6cIZQD+4/qNLH4qeELgrO/KeqkRiZ7T2UJyXbT0PAvu1dMLG99ZRWLry53iBnpDxDUA50bzmZMUil90BNPTOHcSQbyCIyM6nH9KfmR+V4LVbSmiyGX0CnPHYk73aZoA+g8YqigmPQtx4iD9dr1OEhJEdxXLinH6+vfv+5fMZvEw/Xn36+mu+bxbk+/IV+lS7i+WLm3zhPAy3j5vI89fplZO7xM8cJgd+QEmSEqIbTGbbKKJnJTe11/Hqp/ufrn+n/198ub//9GtMVE9ugnUql+Jr2Ktn+zU+3AS+44ZhcqmZu/CTb6Nlco4Tbe0YSOnlp/TTXX7X/Fno3YsT8kez4++99cMqPmHmxVj895b+qhsqgdb/yZ6yfE5+MXr34ub52qPtLL11+jiBH4bFCXP3yXN24NguFp7j0d84LQF3I4TtHWXESHKzZ48K0AKZWvJgBTq1mZ0CLPnN6SVSEPwrzH9yiopXISqSeyQkGLihGx8mgKKyK76iHZWeil7mOebgy0TGcA/t2OsEd8mlJtv0ycqgXLvPZSRKiLEEL0Y4R+5LVJW5YRT4f7mX/oreCV2t/XUsoRf0JzFL4cZ2KKLpAt4d3ScieQJj4fq89CL3jq7Ht3qmmjyW3k9usFglCmvpzefumpP+QilMd9KHlcrP7FsD4ynWdn9ViTSBmYiheCpUr65na8uy2rU0sQguSSipAELmAuvawtUsA5q2hSbA2lcApVLi6vbu/OLj9VVDqfNpvUoukJBgQs8pY4U7OlzaTzsKT06YUVQkSKUHXmjPVu48lg73y0w0leSUu1hQy4gqq+Q2MduvY32cEHNC8X9uwygl2Gc7mO/4eyewsrV4v0MBG29cF4IucKNtsE7Yznb+2nFQwiH2Y8Eo05Mg6QkiWlsqJh1QMatGEeaIOCcjljo3VA6GHJKo3bqJPy7dF/shVoRlfNWBmSokjz62G+w2fd4tdQFjiBnzCEHMgdiogTDuAcCAN1NEAKZWo0v11kGCWNPMaUlSa2AwgPNymQP4TuIykN2xtwiUJUiX5cwZRHPskrnOCSX6DYEzZBgdyQuIGHnBQxbUgVbvA7To+ITFBFpGBcAWGY90MQexss+dKTehky1znps64EKIln1nEcuVfWcR7XTnO7eGsimRAwPHLd4Oqewf2eB+r94AO2pENibIqEo7aMqjDtyGCYTyDQBLN7w7TiGCfklmrv3IW7zyMnNPWZqonTzqCBlDORO0jy8PceR1Gtu1zpJ61NO5HdkCYcsouJubK6szNcaGrAr9VNZjWo2cNfqQs8a75Gy/shQ14FZdGVlKGlsEB2TdTgDjpI1pE+SpDiWJtYniJ8oQK4DNNX8XxtTomt86GM2v76f3ddW1Ph8b3FfrC+XlQel9YFlTq/ynkBUAAAdcdSRrTTpSRGQqSFbecz02WQqaGGZqCFM2PQyRVDpC1YUp4ONOfrSME5siYdqzjRmm9KpNIUGVP16aXoMrfG12JE0NvQL4Uc1SfRDh2Taw0pLHm7D4aIEsOJs5jmGZ2FrYrmOjCeTYIkuHC41cVcPcCGqV9AGT6R0w5s0BmY/fHHzMG5kyaA8oVThgywMzPRWdNZIVIuYrywoR7SggKsw6UREXy3z/en57f/vrh6MTGoTU+BaDSY3ct2Bl8/er64/n344R3oACsvK1ORz4uaoGDvgn6X0DCKtZeVjBmIkH9L5ZFP1Ii8QchWUchZE+Hn4sqSYeNDYiUmZS1Tuemc5VAPH55oPzlJqgQFT5pAAGiNIYcF+8qLSNHn3Lr0g/7zbFB3thTYQROeN0HsNqizY4TOZrWMYBNTEGDk+jBXY5FPDVi8cZYqCm6YDuAmevDlOQUKJ0ZCpC63kB8vi0jo68LkwEeak2MLvGTsuEBlvRjUEZ1W9uIIb8fF1+fufda4ivmzlJD1XuAAEd84X7w3moClWJiSwEqWQdrfCGg+Qw9nc7Kdig7xcq48nofF1JHse9ur6/vowjud/vPn/5/fbTl7sDNNIAqAYRcwtCFGOEnHiApj6MzYYH8k6Gcg5zGMkYQVfGMcFoGOj36RuKoCvDAFbGO8eD+yyKYEAZh8Xg0xzhZht4/jbkzUV3nXQBn6GbzixG1/HCZPZBE6sxq/7rREtQEFT6wmFFSSBiNDMai8VOkcJHTNa+0pySHJUqDJLFlT1zVxe289dD8lxsy7W/jrInArCipEwjP/6WHmNLqqriA/berVjXqCnPE6QF3+TcvNxKm1qwaoAUIY39/N2a8SpMDZ3OllOkvzXbVue55if6i0UyG4Ah2ff5p9Yw1V3thHQDTKtjsVtqq8kd51ISZDgXqsO5VudKt54vCa71L/KEuYarF0wfWcKkucJi+hV01Izbu+BkvvLn1eXT5vysjcANvb9jmyHDbRajo2fjizN8RVfslfdAtf+VQ7GdlKbFGtxz7NV59sWjN58nwUq5Nkm+/eyHXjpJib/eR+YE5rp+MHcD5po1lChgTM7sKKbFZT/+rDyQTaAnkElwVVHonegJvRoQ06cMAfYi/IHGRyeTu7A2ZUSZP+DF22rlbUL37QiDHW7SmXwL7yWWfVzp9Llx0Vmg0cSSQCPUYHV6BV94gXsqgeSBr3LlRU0ruZB6xte9QKXeSSGcpAEXdUA5TBVLO1DWFTaIzAwFYAmh0jZhO9HQpCIov5AKOFAou9OuSAQqE4gCUGXhAGvy3OrmygBSWWfBg8qWATRMlqAdLFEDJlcIlrpC3dI8LBsE7lWC5REYAG1yJ0AhOav/6ECIvwXEqLi+1TAGwHVlkUNV4AD9fQPxepY5DXRhQWUqEPxAkegWBQudxZILeJeRgk3N0OYOWRizhWaRHqY0tMYJ5gl8JGrG8KA0KObD2ic5EkK3FGnl5ntNeD9GbYOmSYe3kA6HZwms6xZZEDK3LEtDBNfMPU5rPniW2FWJsPqgdei+C1MEMqYIrJoiOuBNkTpq7sIS4YA7kME+pu5sUkChTP2fMQxCGgFSxIkDG4aCShNT3gNuGmxOUZDUbpFYhPMZMQnGc2hZhOjuhA/HHHWHTaEdpC02sBdC2LfFBjMjT98aGsaeP4H7ddgw57+7w4ajNYXi+4Ks3rCNV41Vn8Bb4lsOJMysan+BpVcrR80qzQ/aBGo4M93WCYW35bjIqRGORxkTZH/2aM44+yAKlTwKYHQokSa+Ln0kieH468j21oldLAV+ewlSNaeGnFTHGecaB/axZ7FXucXxHz0n+1y87lQqW/ZAiyVDy4hxkDzLp4JYETGq1OXTlBErNTPVDr0sEWgaktAtrGlwHKwQsWZavjKUm1OlVCOqM8kGAJULERpVGyk0zanmlXrp2zHDpR8MLw+s80vz4qYrNSYVBxY/U9GsEQdmL7nYHxmX9FuAgCSgNmbKpWbOwmH5i00MkoIQR5iqy8aYeJfxuOOZepMi387rrFvFM8G+b0HgNrwV0QQaJLINnQ8Nsvh39VZnCo82+aMHP9uESCJlMeQDdRBBXs724WiD/GFUtOasBtXOQFPHMtbU7o/tEQfqlO/nQ0VODgdYmeBGnlmvke1HMdap2lcNKsK8blI/xAONcdKbR00P5v0eAJkyFwXUzeYfykk5xtL3Jt0HeueiRmTGWlLcxwPWmIKP/oYPGHwjeRyM8bc1UZoseNMzd/UYu6GQlw2PGJXrjGGaypXjOkOdfhPI88Kpxs+UZRPKwqfJJwV1KsAoNaZwoTSG1Q6dZvqgZilL9rlxcnJk331Bs8AqAxacaiSeX2saRLPywqjCKjPQ1MIYmRpCVAgh5gbdleSK5okqVDTSBbOxbzhk6vwQ5OeKD8VseaPVqSQNcgobtq+gXc5AZ4ugEZa/h57bQYw3NkDTlG3oPGmA+aTBMbtghIjjTKOyfU07nDI5A1wTKxU1tfSuKTWMp7oBMCLpv9UcGzAB6K9hRdjjffJOG9QMRRhLUBt9ZN4CtRQVgbfwzYrHBXH5O7FHds+kqqOnt2K3tSn3txiFFHYAZSbYYDw5Db3RN8dsmEAoPR9oULqhc4OxGNJ36jpPPlphXIlwlCGyN0TwmNZ7MUTwB1MoiyMibFQtCuQ4rKhfOmHqpqQiHBQ1EeWOMwJ5iPdRO0EU7mowG4R/Sec+bWtIHmEVXA5dKQaUKYIjvEo9wXGAJpG1UY77Pk7rCJNUjXhEmdSspXAvK2kwjTHn8fEhCQZ643dvRAnUeW83qHlxtzKwBHVv2VaXLvWjjO2ZmjG1Sn9MSmFMT97kzY6DLz8mlqkquIuh66fuxxMNKoujvELiHaa4sFblkIxxw5C5/iau8fz7ssXN118mxu3Pzn+9UPv9xru7c//4UJN5O0k0mUQZNAkb/U6i+oNoMkQYaLjQZC27QA62LYzQqhXbal5sl68JFmJN/uazGgdDJmH6rjlBDAczQW3uPdE9FpxofJ7h4O1BCxJJ5fOQfClsAD11c9CQ6rBxUaRwkqGgH3mXMexajLX2NmtTZF8+f/96fnt/oPkxLKPcutbiwQYymvw4noMPWJs1qlsURBqf3skRpgyaYMBUJqAI8qEsKorvJqAsIkbDw7LWJH6fNmxLqUq+wELmMki5Q520f3Nr/4C6r4h0iOG4NULyVNHBl9KKCGxYdqj3sq08gV8QAmAwLBhEsXcbl8aOfnuzjYvd8VYbF0HDdnERySCNYQN23eblZK+mGbfgE/0o+EwpW5NWBI1blCs3ho5Omhel+QfQGGFoezZGsBuUa4ywhvFkRn0HXF6JMuzrUwU6FsjmxEBN7/HNZY8/3z9f/xZE+s39b7eh8//nP1ZmTQKnFoE1iO7AA2MSP/s17uc0BUoUtaOvepqqRXKLXE+TOYyoH4MTV6saDDbF2pe9abw1BIDdoFtvmJu5jd7y/AaylB1l/C5ZSg8D34/Kp8ep+l/8uRuf8Q8=&lt;/diagram&gt;&lt;/mxfile&gt;"><defs/><g><path d="M 1702 1327 Q 1702 1389 1592 1389 Q 1482 1389 1482 1259 Q 1482 1129 1350 1129 Q 1218 1129 1218 1142.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218 1147.88 L 1214.5 1140.88 L 1218 1142.63 L 1221.5 1140.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1040.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="430" height="200" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 200px; max-width: 430px; width: 430px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><h1>Entry states: IS_UP, IS_DOWN<br /></h1><p>Assumption: state is stored per-button, and OTHER BUTTON events are always processed before the actual button. Stored state per button is a single bit (up/down), a single state for the state machine across the device is sufficient.</p><p>Start the state machine with IS_UP or IS_DOWN based on the button's bit, any OTHER BUTTON event will reset it to that state anyway, so the state can be re-used for the new button.<br /></p></div></div></foreignObject><text x="215" y="106" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><g transform="translate(4.5,-0.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="430" height="113" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; overflow: hidden; max-height: 190px; max-width: 430px; width: 430px; white-space: normal; overflow-wrap: normal;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;"><h1>Entry state: DISABLED<br /></h1>Only set on devices that have button debouncing disabled. This state is effectively a noop, it just forwards the events as they come in and returns back to the same state.</div></div></foreignObject><text x="215" y="63" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 645 1595 L 675 1595 L 690 1620 L 675 1645 L 645 1645 L 630 1620 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(637.5,1600.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />press</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;press</text></switch></g><path d="M 645 1277 L 675 1277 L 690 1302 L 675 1327 L 645 1327 L 630 1302 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(633.5,1282.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />release</div></div></foreignObject><text x="24" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;release</text></switch></g><rect x="150" y="269" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(190.5,278.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="74" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 75px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">DISABLED</div></div></foreignObject><text x="37" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">DISABLED</text></switch></g><path d="M 99 368 L 129 368 L 144 393 L 129 418 L 99 418 L 84 393 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(91.5,373.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />press</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;press</text></switch></g><path d="M 201 309 L 119.24 365.38" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 114.92 368.37 L 118.7 361.51 L 119.24 365.38 L 122.67 367.27 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 60 541 Q 22 541 22 395 Q 22 249 126 249 Q 230 249 230 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 230 267.88 L 226.5 260.88 L 230 262.63 L 233.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 79.61 515.1 C 80.78 511.9 82.67 510.04 84.67 510.12 L 154.53 510.12 C 156.13 510.08 157.65 510.63 158.65 511.61 C 159.64 512.59 159.99 513.88 159.6 515.1 L 140.36 564.9 C 139.19 568.1 137.3 569.96 135.3 569.88 L 64.42 569.88 C 63.01 569.69 61.77 569.05 60.99 568.1 C 60.22 567.15 60 565.99 60.37 564.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(87.5,511.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />press</div></div></foreignObject><text x="20" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 113.32 418 L 110.99 503.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 110.85 508.88 L 107.54 501.79 L 110.99 503.63 L 114.54 501.98 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 215 368 L 245 368 L 260 393 L 245 418 L 215 418 L 200 393 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(203.5,373.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />release</div></div></foreignObject><text x="24" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;release</text></switch></g><path d="M 230 309 L 230 361.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 230 366.88 L 226.5 359.88 L 230 361.63 L 233.5 359.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 280 541 Q 422 541 422 395 Q 422 249 326 249 Q 230 249 230 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 230 267.88 L 226.5 260.88 L 230 262.63 L 233.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 199.61 515.1 C 200.78 511.9 202.67 510.04 204.67 510.12 L 274.53 510.12 C 276.13 510.08 277.65 510.63 278.65 511.61 C 279.64 512.59 279.99 513.88 279.6 515.1 L 260.36 564.9 C 259.19 568.1 257.3 569.96 255.3 569.88 L 184.42 569.88 C 183.01 569.69 181.77 569.05 180.99 568.1 C 180.22 567.15 180 565.99 180.37 564.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(203.5,511.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />release</div></div></foreignObject><text x="24" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 230 418 L 230 503.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 230 508.88 L 226.5 501.88 L 230 503.63 L 233.5 501.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 376 393 Q 402 393 402 321 Q 402 249 316 249 Q 230 249 230 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 230 267.88 L 226.5 260.88 L 230 262.63 L 233.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 333 368 L 359 368 L 376 393 L 359 418 L 333 418 L 316 393 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(323.5,373.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 259 309 L 340.76 365.38" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 345.08 368.37 L 337.33 367.27 L 340.76 365.38 L 341.3 361.51 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="700" y="269" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(756.5,278.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="43" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 44px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_UP</div></div></foreignObject><text x="22" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_UP</text></switch></g><path d="M 765 368 L 795 368 L 810 393 L 795 418 L 765 418 L 750 393 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(757.5,373.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />press</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;press</text></switch></g><path d="M 780 309 L 780 361.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 366.88 L 776.5 359.88 L 780 361.63 L 783.5 359.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="700" y="1150" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(707.5,1159.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="141" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 142px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_DOWN_WAITING</div></div></foreignObject><text x="71" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_DOWN_WAITING</text></switch></g><rect x="700" y="1510" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(714.5,1519.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="126" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 127px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_UP_DELAYING</div></div></foreignObject><text x="63" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_UP_DELAYING</text></switch></g><path d="M 1626.61 1025.1 C 1627.78 1021.9 1629.67 1020.04 1631.67 1020.12 L 1701.53 1020.12 C 1703.13 1020.08 1704.65 1020.63 1705.65 1021.61 C 1706.64 1022.59 1706.99 1023.88 1706.6 1025.1 L 1687.36 1074.9 C 1686.19 1078.1 1684.3 1079.96 1682.3 1079.88 L 1611.42 1079.88 C 1610.01 1079.69 1608.77 1079.05 1607.99 1078.1 C 1607.22 1077.15 1607 1075.99 1607.37 1074.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1630.5,1021.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />release</div></div></foreignObject><text x="24" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 749.61 809.1 C 750.78 805.9 752.67 804.04 754.67 804.12 L 824.53 804.12 C 826.13 804.08 827.65 804.63 828.65 805.61 C 829.64 806.59 829.99 807.88 829.6 809.1 L 810.36 858.9 C 809.19 862.1 807.3 863.96 805.3 863.88 L 734.42 863.88 C 733.01 863.69 731.77 863.05 730.99 862.1 C 730.22 861.15 730 859.99 730.37 858.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(757.5,805.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />press</div></div></foreignObject><text x="20" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 780 1190 L 780 1270.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 1275.88 L 776.5 1268.88 L 780 1270.63 L 783.5 1268.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 757.94 1190 L 666.72 1272.72" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 662.83 1276.25 L 665.66 1268.95 L 666.72 1272.72 L 670.36 1274.14 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 662 1329 L 778.47 1503.7" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 781.38 1508.07 L 774.58 1504.19 L 778.47 1503.7 L 780.41 1500.3 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780.6 1550 L 781.81 1590.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 781.97 1595.88 L 778.26 1588.99 L 781.81 1590.63 L 785.26 1588.78 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="700" y="1870" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(756.5,1879.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="43" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 44px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_UP</div></div></foreignObject><text x="22" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_UP</text></switch></g><path d="M 742.39 1550 L 659.62 1594.01" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 654.99 1596.48 L 659.52 1590.1 L 659.62 1594.01 L 662.81 1596.28 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 632.44 1621 Q 582 1621 582 1377 Q 582 1133 682 1133 Q 782 1133 782 1142.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 782 1147.88 L 778.5 1140.88 L 782 1142.63 L 785.5 1140.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 749.61 1730.1 C 750.78 1726.9 752.67 1725.04 754.67 1725.12 L 824.53 1725.12 C 826.13 1725.08 827.65 1725.63 828.65 1726.61 C 829.64 1727.59 829.99 1728.88 829.6 1730.1 L 810.36 1779.9 C 809.19 1783.1 807.3 1784.96 805.3 1784.88 L 734.42 1784.88 C 733.01 1784.69 731.77 1784.05 730.99 1783.1 C 730.22 1782.15 730 1780.99 730.37 1779.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(753.5,1726.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />release</div></div></foreignObject><text x="24" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 780 1645 L 780 1718.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 1723.88 L 776.5 1716.88 L 780 1718.63 L 783.5 1716.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 1785 L 780 1863.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 1868.88 L 776.5 1861.88 L 780 1863.63 L 783.5 1861.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1520" y="1510" width="274" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(1528.5,1519.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="252" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 253px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_DOWN_DETECTING_SPURIOUS</div></div></foreignObject><text x="126" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_DOWN_DETECTING_SPURIOUS</text></switch></g><path d="M 1782 1329 L 1672.8 1504.59" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1670.03 1509.05 L 1670.75 1501.26 L 1672.8 1504.59 L 1676.7 1504.95 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1694.31 1550 L 1776.39 1593.99" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1781.01 1596.47 L 1773.19 1596.25 L 1776.39 1593.99 L 1776.5 1590.08 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1669.24 1550 L 1694.68 1591.57" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1697.42 1596.05 L 1690.78 1591.9 L 1694.68 1591.57 L 1696.75 1588.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1408.5 656 L 1458.5 706 L 1408.5 756 L 1358.5 706 Z" fill="#999999" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1376.5,686.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="59" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 60px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">spurious<br />enabled?</div></div></foreignObject><text x="30" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">spurious&lt;br&gt;enabled?</text></switch></g><path d="M 1434 733 L 1654.09 1015.97" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657.31 1020.12 L 1650.25 1016.74 L 1654.09 1015.97 L 1655.78 1012.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1426.5,743.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="16" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">no</div></div></foreignObject><text x="8" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">no</text></switch></g><path d="M 1102.67 1327 L 794.63 1864.48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 792.02 1869.03 L 792.46 1861.22 L 794.63 1864.48 L 798.54 1864.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1382 733 L 1224.03 786.94" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1219.06 788.64 L 1224.55 783.06 L 1224.03 786.94 L 1226.81 789.69 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1363.5,744.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="24" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">yes</div></div></foreignObject><text x="12" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">yes</text></switch></g><ellipse cx="780" cy="497" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="none"/><g transform="translate(761.5,477.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="33" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 34px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">set<br />timer</div></div></foreignObject><text x="17" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">set&lt;br&gt;timer</text></switch></g><path d="M 780 418 L 780 465.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 470.88 L 776.5 463.88 L 780 465.63 L 783.5 463.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 522 L 780 797.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 802.88 L 776.5 795.88 L 780 797.63 L 783.5 795.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1408.5 637 L 1408.5 649.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1408.5 654.88 L 1405 647.88 L 1408.5 649.63 L 1412 647.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 802.8 1190 L 897.21 1272.8" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 901.16 1276.26 L 893.59 1274.28 L 897.21 1272.8 L 898.2 1269.02 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 806.67 1550 L 874.64 1600.98" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 878.84 1604.13 L 871.14 1602.73 L 874.64 1600.98 L 875.34 1597.13 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 882.7 1639.46 L 810.9 1720.24" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 807.41 1724.16 L 809.44 1716.61 L 810.9 1720.24 L 814.68 1721.26 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1520.34 1317.21 L 810.89 1866.1" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 806.73 1869.32 L 810.13 1862.26 L 810.89 1866.1 L 814.41 1867.8 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1196.98 1323.76 L 798.5 1864.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 795.39 1869.1 L 796.72 1861.39 L 798.5 1864.87 L 802.36 1865.54 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1598.77 1316.18 L 813.75 1866.35" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 809.45 1869.36 L 813.18 1862.47 L 813.75 1866.35 L 817.19 1868.21 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1645.36 1550 L 1621.2 1591.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1618.56 1596.03 L 1619.06 1588.22 L 1621.2 1591.5 L 1625.11 1591.74 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1585.61 1775.1 C 1586.78 1771.9 1588.67 1770.04 1590.67 1770.12 L 1660.53 1770.12 C 1662.13 1770.08 1663.65 1770.63 1664.65 1771.61 C 1665.64 1772.59 1665.99 1773.88 1665.6 1775.1 L 1646.36 1824.9 C 1645.19 1828.1 1643.3 1829.96 1641.3 1829.88 L 1570.42 1829.88 C 1569.01 1829.69 1567.77 1829.05 1566.99 1828.1 C 1566.22 1827.15 1566 1825.99 1566.37 1824.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1593.5,1771.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />press</div></div></foreignObject><text x="20" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 1616 1645 L 1616 1763.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1616 1768.88 L 1612.5 1761.88 L 1616 1763.63 L 1619.5 1761.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1618 1829 L 1483.3 1868.22" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1478.26 1869.69 L 1484 1864.37 L 1483.3 1868.22 L 1485.96 1871.09 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1086.16 1080 L 789.81 1864.04" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 787.95 1868.95 L 787.16 1861.17 L 789.81 1864.04 L 793.7 1863.64 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 887 368 L 913 368 L 930 393 L 913 418 L 887 418 L 870 393 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(877.5,373.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 810.5 309 L 896.67 365.51" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 901.07 368.39 L 893.29 367.48 L 896.67 365.51 L 897.13 361.62 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><ellipse cx="1696" cy="1710" rx="30" ry="30" fill="#ffffff" stroke="#000000" pointer-events="none"/><g transform="translate(1665.5,1690.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="56" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 57px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">enable<br />spurious</div></div></foreignObject><text x="28" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">enable&lt;br&gt;spurious</text></switch></g><path d="M 1658 1081 L 1657.3 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657.24 1148.88 L 1653.82 1141.84 L 1657.3 1143.63 L 1660.82 1141.92 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1676.35 1732.67 L 1646.93 1765.27" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1643.42 1769.17 L 1645.51 1761.63 L 1646.93 1765.27 L 1650.7 1766.32 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 930 393 Q 962 393 962 321 Q 962 249 872 249 Q 782 249 782 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 782 267.88 L 778.5 260.88 L 782 262.63 L 785.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 864 L 780 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 780 1148.88 L 776.5 1141.88 L 780 1143.63 L 783.5 1141.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1328.5" y="1870" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(1371.5,1879.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="70" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 71px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_DOWN</div></div></foreignObject><text x="35" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_DOWN</text></switch></g><path d="M 1620.28 1550 L 1539.59 1593.95" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1534.98 1596.47 L 1539.45 1590.04 L 1539.59 1593.95 L 1542.8 1596.19 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1545.39 1645 L 1599.69 1764.2" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1601.87 1768.98 L 1595.78 1764.06 L 1599.69 1764.2 L 1602.15 1761.16 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1328.5" y="269" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(1371.5,278.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="70" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 71px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_DOWN</div></div></foreignObject><text x="35" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_DOWN</text></switch></g><path d="M 1393.5 368 L 1423.5 368 L 1438.5 393 L 1423.5 418 L 1393.5 418 L 1378.5 393 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1382.5,373.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />release</div></div></foreignObject><text x="24" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;release</text></switch></g><path d="M 1408.5 309 L 1408.5 361.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1408.5 366.88 L 1405 359.88 L 1408.5 361.63 L 1412 359.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><ellipse cx="1409" cy="497" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="none"/><g transform="translate(1389.5,477.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="33" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 34px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">set<br />timer</div></div></foreignObject><text x="17" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">set&lt;br&gt;timer</text></switch></g><path d="M 1408.5 418 L 1408.5 465.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1408.5 470.88 L 1405 463.88 L 1408.5 465.63 L 1412 463.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1408.5 522 L 1408.5 560.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1408.5 565.88 L 1405 558.88 L 1408.5 560.63 L 1412 558.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><ellipse cx="1409" cy="602" rx="35" ry="35" fill="#9ac7bf" stroke="#000000" pointer-events="none"/><g transform="translate(1377.5,582.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="57" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 58px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">set short<br />timer</div></div></foreignObject><text x="29" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">set short&lt;br&gt;timer</text></switch></g><path d="M 1528 368 L 1554 368 L 1571 393 L 1554 418 L 1528 418 L 1511 393 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1518.5,373.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 1441.88 309 L 1536.54 365.73" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1541.04 368.43 L 1533.24 367.83 L 1536.54 365.73 L 1536.84 361.82 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1571 393 Q 1602 393 1602 321 Q 1602 249 1506 249 Q 1410 249 1410 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1410 267.88 L 1406.5 260.88 L 1410 262.63 L 1413.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1103" y="790" width="232" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(1110.5,799.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="213" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 214px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_UP_DELAYING_SPURIOUS</div></div></foreignObject><text x="107" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_UP_DELAYING_SPURIOUS</text></switch></g><path d="M 1218.75 830 L 1217.89 898.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1217.83 903.88 L 1214.41 896.84 L 1217.89 898.63 L 1221.41 896.93 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1244.05 830 L 1333.02 901.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1337.13 904.3 L 1329.47 902.67 L 1333.02 901.03 L 1333.84 897.2 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1193.53 830 L 1103.01 901.07" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1098.88 904.31 L 1102.22 897.23 L 1103.01 901.07 L 1106.55 902.74 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1530" y="1150" width="254" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(1542.5,1159.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="225" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 226px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_UP_DETECTING_SPURIOUS</div></div></foreignObject><text x="113" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_UP_DETECTING_SPURIOUS</text></switch></g><path d="M 1766 1277 L 1796 1277 L 1811 1302 L 1796 1327 L 1766 1327 L 1751 1302 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1758.5,1282.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />press</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;press</text></switch></g><path d="M 1680.36 1190 L 1777.16 1272.86" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1781.15 1276.27 L 1773.56 1274.38 L 1777.16 1272.86 L 1778.11 1269.06 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1685 1277 L 1715 1277 L 1730 1302 L 1715 1327 L 1685 1327 L 1670 1302 Z" fill="#9ac7bf" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1673.5,1282.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout<br />short</div></div></foreignObject><text x="24" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout&lt;br&gt;short</text></switch></g><path d="M 1665.41 1190 L 1699.53 1271.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1701.57 1275.97 L 1695.63 1270.87 L 1699.53 1271.13 L 1702.08 1268.16 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1527 1277 L 1553 1277 L 1570 1302 L 1553 1327 L 1527 1327 L 1510 1302 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1517.5,1282.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 1635.5 1190 L 1546.66 1272.66" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1542.82 1276.24 L 1545.56 1268.91 L 1546.66 1272.66 L 1550.33 1274.03 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1604 1277 L 1634 1277 L 1649 1302 L 1634 1327 L 1604 1327 L 1589 1302 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1592.5,1291.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout</div></div></foreignObject><text x="24" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout</text></switch></g><path d="M 1649.71 1190 L 1620.18 1271.02" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1618.38 1275.95 L 1617.49 1268.17 L 1620.18 1271.02 L 1624.07 1270.57 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1765 1595 L 1795 1595 L 1810 1620 L 1795 1645 L 1765 1645 L 1750 1620 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1753.5,1600.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />release</div></div></foreignObject><text x="24" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;release</text></switch></g><path d="M 1806.11 1621 Q 1862 1621 1862 1375 Q 1862 1129 1760 1129 Q 1658 1129 1658 1142.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1658 1147.88 L 1654.5 1140.88 L 1658 1142.63 L 1661.5 1140.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1683 1595 L 1713 1595 L 1728 1620 L 1713 1645 L 1683 1645 L 1668 1620 Z" fill="#9ac7bf" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1671.5,1600.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout<br />short</div></div></foreignObject><text x="24" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout&lt;br&gt;short</text></switch></g><path d="M 1697.17 1645 L 1696.21 1673.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1696.04 1678.88 L 1692.77 1671.77 L 1696.21 1673.64 L 1699.77 1672 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1603 1595 L 1629 1595 L 1646 1620 L 1629 1645 L 1603 1645 L 1586 1620 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1593.5,1600.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 1519 1595 L 1549 1595 L 1564 1620 L 1549 1645 L 1519 1645 L 1504 1620 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1507.5,1609.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout</div></div></foreignObject><text x="24" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout</text></switch></g><path d="M 765 1277 L 795 1277 L 810 1302 L 795 1327 L 765 1327 L 750 1302 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(753.5,1291.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout</div></div></foreignObject><text x="24" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout</text></switch></g><path d="M 804.89 1305 Q 950 1305 950 777 Q 950 249 1180 249 Q 1410 249 1410 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1410 267.88 L 1406.5 260.88 L 1410 262.63 L 1413.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 887 1277 L 913 1277 L 930 1302 L 913 1327 L 887 1327 L 870 1302 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(877.5,1282.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 765 1595 L 795 1595 L 810 1620 L 795 1645 L 765 1645 L 750 1620 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(753.5,1609.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout</div></div></foreignObject><text x="24" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout</text></switch></g><path d="M 887 1595 L 913 1595 L 930 1620 L 913 1645 L 887 1645 L 870 1620 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(877.5,1600.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><rect x="1127.5" y="1510" width="182" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(1139.5,1519.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="153" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 154px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_DOWN_DELAYING</div></div></foreignObject><text x="77" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_DOWN_DELAYING</text></switch></g><path d="M 1298.19 1327 L 1228.68 1504.07" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1226.76 1508.96 L 1226.06 1501.16 L 1228.68 1504.07 L 1232.58 1503.72 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1243.43 1550 L 1297.03 1593.01" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1301.13 1596.3 L 1293.48 1594.65 L 1297.03 1593.01 L 1297.86 1589.19 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1188.11 1730.1 C 1189.28 1726.9 1191.17 1725.04 1193.17 1725.12 L 1263.03 1725.12 C 1264.63 1725.08 1266.15 1725.63 1267.15 1726.61 C 1268.14 1727.59 1268.49 1728.88 1268.1 1730.1 L 1248.86 1779.9 C 1247.69 1783.1 1245.8 1784.96 1243.8 1784.88 L 1172.92 1784.88 C 1171.51 1784.69 1170.27 1784.05 1169.49 1783.1 C 1168.72 1782.15 1168.5 1780.99 1168.87 1779.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1196.5,1726.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />press</div></div></foreignObject><text x="20" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 1188.5 1550 L 1123.3 1593.47" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1118.93 1596.38 L 1122.81 1589.58 L 1123.3 1593.47 L 1126.7 1595.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1131.74 1639.61 L 1192.12 1719.91" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1195.27 1724.11 L 1188.27 1720.61 L 1192.12 1719.91 L 1193.86 1716.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218.5 1550 L 1218.5 1588.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218.5 1593.88 L 1215 1586.88 L 1218.5 1588.63 L 1222 1586.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218.5 1645 L 1218.5 1718.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218.5 1723.88 L 1215 1716.88 L 1218.5 1718.63 L 1222 1716.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1102 1277 L 1132 1277 L 1147 1302 L 1132 1327 L 1102 1327 L 1087 1302 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1090.5,1291.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout</div></div></foreignObject><text x="24" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout</text></switch></g><path d="M 1293 1277 L 1323 1277 L 1338 1302 L 1323 1327 L 1293 1327 L 1278 1302 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1285.5,1282.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />press</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;press</text></switch></g><path d="M 1200 1277 L 1226 1277 L 1243 1302 L 1226 1327 L 1200 1327 L 1183 1302 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1190.5,1282.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 1067.11 1025.1 C 1068.28 1021.9 1070.17 1020.04 1072.17 1020.12 L 1142.03 1020.12 C 1143.63 1020.08 1145.15 1020.63 1146.15 1021.61 C 1147.14 1022.59 1147.49 1023.88 1147.1 1025.1 L 1127.86 1074.9 C 1126.69 1078.1 1124.8 1079.96 1122.8 1079.88 L 1051.92 1079.88 C 1050.51 1079.69 1049.27 1079.05 1048.49 1078.1 C 1047.72 1077.15 1047.5 1075.99 1047.87 1074.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1071.5,1021.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />release</div></div></foreignObject><text x="24" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 1187.11 1025.1 C 1188.28 1021.9 1190.17 1020.04 1192.17 1020.12 L 1262.03 1020.12 C 1263.63 1020.08 1265.15 1020.63 1266.15 1021.61 C 1267.14 1022.59 1267.49 1023.88 1267.1 1025.1 L 1247.86 1074.9 C 1246.69 1078.1 1244.8 1079.96 1242.8 1079.88 L 1171.92 1079.88 C 1170.51 1079.69 1169.27 1079.05 1168.49 1078.1 C 1167.72 1077.15 1167.5 1075.99 1167.87 1074.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1191.5,1021.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="52" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">notify<br />button<br />release</div></div></foreignObject><text x="24" y="32" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 1202.5 905 L 1232.5 905 L 1247.5 930 L 1232.5 955 L 1202.5 955 L 1187.5 930 Z" fill="#9ac7bf" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1191.5,910.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout<br />short</div></div></foreignObject><text x="24" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout&lt;br&gt;short</text></switch></g><path d="M 1218 957 L 1218 1014.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218 1019.88 L 1214.5 1012.88 L 1218 1014.63 L 1221.5 1012.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1323 905 L 1353 905 L 1368 930 L 1353 955 L 1323 955 L 1308 930 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1315.5,910.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />press</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;press</text></switch></g><path d="M 1084.5 905 L 1110.5 905 L 1127.5 930 L 1110.5 955 L 1084.5 955 L 1067.5 930 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1075.5,910.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 1097.5 955 L 1097.5 1013.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1097.5 1018.88 L 1094 1011.88 L 1097.5 1013.63 L 1101 1011.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="1137.5" y="1150" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(1158.5,1159.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="114" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 115px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">IS_UP_WAITING</div></div></foreignObject><text x="57" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">IS_UP_WAITING</text></switch></g><path d="M 1198.9 1190 L 1122.34 1272.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1118.76 1276.18 L 1120.97 1268.67 L 1122.34 1272.34 L 1126.09 1273.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1234.79 1190 L 1305.84 1272.18" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1309.27 1276.15 L 1302.04 1273.15 L 1305.84 1272.18 L 1307.34 1268.57 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1216.82 1190 L 1214.07 1270.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1213.89 1275.88 L 1210.63 1268.77 L 1214.07 1270.64 L 1217.63 1269.01 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218 1081 L 1218 1142.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218 1147.88 L 1214.5 1140.88 L 1218 1142.63 L 1221.5 1140.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1288.5 1595 L 1318.5 1595 L 1333.5 1620 L 1318.5 1645 L 1288.5 1645 L 1273.5 1620 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1277.5,1600.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">button<br />release</div></div></foreignObject><text x="24" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">button&lt;br&gt;release</text></switch></g><path d="M 1329.61 1621 Q 1402 1621 1402 1375 Q 1402 1129 1310 1129 Q 1218 1129 1218 1142.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218 1147.88 L 1214.5 1140.88 L 1218 1142.63 L 1221.5 1140.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1102 1595 L 1132 1595 L 1147 1620 L 1132 1645 L 1102 1645 L 1087 1620 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1090.5,1609.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="48" height="16" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 49px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">timeout</div></div></foreignObject><text x="24" y="14" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">timeout</text></switch></g><path d="M 1205.5 1595 L 1231.5 1595 L 1248.5 1620 L 1231.5 1645 L 1205.5 1645 L 1188.5 1620 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1196.5,1600.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="34" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">other<br />button</div></div></foreignObject><text x="20" y="23" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">other&lt;br&gt;button</text></switch></g><path d="M 924.89 1305 Q 990 1305 990 777 Q 990 249 1200 249 Q 1410 249 1410 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1410 267.88 L 1406.5 260.88 L 1410 262.63 L 1413.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1218 1785 L 1366.64 1866.93" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1371.24 1869.46 L 1363.42 1869.15 L 1366.64 1866.93 L 1366.79 1863.02 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1370 929 Q 1402 929 1402 845 Q 1402 761 1326 761 Q 1250 761 1250 505 Q 1250 249 1330 249 Q 1410 249 1410 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1410 267.88 L 1406.5 260.88 L 1410 262.63 L 1413.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/></g></svg>
\ No newline at end of file
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1931px" height="1911px" viewBox="-0.5 -0.5 1931 1911" content="&lt;mxfile modified=&quot;2021-05-19T08:09:55.674Z&quot; host=&quot;app.diagrams.net&quot; agent=&quot;5.0 (Windows)&quot; etag=&quot;ujlTX8OeloT0gFxk9wTV&quot; version=&quot;14.6.13&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;27c35eac-9917-780f-69cd-550de3271581&quot; name=&quot;Page-1&quot;&gt;7V1Zl5s4Fv41dWbmwT5IQiAea01nOt1JpyqdybzkUBiXSbtMDeBa+tePWGQDWowpFtmVekiMzOa7fHfR1dUJOr9/fhe5D4vfwpm/PIHG7PkEXZxACA1C6H/pyEs+Aggx85G7KJgVY9uB6+Bvvxg0itF1MPPjyolJGC6T4KE66IWrle8llTE3isKn6mnzcFl96oN753MD15675Ee/BrNkkY8SaG3Hf/GDuwV7MrCc/Jt7l51c/JJ44c7Cp9IQujxB51EYJvmn++dzf5lSj9Elv+5K8u3mxSJ/lTS6wEEe8B2bOBYhyJ3YsHiv5IX9WH9Gf3txGEbJIrwLV+7ycjt6FoXr1cxP72jQo0Vyv6QfAf34w0+Sl4J97joJ6dD2Dh/C8KE4j75s9PKf9PopZoffittlBxfPlaOX4shbR4/Zc9Ob8D+9oEYcriPPF/9eqxDFxI3u/ERCk+I+KSFKNy4I+s4P7336UvSEyF+6SfBYFRK3kLW7zXnFpadR5L6UTngIg1USl+78KR2gJxR6AxATGqY2oM7c+hXAQK+8gljqCwgiqvPph/xnsqMSvbZDmUw2k0+ACx17dJfrgtAn0FomqeBRilt36afLVc6QOHGTFCdO6ef319+/fDqB5/nHi49ff2fX3UbsOjZC32p7Mzb4wAZO43h9/5AE4Sq/c/aU9J3j7CCMqEhSQfSjye06SehZ2UPdVTr68eaXy8/0/7MvNzcff0+F6tHPuE5xKb2Hu3xyX9LDhyj0/DjObnXrz8Ps22SRneMlazclUn77Kf10zZ7K3oU+fXMCezU3/T5Y3S3TE26DlIv/XNNfdUURaPWv4i3L57Cb0advHs7G7l1vEazy14nCON6cMPMfA29LjvV8HngB/Y3TEnEfpLS9poqYKB72FFAA3TDTyF5sw07j1s0Jlv3m/BY5Cf4Rs5+cs+JFyorsGZkIRn7sp4cZoSh2pXd0k9Jb0ds8pRp8nmEM99Keu8p4l91qss7frEzKlf9UZqJCGEv0qoFz4j8nVcyNkyj8yz8Pl/RJ6GIVrlKEntOfVBuKH1yPMpoO4O3RTQbJE5iC69MiSPxrOp4+6ola8hS9H/1ovswM1iKYzfwVh/5SFKZX0pdV4mfxrYXxFBvbvyoiTWABMZRPG9NrmsXYomx2HUMOwSWEUgIQsufYNOa+4VjQdh00Ac6+AJSjxMX769OzD5cXDVHn42qZ3SATwUyec8WKt3K4cB+3Ep6dcEtZkTGVHgSxe7v0Zyk63CwKaCrhlD+fU8+IGqvsManar1J7nAlzJvE/1nGSC+yTG822+r0FrGIsvd6jhE0vXG2ALvKTdbTK1M71/tpqUKYh7v1GUaZvQqQniBhtpZh0IMXR448zeIPCqz8/hj+eLsj/jD8+T0yBINd4USWE0HcT+Hgl1vmr2WnqcNNDb+nGceDlg1cpxpb9tppztbcjhzDvyAl/NXql79aU5LIXLJGbaW4dEB6o6Yk5XtBQ4SH9uPCf3bvU9yjTWSTZ1AcI6Gv70faiT9uhLsQa4ppHiiDmpNoSCDXuQKY515D3DGUEpsz2qatwkCQ2DHtaMo4GGIzgvCnkCL41clIgkZGyROkytJ9ANMM+mZmcHaDfEHiLLKsjiIaoBtE8ZYGItGYfpEXHBxYT6FgVAjtkPNHFHMXKaY7Cn5DmNVT5iqY5j0ZWTqZyZSsnk53u0hWtqWzvcCgGTBXtzmLtn0zifq/ZgDt6JJMmyKqiHbTViR7ugknhLkovAFh5watTQzLqlzBzFSbB/IXHzD2xNDM7LNELa7FJAbT3z3dpsnuahhLewo2S6cxNXAnY1gzc1dWF05kZq2cJN/apbMcMAc5afeCs9Sqc7RdLUQNtNbXBUtLYIzgg73YCanHxmD4Bm13SUlibGH6ijbCCXamEjp2p0S2/czCW39zP7pu6W30+Hbuv1Zfi5UHZfeA4U6f8p5EXAABHXH2QVTADLBMyHZCVj1yPDUtBE8dMDzCtz8hDpERHqDuYAj7vFCaLdC5ZBqY9+5hxLq/GFBJU+ePR9BJc4Eu7IzS1zArhR3VLzUHAs21ipaWON1Hx0RJZ8PbW8yzHxs7c9T0XTSCnFkUFgtTJ1TXNjaBRmT6oTa4PmPPmiMznbw4+541sFbUHRBWO2OrETE91fo2wQqZ8ZayQyY4GUGGLoCKtT/r+9fT9zfvf3x0daBAiiC0GQw0WW9Sx+fvF5YfTb8dIb0AJWfnaHo78XFUDR/w3GX0DCKuz8rDCMRsPGH3XWfRzWiTVKKzSKIzM8fjjKC3xoLkRmTFTmt7x3HSuAoifbz64SKkJC2SVTxpwgGjNAf85SEqX0aNv7I708/ai9IBdE6cV6ayGsfgBjTgprD4UxL1Sj2Z8dsJhZsSGVSgg4AEnx6MlfDkW8FWNx5l6oC7rgGEE58cOU6hQknRkayLrrDB5fFlHR14vJq9H32ER7K451HKyozbbYZq4zO6dFxALKM831ed3vpgQ8TU1bzJ6VQdHwMR8Uf9w0atGFWQyL0GJrqMV5XCUHMY3b0VJ1GAZNtQmyjH5mhOW4724vLk8T7O8368/ffn8/uOX6wN01ACoJhiZFyHLP0IOHqBtDuO34WEilPbmnRUVqiTb1CbawGgQcvYa8Mmoq+IA1ibkxoMHIppwQJsoxOLnNOKHdRSE65j3//xVtsr6BF115gL6XhBnvSWauIFFqV8nsE9JUFl3Dyuoj4jVzAvcDHbKFD4Nsgq11pTsqFROkA0u3Vt/eeZ6f91l71Vf0h6ukuKNAKykK22LHX/Lj7GjTFqmB/Vnt1JdSxCeSuYAd2ouq60ypg6sehSbPMV+AaygfU2tYM6s107kv7W4TBSKshPD+TzrvVAT2dcFnM4wpVztQLoBp/VxwR29zeRWc6kI1jQX6qO5TudGV6yXBAsDBjY7buDqDfNXVigpM1i1xQkmaqbtXWgyX+bz4vNz5Hwvk8iPg79Tn6HgbZF0o2fjsxN8QUfcZXBHrf+FR7md1aGlFjzw3OVp8cV9MJtlGUi1Ncm+/RTGQd6pir/fh9oJtfuG0cyPavcUSKJEMTm3Y9ONr/jxJ+WGdxI7gWyCq4bC7MROmNUMlzmtCWAv4A8MPt2YPaXuUyZU+SMe3pbL4CH2d6cM3Pgh73k4D55T7OPqpE+ts84yhzZWZA6hAautKvgqC9xTvSNPfJ3LLATrxqXSM77tBTotlJTSSZlw0YeUw5SstCMlqytRkdLSp/oHQq19wnbQ0KT8h91IBx5oNF3TrvIDapOIAlBncICChmv6Tn4BpLPNggc1/QXQMLME7WiJGii5RrQ0NVoazdOyQeJeJ1oegQPQZu4EaISz5s/lBum3gFiV0LeaxgBYVOs4VEkNMF/X/a5nzGlgCzdSpoPAD5SJblG63lkueUPvMlOwbVjGzCNz63ZuOKSHlgyteYJ5AR9JmjE8KAuK+bT2m+z/YDqarNvml/rwcYzeDk2T5dxSORxeJbBpOmROyMxxHAMRLGhynNd88CqxrRKp24PWqfsuXBFYc0Vg1RUxAe+KiKS5C0+EI+5ADvuYtrNJAYU29X/WMAxpREiZJg7sGEoqTWz1gm/bqs8pSia1W0wswtktsQnGM+g4hJj+hE/HHNWyGal1UK6Zgb0Iwr5rZnCtv+muDmH18ydwvyUztfNfvWSGkzWN8vuSWb1hV1I1Nn2SaIlfQ6BQZl0XDDhmtXLUrsr8oCs7Le/WdE1C6e14PvIE4HiUOcH6zx4tGK+/iEYljxIaHUqmia9LHwkxvHCVuMEq84uVxG+PIFV3asi2dJxzbnBkH7vxelVbvPA+3VUrb1bBtpNVYssebHFUbBkxD8Jm+XSAFZmiKkM+QxtYETRQO/SyRGAYSCG3ULBicbBCREFrfG0kl0ml0iLq054GAJ0LERpVG2nUukmwf16++2i8CKPh8cA5PbfPrroyY0o4cPgGirYADuxe5mJ/zrjk3wIEFAm1MadcBI0TDitebOKQbARxhBa69RwTHzIedz7TbFLk23mddat8Jth3ywPugl0ZTWCwasieUpqyRXDSBsKjtfLoIc62IVKgLIZ8og4iyONsH4E2YC+jozfnNKh2BoY+nrGh9/rYHnmgT/k+ayry5niAtUlusJl1AbYfRZ+m6rpqUAFzUVt+iHvqyyTufcRnlvbXCKHMC3SjsgvWjDXs9ZZuHKfp0XTwKliyU4QCuv9EjCBfIqSEM5L8m82T1wezpwpAtipSBKL9EIaKFY9xBUKTRSBm54gviyYcJe/TxnW1upv+ekBY/Hr+NCcWrgXJsiKH1rN29ZhCo5RX9fAYVeusYdb2a6d1lj7LfiCvC281jamtmlAVfpt6spFODRRFEJFsjMaw1qHTCVdoONqKPXNO3pzYd19XLvHKgAOnBkn7AtsWMRxWn7bxyiw0dTBGtoEQBSFUe0B3ldHiKJRfkbq/POgchbI8084oNJ9DGAH1MJ8IGLuGqgvQq+/uWSt7RZDvmz8U6GFexo9qDk0s301akvSDiXvPo2FQXRJOCsmQz6PZtuqCzqfFMD8tdszRLSHyTOqomixY8KnNrBgWKJxs2VbvToiB8dS0AEYk/7c6iwxsAPpbkiXtYvDm42FoWJoolqT6/8gCMeqEa0Jv6Uahx0Vx9RbvI0e+StPR0ybvbd3E/Z1AqYQdQCEVtmpBsoF2rAytXTApwlhFHZXygs4dxk0byrdu89TNQ8ZFhKPMPu6A4DG9902bzJ9KoS2PiHQp9qYElOOK/sVBtmkr1jyATdVPeU0lgTzF+yj1JBqt2xFmkhokkkjncW1rah5hrSejrpID2pR6Et6svsGmlzZRLRYedxtZ5wjnABvpiDYz347GK7ZJg56jTMfHpyQYaLP63oQS6LPlPBDsOa8NLTd0Ogy5NI8yv2cb1tQp/dWmFYaM5oWuKr9qm6P24ZQy2IKyFrmDPoKM27ynd/AF9cSxdZFw6W4Obz19QgyoLY9Yrckroh9p1c8hxT+Wpcq42FiQcOkr/LFffptY73/1/h3Exuer4Pra//OdYMLzTbLJJtqwSbqC+E0U3RBDxQgLDZcRFqoL70e18PurrlerRtRd7j/eyinbSGXZK1MhTN+lPqimwbW5BG4D+h7rfAx+eufg/UEHEkUt/5B6KV1Z/tbdQUtpw8ZlkUZzO1L5UbcvgF3DWOtoUzgz+eXT96+n728OdFoSqyRX1LNgsE6vNt/n6+DnCGyB6Zbl7caXd3KEszRNOMCySuNzALBuTzrCdxNSbjJGw9NS6BK/zhq2lVQtd8ZRhQxK7RiNo8LUM1/Zvz+Ldc7BE8Gkk5AQ9lhWonnMdUCrCYmyR+24BXLqOdKDryOXS/fQwCTOdzisemUjDKDGZUmTm71XJRr17p5msVesosq8esWudYwEEdX5nVelE0WTnmFTp91OSqt2Hxu34hn9rHjOJdtQlsONW5WudksPHtGla1MOYGWQZey5Mqh+gXYrg5xhYspRt/lkZVjD7pAtsbFA1YMKGmaPm1Pe/3rzdPlHlJhXN3+8j73/Pv25tAVTaa0CoHboUZuC268ZBZMpUJKorXyJZaodQhlNOuv2g1C8w4mrTppVn+zuy9+0dnXBqF9gOjvcTeajtzy/AZbWu9V3i6XiRiech6XBjk2cZyTQAamzBDGuQlatwAkYQkgbYAMnIQMgx4BhLFzbWoBWdQcD5ZvYvkO721f1gnWwvkOvwbYX3gF2or14KzJqVjv8pEvuBK0ZBuqCxtdmHztkmFAryOCj4kNngGOo9hLRDbL5fbYOnf7EUdXp6Cb/bN/Do5k3kTf6b2LLjFcas1fxgl/EcOi6AJBt7QCjkcWfr1zTaHfF19EemlBJe8TTvq/9FcW0b7BG6vChR9T8SNEmcyzsEXQBO3bwMQXbqg0LPhLn8xjAxyTKhvsm6A186GEUhkk5TksXuPwWzvz0jP8D&lt;/diagram&gt;&lt;/mxfile&gt;"><defs/><g><path d="M 1700 1327 Q 1700 1390 1591.5 1390 Q 1483 1390 1483 1260 Q 1483 1130 1350.25 1130 Q 1217.5 1130 1217.5 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1217.5 1148.88 L 1214 1141.88 L 1217.5 1143.63 L 1221 1141.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1035.5" y="10" width="440" height="190" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 432px; height: 1px; padding-top: 0px; margin-left: 1041px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; max-height: 200px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><h1>Entry states: IS_UP, IS_DOWN<br /></h1><p>Assumption: state is stored per-button, and OTHER BUTTON events are always processed before the actual button. Stored state per button is a single bit (up/down), a single state for the state machine across the device is sufficient.</p><p>Start the state machine with IS_UP or IS_DOWN based on the button's bit, any OTHER BUTTON event will reset it to that state anyway, so the state can be re-used for the new button.<br /></p></div></div></div></foreignObject><text x="1041" y="12" fill="#000000" font-family="Helvetica" font-size="12px">Entry states: IS_UP, IS_DOWN...</text></switch></g><rect x="0" y="10" width="440" height="180" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 432px; height: 1px; padding-top: 0px; margin-left: 5px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; max-height: 190px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><h1>Entry state: DISABLED<br /></h1>Only set on devices that have button debouncing disabled. This state is effectively a noop, it just forwards the events as they come in and returns back to the same state.</div></div></div></foreignObject><text x="5" y="12" fill="#000000" font-family="Helvetica" font-size="12px">Entry state: DISABLED...</text></switch></g><path d="M 659.62 1645 L 659.04 1683.65" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 658.97 1688.9 L 655.57 1681.85 L 659.04 1683.65 L 662.57 1681.96 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 645 1595 L 675 1595 L 690 1620 L 675 1645 L 645 1645 L 630 1620 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 631px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />press</div></div></div></foreignObject><text x="660" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 645 1277 L 675 1277 L 690 1302 L 675 1327 L 645 1327 L 630 1302 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 631px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />release</div></div></div></foreignObject><text x="660" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><rect x="150" y="269" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 289px; margin-left: 151px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">DISABLED</div></div></div></foreignObject><text x="230" y="293" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">DISABLED</text></switch></g><path d="M 99 368 L 129 368 L 144 393 L 129 418 L 99 418 L 84 393 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 393px; margin-left: 85px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />press</div></div></div></foreignObject><text x="114" y="397" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 200.63 309 L 119.26 364.42" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 114.92 367.37 L 118.74 360.54 L 119.26 364.42 L 122.68 366.32 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 60 540 Q 20 540 20 394 Q 20 248 125 248 Q 230 248 230 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 267.88 L 226.5 260.88 L 230 262.63 L 233.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 79.61 515.1 C 80.78 511.9 82.67 510.04 84.67 510.12 L 154.53 510.12 C 156.13 510.08 157.65 510.63 158.65 511.61 C 159.64 512.59 159.99 513.88 159.6 515.1 L 140.36 564.9 C 139.19 568.1 137.3 569.96 135.3 569.88 L 64.42 569.88 C 63.01 569.69 61.77 569.05 60.99 568.1 C 60.22 567.15 60 565.99 60.37 564.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 540px; margin-left: 61px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />press</div></div></div></foreignObject><text x="110" y="544" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 113.32 418 L 110.99 503.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 110.85 508.88 L 107.54 501.79 L 110.99 503.63 L 114.54 501.98 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 215 368 L 245 368 L 260 393 L 245 418 L 215 418 L 200 393 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 393px; margin-left: 201px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />release</div></div></div></foreignObject><text x="230" y="397" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 230 309 L 230 361.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 366.88 L 226.5 359.88 L 230 361.63 L 233.5 359.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 280 540 Q 420 540 420 394 Q 420 248 325 248 Q 230 248 230 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 267.88 L 226.5 260.88 L 230 262.63 L 233.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 199.61 515.1 C 200.78 511.9 202.67 510.04 204.67 510.12 L 274.53 510.12 C 276.13 510.08 277.65 510.63 278.65 511.61 C 279.64 512.59 279.99 513.88 279.6 515.1 L 260.36 564.9 C 259.19 568.1 257.3 569.96 255.3 569.88 L 184.42 569.88 C 183.01 569.69 181.77 569.05 180.99 568.1 C 180.22 567.15 180 565.99 180.37 564.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 540px; margin-left: 181px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />release</div></div></div></foreignObject><text x="230" y="544" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 230 418 L 230 503.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 508.88 L 226.5 501.88 L 230 503.63 L 233.5 501.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 376 393 Q 400 393 400 320.5 Q 400 248 315 248 Q 230 248 230 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 230 267.88 L 226.5 260.88 L 230 262.63 L 233.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 333 368 L 359 368 L 376 393 L 359 418 L 333 418 L 316 393 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 393px; margin-left: 317px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="346" y="397" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 259.37 309 L 340.74 364.42" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 345.08 367.37 L 337.32 366.32 L 340.74 364.42 L 341.26 360.54 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="700" y="269" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 289px; margin-left: 701px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_UP</div></div></div></foreignObject><text x="780" y="293" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_UP</text></switch></g><path d="M 765 368 L 795 368 L 810 393 L 795 418 L 765 418 L 750 393 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 393px; margin-left: 751px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />press</div></div></div></foreignObject><text x="780" y="397" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 780 309 L 780 361.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 366.88 L 776.5 359.88 L 780 361.63 L 783.5 359.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="700" y="1150" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 1170px; margin-left: 701px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_DOWN_WAITING</div></div></div></foreignObject><text x="780" y="1174" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_DOWN_WAITING</text></switch></g><rect x="700" y="1510" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 1530px; margin-left: 701px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_UP_DELAYING</div></div></div></foreignObject><text x="780" y="1534" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_UP_DELAYING</text></switch></g><path d="M 1626.61 1025.1 C 1627.78 1021.9 1629.67 1020.04 1631.67 1020.12 L 1701.53 1020.12 C 1703.13 1020.08 1704.65 1020.63 1705.65 1021.61 C 1706.64 1022.59 1706.99 1023.88 1706.6 1025.1 L 1687.36 1074.9 C 1686.19 1078.1 1684.3 1079.96 1682.3 1079.88 L 1611.42 1079.88 C 1610.01 1079.69 1608.77 1079.05 1607.99 1078.1 C 1607.22 1077.15 1607 1075.99 1607.37 1074.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 1050px; margin-left: 1608px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />release</div></div></div></foreignObject><text x="1657" y="1054" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 749.61 809.1 C 750.78 805.9 752.67 804.04 754.67 804.12 L 824.53 804.12 C 826.13 804.08 827.65 804.63 828.65 805.61 C 829.64 806.59 829.99 807.88 829.6 809.1 L 810.36 858.9 C 809.19 862.1 807.3 863.96 805.3 863.88 L 734.42 863.88 C 733.01 863.69 731.77 863.05 730.99 862.1 C 730.22 861.15 730 859.99 730.37 858.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 834px; margin-left: 731px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />press</div></div></div></foreignObject><text x="780" y="838" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 780 1190 L 780 1270.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 1275.88 L 776.5 1268.88 L 780 1270.63 L 783.5 1268.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 757.57 1190 L 664.75 1272.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 660.83 1276.26 L 663.73 1268.98 L 664.75 1272.76 L 668.39 1274.21 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 660 1420 L 774.91 1506.18" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 779.11 1509.33 L 771.41 1507.93 L 774.91 1506.18 L 775.61 1502.33 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 780 1550 L 780 1588.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 1593.88 L 776.5 1586.88 L 780 1588.63 L 783.5 1586.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="700" y="1870" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 1890px; margin-left: 701px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_UP</div></div></div></foreignObject><text x="780" y="1894" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_UP</text></switch></g><path d="M 740.77 1550 L 658.17 1592.11" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 653.5 1594.49 L 658.14 1588.19 L 658.17 1592.11 L 661.32 1594.43 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 635 1715 Q 580 1715 580 1423 Q 580 1131 680 1131 Q 780 1131 780 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 1148.88 L 776.5 1141.88 L 780 1143.63 L 783.5 1141.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 749.61 1730.1 C 750.78 1726.9 752.67 1725.04 754.67 1725.12 L 824.53 1725.12 C 826.13 1725.08 827.65 1725.63 828.65 1726.61 C 829.64 1727.59 829.99 1728.88 829.6 1730.1 L 810.36 1779.9 C 809.19 1783.1 807.3 1784.96 805.3 1784.88 L 734.42 1784.88 C 733.01 1784.69 731.77 1784.05 730.99 1783.1 C 730.22 1782.15 730 1780.99 730.37 1779.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 1755px; margin-left: 731px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />release</div></div></div></foreignObject><text x="780" y="1759" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 780 1645 L 780 1718.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 1723.88 L 776.5 1716.88 L 780 1718.63 L 783.5 1716.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 780 1785 L 780 1863.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 1868.88 L 776.5 1861.88 L 780 1863.63 L 783.5 1861.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1520" y="1510" width="274" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 272px; height: 1px; padding-top: 1530px; margin-left: 1521px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_DOWN_DETECTING_SPURIOUS</div></div></div></foreignObject><text x="1657" y="1534" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_DOWN_DETECTING_SPURIOUS</text></switch></g><path d="M 1661.17 1469.75 L 1657.66 1503.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1657.12 1508.89 L 1654.36 1501.56 L 1657.66 1503.67 L 1661.32 1502.29 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1694.85 1550 L 1774.37 1592.02" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1779.01 1594.48 L 1771.19 1594.3 L 1774.37 1592.02 L 1774.46 1588.11 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1669.62 1550 L 1694.6 1589.61" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1697.4 1594.05 L 1690.71 1590 L 1694.6 1589.61 L 1696.63 1586.27 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1408.5 656 L 1458.5 706 L 1408.5 756 L 1358.5 706 Z" fill="#999999" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 706px; margin-left: 1360px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">spurious<br />enabled?</div></div></div></foreignObject><text x="1409" y="710" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">spurious...</text></switch></g><path d="M 1434.7 731.9 L 1653.11 1014.96" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1656.32 1019.11 L 1649.27 1015.71 L 1653.11 1014.96 L 1654.81 1011.43 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 750px; margin-left: 1435px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: nowrap; ">no</div></div></div></foreignObject><text x="1435" y="753" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">no</text></switch></g><path d="M 1102.67 1327 L 794.63 1864.48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 792.02 1869.03 L 792.46 1861.22 L 794.63 1864.48 L 798.54 1864.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1383 731.2 L 1224.99 787.85" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1220.05 789.62 L 1225.46 783.97 L 1224.99 787.85 L 1227.82 790.55 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 751px; margin-left: 1374px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="1374" y="754" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">yes</text></switch></g><ellipse cx="780" cy="497" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 497px; margin-left: 756px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set<br />timer</div></div></div></foreignObject><text x="780" y="501" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set...</text></switch></g><path d="M 780 418 L 780 465.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 470.88 L 776.5 463.88 L 780 465.63 L 783.5 463.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 780 522 L 780 797.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 802.88 L 776.5 795.88 L 780 797.63 L 783.5 795.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1408.5 637 L 1408.5 649.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1408.5 654.88 L 1405 647.88 L 1408.5 649.63 L 1412 647.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 802.43 1190 L 895.25 1272.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 899.17 1276.26 L 891.61 1274.21 L 895.25 1272.76 L 896.27 1268.98 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 806.67 1550 L 874.22 1600.66" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 878.42 1603.81 L 870.72 1602.41 L 874.22 1600.66 L 874.92 1596.81 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 882.09 1640.15 L 810.9 1720.24" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 807.41 1724.16 L 809.44 1716.61 L 810.9 1720.24 L 814.68 1721.26 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1519.51 1317.85 L 810.89 1866.1" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 806.73 1869.32 L 810.13 1862.26 L 810.89 1866.1 L 814.41 1867.8 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1196.47 1324.45 L 798.5 1864.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 795.39 1869.1 L 796.72 1861.39 L 798.5 1864.87 L 802.36 1865.54 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1597.88 1316.8 L 813.75 1866.35" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 809.45 1869.36 L 813.18 1862.47 L 813.75 1866.35 L 817.19 1868.21 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1644.38 1550 L 1619.4 1589.61" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1616.6 1594.05 L 1617.37 1586.27 L 1619.4 1589.61 L 1623.29 1590 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1585.61 1775.1 C 1586.78 1771.9 1588.67 1770.04 1590.67 1770.12 L 1660.53 1770.12 C 1662.13 1770.08 1663.65 1770.63 1664.65 1771.61 C 1665.64 1772.59 1665.99 1773.88 1665.6 1775.1 L 1646.36 1824.9 C 1645.19 1828.1 1643.3 1829.96 1641.3 1829.88 L 1570.42 1829.88 C 1569.01 1829.69 1567.77 1829.05 1566.99 1828.1 C 1566.22 1827.15 1566 1825.99 1566.37 1824.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 1800px; margin-left: 1567px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />press</div></div></div></foreignObject><text x="1616" y="1804" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 1616 1645 L 1616 1763.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1616 1768.88 L 1612.5 1761.88 L 1616 1763.63 L 1619.5 1761.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1616 1830 L 1483.78 1868.23" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1478.74 1869.69 L 1484.49 1864.38 L 1483.78 1868.23 L 1486.44 1871.11 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1086.16 1080 L 789.81 1864.04" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 787.95 1868.95 L 787.16 1861.17 L 789.81 1864.04 L 793.7 1863.64 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 887 368 L 913 368 L 930 393 L 913 418 L 887 418 L 870 393 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 393px; margin-left: 871px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="900" y="397" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 810.38 309 L 894.68 364.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 899.07 367.39 L 891.29 366.46 L 894.68 364.5 L 895.14 360.61 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1696" cy="1710" rx="30" ry="30" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1710px; margin-left: 1667px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">enable<br />spurious</div></div></div></foreignObject><text x="1696" y="1714" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">enable...</text></switch></g><path d="M 1657 1080 L 1657 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1657 1148.88 L 1653.5 1141.88 L 1657 1143.63 L 1660.5 1141.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1676.14 1732.48 L 1646.91 1765.25" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1643.41 1769.17 L 1645.46 1761.61 L 1646.91 1765.25 L 1650.68 1766.27 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 930 393 Q 960 393 960 321 Q 960 249 870 249 Q 780 249 780 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 267.88 L 776.5 260.88 L 780 262.63 L 783.5 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 780 864 L 780 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 780 1148.88 L 776.5 1141.88 L 780 1143.63 L 783.5 1141.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1328.5" y="1870" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 1890px; margin-left: 1330px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_DOWN</div></div></div></foreignObject><text x="1409" y="1894" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_DOWN</text></switch></g><path d="M 1619.15 1550 L 1539.63 1592.02" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1534.99 1594.48 L 1539.54 1588.11 L 1539.63 1592.02 L 1542.81 1594.3 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1545.39 1645 L 1599.69 1764.2" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1601.87 1768.98 L 1595.78 1764.06 L 1599.69 1764.2 L 1602.15 1761.16 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1328.5" y="269" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 289px; margin-left: 1330px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_DOWN</div></div></div></foreignObject><text x="1409" y="293" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_DOWN</text></switch></g><path d="M 1393.5 368 L 1423.5 368 L 1438.5 393 L 1423.5 418 L 1393.5 418 L 1378.5 393 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 393px; margin-left: 1380px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />release</div></div></div></foreignObject><text x="1409" y="397" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 1408.5 309 L 1408.5 361.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1408.5 366.88 L 1405 359.88 L 1408.5 361.63 L 1412 359.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1408.5" cy="497" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 497px; margin-left: 1385px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set<br />timer</div></div></div></foreignObject><text x="1409" y="501" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set...</text></switch></g><path d="M 1408.5 418 L 1408.5 465.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1408.5 470.88 L 1405 463.88 L 1408.5 465.63 L 1412 463.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1408.5 522 L 1408.5 560.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1408.5 565.88 L 1405 558.88 L 1408.5 560.63 L 1412 558.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1408.5" cy="602" rx="35" ry="35" fill="#9ac7bf" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 68px; height: 1px; padding-top: 602px; margin-left: 1375px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set short<br />timer</div></div></div></foreignObject><text x="1409" y="606" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set short...</text></switch></g><path d="M 1528 368 L 1554 368 L 1571 393 L 1554 418 L 1528 418 L 1511 393 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 393px; margin-left: 1512px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="1541" y="397" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 1442.04 309 L 1535.53 364.74" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1540.04 367.43 L 1532.23 366.85 L 1535.53 364.74 L 1535.82 360.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1571 393 Q 1600 393 1600 321 Q 1600 249 1504.25 249 Q 1408.5 249 1408.5 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1408.5 267.88 L 1405 260.88 L 1408.5 262.63 L 1412 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1103" y="790" width="232" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 230px; height: 1px; padding-top: 810px; margin-left: 1104px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_UP_DELAYING_SPURIOUS</div></div></div></foreignObject><text x="1219" y="814" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_UP_DELAYING_SPURIOUS</text></switch></g><path d="M 1218.75 830 L 1217.89 898.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1217.83 903.88 L 1214.41 896.84 L 1217.89 898.63 L 1221.41 896.93 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1244.05 830 L 1333.02 901.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1337.13 904.3 L 1329.47 902.67 L 1333.02 901.03 L 1333.84 897.2 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1193.42 830 L 1102.52 901.08" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1098.38 904.31 L 1101.74 897.24 L 1102.52 901.08 L 1106.05 902.76 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1530" y="1150" width="254" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 252px; height: 1px; padding-top: 1170px; margin-left: 1531px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_UP_DETECTING_SPURIOUS</div></div></div></foreignObject><text x="1657" y="1174" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_UP_DETECTING_SPURIOUS</text></switch></g><path d="M 1781 1327 L 1781 1363.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1781 1368.88 L 1777.5 1361.88 L 1781 1363.63 L 1784.5 1361.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1766 1277 L 1796 1277 L 1811 1302 L 1796 1327 L 1766 1327 L 1751 1302 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 1752px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />press</div></div></div></foreignObject><text x="1781" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 1680.18 1190 L 1776.18 1272.84" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1780.15 1276.27 L 1772.57 1274.35 L 1776.18 1272.84 L 1777.14 1269.05 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1685 1277 L 1715 1277 L 1730 1302 L 1715 1327 L 1685 1327 L 1670 1302 Z" fill="#9ac7bf" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 1671px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout<br />short</div></div></div></foreignObject><text x="1700" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout...</text></switch></g><path d="M 1665.04 1190 L 1697.63 1271.09" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1699.58 1275.96 L 1693.73 1270.77 L 1697.63 1271.09 L 1700.22 1268.16 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1527 1277 L 1553 1277 L 1570 1302 L 1553 1327 L 1527 1327 L 1510 1302 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 1511px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="1540" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 1635.13 1190 L 1544.7 1272.7" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1540.83 1276.25 L 1543.63 1268.94 L 1544.7 1272.7 L 1548.35 1274.1 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1604 1277 L 1634 1277 L 1649 1302 L 1634 1327 L 1604 1327 L 1589 1302 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 1590px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout</div></div></div></foreignObject><text x="1619" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout</text></switch></g><path d="M 1649.9 1190 L 1621.13 1271" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1619.37 1275.95 L 1618.42 1268.18 L 1621.13 1271 L 1625.01 1270.52 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1780.36 1645 L 1780.91 1683.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1780.98 1688.88 L 1777.38 1681.93 L 1780.91 1683.63 L 1784.38 1681.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1765 1595 L 1795 1595 L 1810 1620 L 1795 1645 L 1765 1645 L 1750 1620 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 1751px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />release</div></div></div></foreignObject><text x="1780" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 1895 1680 Q 1895 1130 1776 1130 Q 1657 1130 1657 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1657 1148.88 L 1653.5 1141.88 L 1657 1143.63 L 1660.5 1141.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1683 1595 L 1713 1595 L 1728 1620 L 1713 1645 L 1683 1645 L 1668 1620 Z" fill="#9ac7bf" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 1669px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout<br />short</div></div></div></foreignObject><text x="1698" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout...</text></switch></g><path d="M 1697.44 1645 L 1696.81 1673.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1696.69 1678.89 L 1693.35 1671.81 L 1696.81 1673.64 L 1700.35 1671.97 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1603 1595 L 1629 1595 L 1646 1620 L 1629 1645 L 1603 1645 L 1586 1620 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 1587px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="1616" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 1519 1595 L 1549 1595 L 1564 1620 L 1549 1645 L 1519 1645 L 1504 1620 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 1505px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout</div></div></div></foreignObject><text x="1534" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout</text></switch></g><path d="M 765 1277 L 795 1277 L 810 1302 L 795 1327 L 765 1327 L 750 1302 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 751px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout</div></div></div></foreignObject><text x="780" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout</text></switch></g><path d="M 809.4 1303 Q 949 1303 949 775.5 Q 949 248 1178.75 248 Q 1408.5 248 1408.5 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1408.5 267.88 L 1405 260.88 L 1408.5 262.63 L 1412 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 887 1277 L 913 1277 L 930 1302 L 913 1327 L 887 1327 L 870 1302 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 871px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="900" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 765 1595 L 795 1595 L 810 1620 L 795 1645 L 765 1645 L 750 1620 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 751px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout</div></div></div></foreignObject><text x="780" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout</text></switch></g><path d="M 887 1595 L 913 1595 L 930 1620 L 913 1645 L 887 1645 L 870 1620 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 871px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="900" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><rect x="1127.5" y="1510" width="182" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 180px; height: 1px; padding-top: 1530px; margin-left: 1129px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_DOWN_DELAYING</div></div></div></foreignObject><text x="1219" y="1534" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_DOWN_DELAYING</text></switch></g><path d="M 1294.22 1415.86 L 1235.28 1504.69" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1232.38 1509.07 L 1233.33 1501.3 L 1235.28 1504.69 L 1239.16 1505.17 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1244.65 1550 L 1298.44 1591.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1302.61 1594.32 L 1294.93 1592.85 L 1298.44 1591.13 L 1299.18 1587.29 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1188.11 1730.1 C 1189.28 1726.9 1191.17 1725.04 1193.17 1725.12 L 1263.03 1725.12 C 1264.63 1725.08 1266.15 1725.63 1267.15 1726.61 C 1268.14 1727.59 1268.49 1728.88 1268.1 1730.1 L 1248.86 1779.9 C 1247.69 1783.1 1245.8 1784.96 1243.8 1784.88 L 1172.92 1784.88 C 1171.51 1784.69 1170.27 1784.05 1169.49 1783.1 C 1168.72 1782.15 1168.5 1780.99 1168.87 1779.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 1755px; margin-left: 1170px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />press</div></div></div></foreignObject><text x="1219" y="1759" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 1187.27 1550 L 1122.36 1591.57" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1117.94 1594.4 L 1121.95 1587.67 L 1122.36 1591.57 L 1125.72 1593.57 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1133.68 1642.19 L 1192.12 1719.91" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1195.27 1724.11 L 1188.27 1720.61 L 1192.12 1719.91 L 1193.86 1716.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1218.5 1550 L 1218.5 1588.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1218.5 1593.88 L 1215 1586.88 L 1218.5 1588.63 L 1222 1586.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1218.5 1645 L 1218.5 1718.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1218.5 1723.88 L 1215 1716.88 L 1218.5 1718.63 L 1222 1716.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1102 1277 L 1132 1277 L 1147 1302 L 1132 1327 L 1102 1327 L 1087 1302 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 1088px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout</div></div></div></foreignObject><text x="1117" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout</text></switch></g><path d="M 1308 1327 L 1308 1363.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1308 1368.88 L 1304.5 1361.88 L 1308 1363.63 L 1311.5 1361.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1293 1277 L 1323 1277 L 1338 1302 L 1323 1327 L 1293 1327 L 1278 1302 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 1279px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />press</div></div></div></foreignObject><text x="1308" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 1200 1277 L 1226 1277 L 1243 1302 L 1226 1327 L 1200 1327 L 1183 1302 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1302px; margin-left: 1184px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="1213" y="1306" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 1067.11 1025.1 C 1068.28 1021.9 1070.17 1020.04 1072.17 1020.12 L 1142.03 1020.12 C 1143.63 1020.08 1145.15 1020.63 1146.15 1021.61 C 1147.14 1022.59 1147.49 1023.88 1147.1 1025.1 L 1127.86 1074.9 C 1126.69 1078.1 1124.8 1079.96 1122.8 1079.88 L 1051.92 1079.88 C 1050.51 1079.69 1049.27 1079.05 1048.49 1078.1 C 1047.72 1077.15 1047.5 1075.99 1047.87 1074.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 1050px; margin-left: 1049px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />release</div></div></div></foreignObject><text x="1098" y="1054" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 1187.11 1025.1 C 1188.28 1021.9 1190.17 1020.04 1192.17 1020.12 L 1262.03 1020.12 C 1263.63 1020.08 1265.15 1020.63 1266.15 1021.61 C 1267.14 1022.59 1267.49 1023.88 1267.1 1025.1 L 1247.86 1074.9 C 1246.69 1078.1 1244.8 1079.96 1242.8 1079.88 L 1171.92 1079.88 C 1170.51 1079.69 1169.27 1079.05 1168.49 1078.1 C 1167.72 1077.15 1167.5 1075.99 1167.87 1074.9 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 1050px; margin-left: 1169px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">notify<br />button<br />release</div></div></div></foreignObject><text x="1218" y="1054" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">notify...</text></switch></g><path d="M 1202.5 905 L 1232.5 905 L 1247.5 930 L 1232.5 955 L 1202.5 955 L 1187.5 930 Z" fill="#9ac7bf" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 930px; margin-left: 1189px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout<br />short</div></div></div></foreignObject><text x="1218" y="934" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout...</text></switch></g><path d="M 1217.5 955 L 1217.5 1013.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1217.5 1018.88 L 1214 1011.88 L 1217.5 1013.63 L 1221 1011.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1323 905 L 1353 905 L 1368 930 L 1353 955 L 1323 955 L 1308 930 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 930px; margin-left: 1309px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />press</div></div></div></foreignObject><text x="1338" y="934" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 1084.5 905 L 1110.5 905 L 1127.5 930 L 1110.5 955 L 1084.5 955 L 1067.5 930 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 930px; margin-left: 1069px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="1098" y="934" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 1097.5 955 L 1097.5 1013.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1097.5 1018.88 L 1094 1011.88 L 1097.5 1013.63 L 1101 1011.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1137.5" y="1150" width="160" height="40" rx="6" ry="6" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 1170px; margin-left: 1139px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">IS_UP_WAITING</div></div></div></foreignObject><text x="1218" y="1174" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">IS_UP_WAITING</text></switch></g><path d="M 1198.71 1190 L 1121.36 1272.36" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1117.77 1276.19 L 1120.01 1268.69 L 1121.36 1272.36 L 1125.11 1273.48 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1234.42 1190 L 1303.89 1272.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1307.28 1276.15 L 1300.09 1273.06 L 1303.89 1272.14 L 1305.43 1268.54 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1216.82 1190 L 1214.07 1270.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1213.89 1275.88 L 1210.63 1268.77 L 1214.07 1270.64 L 1217.63 1269.01 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1217.5 1080 L 1217.5 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1217.5 1148.88 L 1214 1141.88 L 1217.5 1143.63 L 1221 1141.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1303.32 1645 L 1303.05 1683.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1303.01 1688.88 L 1299.56 1681.86 L 1303.05 1683.63 L 1306.56 1681.91 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1288.5 1595 L 1318.5 1595 L 1333.5 1620 L 1318.5 1645 L 1288.5 1645 L 1273.5 1620 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 1275px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">button<br />release</div></div></div></foreignObject><text x="1304" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">button...</text></switch></g><path d="M 1328 1715 Q 1400 1715 1400 1422.5 Q 1400 1130 1308.75 1130 Q 1217.5 1130 1217.5 1143.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1217.5 1148.88 L 1214 1141.88 L 1217.5 1143.63 L 1221 1141.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1102 1595 L 1132 1595 L 1147 1620 L 1132 1645 L 1102 1645 L 1087 1620 Z" fill="#ea6b66" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 1088px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">timeout</div></div></div></foreignObject><text x="1117" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">timeout</text></switch></g><path d="M 1205.5 1595 L 1231.5 1595 L 1248.5 1620 L 1231.5 1645 L 1205.5 1645 L 1188.5 1620 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1620px; margin-left: 1190px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">other<br />button</div></div></div></foreignObject><text x="1219" y="1624" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">other...</text></switch></g><path d="M 929.4 1303 Q 989 1303 989 775.5 Q 989 248 1198.75 248 Q 1408.5 248 1408.5 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1408.5 267.88 L 1405 260.88 L 1408.5 262.63 L 1412 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1218.5 1785 L 1366.74 1866.92" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1371.33 1869.46 L 1363.51 1869.14 L 1366.74 1866.92 L 1366.9 1863.01 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1368 930 Q 1400 930 1400 845 Q 1400 760 1325.5 760 Q 1251 760 1251 504 Q 1251 248 1329.75 248 Q 1408.5 248 1408.5 262.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1408.5 267.88 L 1405 260.88 L 1408.5 262.63 L 1412 260.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="660" cy="1395" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 1395px; margin-left: 636px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set<br />timer</div></div></div></foreignObject><text x="660" y="1399" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set...</text></switch></g><path d="M 660 1327 L 660 1363.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 660 1368.88 L 656.5 1361.88 L 660 1363.63 L 663.5 1361.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="660" cy="1715" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 1715px; margin-left: 636px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set<br />timer</div></div></div></foreignObject><text x="660" y="1719" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set...</text></switch></g><ellipse cx="1308" cy="1395" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 1395px; margin-left: 1284px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set<br />timer</div></div></div></foreignObject><text x="1308" y="1399" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set...</text></switch></g><ellipse cx="1303" cy="1715" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 1715px; margin-left: 1279px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set<br />timer</div></div></div></foreignObject><text x="1303" y="1719" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set...</text></switch></g><path d="M 1757.2 1402.67 L 1696.37 1422.3" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1691.37 1423.91 L 1696.96 1418.43 L 1696.37 1422.3 L 1699.11 1425.09 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1781" cy="1395" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 1395px; margin-left: 1757px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set<br />timer</div></div></div></foreignObject><text x="1781" y="1399" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set...</text></switch></g><ellipse cx="1657" cy="1435" rx="35" ry="35" fill="#9ac7bf" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 68px; height: 1px; padding-top: 1435px; margin-left: 1623px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set short<br />timer</div></div></div></foreignObject><text x="1657" y="1439" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set short...</text></switch></g><path d="M 1806 1715 L 1853.63 1715" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1858.88 1715 L 1851.88 1718.5 L 1853.63 1715 L 1851.88 1711.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1781" cy="1715" rx="25" ry="25" fill="#ea6b66" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 1715px; margin-left: 1757px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set<br />timer</div></div></div></foreignObject><text x="1781" y="1719" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set...</text></switch></g><ellipse cx="1895" cy="1715" rx="35" ry="35" fill="#9ac7bf" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 68px; height: 1px; padding-top: 1715px; margin-left: 1861px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">set short<br />timer</div></div></div></foreignObject><text x="1895" y="1719" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">set short...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>
\ No newline at end of file
diff -Naur third_party_libinput_bak/doc/touchpad-gestures-state-machine.svg third_party_libinput_new/doc/touchpad-gestures-state-machine.svg
--- third_party_libinput_bak/doc/touchpad-gestures-state-machine.svg	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/doc/touchpad-gestures-state-machine.svg	2023-03-29 15:45:00.441508600 +0800
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="3549px" height="2249px" viewBox="-0.5 -0.5 3549 2249" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2021-06-08T15:46:29.683Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36&quot; etag=&quot;dGoOzLxFj0Psxj0F8VP9&quot; version=&quot;14.7.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;C5RBs43oDa-KdzZeNtuy&quot; name=&quot;Page-1&quot;&gt;7V1bd6M4Ev41Oaf3ITlIIC6PubjT6Ukn2SQ9vbMvc7BNHO/YJmPjTmd+/QJGNqgEyAYk2Ul2z7SNAWNVfaW615F5Pv11Ofdfnr+Fw2ByhI3hryPz4ghjkxAS/5McecuOYM9dHRnNx8PVMbQ58DD+J8gOGtnR5XgYLAonRmE4icYvxYODcDYLBlHhmD+fh6/F057CSfFbX/xRAA48DPwJPPpjPIyes6MeNjYffAnGo2f61djIPpn69OzswOLZH4avuUNm78g8n4dhtHo1/XUeTJLlowvz4+rtx+T6L/vy678Xf/vfz357vPn9eHWzz9tcsv4N82AW7Xzry6eHf5+9fr2buZN/rozl1c00HGWXGD/9yTJbsJvbm172e6M3uorxnWKCxW/OXp/HUfDw4g+ST15jpomPPUfTSfwOxS+fxpPJeTgJ5+l15hNJ/hcfX0Tz8K8g94md/iVXhLMod3z1Fx8X/M3Z2vwM5lHwK0fybA0ug3AaRPO3+JTsU8fKfnPG0ZS6rznuoMeec4zhZsf8jCFH6ztv1jx+kS37FiQwAQng8s+GpwkW4neDib9YjAfFVQ9+jaP/xK+NE5K9+yP3yUXyyw365i17s936LsLlfBDUM1IwLMARUiG3zISzyvTYPJj40fhnEcS8pc++4S4cxz+jlMgmYqi3+j3ZVXnQMDdyjeKNkMXcKPLnoyACN0o5Yf2zd2cOCzDH56uby979nxe9x975Y+8C8EospV6Sl1H6Tx1eFyuBbZxg5m8vsWy6HDBbFWzWOpgRFKhv8fYHAB3D5CF7G86j53AUzvxJb3P0bB4uZ8NgmIF1c851GL5ktPtfEEVv2Y7rL6OwuUyIyTN/W11kmTY98Ed6ALn0/eba9F3h4rtgPo5XMph3I2UybWQFunrY1EqjhmKGlQ4WlisdiAO4bRaqZDaUY7UN49UyGymwWg2fKWIpIrrDNeSptWZK9RNPMk8BlroMFtFynkgxI5j5/UnCKJ8Bl82fw2l/uTgIFdFmSEDgtuLKVBFtNSqiHITWI08r1ZKV+ZiV+buqltiRC3S4dzRgKgsXRb9nV3NW/IZVFTTZDyxBrkSmVmzpeF5RFWG5SZQtwY1YqdYeW37t/YH/jr7c3t++/XfoL8lfvdHjsUmUKDCU+VCB9TacKIf5EEcm8lepdQ23mdlD99iNMPl+89vN7Y8bSMzDdSURm2N+SvUlIZ4zyfanydLO+ouXdDGMh5i9EsQ/J87UmNliMTwHdKJ+hEUUJJe95KR1cignvesJ+SugnuGczwEbkMhDErhDi0dkF/fNlMiyiLkWoHXE7M6XAJ0/B6T21ctCU3QnRnrtxC4jFXbdiV2TuZFk7wKGQv1bGI3DWXxsGEN/EL07S9DmCAWpliAVAe9VJojajFhvmWCzTp1dZYItOR6BoYLB9W8LsuBu/kKlKjoWdlvoFRKzSJFzPHNHFlzzbnYjR7KDEkO1iOf0FhWCW3BgR5x0aAziIIZB2OBr1wwCXdhfNpZOuIwAs7w3W4cwELZdAtQaubYObtPFvcumsqXfR0awE4uGprCjtSBxdxUkBCsWJNBF/uX2+uLPx6tvvdvvj6VipPXUC4WiwkICokJqioWFwMLrn06h0mjCrqAc0cypbJn6ENrYidBIU0JbWCtC0+dm5Cyk/o6hA4Xik1W0RJ3KnTmQqKhWBCoJqlnLoDKFXU6uVqCiz80qL2e9yysYlaOqS7xs/mQSTMLR3J8yplDhswY2kT7oxIRVbgThaXcFT7NN/+42YKtKyFALQKqF16svevtTXFamC5tBRo091Z4ZdO1//e4v/7ny3YERnUX3X91fF8eQJRWnNO+h15iq1nkm5i62rWoT4T4N9ParzS/eSX/Qj/J7oT9AN3un0V+FagBifBwugmqA1Cgv4Wz6uotXpZavKWr5ysriJ0zigMu6wzp2XZp8k/rP3k380p7ES3TWn8evRsmrT+enN+e9638BpnufVgHQt0RLRDuzCiwoi/3kqv3wjrWM9fadV3wII0Z/JwZzi65LP2EYc/9UL6W7AuWU2mxqS7TEJGONY+PEc0imHDdkM+ww4oYIJtyfzuf+W+60l+SERfkXscnKHtMuoPp0RFOYys7HHo0MlVwRv1g9MnM9ff7w6WkRNEXS8Ph8+T/v6beL5eT304ufL78F5uc1H+SQtIhvGh/5NAz6MUAGAdz7El649vvBpAgHfzIezeLXg5hF020u2VfGA39ymn0wHQ+HK+QFi/E/SblcxtwZfeKbk7MjcrFmd7AxrZthZBcfrUuM8siokBmVfLtu6UFrpptxcXaXY+aKVohZCep8Sfx4Nkoy2I3ly4FaJER1BaLl7Yu2savZLyOjw+K4MvkSq3UzpRn1SxIhUmviw2Y4AnE+y5JoMnBVGpoprb8LoWWMUUlZ7wrw2sZYiR2BmDQmhGyrEw0PGU7xm2jCVJnOBi5ABFXobG2VeGKliR17wZuSGpgA3vRcbVkTyWBNU4nYVMVmtixXCqvPWo6nKZvRJ+uWy5QIQGXCTNS7IkeZpc+d73m4nPZTAzJ8iv/zlJqTiwMvbWT7DCkvbXTUujdPXIdsoRlUdzDRz/QkomFoRy/Tk8DQB85hFHDMOkWU2qGDSbgcHgJgEWJqPzd7l4xsUr4m7+47ZtuGGadmh79yeuXaExhsMpP9MNkUrQ+8le6QcuGm2Al74DukJ7hD2q07jppB1wPQRWvEvmvAIssWrGvtDLH0ifajm5kMmFGfQ20MxGw9H3I3lwJia3jadUNxfzvM3voU0xgbSXP+/QtVVyCjMlSNPbuw8hnn7OqM6j42TXk7RzdCtahpOA9g6t2HXoWxZaqW0khNQEKPBHWbo/fwV6l1b3GzpshQ77m7vbp57N3/+e328eq2vMit/dEIT094MOChbGj3bdJppogJJlTIHILAZRTnHaPJ4XjFuYukrNCn8rFzYHo4v7+9vpYIIncQ8EHUd0lSTCcTRIbyNhdU93mfKBLt/enp5UZzYMHcw4+rOzhQq7tWMX7gPnFRZA/coP/UJYpsJpZKkKcaREr8022DQTR04+kVaHVg6Obu6ub8i0y9LLBL9DLH6xudbiksGFxLNRhcNb6oA8vhdURLDR3RARFNk2tsRnmxqWVU02igLa+HC70ei9dxDGVlfqraOgkKBWGHVinOjZPY4MoMnqaVQHbxiu78VO4etlDbZ0kgK5uTlQSOJVkSQPX3ZTwbPOssCcp29q0lwbFxYiCr6LG2WhEMNBJSvGn3YsKBYYhsFhx0ZEdvie520BlzyBLo5tZVyhzfh/Se/daesKdNL7+1x3G1cX0EO7c7VOgC8BiIEMMCEJEb26HK8PvECBbFiF7Nh+hz17oOdp4mptAzwGLENSVihL/cSiI2bfO6sJtMrwxnD7rJ0v1Aw06dCjcWl21fgQRB01lTHk/JxtI2aERnDFCJrAtoYL5yukHoBxqVOw0LGteSCBpuQ0ko6/aol+ju2OOuhWj9XPuJkI1IiKBXYA+bgkrraSxKev5ai052kUN6aLnSlqCsO2g9dTZ7t541+zwPFunrFn1FARqSwOGJWM92TL/L9Cs2ccTjNP7oyiXEJRHs1KIGnC0Dxt5PWQlFpeLtTu/xNaKkrxJOmlAezjPLFeUcpuyT2TaZn6CsBFl6aBRI1BveTQPkratq2Im4yM5qtdqqq6lcJc1HQyoENXLYblXEhLDubDgkfwAFzPRXvY1KMDlaTmHg40FWjpLJlmbatnXi5f7c4i3b663M3ymg+0ixDav1tLlK3tG4bqjyubexYieHbcUii+32bGNY/yDVjkVKvOv7DEfhMVnKSiYqn5vtLXt6c1FWx7dr0Fchwrx6N1FnIV++ToU/8LUVvigA9s1nS2+s/RxIfdCJsMz2zfzBa2r7hiiGGiexupK3dYFaydAl6fPiVaqSGLGqJA9MUuvRMSCLKveBdF9hlQuwfidr3TvQzL0LfeofRntz0kuy2UscQ4Sw7kZLpWMI+oeziodFshizpBbkYIx+AlzwEo1+btsrRYMBGuVqMwhpEaucwCd/1bBKqQyFcknjkJ1TtRX2BWErfjRouUvzXvcJI61Bgm5L9aqLJmFOtgsAIqgQ5hS5grQbGOXKELWh8510ou4EL4/LuKtWUhAqSR2GZk1N/7Pdi2XUtTcDElh9T1cMg4d7lMSsiSTHotU6jrKMPv5zw1yExAg16vqzaupZaDnJQJjUzTr+5nrEIlrd2/FGbjLbclUX4I5azlYurjSLVcfCfDa7RHlhvgmtItUux1gWGGZROHhYA+lgikoH4ZmoG+ngmmbL0gHq7d1D3IQQ72jisYbYZv2DxFYMbQvGU9fUGMRoTXhi8OzHRw5d7Do2q5qrJg1UzC96Z7ffb8578dHPVzeXvfv4xfXt5dU5IMzidTyd+LMgXWJ/HmUSNZF4k6RT0V24GKdZYpz2RNfMCes2RbUNjfphFIXTDomEQVNODKlkmxwymVV0yr7vPumPNBvFv3XzhRbb3p0X/+PxBRtM9yfxms38KDhLNsEFYI8WRKvaseZqzLZK6NRu17wR5vwT9bLbOCPMHxKYx4eGQT+m6CDh4aQKYA5Fg4oagFYFfrW4FN+M8QkpinyeM8bhYLuz2D7BKhDcOqo4GS/8n6ss46XyufM7bhFN2tTU6IgnbGsIKH28m62lTDQDJ8VcPTiVZVbzH4fvqtSHkNsXEssipF66C4EmJ39itf6WZ0uC0/KA4CSKjU/OoOLz09jyvI6PnX+/v+/dPMavLnsPj9/vy+dBqGhQpCN9icPQl2dEEgEjsj36QlXnajRLh7oZ0fN4cbQZuZmhMHmK2TClc+pNHM/SU5PjC38arD6IYJv0eI2iIgWLlJmFqZciT8bskHj/ZB7LFOV8d7R1WOyu8+9lpNvzk5ighIUb5Wx4Op+Hr8n6TvzFYjwo2+U6tdDrDW/R+pPcavOQRI817WoPJLXHULGkKTm4kwvu5DB36jg5lKgdbKZhaJe0HtrtNoxrYnZWRkUYt63cKqiGH9ww1xUyKgP1Lq0myFaeVmVoMc2VvylAS9hPrtLHgJJcPMAb3cw/US9D2IbR+EU45c+n0bYtWjOKUO1hi+C54yGkEUT5aat72PKpw4IBDjfwl61p4upOmy8Gm68lYfflpMmWeMF03nUruL8yAQa5DUfQSNhmIYE6Sm9R2L88mc1U4H3eYAy5s2M+jJkSrWVfjBkoTyWIU6gTH5wxY9cbM4SY2ovVsrESvZsLQKf3OVRik7GWAWid8qTMEUk9Wu+yus8WzYIQtmbk2JcO1GBK7UvpUw8r2ayVqYeu5RSnHmrv2eFMptbMs7N9aFwO8tofatyoYQDt47kfSix36TqmIn/ZLC30VdoDulv7X7hrjM6KagX3V4pmExVWfA+c7jDM3lWxi7rBTMAbwBsBKNUbQHfw/RCkMrwBJTudsHugqXSF4W+ba+3XBb+3DpGabFsgwyiI6forZPghoAZ3cH6IFSYr/RAOZuS7ThGbSliBwX2auSWU7g6MW8ITbTrUnVsCuv0gxoTzo7o0dWr7SYhWEcvJjnIZlXhd5bx9chRzI1Nse2hLHnP4YS/1h1ass/JmQdLUh60bXIBGjCau2fYJOzRg6ytkKAomLPxL61lqO7borC+UQ7BaXaDVcm+Fb9RCW+D/JNiPU3UJizKXTyOhgpoKlUZuOkjFzmx6wU5lHNyJ0aQUX4iwja9NAmv5pLZTRYrbqSrr6leR9CQy6lxWW7/KxwRx2+93F6ePWlUOCYduO0Cbx/QFtDltLTqzkfiEU5JQ0zlqRPv0eSXqhyTUQH/Qyq2gH2qEPQsSUONwqibloob+sgNDjWg8FTVFzW7GnmMxlVSWJ6PJMIzt1HSsVQpTdaok6AFt8tpCdFX+ysepNhMz1QffK7rwi7TrVxJ8Rw5rnuBsz+wU8hh6X/aJaXbu1CXbuWiKcl9HwUnksc5AZDCiqMSTvXV80mLbDiJU43Zkr5DidoRmHJ0vu3jxZwUE2H8vw+SDwWqPOU3IMer7n+JbxP+Pv9/gvvrXEV6xlpH0Zzh+8qfjydvq8mk4Cxfpzlc4ZdUeKTnBePm1/qjvD/4apRA7Lj7BJ5z0d8q+Die98uhrknw5fezNtFySMlW80z5/C4fBJDnQS4/Ow/jM9Tu6giRdw/jIRfI6uTlJVonElKk7F63PpRja6TZ4c5sVodafpN5hsvYP07NWRFuftfETx4dWAif5DKVvV97i5H3mL04OFj3GyYeZzzj5cOM1Tj4w0mMUD6uvJMkqk4v0k9yzr1QQ3urkvcmcJQKrt750vXAbIUESSG3WzkTWie3aOFYmDc9N6lnoTd9y9zMMdGIQ18UmwZ6FEiuZnuYvNueNct/CEi99u6Zg/mCRr7LzAAPa2fjmzyvkrWc7f6DxA40faJSLxkLUrQSYHP1w/4JxAh0R6CwJ2uJo9a6hJnbMXNFdcI7mlh5IDtbOZPQa1oLRtB9PHuVgEpby+oc9teZNpW5vmja8HxG+XeamqiB0Rc2ZereNQaqtXey5pPKKjuxd6B9c1cAZn2h/7QPZEswS/11uSzAcp0AC3M4GYcraH+gDS0jYEB3uKcPLzhvuKXf+rdoqDM0SNnhzw8pH0KragjkDuE7/c/UACKkylKUQZJbD7EbrjjTKQlkmlG4rihmJj+fcgPvUO6WdA6Yf8/ojyKWdmoEtmsYcTU6awWVp0YMyIwWG/e97D73HUphF6T91wMlmPRgnmPnjgKhpi+v2wcXGy0xOgN/iIKuNuQ/8gjq1rfQ0s//p0uuNLPqUH8jKIWs94EwbZEEN8bp3ya131GEGXfsUwS5bW+RyFAnb4xCFlhQdyBA6rghB0HXy8MhLWg1E57dDqlUzpnjvfgZagtmjbRjM/KWDqkXv93TSRmcCsLO1ZbujWBLlFn9xYePy83A2TAWMD6MFwi6g7laQAf16RSX4c7gryClfexynTtHgZzBTNRhNlnTAiMPBPPHQGQdjyME6DODpjABsIw7eptdVdj+XAJwmlGsRUrG9UWIMJuFyqFCgsOvJEyidbXj89qtQV/gSToZQGBcMsy3bJJPAHVo8nd7FfdMWznyvIEK58s7KEENQhrDtDtpbcdg/bLXi2XCnachl5iYECFBMAodHAM92TF8uAXhqiFwCQCF+N54Nnltd8raKstpYcu4MUKlLbkO95eF1/AI7mjYSMy1Vj7ay5Fj5ksNkqjT8m8ZcO5AxbZU3tbH6ykUMZwTBw2AeclKiGi15S6GcNpbc7W7Jj7JE0JyPZJMCavb+Dw==&lt;/diagram&gt;&lt;/mxfile&gt;"><defs/><g><ellipse cx="798" cy="107" rx="60" ry="40" fill="#f5f5f5" stroke="#666666" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 739px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">NONE</div></div></div></foreignObject><text x="798" y="111" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">NONE</text></switch></g><path d="M 798 147 L 798 180.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 798 185.88 L 794.5 178.88 L 798 180.63 L 801.5 178.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 738 432.56 Q 773 442.56 808 432.56 Q 843 422.56 878 432.56 L 878 471.44 Q 843 461.44 808 471.44 Q 773 481.44 738 471.44 L 738 432.56 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 452px; margin-left: 739px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">FINGER_DETECTED</div></div></div></foreignObject><text x="808" y="456" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">FINGER_DETECTED</text></switch></g><path d="M 798 377 L 798 402 L 798.85 429.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 799.01 434.88 L 795.29 427.99 L 798.85 429.63 L 802.29 427.78 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 406px; margin-left: 799px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="799" y="409" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 838 337 L 958 337 L 958 710.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 958 715.88 L 954.5 708.88 L 958 710.63 L 961.5 708.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 467px; margin-left: 958px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="958" y="470" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 798 297 L 838 337 L 798 377 L 758 337 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 337px; margin-left: 759px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Gestures enabled?</div></div></div></foreignObject><text x="798" y="341" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Gestures enab...</text></switch></g><path d="M 798 267 L 798 290.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 798 295.88 L 794.5 288.88 L 798 290.63 L 801.5 288.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 796.94 475 L 797.84 510.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 797.97 515.88 L 794.3 508.97 L 797.84 510.63 L 801.29 508.8 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 738 647 L 634.37 647" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 629.12 647 L 636.12 643.5 L 634.37 647 L 636.12 650.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="798" cy="647" rx="60" ry="40" fill="#f5f5f5" stroke="#666666" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 647px; margin-left: 739px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">UNKNOWN</div></div></div></foreignObject><text x="798" y="651" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">UNKNOWN</text></switch></g><path d="M 738 517 L 838 517 L 858 542 L 838 567 L 738 567 L 758 542 Z" fill="#d5e8d4" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 542px; margin-left: 739px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">  Start hold timer</div></div></div></foreignObject><text x="798" y="546" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">  Start hold timer</text></switch></g><path d="M 798 567 L 798 600.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 798 605.88 L 794.5 598.88 L 798 600.63 L 801.5 598.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 798 717 L 838 757 L 798 797 L 758 757 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 757px; margin-left: 759px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Motion detected?</div></div></div></foreignObject><text x="798" y="761" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Motion detect...</text></switch></g><path d="M 798 687 L 798 710.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 798 715.88 L 794.5 708.88 L 798 710.63 L 801.5 708.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 838 757 L 911.63 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 916.88 757 L 909.88 760.5 L 911.63 757 L 909.88 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 757px; margin-left: 878px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="878" y="760" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 758 757 L 714.37 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 709.12 757 L 716.12 753.5 L 714.37 757 L 716.12 760.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 757px; margin-left: 733px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="733" y="760" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 588 732 L 688 732 L 708 757 L 688 782 L 588 782 L 608 757 Z" fill="#d5e8d4" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 757px; margin-left: 589px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Hold timeout</div></div></div></foreignObject><text x="648" y="761" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Hold timeout</text></switch></g><path d="M 608 757 L 554.37 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 549.12 757 L 556.12 753.5 L 554.37 757 L 556.12 760.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 408 737.56 Q 443 747.56 478 737.56 Q 513 727.56 548 737.56 L 548 776.44 Q 513 766.44 478 776.44 Q 443 786.44 408 776.44 L 408 737.56 Z" fill="#d5e8d4" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 757px; margin-left: 409px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">HOLD_TIMEOUT</div></div></div></foreignObject><text x="478" y="761" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">HOLD_TIMEOUT</text></switch></g><path d="M 148 797 L 148 850.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 148 855.88 L 144.5 848.88 L 148 850.63 L 151.5 848.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 148 717 L 148 683.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 148 678.12 L 151.5 685.12 L 148 683.37 L 144.5 685.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="148" cy="757" rx="60" ry="40" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 757px; margin-left: 89px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">HOLD</div></div></div></foreignObject><text x="148" y="761" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">HOLD</text></switch></g><path d="M 258 757 L 214.37 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 209.12 757 L 216.12 753.5 L 214.37 757 L 216.12 760.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 248 787 L 268 727 L 368 727 L 348 787 Z" fill="#d5e8d4" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 757px; margin-left: 249px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">HOLD_BEGIN</div></div></div></foreignObject><text x="308" y="761" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">HOLD_BEGIN</text></switch></g><path d="M 408 757 L 364.37 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 359.12 757 L 366.12 753.5 L 364.37 757 L 366.12 760.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 188 897 L 291.63 897" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 296.88 897 L 289.88 900.5 L 291.63 897 L 289.88 893.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 897px; margin-left: 243px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="243" y="900" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 108 897 L 68 897 L 68 757 L 81.63 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 86.88 757 L 79.88 760.5 L 81.63 757 L 79.88 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 837px; margin-left: 68px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="68" y="840" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 148 857 L 188 897 L 148 937 L 108 897 Z" fill="#d5e8d4" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 897px; margin-left: 109px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Motion detected?</div></div></div></foreignObject><text x="148" y="901" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Motion detect...</text></switch></g><path d="M 608 897 L 958 897 L 958 803.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 958 798.12 L 961.5 805.12 L 958 803.37 L 954.5 805.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 498 927 L 518 867 L 618 867 L 598 927 Z" fill="#d5e8d4" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 897px; margin-left: 499px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">HOLD_END<br />(CANCEL)</div></div></div></foreignObject><text x="558" y="901" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">HOLD_END...</text></switch></g><path d="M 148 597 L 148 554.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 148 549.12 L 151.5 556.12 L 148 554.37 L 144.5 556.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 572px; margin-left: 148px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">all</div></div></div></foreignObject><text x="148" y="575" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">all</text></switch></g><path d="M 108 637 L 38 637 L 38 1827 L 2983 1827 L 2983 953.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2983 948.12 L 2986.5 955.12 L 2983 953.37 L 2979.5 955.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 680px; margin-left: 42px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">some (debounce)</div></div></div></foreignObject><text x="42" y="683" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">some (debounce)</text></switch></g><path d="M 148 597 L 188 637 L 148 677 L 108 637 Z" fill="#d5e8d4" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 637px; margin-left: 109px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Finger up?</div></div></div></foreignObject><text x="148" y="641" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Finger up?</text></switch></g><path d="M 148 487 L 148 107 L 511.63 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 516.88 107 L 509.88 110.5 L 511.63 107 L 509.88 103.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 88 547 L 108 487 L 208 487 L 188 547 Z" fill="#d5e8d4" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 517px; margin-left: 89px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">HOLD_END</div></div></div></foreignObject><text x="148" y="521" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">HOLD_END</text></switch></g><path d="M 998 757 L 1068 757 L 1068 1557 L 1122.1 1557" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1127.35 1557 L 1120.35 1560.5 L 1122.1 1557 L 1120.35 1553.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 998 757 L 1068 757 L 1068 1157 L 1121.63 1157" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1126.88 1157 L 1119.88 1160.5 L 1121.63 1157 L 1119.88 1153.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 998 757 L 1068 757 L 1068 526 L 1121.93 526" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1127.18 526 L 1120.18 529.5 L 1121.93 526 L 1120.18 522.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 998 757 L 1121.63 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1126.88 757 L 1119.88 760.5 L 1121.63 757 L 1119.88 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 958 717 L 998 757 L 958 797 L 918 757 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 757px; margin-left: 919px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Number of fingers?</div></div></div></foreignObject><text x="958" y="761" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Number of fin...</text></switch></g><path d="M 1233 1157 L 1291.63 1157" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1296.88 1157 L 1289.88 1160.5 L 1291.63 1157 L 1289.88 1153.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1158 1137 C 1134 1137 1128 1157 1147.2 1161 C 1128 1169.8 1149.6 1189 1165.2 1181 C 1176 1197 1212 1197 1224 1181 C 1248 1181 1248 1165 1233 1157 C 1248 1141 1224 1125 1203 1133 C 1188 1121 1164 1121 1158 1137 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1157px; margin-left: 1129px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">2 fingers</div></div></div></foreignObject><text x="1188" y="1161" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">2 fingers</text></switch></g><path d="M 1233 757 L 1321.63 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1326.88 757 L 1319.88 760.5 L 1321.63 757 L 1319.88 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1158 737 C 1134 737 1128 757 1147.2 761 C 1128 769.8 1149.6 789 1165.2 781 C 1176 797 1212 797 1224 781 C 1248 781 1248 765 1233 757 C 1248 741 1224 725 1203 733 C 1188 721 1164 721 1158 737 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 757px; margin-left: 1129px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">3 or 4 fingers</div></div></div></foreignObject><text x="1188" y="761" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">3 or 4 fingers</text></switch></g><path d="M 1233 1552 L 1291.63 1552" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1296.88 1552 L 1289.88 1555.5 L 1291.63 1552 L 1289.88 1548.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1158 1532 C 1134 1532 1128 1552 1147.2 1556 C 1128 1564.8 1149.6 1584 1165.2 1576 C 1176 1592 1212 1592 1224 1576 C 1248 1576 1248 1560 1233 1552 C 1248 1536 1224 1520 1203 1528 C 1188 1516 1164 1516 1158 1532 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1552px; margin-left: 1129px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">1 finger</div></div></div></foreignObject><text x="1188" y="1556" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">1 finger</text></switch></g><path d="M 1188 482 L 1188 107 L 1084.37 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1079.12 107 L 1086.12 103.5 L 1084.37 107 L 1086.12 110.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 466px; margin-left: 1187px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">(to NONE)</div></div></div></foreignObject><text x="1187" y="469" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">(to NONE)</text></switch></g><path d="M 1158 502 C 1134 502 1128 522 1147.2 526 C 1128 534.8 1149.6 554 1165.2 546 C 1176 562 1212 562 1224 546 C 1248 546 1248 530 1233 522 C 1248 506 1224 490 1203 498 C 1188 486 1164 486 1158 502 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 522px; margin-left: 1129px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">5 or more<br />fingers</div></div></div></foreignObject><text x="1188" y="526" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">5 or more...</text></switch></g><path d="M 1438 1552 L 1481.63 1552" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1486.88 1552 L 1479.88 1555.5 L 1481.63 1552 L 1479.88 1548.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1298 1532.56 Q 1333 1542.56 1368 1532.56 Q 1403 1522.56 1438 1532.56 L 1438 1571.44 Q 1403 1561.44 1368 1571.44 Q 1333 1581.44 1298 1571.44 L 1298 1532.56 Z" fill="#fff2cc" stroke="#d6b656" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 1552px; margin-left: 1299px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">POINTER_MOTION</div></div></div></foreignObject><text x="1368" y="1556" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">POINTER_MOTION</text></switch></g><path d="M 1438 1157 L 1481.63 1157" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1486.88 1157 L 1479.88 1160.5 L 1481.63 1157 L 1479.88 1153.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1298 1137.56 Q 1333 1147.56 1368 1137.56 Q 1403 1127.56 1438 1137.56 L 1438 1176.44 Q 1403 1166.44 1368 1176.44 Q 1333 1186.44 1298 1176.44 L 1298 1137.56 Z" fill="#f8cecc" stroke="#b85450" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 1157px; margin-left: 1299px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">SCROLL</div></div></div></foreignObject><text x="1368" y="1161" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">SCROLL</text></switch></g><path d="M 1808 591 L 1828 591 L 1818 591 L 1841.63 591" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1846.88 591 L 1839.88 594.5 L 1841.63 591 L 1839.88 587.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1668 571.56 Q 1703 581.56 1738 571.56 Q 1773 561.56 1808 571.56 L 1808 610.44 Q 1773 600.44 1738 610.44 Q 1703 620.44 1668 610.44 L 1668 571.56 Z" fill="#dae8fc" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 591px; margin-left: 1669px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">SWIPE</div></div></div></foreignObject><text x="1738" y="595" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">SWIPE</text></switch></g><path d="M 1808 921 L 1828 921 L 1818 921 L 1841.63 921" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1846.88 921 L 1839.88 924.5 L 1841.63 921 L 1839.88 917.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1668 901.56 Q 1703 911.56 1738 901.56 Q 1773 891.56 1808 901.56 L 1808 940.44 Q 1773 930.44 1738 940.44 Q 1703 950.44 1668 940.44 L 1668 901.56 Z" fill="#ffe6cc" stroke="#d79b00" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 921px; margin-left: 1669px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">PINCH</div></div></div></foreignObject><text x="1738" y="925" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">PINCH</text></switch></g><path d="M 1528 717 L 1528 591 L 1661.63 591" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1666.88 591 L 1659.88 594.5 L 1661.63 591 L 1659.88 587.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 592px; margin-left: 1582px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">swipe</div></div></div></foreignObject><text x="1582" y="596" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">swipe</text></switch></g><path d="M 1528 797 L 1528 921 L 1661.63 921" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1666.88 921 L 1659.88 924.5 L 1661.63 921 L 1659.88 917.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 922px; margin-left: 1573px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">pinch</div></div></div></foreignObject><text x="1573" y="926" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">pinch</text></switch></g><path d="M 1528 717 L 1568 757 L 1528 797 L 1488 757 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 757px; margin-left: 1489px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Gesture<br />type?</div></div></div></foreignObject><text x="1528" y="761" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Gesture...</text></switch></g><path d="M 2108 591 L 2151.63 591" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2156.88 591 L 2149.88 594.5 L 2151.63 591 L 2149.88 587.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="2048" cy="591" rx="60" ry="40" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 591px; margin-left: 1989px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">SWIPE</div></div></div></foreignObject><text x="2048" y="595" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">SWIPE</text></switch></g><path d="M 2108 921 L 2151.63 921" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2156.88 921 L 2149.88 924.5 L 2151.63 921 L 2149.88 917.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="2048" cy="921" rx="60" ry="40" fill="#ffe6cc" stroke="#d79b00" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 921px; margin-left: 1989px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">PINCH</div></div></div></foreignObject><text x="2048" y="925" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">PINCH</text></switch></g><path d="M 1948 591 L 1978 591 L 1968 591 L 1981.63 591" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1986.88 591 L 1979.88 594.5 L 1981.63 591 L 1979.88 587.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1838 621 L 1858 561 L 1958 561 L 1938 621 Z" fill="#dae8fc" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 591px; margin-left: 1839px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">SWIPE_BEGIN</div></div></div></foreignObject><text x="1898" y="595" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">SWIPE_BEGIN</text></switch></g><path d="M 1948 921 L 1978 921 L 1968 921 L 1981.63 921" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1986.88 921 L 1979.88 924.5 L 1981.63 921 L 1979.88 917.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1838 951 L 1858 891 L 1958 891 L 1938 951 Z" fill="#ffe6cc" stroke="#d79b00" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 921px; margin-left: 1839px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">PINCH_BEGIN</div></div></div></foreignObject><text x="1898" y="925" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">PINCH_BEGIN</text></switch></g><path d="M 378 1027 L 558 1027 L 558 933.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 558 928.12 L 561.5 935.12 L 558 933.37 L 554.5 935.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1027px; margin-left: 518px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="518" y="1030" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 298 1027 L 214.37 1027" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 209.12 1027 L 216.12 1023.5 L 214.37 1027 L 216.12 1030.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1027px; margin-left: 253px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="253" y="1030" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 338 987 L 378 1027 L 338 1067 L 298 1027 Z" fill="#e1d5e7" stroke="#9673a6" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 1027px; margin-left: 299px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Motion<br />&gt; hold threshold?</div></div></div></foreignObject><text x="338" y="1031" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Motion...</text></switch></g><path d="M 378 897 L 501.63 897" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 506.88 897 L 499.88 900.5 L 501.63 897 L 499.88 893.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 897px; margin-left: 443px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="443" y="900" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 338 937 L 338 980.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 338 985.88 L 334.5 978.88 L 338 980.63 L 341.5 978.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 962px; margin-left: 338px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="338" y="965" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 338 857 L 378 897 L 338 937 L 298 897 Z" fill="#e1d5e7" stroke="#9673a6" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 897px; margin-left: 299px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">1 finger?</div></div></div></foreignObject><text x="338" y="901" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">1 finger?</text></switch></g><path d="M 1778 1627 L 1778 1712 L 1664.37 1712" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1659.12 1712 L 1666.12 1708.5 L 1664.37 1712 L 1666.12 1715.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1718 1577 L 1818 1577 L 1838 1602 L 1818 1627 L 1718 1627 L 1738 1602 Z" fill="#e1d5e7" stroke="#9673a6" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1602px; margin-left: 1719px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Hold timeout</div></div></div></foreignObject><text x="1778" y="1606" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Hold timeout</text></switch></g><path d="M 1438 1712 L 1334.37 1712" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1329.12 1712 L 1336.12 1708.5 L 1334.37 1712 L 1336.12 1715.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1712px; margin-left: 1383px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="1383" y="1715" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 1478 1672 L 1478 1632 L 1548 1632 L 1548 1598.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1548 1593.12 L 1551.5 1600.12 L 1548 1598.37 L 1544.5 1600.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1632px; margin-left: 1513px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="1513" y="1635" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 1478 1672 L 1518 1712 L 1478 1752 L 1438 1712 Z" fill="#e1d5e7" stroke="#9673a6" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 1712px; margin-left: 1439px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Motion<br />&lt; hold threshold?</div></div></div></foreignObject><text x="1478" y="1716" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Motion...</text></switch></g><path d="M 148 987 L 148 943.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 148 938.12 L 151.5 945.12 L 148 943.37 L 144.5 945.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="148" cy="1027" rx="60" ry="40" fill="#e1d5e7" stroke="#9673a6" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1027px; margin-left: 89px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">HOLD_AND_MOTION</div></div></div></foreignObject><text x="148" y="1031" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">HOLD_AND_MOTION</text></switch></g><path d="M 148 1287 L 148 1073.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 148 1068.12 L 151.5 1075.12 L 148 1073.37 L 144.5 1075.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 88 1347 L 108 1287 L 208 1287 L 188 1347 Z" fill="#e1d5e7" stroke="#9673a6" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1317px; margin-left: 89px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">HOLD_BEGIN</div></div></div></foreignObject><text x="148" y="1321" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">HOLD_BEGIN</text></switch></g><path d="M 1208 1712 L 148 1712 L 148 1353.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 148 1348.12 L 151.5 1355.12 L 148 1353.37 L 144.5 1355.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1208 1692.56 Q 1243 1702.56 1278 1692.56 Q 1313 1682.56 1348 1692.56 L 1348 1731.44 Q 1313 1721.44 1278 1731.44 Q 1243 1741.44 1208 1731.44 L 1208 1692.56 Z" fill="#e1d5e7" stroke="#9673a6" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 1712px; margin-left: 1209px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">HOLD_TIMEOUT</div></div></div></foreignObject><text x="1278" y="1716" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">HOLD_TIMEOUT</text></switch></g><path d="M 1578 1712 L 1524.37 1712" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1519.12 1712 L 1526.12 1708.5 L 1524.37 1712 L 1526.12 1715.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1712px; margin-left: 1548px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="1548" y="1715" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 1618 1672 L 1618 1632 L 1548 1632 L 1548 1598.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1548 1593.12 L 1551.5 1600.12 L 1548 1598.37 L 1544.5 1600.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1632px; margin-left: 1583px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="1583" y="1635" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 1618 1672 L 1658 1712 L 1618 1752 L 1578 1712 Z" fill="#e1d5e7" stroke="#9673a6" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 1712px; margin-left: 1579px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Gestures enabled?</div></div></div></foreignObject><text x="1618" y="1716" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Gestures enab...</text></switch></g><path d="M 1608 1157 L 1661.63 1157" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1666.88 1157 L 1659.88 1160.5 L 1661.63 1157 L 1659.88 1153.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1548" cy="1157" rx="60" ry="40" fill="#f8cecc" stroke="#b85450" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1157px; margin-left: 1489px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">SCROLL</div></div></div></foreignObject><text x="1548" y="1161" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">SCROLL</text></switch></g><path d="M 1606.09 1562 L 1668 1562 L 1668 1602 L 1731.63 1602" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1736.88 1602 L 1729.88 1605.5 L 1731.63 1602 L 1729.88 1598.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1548 1512 L 1548 1492 L 1548 1502 L 1548 1488.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1548 1483.12 L 1551.5 1490.12 L 1548 1488.37 L 1544.5 1490.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1548" cy="1552" rx="60" ry="40" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1552px; margin-left: 1489px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">POINTER_MOTION</div></div></div></foreignObject><text x="1548" y="1556" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">POINTER_MOTION</text></switch></g><path d="M 1408 757 L 1481.63 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1486.88 757 L 1479.88 760.5 L 1481.63 757 L 1479.88 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 757px; margin-left: 1448px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="1448" y="760" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 1368 717 L 1368 107 L 1084.37 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1079.12 107 L 1086.12 103.5 L 1084.37 107 L 1086.12 110.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 680px; margin-left: 1368px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no (to NONE)</div></div></div></foreignObject><text x="1368" y="683" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no (to NONE)</text></switch></g><path d="M 1368 717 L 1408 757 L 1368 797 L 1328 757 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 757px; margin-left: 1329px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Gestures enabled?</div></div></div></foreignObject><text x="1368" y="761" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Gestures enab...</text></switch></g><path d="M 588 607 L 588 369.5 L 588.41 134.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 588.42 129.12 L 591.91 136.12 L 588.41 134.37 L 584.91 136.11 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 567px; margin-left: 588px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="588" y="570" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 588 607 L 628 647 L 588 687 L 548 647 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 647px; margin-left: 549px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Finger up?</div></div></div></foreignObject><text x="588" y="651" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Finger up?</text></switch></g><path d="M 798 187 L 838 227 L 798 267 L 758 227 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 227px; margin-left: 759px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">Finger count changed?</div></div></div></foreignObject><text x="798" y="231" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Finger count...</text></switch></g><path d="M 2668 567 L 2668 567 L 3298 567 L 3298 567" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2668 567 L 2668 947 L 3298 947 L 3298 567" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2668 567 L 3298 567" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2982.5" y="561.5">DEBOUNCE FINGER LOGIC</text></g><path d="M 2890.5 757 L 2944.13 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2949.38 757 L 2942.38 760.5 L 2944.13 757 L 2942.38 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2720.5 732 L 2870.5 732 L 2890.5 757 L 2870.5 782 L 2720.5 782 L 2740.5 757 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 168px; height: 1px; padding-top: 757px; margin-left: 2722px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Start debounce timer</div></div></div></foreignObject><text x="2806" y="761" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Start debounce timer</text></switch></g><path d="M 3100.5 757 L 3154.13 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3159.38 757 L 3152.38 760.5 L 3154.13 757 L 3152.38 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2930.5 732 L 3080.5 732 L 3100.5 757 L 3080.5 782 L 2930.5 782 L 2950.5 757 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 168px; height: 1px; padding-top: 757px; margin-left: 2932px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Debounce timeout</div></div></div></foreignObject><text x="3016" y="761" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Debounce timeout</text></switch></g><path d="M 3200.5 717 L 3200.5 673.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3200.5 668.12 L 3204 675.12 L 3200.5 673.37 L 3197 675.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 692px; margin-left: 3201px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="3201" y="695" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes</text></switch></g><path d="M 3200.5 797 L 3200.5 850.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3200.5 855.88 L 3197 848.88 L 3200.5 850.63 L 3204 848.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 827px; margin-left: 3201px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="3201" y="830" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 3200.5 717 L 3240.5 757 L 3200.5 797 L 3160.5 757 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 757px; margin-left: 3162px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Number of fingers changed?</div></div></div></foreignObject><text x="3201" y="761" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">Number of fin...</text></switch></g><path d="M 3125.5 667 L 3145.5 607 L 3275.5 607 L 3255.5 667 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 148px; height: 1px; padding-top: 637px; margin-left: 3127px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">CANCEL CURRENT GESTURE</div></div></div></foreignObject><text x="3201" y="641" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">CANCEL CURRENT GESTURE</text></switch></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 887px; margin-left: 3142px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Ignore this finger change and stay in the same state</div></div></div></foreignObject><text x="3201" y="891" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Ignore this finger c...</text></switch></g><path d="M 2690.5 757 L 2734.13 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2739.38 757 L 2732.38 760.5 L 2734.13 757 L 2732.38 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3198 607 L 3198 107 L 1084.37 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1079.12 107 L 1086.12 103.5 L 1084.37 107 L 1086.12 110.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 583px; margin-left: 3201px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">(to NONE)</div></div></div></foreignObject><text x="3201" y="587" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">(to NONE)</text></switch></g><path d="M 2198 551 L 2198 493.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2198 488.12 L 2201.5 495.12 L 2198 493.37 L 2194.5 495.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 519px; margin-left: 2198px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">all</div></div></div></foreignObject><text x="2198" y="522" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">all</text></switch></g><path d="M 2238 591 L 2453 591 L 2453 757 L 2661.63 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2666.88 757 L 2659.88 760.5 L 2661.63 757 L 2659.88 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 591px; margin-left: 2301px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">some</div></div></div></foreignObject><text x="2301" y="594" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">some</text></switch></g><path d="M 2198 631 L 2198 687 L 2098 687 L 2098 690.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2098 695.88 L 2094.5 688.88 L 2098 690.63 L 2101.5 688.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 647px; margin-left: 2199px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="2199" y="651" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 2198 551 L 2238 591 L 2198 631 L 2158 591 Z" fill="#dae8fc" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 591px; margin-left: 2159px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Finger up?</div></div></div></foreignObject><text x="2198" y="595" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Finger up?</text></switch></g><path d="M 2198 427 L 2198 107 L 1084.37 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1079.12 107 L 1086.12 103.5 L 1084.37 107 L 1086.12 110.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 396px; margin-left: 2199px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">(to NONE)</div></div></div></foreignObject><text x="2199" y="399" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">(to NONE)</text></switch></g><path d="M 2138 487 L 2158 427 L 2258 427 L 2238 487 Z" fill="#dae8fc" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 457px; margin-left: 2139px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">SWIPE_END</div></div></div></foreignObject><text x="2198" y="461" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">SWIPE_END</text></switch></g><path d="M 2238 921 L 2453 921 L 2453 757 L 2661.63 757" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2666.88 757 L 2659.88 760.5 L 2661.63 757 L 2659.88 753.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 920px; margin-left: 2284px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">some</div></div></div></foreignObject><text x="2284" y="924" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">some</text></switch></g><path d="M 2198 961 L 2198 1010.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2198 1015.88 L 2194.5 1008.88 L 2198 1010.63 L 2201.5 1008.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 989px; margin-left: 2198px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">all</div></div></div></foreignObject><text x="2198" y="992" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">all</text></switch></g><path d="M 2198 881 L 2198 827 L 2104.37 827" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2099.12 827 L 2106.12 823.5 L 2104.37 827 L 2106.12 830.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 870px; margin-left: 2201px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="2201" y="873" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 2198 881 L 2238 921 L 2198 961 L 2158 921 Z" fill="#ffe6cc" stroke="#d79b00" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 921px; margin-left: 2159px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Finger up?</div></div></div></foreignObject><text x="2198" y="925" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Finger up?</text></switch></g><path d="M 2248 1047 L 3378 1047 L 3378 107 L 1084.37 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1079.12 107 L 1086.12 103.5 L 1084.37 107 L 1086.12 110.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1049px; margin-left: 2309px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">(to NONE)</div></div></div></foreignObject><text x="2309" y="1053" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">(to NONE)</text></switch></g><path d="M 2138 1077 L 2158 1017 L 2258 1017 L 2238 1077 Z" fill="#ffe6cc" stroke="#d79b00" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1047px; margin-left: 2139px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">PINCH_END</div></div></div></foreignObject><text x="2198" y="1051" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">PINCH_END</text></switch></g><path d="M 798 7 L 798 60.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 798 65.88 L 794.5 58.88 L 798 60.63 L 801.5 58.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1548 1402 L 1548 1367 L 3538 1367 L 3538 107 L 1084.37 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1079.12 107 L 1086.12 103.5 L 1084.37 107 L 1086.12 110.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1367px; margin-left: 1584px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">yes (to NONE)</div></div></div></foreignObject><text x="1584" y="1371" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">yes (to NONE)</text></switch></g><path d="M 1588 1442 L 1671.63 1442" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1676.88 1442 L 1669.88 1445.5 L 1671.63 1442 L 1669.88 1438.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1442px; margin-left: 1633px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="1633" y="1445" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 1548 1402 L 1588 1442 L 1548 1482 L 1508 1442 Z" fill="#fff2cc" stroke="#d6b656" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 1442px; margin-left: 1509px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Finger up?</div></div></div></foreignObject><text x="1548" y="1446" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Finger up?</text></switch></g><path d="M 2048 667 L 2048 647 L 2048 651 L 2048 637.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2048 632.12 L 2051.5 639.12 L 2048 637.37 L 2044.5 639.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1988 727 L 2008 667 L 2108 667 L 2088 727 Z" fill="#dae8fc" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 697px; margin-left: 1989px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">SWIPE_UPDATE</div></div></div></foreignObject><text x="2048" y="701" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">SWIPE_UPDATE</text></switch></g><path d="M 2048 857 L 2048 877 L 2048 861 L 2048 874.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2048 879.88 L 2044.5 872.88 L 2048 874.63 L 2051.5 872.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1988 857 L 2008 797 L 2108 797 L 2088 857 Z" fill="#ffe6cc" stroke="#d79b00" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 827px; margin-left: 1989px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">PINCH_UPDATE</div></div></div></foreignObject><text x="2048" y="831" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">PINCH_UPDATE</text></switch></g><path d="M 1743 1472 L 1743 1542 L 1612.46 1542" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1607.21 1542 L 1614.21 1538.5 L 1612.46 1542 L 1614.21 1545.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1668 1472 L 1688 1412 L 1818 1412 L 1798 1472 Z" fill="#fff2cc" stroke="#d6b656" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 148px; height: 1px; padding-top: 1442px; margin-left: 1669px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">POINTER_MOTION</div></div></div></foreignObject><text x="1743" y="1446" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">POINTER_MOTION</text></switch></g><path d="M 1708 1197 L 1708 1261 L 1619.37 1261" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1614.12 1261 L 1621.12 1257.5 L 1619.37 1261 L 1621.12 1264.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1261px; margin-left: 1692px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="1692" y="1264" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">no</text></switch></g><path d="M 1928 1157 L 3458 1157 L 3458 107 L 1084.37 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1079.12 107 L 1086.12 103.5 L 1084.37 107 L 1086.12 110.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1154px; margin-left: 1971px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; "><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px ; background-color: rgb(248 , 249 , 250)">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22(to%20NONE)%22%20style%3D%22edgeLabel%3Bhtml%3D1%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3Bresizable%3D0%3Bpoints%3D%5B%5D%3B%22%20vertex%3D%221%22%20connectable%3D%220%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%222314.686274509804%22%20y%3D%221001.0588235294117%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px ; background-color: rgb(248 , 249 , 250)">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22(to%20NONE)%22%20style%3D%22edgeLabel%3Bhtml%3D1%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3Bresizable%3D0%3Bpoints%3D%5B%5D%3B%22%20vertex%3D%221%22%20connectable%3D%220%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%222314.686274509804%22%20y%3D%221001.0588235294117%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E(to NONE)</span></div></div></div></foreignObject><text x="1971" y="1158" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22(to%20NONE)%22%20style%3D%22edgeLabel%3Bhtml%3D1%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3Bresizable%3D0%3Bpoints%3D%5B%5D%3B%22%20vertex%3D%221%22%20connectable%3D%220%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%222314.686274509804%22%20y%3D%221001.0588235294117%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22(to%20NONE)%22%20style%3D%22edgeLabel%3Bhtml%3D1%3Balign%3Dcenter%3BverticalAlign%3Dmiddle%3Bresizable%3D0%3Bpoints%3D%5B%5D%3B%22%20vertex%3D%221%22%20connectable%3D%220%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%222314.686274509804%22%20y%3D%221001.0588235294117%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E(to NONE)</text></switch></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1158px; margin-left: 2248px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">(to NONE)</div></div></div></foreignObject><text x="2248" y="1162" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">(to NONE)</text></switch></g><path d="M 1748 1157 L 1791.63 1157" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1796.88 1157 L 1789.88 1160.5 L 1791.63 1157 L 1789.88 1153.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1157px; margin-left: 1773px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">all</div></div></div></foreignObject><text x="1773" y="1160" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">all</text></switch></g><path d="M 1708 1117 L 1708 1097 L 2983 1097 L 2983 953.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2983 948.12 L 2986.5 955.12 L 2983 953.37 L 2979.5 955.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1096px; margin-left: 1780px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">some (debounce)</div></div></div></foreignObject><text x="1780" y="1100" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">some (debounce)</text></switch></g><path d="M 1708 1117 L 1748 1157 L 1708 1197 L 1668 1157 Z" fill="#f8cecc" stroke="#b85450" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 1157px; margin-left: 1669px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Finger up?</div></div></div></foreignObject><text x="1708" y="1161" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Finger up?</text></switch></g><path d="M 1548 1231 L 1548 1211 L 1548 1217 L 1548 1203.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1548 1198.12 L 1551.5 1205.12 L 1548 1203.37 L 1544.5 1205.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1473 1291 L 1493 1231 L 1623 1231 L 1603 1291 Z" fill="#f8cecc" stroke="#b85450" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 148px; height: 1px; padding-top: 1261px; margin-left: 1474px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">AXIS</div></div></div></foreignObject><text x="1548" y="1265" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">AXIS</text></switch></g><path d="M 1788 1187 L 1808 1127 L 1938 1127 L 1918 1187 Z" fill="#f8cecc" stroke="#b85450" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 148px; height: 1px; padding-top: 1157px; margin-left: 1789px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">AXIS (0,0)</div></div></div></foreignObject><text x="1863" y="1161" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">AXIS (0,0)</text></switch></g><path d="M 938 107 L 864.37 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 859.12 107 L 866.12 103.5 L 864.37 107 L 866.12 110.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 938 87.56 Q 973 97.56 1008 87.56 Q 1043 77.56 1078 87.56 L 1078 126.44 Q 1043 116.44 1008 126.44 Q 973 136.44 938 126.44 L 938 87.56 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 107px; margin-left: 939px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">RESET</div></div></div></foreignObject><text x="1008" y="111" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">RESET</text></switch></g><path d="M 658 107 L 731.63 107" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 736.88 107 L 729.88 110.5 L 731.63 107 L 729.88 103.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 518 87.56 Q 553 97.56 588 87.56 Q 623 77.56 658 87.56 L 658 126.44 Q 623 116.44 588 126.44 Q 553 136.44 518 126.44 L 518 87.56 Z" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 107px; margin-left: 519px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">RESET</div></div></div></foreignObject><text x="588" y="111" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">RESET</text></switch></g><path d="M 2848 1927 L 2848 1927 L 3538 1927 L 3538 1927" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2848 1927 L 2848 2247 L 3538 2247 L 3538 1927" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2848 1927 L 3538 1927" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3192.5" y="1921.5">LEGEND</text></g><ellipse cx="2948" cy="1997" rx="60" ry="40" fill="#ffffff" stroke="#000000" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1997px; margin-left: 2889px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">STATE</div></div></div></foreignObject><text x="2948" y="2001" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">STATE</text></switch></g><path d="M 3048 1977.56 Q 3083 1987.56 3118 1977.56 Q 3153 1967.56 3188 1977.56 L 3188 2016.44 Q 3153 2006.44 3118 2016.44 Q 3083 2026.44 3048 2016.44 L 3048 1977.56 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 1997px; margin-left: 3049px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">EVENT</div></div></div></foreignObject><text x="3118" y="2001" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">EVENT</text></switch></g><path d="M 3118 2127 L 3158 2167 L 3118 2207 L 3078 2167 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 2167px; margin-left: 3079px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Conditional</div></div></div></foreignObject><text x="3118" y="2171" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Conditional</text></switch></g><path d="M 2888 2142 L 2988 2142 L 3008 2167 L 2988 2192 L 2888 2192 L 2908 2167 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2167px; margin-left: 2889px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Time event</div></div></div></foreignObject><text x="2948" y="2171" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Time event</text></switch></g><path d="M 3228 2027 L 3248 1967 L 3348 1967 L 3328 2027 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1997px; margin-left: 3229px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">GESTURE</div></div></div></foreignObject><text x="3288" y="2001" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">GESTURE</text></switch></g><path d="M 3258 2147 C 3234 2147 3228 2167 3247.2 2171 C 3228 2179.8 3249.6 2199 3265.2 2191 C 3276 2207 3312 2207 3324 2191 C 3348 2191 3348 2175 3333 2167 C 3348 2151 3324 2135 3303 2143 C 3288 2131 3264 2131 3258 2147 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2167px; margin-left: 3229px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Condition</div></div></div></foreignObject><text x="3288" y="2171" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Condition</text></switch></g><rect x="3388" y="2132" width="120" height="30" fill="#d5e8d4" stroke="#82b366" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2147px; margin-left: 3389px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Hold</div></div></div></foreignObject><text x="3448" y="2151" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Hold</text></switch></g><rect x="3388" y="2172" width="120" height="30" fill="#e1d5e7" stroke="#9673a6" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2187px; margin-left: 3389px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Hold and motion</div></div></div></foreignObject><text x="3448" y="2191" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Hold and motion</text></switch></g><rect x="3388" y="2092" width="120" height="30" fill="#ffe6cc" stroke="#d79b00" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2107px; margin-left: 3389px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Pinch</div></div></div></foreignObject><text x="3448" y="2111" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Pinch</text></switch></g><rect x="3388" y="2052" width="120" height="30" fill="#dae8fc" stroke="#6c8ebf" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2067px; margin-left: 3389px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Swipe</div></div></div></foreignObject><text x="3448" y="2071" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Swipe</text></switch></g><rect x="3388" y="1972" width="120" height="30" fill="#fff2cc" stroke="#d6b656" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1987px; margin-left: 3389px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Pointer motion</div></div></div></foreignObject><text x="3448" y="1991" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Pointer motion</text></switch></g><rect x="3388" y="2012" width="120" height="30" fill="#f8cecc" stroke="#b85450" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2027px; margin-left: 3389px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: normal; word-wrap: normal; ">Scroll</div></div></div></foreignObject><text x="3448" y="2031" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Scroll</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>
\ No newline at end of file
diff -Naur third_party_libinput_bak/doc/touchpad-tap-state-machine.svg third_party_libinput_new/doc/touchpad-tap-state-machine.svg
--- third_party_libinput_bak/doc/touchpad-tap-state-machine.svg	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/touchpad-tap-state-machine.svg	2023-03-29 15:45:19.859322400 +0800
@@ -1,3 +1,3 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
-<svg xmlns="http://www.w3.org/2000/svg" style="background-color: rgb(255, 255, 255);" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2759px" height="3012px" viewBox="-0.5 -0.5 2759 3012" content="&lt;mxfile host=&quot;www.draw.io&quot; modified=&quot;2019-11-21T16:22:38.166Z&quot; agent=&quot;Mozilla/5.0 (X11; Linux x86_64; rv:70.0) Gecko/20100101 Firefox/70.0&quot; version=&quot;12.2.3&quot; etag=&quot;phQCOZoQR5V9DNi46uio&quot; type=&quot;google&quot; pages=&quot;1&quot;&gt;&lt;diagram id=&quot;2a0e2da0-52e7-0364-2376-bf36962f12af&quot; name=&quot;Page-1&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;"><defs/><g><path d="M 1672.9 1346 L 2655.24 882.6" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 2659.99 880.36 L 2655.15 886.51 L 2655.24 882.6 L 2652.16 880.18 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1559.72 331 L 2655.21 832.16" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 2659.98 834.35 L 2652.16 834.62 L 2655.21 832.16 L 2655.07 828.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1166.09 1929.5 L 1162.96 2174.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1162.9 2179.88 L 1159.49 2172.84 L 1162.96 2174.63 L 1166.49 2172.93 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1509" cy="31" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1508" y="34">IDLE</text></g><rect x="1451" y="291" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1515" y="314">TOUCH</text></g><path d="M 1485.04 106 C 1487.84 102.86 1491.82 101.05 1496.02 101 L 1529.99 101 C 1534.19 101.05 1538.17 102.86 1540.97 106 L 1560.95 129 C 1561.51 130.28 1561.51 131.72 1560.95 133 L 1540.97 156 C 1538.17 159.14 1534.19 160.95 1529.99 161 L 1496.02 161 C 1491.82 160.95 1487.84 159.14 1485.04 156 L 1465.06 133 C 1464.5 131.72 1464.5 130.28 1465.06 129 L 1485.04 106 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1512" y="127">first</text><text x="1512" y="141">finger down</text></g><path d="M 1510.2 61 L 1511.55 94.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1511.76 99.88 L 1507.98 93.03 L 1511.55 94.64 L 1514.97 92.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1222.04 306 C 1224.84 302.86 1228.82 301.05 1233.02 301 L 1266.99 301 C 1271.19 301.05 1275.17 302.86 1277.97 306 L 1297.95 329 C 1298.51 330.28 1298.51 331.72 1297.95 333 L 1277.97 356 C 1275.17 359.14 1271.19 360.95 1266.99 361 L 1233.02 361 C 1228.82 360.95 1224.84 359.14 1222.04 356 L 1202.06 333 C 1201.5 331.72 1201.5 330.28 1202.06 329 L 1222.04 306 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1249" y="334">finger up</text></g><path d="M 1451 315.89 L 1304.85 326.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1299.61 327.27 L 1306.33 323.25 L 1304.85 326.88 L 1306.86 330.23 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 973.22 644.1 C 974.36 640.9 976.22 639.04 978.18 639.12 L 1046.64 639.12 C 1048.2 639.08 1049.7 639.63 1050.67 640.61 C 1051.65 641.59 1051.99 642.88 1051.6 644.1 L 1032.75 693.9 C 1031.61 697.1 1029.75 698.96 1027.79 698.88 L 958.34 698.88 C 956.95 698.69 955.73 698.05 954.97 697.1 C 954.22 696.15 954 694.99 954.37 693.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1002" y="665">button 1</text><text x="1002" y="679">press</text></g><path d="M 1569.54 400.5 C 1572.34 397.36 1576.32 395.55 1580.52 395.5 L 1614.49 395.5 C 1618.69 395.55 1622.67 397.36 1625.47 400.5 L 1645.45 423.5 C 1646.01 424.78 1646.01 426.22 1645.45 427.5 L 1625.47 450.5 C 1622.67 453.64 1618.69 455.45 1614.49 455.5 L 1580.52 455.5 C 1576.32 455.45 1572.34 453.64 1569.54 450.5 L 1549.56 427.5 C 1549 426.22 1549 424.78 1549.56 423.5 L 1569.54 400.5 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1596.5" y="428.5">timeout</text></g><path d="M 1530.24 331 L 1572.45 390.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1575.5 394.59 L 1568.59 390.92 L 1572.45 390.31 L 1574.29 386.86 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2093.54 486 C 2096.34 482.86 2100.32 481.05 2104.52 481 L 2138.49 481 C 2142.69 481.05 2146.67 482.86 2149.47 486 L 2169.45 509 C 2170.01 510.28 2170.01 511.72 2169.45 513 L 2149.47 536 C 2146.67 539.14 2142.69 540.95 2138.49 541 L 2104.52 541 C 2100.32 540.95 2096.34 539.14 2093.54 536 L 2073.56 513 C 2073 511.72 2073 510.28 2073.56 509 L 2093.54 486 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2120.5" y="507">move &gt; </text><text x="2120.5" y="521">threshold</text></g><path d="M 1576.55 331 L 2066.95 492.98" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2071.94 494.63 L 2064.19 495.76 L 2066.95 492.98 L 2066.39 489.11 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1392.54 406 C 1395.34 402.86 1399.32 401.05 1403.52 401 L 1437.49 401 C 1441.69 401.05 1445.67 402.86 1448.47 406 L 1468.45 429 C 1469.01 430.28 1469.01 431.72 1468.45 433 L 1448.47 456 C 1445.67 459.14 1441.69 460.95 1437.49 461 L 1403.52 461 C 1399.32 460.95 1395.34 459.14 1392.54 456 L 1372.56 433 C 1372 431.72 1372 430.28 1372.56 429 L 1392.54 406 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1419.5" y="427">second</text><text x="1419.5" y="441">finger down</text></g><path d="M 1500.08 331 L 1448.34 396.02" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1445.07 400.13 L 1446.69 392.47 L 1448.34 396.02 L 1452.17 396.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1610" y="809" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1674" y="832">TOUCH_2</text></g><path d="M 1456.04 917 C 1458.84 913.86 1462.82 912.05 1467.02 912 L 1500.99 912 C 1505.19 912.05 1509.17 913.86 1511.97 917 L 1531.95 940 C 1532.51 941.28 1532.51 942.72 1531.95 944 L 1511.97 967 C 1509.17 970.14 1505.19 971.95 1500.99 972 L 1467.02 972 C 1462.82 971.95 1458.84 970.14 1456.04 967 L 1436.06 944 C 1435.5 942.72 1435.5 941.28 1436.06 940 L 1456.04 917 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1483" y="938">second</text><text x="1483" y="952">finger up</text></g><path d="M 1641.19 849 L 1537.98 910.06" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1533.46 912.74 L 1537.7 906.16 L 1537.98 910.06 L 1541.27 912.19 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1011.22 366.1 C 1012.36 362.9 1014.22 361.04 1016.18 361.12 L 1084.64 361.12 C 1086.2 361.08 1087.7 361.63 1088.67 362.61 C 1089.65 363.59 1089.99 364.88 1089.6 366.1 L 1070.75 415.9 C 1069.61 419.1 1067.75 420.96 1065.79 420.88 L 996.34 420.88 C 994.95 420.69 993.73 420.05 992.97 419.1 C 992.22 418.15 992 416.99 992.37 415.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1040" y="387">button 2</text><text x="1040" y="401">press</text></g><path d="M 1838 912 L 2461 912 L 2461 1837.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2461 1842.88 L 2457.5 1835.88 L 2461 1837.63 L 2464.5 1835.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1761.04 887 C 1763.84 883.86 1767.82 882.05 1772.02 882 L 1805.99 882 C 1810.19 882.05 1814.17 883.86 1816.97 887 L 1836.95 910 C 1837.51 911.28 1837.51 912.72 1836.95 914 L 1816.97 937 C 1814.17 940.14 1810.19 941.95 1805.99 942 L 1772.02 942 C 1767.82 941.95 1763.84 940.14 1761.04 937 L 1741.06 914 C 1740.5 912.72 1740.5 911.28 1741.06 910 L 1761.04 887 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1788" y="908">move &gt; </text><text x="1788" y="922">threshold</text></g><path d="M 1739.54 976 C 1742.34 972.86 1746.32 971.05 1750.52 971 L 1784.49 971 C 1788.69 971.05 1792.67 972.86 1795.47 976 L 1815.45 999 C 1816.01 1000.28 1816.01 1001.72 1815.45 1003 L 1795.47 1026 C 1792.67 1029.14 1788.69 1030.95 1784.49 1031 L 1750.52 1031 C 1746.32 1030.95 1742.34 1029.14 1739.54 1026 L 1719.56 1003 C 1719 1001.72 1719 1000.28 1719.56 999 L 1739.54 976 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1766.5" y="1004">timeout</text></g><path d="M 1685.76 849 L 1748.35 965.39" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1750.84 970.02 L 1744.44 965.51 L 1748.35 965.39 L 1750.6 962.19 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1702.47 849 L 1742.65 878.25" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1746.89 881.34 L 1739.17 880.05 L 1742.65 878.25 L 1743.29 874.39 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1194.72 1141.1 C 1195.86 1137.9 1197.72 1136.04 1199.68 1136.12 L 1268.14 1136.12 C 1269.7 1136.08 1271.2 1136.63 1272.17 1137.61 C 1273.15 1138.59 1273.49 1139.88 1273.1 1141.1 L 1254.25 1190.9 C 1253.11 1194.1 1251.25 1195.96 1249.29 1195.88 L 1179.84 1195.88 C 1178.45 1195.69 1177.23 1195.05 1176.47 1194.1 C 1175.72 1193.15 1175.5 1191.99 1175.87 1190.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1223.5" y="1162">button 1</text><text x="1223.5" y="1176">release</text></g><path d="M 1146.72 236.1 C 1147.86 232.9 1149.72 231.04 1151.68 231.12 L 1220.14 231.12 C 1221.7 231.08 1223.2 231.63 1224.17 232.61 C 1225.15 233.59 1225.49 234.88 1225.1 236.1 L 1206.25 285.9 C 1205.11 289.1 1203.25 290.96 1201.29 290.88 L 1131.84 290.88 C 1130.45 290.69 1129.23 290.05 1128.47 289.1 C 1127.72 288.15 1127.5 286.99 1127.87 285.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1175.5" y="257">button 2</text><text x="1175.5" y="271">release</text></g><path d="M 1404.58 746.5 L 1351.42 690.61" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1347.8 686.81 L 1355.16 689.47 L 1351.42 690.61 L 1350.09 694.29 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1072.27 361 L 1140.64 295.41" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1144.42 291.77 L 1141.8 299.15 L 1140.64 295.41 L 1136.95 294.09 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="946" y="894" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1010" y="917">TAPPED</text></g><path d="M 1195.04 997 C 1197.84 993.86 1201.82 992.05 1206.02 992 L 1239.99 992 C 1244.19 992.05 1248.17 993.86 1250.97 997 L 1270.95 1020 C 1271.51 1021.28 1271.51 1022.72 1270.95 1024 L 1250.97 1047 C 1248.17 1050.14 1244.19 1051.95 1239.99 1052 L 1206.02 1052 C 1201.82 1051.95 1197.84 1050.14 1195.04 1047 L 1175.06 1024 C 1174.5 1022.72 1174.5 1021.28 1175.06 1020 L 1195.04 997 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1222" y="1025">timeout</text></g><path d="M 1050.26 934 L 1168.83 994.4" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1173.5 996.78 L 1165.68 996.73 L 1168.83 994.4 L 1168.86 990.49 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1012.54 967 C 1015.34 963.86 1019.32 962.05 1023.52 962 L 1057.49 962 C 1061.69 962.05 1065.67 963.86 1068.47 967 L 1088.45 990 C 1089.01 991.28 1089.01 992.72 1088.45 994 L 1068.47 1017 C 1065.67 1020.14 1061.69 1021.95 1057.49 1022 L 1023.52 1022 C 1019.32 1021.95 1015.34 1020.14 1012.54 1017 L 992.56 994 C 992 992.72 992 991.28 992.56 990 L 1012.54 967 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1039.5" y="988">first</text><text x="1039.5" y="1002">finger down</text></g><path d="M 1018.56 934 L 1026.9 956.04" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1028.76 960.95 L 1023.01 955.65 L 1026.9 956.04 L 1029.56 953.17 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="609" y="1486" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="673" y="1509">DRAGGING</text></g><path d="M 554.04 1631 C 556.84 1627.86 560.82 1626.05 565.02 1626 L 598.99 1626 C 603.19 1626.05 607.17 1627.86 609.97 1631 L 629.95 1654 C 630.51 1655.28 630.51 1656.72 629.95 1658 L 609.97 1681 C 607.17 1684.14 603.19 1685.95 598.99 1686 L 565.02 1686 C 560.82 1685.95 556.84 1684.14 554.04 1681 L 534.06 1658 C 533.5 1656.72 533.5 1655.28 534.06 1654 L 554.04 1631 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="581" y="1652">first</text><text x="581" y="1666">finger up</text></g><path d="M 621.22 2133.1 C 622.36 2129.9 624.22 2128.04 626.18 2128.12 L 694.64 2128.12 C 696.2 2128.08 697.7 2128.63 698.67 2129.61 C 699.65 2130.59 699.99 2131.88 699.6 2133.1 L 680.75 2182.9 C 679.61 2186.1 677.75 2187.96 675.79 2187.88 L 606.34 2187.88 C 604.95 2187.69 603.73 2187.05 602.97 2186.1 C 602.22 2185.15 602 2183.99 602.37 2182.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="650" y="2154">btn1</text><text x="650" y="2168">release</text></g><path d="M 661.73 1526 L 603.73 1620.57" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 600.98 1625.05 L 601.66 1617.25 L 603.73 1620.57 L 607.63 1620.91 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1006.2 699 L 1010.32 737.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1010.88 742.89 L 1006.66 736.3 L 1010.32 737.67 L 1013.62 735.56 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1223.31 1052 L 1224.12 1129.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1224.18 1134.88 L 1220.6 1127.92 L 1224.12 1129.63 L 1227.6 1127.85 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="2120.5" cy="809" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2119.5" y="812">IDLE</text></g><path d="M 1639.54 997 C 1642.34 993.86 1646.32 992.05 1650.52 992 L 1684.49 992 C 1688.69 992.05 1692.67 993.86 1695.47 997 L 1715.45 1020 C 1716.01 1021.28 1716.01 1022.72 1715.45 1024 L 1695.47 1047 C 1692.67 1050.14 1688.69 1051.95 1684.49 1052 L 1650.52 1052 C 1646.32 1051.95 1642.34 1050.14 1639.54 1047 L 1619.56 1024 C 1619 1022.72 1619 1021.28 1619.56 1020 L 1639.54 997 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1666.5" y="1018">third</text><text x="1666.5" y="1032">finger down</text></g><path d="M 1674.22 849 L 1668.91 985.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1668.71 990.88 L 1665.48 983.75 L 1668.91 985.64 L 1672.48 984.02 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1565.5" y="1346" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1629.5" y="1369">TOUCH_3</text></g><path d="M 1638.33 1248.5 L 1632.26 1339.65" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1631.91 1344.88 L 1628.88 1337.67 L 1632.26 1339.65 L 1635.87 1338.13 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1486.22 1852.1 C 1487.36 1848.9 1489.22 1847.04 1491.18 1847.12 L 1559.64 1847.12 C 1561.2 1847.08 1562.7 1847.63 1563.67 1848.61 C 1564.65 1849.59 1564.99 1850.88 1564.6 1852.1 L 1545.75 1901.9 C 1544.61 1905.1 1542.75 1906.96 1540.79 1906.88 L 1471.34 1906.88 C 1469.95 1906.69 1468.73 1906.05 1467.97 1905.1 C 1467.22 1904.15 1467 1902.99 1467.37 1901.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1515" y="1873">button 3</text><text x="1515" y="1887">press</text></g><path d="M 1486.22 1949.1 C 1487.36 1945.9 1489.22 1944.04 1491.18 1944.12 L 1559.64 1944.12 C 1561.2 1944.08 1562.7 1944.63 1563.67 1945.61 C 1564.65 1946.59 1564.99 1947.88 1564.6 1949.1 L 1545.75 1998.9 C 1544.61 2002.1 1542.75 2003.96 1540.79 2003.88 L 1471.34 2003.88 C 1469.95 2003.69 1468.73 2003.05 1467.97 2002.1 C 1467.22 2001.15 1467 1999.99 1467.37 1998.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1515" y="1970">button 3</text><text x="1515" y="1984">release</text></g><path d="M 1516 1907 L 1516 1937.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1516 1942.88 L 1512.5 1935.88 L 1516 1937.63 L 1519.5 1935.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1852.04 1539 C 1854.84 1535.86 1858.82 1534.05 1863.02 1534 L 1896.99 1534 C 1901.19 1534.05 1905.17 1535.86 1907.97 1539 L 1927.95 1562 C 1928.51 1563.28 1928.51 1564.72 1927.95 1566 L 1907.97 1589 C 1905.17 1592.14 1901.19 1593.95 1896.99 1594 L 1863.02 1594 C 1858.82 1593.95 1854.84 1592.14 1852.04 1589 L 1832.06 1566 C 1831.5 1564.72 1831.5 1563.28 1832.06 1562 L 1852.04 1539 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1879" y="1560">move &gt; </text><text x="1879" y="1574">threshold</text></g><path d="M 1655.7 1386 L 1837.21 1530.04" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1841.32 1533.31 L 1833.66 1531.7 L 1837.21 1530.04 L 1838.01 1526.21 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="536.5" cy="2223" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="535.5" y="2226">IDLE</text></g><path d="M 1709.54 1535 C 1712.34 1531.86 1716.32 1530.05 1720.52 1530 L 1754.49 1530 C 1758.69 1530.05 1762.67 1531.86 1765.47 1535 L 1785.45 1558 C 1786.01 1559.28 1786.01 1560.72 1785.45 1562 L 1765.47 1585 C 1762.67 1588.14 1758.69 1589.95 1754.49 1590 L 1720.52 1590 C 1716.32 1589.95 1712.34 1588.14 1709.54 1585 L 1689.56 1562 C 1689 1560.72 1689 1559.28 1689.56 1558 L 1709.54 1535 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1736.5" y="1563">timeout</text></g><path d="M 1641.53 1386 L 1717.88 1524.42" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1720.41 1529.02 L 1713.97 1524.58 L 1717.88 1524.42 L 1720.1 1521.2 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1200.54 887 C 1203.34 883.86 1207.32 882.05 1211.52 882 L 1245.49 882 C 1249.69 882.05 1253.67 883.86 1256.47 887 L 1276.45 910 C 1277.01 911.28 1277.01 912.72 1276.45 914 L 1256.47 937 C 1253.67 940.14 1249.69 941.95 1245.49 942 L 1211.52 942 C 1207.32 941.95 1203.34 940.14 1200.54 937 L 1180.56 914 C 1180 912.72 1180 911.28 1180.56 910 L 1200.54 887 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1227.5" y="908">first</text><text x="1227.5" y="922">finger up</text></g><path d="M 1610 841.08 L 1283.26 901.82" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1278.1 902.78 L 1284.34 898.06 L 1283.26 901.82 L 1285.62 904.94 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1224" cy="1291" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1223" y="1294">IDLE</text></g><path d="M 1402.04 1531 C 1404.84 1527.86 1408.82 1526.05 1413.02 1526 L 1446.99 1526 C 1451.19 1526.05 1455.17 1527.86 1457.97 1531 L 1477.95 1554 C 1478.51 1555.28 1478.51 1556.72 1477.95 1558 L 1457.97 1581 C 1455.17 1584.14 1451.19 1585.95 1446.99 1586 L 1413.02 1586 C 1408.82 1585.95 1404.84 1584.14 1402.04 1581 L 1382.06 1558 C 1381.5 1556.72 1381.5 1555.28 1382.06 1554 L 1402.04 1531 Z" fill="#ffffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1429" y="1552">fourth</text><text x="1429" y="1566">finger down</text></g><path d="M 1609.39 1386 L 1466.28 1521.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1462.47 1525.23 L 1465.14 1517.88 L 1466.28 1521.62 L 1469.96 1522.96 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1224.38 1196 L 1224.15 1254.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1224.12 1259.88 L 1220.65 1252.87 L 1224.15 1254.63 L 1227.65 1252.9 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="849.5" y="1166" width="209" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="953" y="1189">DRAGGING_OR_DOUBLETAP</text></g><path d="M 1021.48 1117.5 L 978.17 1161.46" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 974.49 1165.2 L 976.91 1157.76 L 978.17 1161.46 L 981.89 1162.67 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 726.54 1251 C 729.34 1247.86 733.32 1246.05 737.52 1246 L 771.49 1246 C 775.69 1246.05 779.67 1247.86 782.47 1251 L 802.45 1274 C 803.01 1275.28 803.01 1276.72 802.45 1278 L 782.47 1301 C 779.67 1304.14 775.69 1305.95 771.49 1306 L 737.52 1306 C 733.32 1305.95 729.34 1304.14 726.54 1301 L 706.56 1278 C 706 1276.72 706 1275.28 706.56 1274 L 726.54 1251 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="753.5" y="1279">timeout</text></g><path d="M 909.67 1206 L 808.8 1251.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 804.02 1253.66 L 808.96 1247.59 L 808.8 1251.5 L 811.84 1253.97 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 663.04 931 C 665.84 927.86 669.82 926.05 674.02 926 L 707.99 926 C 712.19 926.05 716.17 927.86 718.97 931 L 738.95 954 C 739.51 955.28 739.51 956.72 738.95 958 L 718.97 981 C 716.17 984.14 712.19 985.95 707.99 986 L 674.02 986 C 669.82 985.95 665.84 984.14 663.04 981 L 643.06 958 C 642.5 956.72 642.5 955.28 643.06 954 L 663.04 931 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="690" y="952">first</text><text x="690" y="966">finger up</text></g><path d="M 931.13 1166 L 730.1 990.19" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 726.15 986.74 L 733.72 988.71 L 730.1 990.19 L 729.11 993.98 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 661.72 749.1 C 662.86 745.9 664.72 744.04 666.68 744.12 L 735.14 744.12 C 736.7 744.08 738.2 744.63 739.17 745.61 C 740.15 746.59 740.49 747.88 740.1 749.1 L 721.25 798.9 C 720.11 802.1 718.25 803.96 716.29 803.88 L 646.84 803.88 C 645.45 803.69 644.23 803.05 643.47 802.1 C 642.72 801.15 642.5 799.99 642.87 798.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="690.5" y="770">button 1</text><text x="690.5" y="784">release</text></g><path d="M 881.54 1251 C 884.34 1247.86 888.32 1246.05 892.52 1246 L 926.49 1246 C 930.69 1246.05 934.67 1247.86 937.47 1251 L 957.45 1274 C 958.01 1275.28 958.01 1276.72 957.45 1278 L 937.47 1301 C 934.67 1304.14 930.69 1305.95 926.49 1306 L 892.52 1306 C 888.32 1305.95 884.34 1304.14 881.54 1301 L 861.56 1278 C 861 1276.72 861 1275.28 861.56 1274 L 881.54 1251 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="908.5" y="1272">second</text><text x="908.5" y="1286">finger down</text></g><path d="M 944.11 1206 L 927.16 1240.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 924.83 1245 L 924.79 1237.17 L 927.16 1240.29 L 931.07 1240.27 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 425.54 1281 C 428.34 1277.86 432.32 1276.05 436.52 1276 L 470.49 1276 C 474.69 1276.05 478.67 1277.86 481.47 1281 L 501.45 1304 C 502.01 1305.28 502.01 1306.72 501.45 1308 L 481.47 1331 C 478.67 1334.14 474.69 1335.95 470.49 1336 L 436.52 1336 C 432.32 1335.95 428.34 1334.14 425.54 1331 L 405.56 1308 C 405 1306.72 405 1305.28 405.56 1304 L 425.54 1281 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="452.5" y="1302">move &gt; </text><text x="452.5" y="1316">threshold</text></g><path d="M 870.58 1206 L 508.19 1292.89" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 503.09 1294.11 L 509.08 1289.08 L 508.19 1292.89 L 510.71 1295.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 704.98 1431.5 L 684.76 1480.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 682.75 1484.97 L 682.2 1477.16 L 684.76 1480.12 L 688.67 1479.85 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1878 550.47 L 2066.71 519.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2071.9 519.04 L 2065.55 523.61 L 2066.71 519.88 L 2064.43 516.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1748" y="541" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1812" y="564">HOLD</text></g><path d="M 1865.04 671 C 1867.84 667.86 1871.82 666.05 1876.02 666 L 1909.99 666 C 1914.19 666.05 1918.17 667.86 1920.97 671 L 1940.95 694 C 1941.51 695.28 1941.51 696.72 1940.95 698 L 1920.97 721 C 1918.17 724.14 1914.19 725.95 1909.99 726 L 1876.02 726 C 1871.82 725.95 1867.84 724.14 1865.04 721 L 1845.06 698 C 1844.5 696.72 1844.5 695.28 1845.06 694 L 1865.04 671 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1892" y="692">first</text><text x="1892" y="706">finger up</text></g><path d="M 1824.85 581 L 1871.98 660.52" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1874.65 665.04 L 1868.07 660.8 L 1871.98 660.52 L 1874.09 657.23 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2043.5 793.84 L 2064.75 798.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2069.9 799.04 L 2062.36 801.12 L 2064.75 798.03 L 2063.71 794.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1703.54 626 C 1706.34 622.86 1710.32 621.05 1714.52 621 L 1748.49 621 C 1752.69 621.05 1756.67 622.86 1759.47 626 L 1779.45 649 C 1780.01 650.28 1780.01 651.72 1779.45 653 L 1759.47 676 C 1756.67 679.14 1752.69 680.95 1748.49 681 L 1714.52 681 C 1710.32 680.95 1706.34 679.14 1703.54 676 L 1683.56 653 C 1683 651.72 1683 650.28 1683.56 649 L 1703.54 626 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1730.5" y="647">second</text><text x="1730.5" y="661">finger down</text></g><path d="M 1794.89 581 L 1762.94 616.28" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1759.42 620.17 L 1761.52 612.63 L 1762.94 616.28 L 1766.71 617.33 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1688.74 771.5 L 1681.26 802.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1680.04 807.91 L 1678.26 800.29 L 1681.26 802.81 L 1685.07 801.92 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2101.06 1155 L 2301.73 1227.54" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2306.67 1229.32 L 2298.9 1230.23 L 2301.73 1227.54 L 2301.28 1223.65 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1992.25" y="1116" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2056.25" y="1139">TOUCH_2_HOLD</text></g><path d="M 2078.29 1233.5 C 2081.09 1230.36 2085.07 1228.55 2089.27 1228.5 L 2123.24 1228.5 C 2127.44 1228.55 2131.42 1230.36 2134.22 1233.5 L 2154.2 1256.5 C 2154.76 1257.78 2154.76 1259.22 2154.2 1260.5 L 2134.22 1283.5 C 2131.42 1286.64 2127.44 1288.45 2123.24 1288.5 L 2089.27 1288.5 C 2085.07 1288.45 2081.09 1286.64 2078.29 1283.5 L 2058.31 1260.5 C 2057.75 1259.22 2057.75 1257.78 2058.31 1256.5 L 2078.29 1233.5 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2105.25" y="1254.5">second</text><text x="2105.25" y="1268.5">finger up</text></g><path d="M 2065.25 1156 L 2091.88 1222.59" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2093.83 1227.46 L 2087.99 1222.26 L 2091.88 1222.59 L 2094.48 1219.66 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1867.29 1226 C 1870.09 1222.86 1874.07 1221.05 1878.27 1221 L 1912.24 1221 C 1916.44 1221.05 1920.42 1222.86 1923.22 1226 L 1943.2 1249 C 1943.76 1250.28 1943.76 1251.72 1943.2 1253 L 1923.22 1276 C 1920.42 1279.14 1916.44 1280.95 1912.24 1281 L 1878.27 1281 C 1874.07 1280.95 1870.09 1279.14 1867.29 1276 L 1847.31 1253 C 1846.75 1251.72 1846.75 1250.28 1847.31 1249 L 1867.29 1226 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1894.25" y="1247">first</text><text x="1894.25" y="1261">finger up</text></g><path d="M 2029.08 1156 L 1942.7 1217.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1938.42 1220.35 L 1942.1 1213.45 L 1942.7 1217.31 L 1946.16 1219.15 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2181 957 L 2181 571 Q 2181 561 2171 561 L 1884.37 561" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1879.12 561 L 1886.12 557.5 L 1884.37 561 L 1886.12 564.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1978.29 1228.5 C 1981.09 1225.36 1985.07 1223.55 1989.27 1223.5 L 2023.24 1223.5 C 2027.44 1223.55 2031.42 1225.36 2034.22 1228.5 L 2054.2 1251.5 C 2054.76 1252.78 2054.76 1254.22 2054.2 1255.5 L 2034.22 1278.5 C 2031.42 1281.64 2027.44 1283.45 2023.24 1283.5 L 1989.27 1283.5 C 1985.07 1283.45 1981.09 1281.64 1978.29 1278.5 L 1958.31 1255.5 C 1957.75 1254.22 1957.75 1252.78 1958.31 1251.5 L 1978.29 1228.5 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2005.25" y="1249.5">third</text><text x="2005.25" y="1263.5">finger down</text></g><path d="M 2048.57 1156 L 2021.81 1217.66" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2019.72 1222.47 L 2019.29 1214.66 L 2021.81 1217.66 L 2025.71 1217.45 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1765.5 1351.41 L 1701.83 1358.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1696.61 1358.85 L 1703.19 1354.62 L 1701.83 1358.29 L 1703.95 1361.58 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1766.5 1983 L 2261 1983 Q 2271 1983 2271 1973 L 2271 1146 Q 2271 1136 2261 1136 L 2128.62 1136" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2123.37 1136 L 2130.37 1132.5 L 2128.62 1136 L 2130.37 1139.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1796 2263 L 1953.93 2112.39" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1957.73 2108.77 L 1955.08 2116.14 L 1953.93 2112.39 L 1950.25 2111.07 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1731" y="2223" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1795" y="2246">TOUCH_3_HOLD</text></g><path d="M 1788.11 1822.5 L 1795.51 2216.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1795.6 2221.88 L 1791.97 2214.95 L 1795.51 2216.63 L 1798.97 2214.82 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1492.04 2361 C 1494.84 2357.86 1498.82 2356.05 1503.02 2356 L 1536.99 2356 C 1541.19 2356.05 1545.17 2357.86 1547.97 2361 L 1567.95 2384 C 1568.51 2385.28 1568.51 2386.72 1567.95 2388 L 1547.97 2411 C 1545.17 2414.14 1541.19 2415.95 1536.99 2416 L 1503.02 2416 C 1498.82 2415.95 1494.84 2414.14 1492.04 2411 L 1472.06 2388 C 1471.5 2386.72 1471.5 2385.28 1472.06 2384 L 1492.04 2361 Z" fill="#ffffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1519" y="2382">fourth</text><text x="1519" y="2396">finger down</text></g><rect x="1251" y="2481" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1315" y="2504">DEAD</text></g><path d="M 1757.4 2263 L 1574.15 2357.94" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1569.49 2360.36 L 1574.1 2354.03 L 1574.15 2357.94 L 1577.32 2360.24 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1471.5 2413.34 L 1357.03 2477.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1352.45 2480.45 L 1356.83 2473.96 L 1357.03 2477.87 L 1360.27 2480.06 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1426.38 1586 L 1319.18 2474.68" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1318.55 2479.89 L 1315.91 2472.52 L 1319.18 2474.68 L 1322.86 2473.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1232.04 2576 C 1234.84 2572.86 1238.82 2571.05 1243.02 2571 L 1276.99 2571 C 1281.19 2571.05 1285.17 2572.86 1287.97 2576 L 1307.95 2599 C 1308.51 2600.28 1308.51 2601.72 1307.95 2603 L 1287.97 2626 C 1285.17 2629.14 1281.19 2630.95 1276.99 2631 L 1243.02 2631 C 1238.82 2630.95 1234.84 2629.14 1232.04 2626 L 1212.06 2603 C 1211.5 2601.72 1211.5 2600.28 1212.06 2599 L 1232.04 2576 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1259" y="2604">any finger up</text></g><path d="M 1374.54 2605 C 1377.34 2601.86 1381.32 2600.05 1385.52 2600 L 1419.49 2600 C 1423.69 2600.05 1427.67 2601.86 1430.47 2605 L 1450.45 2628 C 1451.01 2629.28 1451.01 2630.72 1450.45 2632 L 1430.47 2655 C 1427.67 2658.14 1423.69 2659.95 1419.49 2660 L 1385.52 2660 C 1381.32 2659.95 1377.34 2658.14 1374.54 2655 L 1354.56 2632 C 1354 2630.72 1354 2629.28 1354.56 2628 L 1374.54 2605 Z" fill="#ffffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1401.5" y="2626">fourth</text><text x="1401.5" y="2640">finger up</text></g><path d="M 1554.54 1536 C 1557.34 1532.86 1561.32 1531.05 1565.52 1531 L 1599.49 1531 C 1603.69 1531.05 1607.67 1532.86 1610.47 1536 L 1630.45 1559 C 1631.01 1560.28 1631.01 1561.72 1630.45 1563 L 1610.47 1586 C 1607.67 1589.14 1603.69 1590.95 1599.49 1591 L 1565.52 1591 C 1561.32 1590.95 1557.34 1589.14 1554.54 1586 L 1534.56 1563 C 1534 1561.72 1534 1560.28 1534.56 1559 L 1554.54 1536 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1581.5" y="1564">any finger up</text></g><path d="M 1625.58 1386 L 1591.41 1524.82" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1590.15 1529.91 L 1588.43 1522.28 L 1591.41 1524.82 L 1595.22 1523.95 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1563.82 1749 L 1529.44 1841.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1527.6 1845.95 L 1526.77 1838.17 L 1529.44 1841.03 L 1533.33 1840.62 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><rect fill="#ffffff" stroke="none" x="1537" y="1785" width="19" height="27" stroke-width="0"/><text x="1545.12" y="1807.21">yes</text></g><path d="M 1788.04 2331 C 1790.84 2327.86 1794.82 2326.05 1799.02 2326 L 1832.99 2326 C 1837.19 2326.05 1841.17 2327.86 1843.97 2331 L 1863.95 2354 C 1864.51 2355.28 1864.51 2356.72 1863.95 2358 L 1843.97 2381 C 1841.17 2384.14 1837.19 2385.95 1832.99 2386 L 1799.02 2386 C 1794.82 2385.95 1790.84 2384.14 1788.04 2381 L 1768.06 2358 C 1767.5 2356.72 1767.5 2355.28 1768.06 2354 L 1788.04 2331 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1815" y="2359">any finger up</text></g><path d="M 1799.54 2263 L 1809.58 2319.73" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1810.5 2324.9 L 1805.83 2318.62 L 1809.58 2319.73 L 1812.72 2317.4 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2154.5 2351 L 2261 2351 Q 2271 2351 2271 2341 L 2271 1146 Q 2271 1136 2261 1136 L 2128.62 1136" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2123.37 1136 L 2130.37 1132.5 L 2128.62 1136 L 2130.37 1139.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1304.8 2521 L 1279.91 2565.44" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1277.35 2570.02 L 1277.71 2562.21 L 1279.91 2565.44 L 1283.82 2565.63 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1329.41 2521 L 1378.84 2594.71" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1381.76 2599.07 L 1374.96 2595.21 L 1378.84 2594.71 L 1380.77 2591.31 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1323" cy="2981" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1322" y="2984">IDLE</text></g><path d="M 1318.4 2821 L 1370 2866 L 1318.4 2911 L 1266.8 2866 Z" fill="#ffffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1317.4" y="2862">if finger</text><text x="1317.4" y="2876">count == 0</text></g><path d="M 1276.19 2724.5 L 1303.16 2814.9" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1304.66 2819.93 L 1299.3 2814.22 L 1303.16 2814.9 L 1306.01 2812.22 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1391.81 2660 L 1336.57 2815" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1334.81 2819.95 L 1333.86 2812.18 L 1336.57 2815 L 1340.46 2814.53 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1320.2 2911 L 1321.55 2944.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1321.76 2949.88 L 1317.98 2943.03 L 1321.55 2944.64 L 1324.97 2942.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1069.54 1719 C 1072.34 1715.86 1076.32 1714.05 1080.52 1714 L 1114.49 1714 C 1118.69 1714.05 1122.67 1715.86 1125.47 1719 L 1145.45 1742 C 1146.01 1743.28 1146.01 1744.72 1145.45 1746 L 1125.47 1769 C 1122.67 1772.14 1118.69 1773.95 1114.49 1774 L 1080.52 1774 C 1076.32 1773.95 1072.34 1772.14 1069.54 1769 L 1049.56 1746 C 1049 1744.72 1049 1743.28 1049.56 1742 L 1069.54 1719 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1096.5" y="1740">second</text><text x="1096.5" y="1754">finger up</text></g><rect x="796" y="1486" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="860" y="1509">DRAGGING_2</text></g><path d="M 875.27 1431.5 L 866.03 1479.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 865.04 1484.9 L 862.92 1477.37 L 866.03 1479.75 L 869.8 1478.69 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 880.87 1526 L 1063.2 1709.48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1066.9 1713.21 L 1059.48 1710.71 L 1063.2 1709.48 L 1064.45 1705.77 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 946.54 1756 C 949.34 1752.86 953.32 1751.05 957.52 1751 L 991.49 1751 C 995.69 1751.05 999.67 1752.86 1002.47 1756 L 1022.45 1779 C 1023.01 1780.28 1023.01 1781.72 1022.45 1783 L 1002.47 1806 C 999.67 1809.14 995.69 1810.95 991.49 1811 L 957.52 1811 C 953.32 1810.95 949.34 1809.14 946.54 1806 L 926.56 1783 C 926 1781.72 926 1780.28 926.56 1779 L 946.54 1756 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="973.5" y="1777">first</text><text x="973.5" y="1791">finger up</text></g><path d="M 869.25 1526 L 959.69 1745.11" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 961.69 1749.97 L 955.79 1744.83 L 959.69 1745.11 L 962.26 1742.16 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 825.25 1649.5 L 699.7 1530.38" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 695.89 1526.77 L 703.38 1529.05 L 699.7 1530.38 L 698.56 1534.13 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 912.69 1918.5 L 688.76 1531.51" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 686.13 1526.97 L 692.67 1531.27 L 688.76 1531.51 L 686.61 1534.78 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 572.54 1858 C 575.34 1854.86 579.32 1853.05 583.52 1853 L 617.49 1853 C 621.69 1853.05 625.67 1854.86 628.47 1858 L 648.45 1881 C 649.01 1882.28 649.01 1883.72 648.45 1885 L 628.47 1908 C 625.67 1911.14 621.69 1912.95 617.49 1913 L 583.52 1913 C 579.32 1912.95 575.34 1911.14 572.54 1908 L 552.56 1885 C 552 1883.72 552 1882.28 552.56 1881 L 572.54 1858 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="599.5" y="1879">second</text><text x="599.5" y="1893">finger down</text></g><path d="M 670.1 1526 L 607.57 1846.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 606.56 1851.9 L 604.47 1844.36 L 607.57 1846.75 L 611.34 1845.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 737.56 1716.5 L 846.05 1531.49" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 848.71 1526.96 L 848.18 1534.77 L 846.05 1531.49 L 842.15 1531.23 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 602 2185.82 L 591.54 2191.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 586.97 2194.35 L 591.33 2187.85 L 591.54 2191.76 L 594.79 2193.94 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1116.54 1599 C 1119.34 1595.86 1123.32 1594.05 1127.52 1594 L 1161.49 1594 C 1165.69 1594.05 1169.67 1595.86 1172.47 1599 L 1192.45 1622 C 1193.01 1623.28 1193.01 1624.72 1192.45 1626 L 1172.47 1649 C 1169.67 1652.14 1165.69 1653.95 1161.49 1654 L 1127.52 1654 C 1123.32 1653.95 1119.34 1652.14 1116.54 1649 L 1096.56 1626 C 1096 1624.72 1096 1623.28 1096.56 1622 L 1116.54 1599 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1143.5" y="1620">third</text><text x="1143.5" y="1634">finger down</text></g><path d="M 909.05 1526 L 1090.12 1601.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1094.97 1603.38 L 1087.16 1603.92 L 1090.12 1601.37 L 1089.85 1597.46 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1132.72 2186.1 C 1133.86 2182.9 1135.72 2181.04 1137.68 2181.12 L 1206.14 2181.12 C 1207.7 2181.08 1209.2 2181.63 1210.17 2182.61 C 1211.15 2183.59 1211.49 2184.88 1211.1 2186.1 L 1192.25 2235.9 C 1191.11 2239.1 1189.25 2240.96 1187.29 2240.88 L 1117.84 2240.88 C 1116.45 2240.69 1115.23 2240.05 1114.47 2239.1 C 1113.72 2238.15 1113.5 2236.99 1113.87 2235.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1161.5" y="2207">btn1</text><text x="1161.5" y="2221">release</text></g><path d="M 1178.38 2241 L 1302.43 2475.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1304.89 2480.01 L 1298.52 2475.46 L 1302.43 2475.37 L 1304.71 2472.19 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2681.54 832 C 2684.34 828.86 2688.32 827.05 2692.52 827 L 2726.49 827 C 2730.69 827.05 2734.67 828.86 2737.47 832 L 2757.45 855 C 2758.01 856.28 2758.01 857.72 2757.45 859 L 2737.47 882 C 2734.67 885.14 2730.69 886.95 2726.49 887 L 2692.52 887 C 2688.32 886.95 2684.34 885.14 2681.54 882 L 2661.56 859 C 2661 857.72 2661 856.28 2661.56 855 L 2681.54 832 Z" fill="#000000" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#FFFFFF" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2708.5" y="846">phys</text><text x="2708.5" y="860">button</text><text x="2708.5" y="874">press</text></g><path d="M 1873.57 581 L 2654.95 838.99" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 2659.94 840.64 L 2652.19 841.76 L 2654.95 838.99 L 2654.39 835.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1740 830.76 L 2654.63 855.51" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 2659.88 855.66 L 2652.79 858.97 L 2654.63 855.51 L 2652.98 851.97 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2104.01 1116 L 2655.15 880.25" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 2659.97 878.19 L 2654.91 884.16 L 2655.15 880.25 L 2652.16 877.72 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1809.18 2223 L 2686.22 892.32" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 2689.11 887.93 L 2688.18 895.7 L 2686.22 892.32 L 2682.34 891.85 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2449 2009.5 L 2449 2491 Q 2449 2501 2439 2501 L 1387.37 2501" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1382.12 2501 L 1389.12 2497.5 L 1387.37 2501 L 1389.12 2504.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1552.6 61 L 2660.65 823.39" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 2664.98 826.37 L 2657.23 825.28 L 2660.65 823.39 L 2661.19 819.52 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 198.54 1251 C 201.34 1247.86 205.32 1246.05 209.52 1246 L 243.49 1246 C 247.69 1246.05 251.67 1247.86 254.47 1251 L 274.45 1274 C 275.01 1275.28 275.01 1276.72 274.45 1278 L 254.47 1301 C 251.67 1304.14 247.69 1305.95 243.49 1306 L 209.52 1306 C 205.32 1305.95 201.34 1304.14 198.54 1301 L 178.56 1278 C 178 1276.72 178 1275.28 178.56 1274 L 198.54 1251 Z" fill="#000000" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#FFFFFF" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="225.5" y="1265">phys</text><text x="225.5" y="1279">button</text><text x="225.5" y="1293">press</text></g><path d="M 967.66 934 L 280.78 1250.95" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 276.02 1253.15 L 280.9 1247.04 L 280.78 1250.95 L 283.84 1253.4 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 20.22 2116.1 C 21.36 2112.9 23.22 2111.04 25.18 2111.12 L 93.64 2111.12 C 95.2 2111.08 96.7 2111.63 97.67 2112.61 C 98.65 2113.59 98.99 2114.88 98.6 2116.1 L 79.75 2165.9 C 78.61 2169.1 76.75 2170.96 74.79 2170.88 L 5.34 2170.88 C 3.95 2170.69 2.73 2170.05 1.97 2169.1 C 1.22 2168.15 1 2166.99 1.37 2165.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="49" y="2137">button 1</text><text x="49" y="2151">release</text></g><path d="M 220.38 1306 L 57.39 2104.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 56.34 2109.9 L 54.32 2102.35 L 57.39 2104.76 L 61.17 2103.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 635.5 2429.27 L 1244.67 2493.48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1249.89 2494.03 L 1242.56 2496.78 L 1244.67 2493.48 L 1243.29 2489.82 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 849.5 1198.93 L 281.32 1269.22" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 276.11 1269.86 L 282.63 1265.53 L 281.32 1269.22 L 283.49 1272.48 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 635.09 1486 L 280.66 1303.84" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 275.99 1301.44 L 283.82 1301.53 L 280.66 1303.84 L 280.62 1307.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 805.83 1486 L 280.99 1295.75" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 276.05 1293.96 L 283.82 1293.06 L 280.99 1295.75 L 281.44 1299.64 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="441.5" y="2023" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="505.5" y="2046">DRAGGING_WAIT</text></g><path d="M 505.04 2083 C 507.84 2079.86 511.82 2078.05 516.02 2078 L 549.99 2078 C 554.19 2078.05 558.17 2079.86 560.97 2083 L 580.95 2106 C 581.51 2107.28 581.51 2108.72 580.95 2110 L 560.97 2133 C 558.17 2136.14 554.19 2137.95 549.99 2138 L 516.02 2138 C 511.82 2137.95 507.84 2136.14 505.04 2133 L 485.06 2110 C 484.5 2108.72 484.5 2107.28 485.06 2106 L 505.04 2083 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="532" y="2111">timeout</text></g><path d="M 488.57 1878.5 L 502.65 1908.89" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 504.86 1913.65 L 498.74 1908.78 L 502.65 1908.89 L 505.09 1905.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 514.65 2063 L 518.37 2072.1" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 520.35 2076.96 L 514.46 2071.8 L 518.37 2072.1 L 520.95 2069.16 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 581.5 2128.55 L 596.14 2134.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 600.97 2136.8 L 593.16 2137.29 L 596.14 2134.75 L 595.89 2130.85 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 328.54 2030 C 331.34 2026.86 335.32 2025.05 339.52 2025 L 373.49 2025 C 377.69 2025.05 381.67 2026.86 384.47 2030 L 404.45 2053 C 405.01 2054.28 405.01 2055.72 404.45 2057 L 384.47 2080 C 381.67 2083.14 377.69 2084.95 373.49 2085 L 339.52 2085 C 335.32 2084.95 331.34 2083.14 328.54 2080 L 308.56 2057 C 308 2055.72 308 2054.28 308.56 2053 L 328.54 2030 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="355.5" y="2051">first</text><text x="355.5" y="2065">finger down</text></g><path d="M 441.5 2048.2 L 411.35 2050.61" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 406.11 2051.03 L 412.81 2046.98 L 411.35 2050.61 L 413.37 2053.96 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1461.5 200.7 C 1477.62 206.91 1495.38 206.91 1511.5 200.7 C 1527.62 194.5 1545.38 194.5 1561.5 200.7 L 1561.5 253.28 C 1545.38 247.08 1527.62 247.08 1511.5 253.28 C 1495.38 259.49 1477.62 259.49 1461.5 253.28 L 1461.5 200.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1510.5" y="230">TOUCH_TOUCH</text></g><path d="M 948.5 527.7 C 964.62 533.91 982.38 533.91 998.5 527.7 C 1014.62 521.5 1032.38 521.5 1048.5 527.7 L 1048.5 580.28 C 1032.38 574.08 1014.62 574.08 998.5 580.28 C 982.38 586.49 964.62 586.49 948.5 580.28 L 948.5 527.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="997.5" y="557">TOUCH_IDLE</text></g><path d="M 1216.17 361 L 1039.92 517.28" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1035.99 520.76 L 1038.91 513.5 L 1039.92 517.28 L 1043.55 518.73 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 999.77 586.5 L 1001.58 632.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1001.78 637.88 L 998.01 631.03 L 1001.58 632.64 L 1005.01 630.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1512.53 161 L 1512.11 188.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1512.03 193.38 L 1508.64 186.33 L 1512.11 188.13 L 1515.63 186.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1513.24 259.5 L 1514.59 284.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1514.87 289.88 L 1511 283.08 L 1514.59 284.64 L 1517.99 282.71 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1690.5 465.2 C 1706.62 471.41 1724.38 471.41 1740.5 465.2 C 1756.62 459 1774.38 459 1790.5 465.2 L 1790.5 517.78 C 1774.38 511.58 1756.62 511.58 1740.5 517.78 C 1724.38 523.99 1706.62 523.99 1690.5 517.78 L 1690.5 465.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1739.5" y="494.5">TOUCH_DEAD</text></g><path d="M 2170 520.65 L 2454.75 577.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2459.9 578.33 L 2452.36 580.4 L 2454.75 577.31 L 2453.72 573.53 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1646 447.88 L 1684.72 465.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1689.48 467.95 L 1681.66 468.2 L 1684.72 465.75 L 1684.6 461.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1774.4 524 L 1787.54 536.59" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1791.33 540.23 L 1783.85 537.91 L 1787.54 536.59 L 1788.7 532.86 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1227.8 882 L 1226.41 822.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1226.29 817.62 L 1229.95 824.53 L 1226.41 822.87 L 1222.95 824.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1928.5 962.2 C 1944.62 968.41 1962.38 968.41 1978.5 962.2 C 1994.62 956 2012.38 956 2028.5 962.2 L 2028.5 1014.78 C 2012.38 1008.58 1994.62 1008.58 1978.5 1014.78 C 1962.38 1020.99 1944.62 1020.99 1928.5 1014.78 L 1928.5 962.2 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1977.5" y="991.5">TOUCH_DEAD</text></g><path d="M 2040.96 1093.5 L 2047.3 1110.05" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2049.18 1114.96 L 2043.41 1109.67 L 2047.3 1110.05 L 2049.95 1107.17 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1816 998.13 L 1922.14 991.84" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1927.38 991.53 L 1920.6 995.44 L 1922.14 991.84 L 1920.19 988.45 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2122.5 963.2 C 2138.62 969.41 2156.38 969.41 2172.5 963.2 C 2188.62 957 2206.38 957 2222.5 963.2 L 2222.5 1015.78 C 2206.38 1009.58 2188.62 1009.58 2172.5 1015.78 C 2156.38 1021.99 2138.62 1021.99 2122.5 1015.78 L 2122.5 963.2 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2171.5" y="992.5">TOUCH_IDLE</text></g><path d="M 2113.64 1228.5 L 2162.97 1028.18" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2164.23 1023.09 L 2165.95 1030.72 L 2162.97 1028.18 L 2159.16 1029.05 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1646.5 712.7 C 1662.62 718.91 1680.38 718.91 1696.5 712.7 C 1712.62 706.5 1730.38 706.5 1746.5 712.7 L 1746.5 765.28 C 1730.38 759.08 1712.62 759.08 1696.5 765.28 C 1680.38 771.49 1662.62 771.49 1646.5 765.28 L 1646.5 712.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1695.5" y="742">TOUCH_TOUCH</text></g><path d="M 1719.57 681 L 1711.78 700.58" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1709.84 705.46 L 1709.17 697.66 L 1711.78 700.58 L 1715.68 700.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1447.38 461 L 1663.13 701.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1666.63 705.67 L 1659.35 702.79 L 1663.13 701.76 L 1664.57 698.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1385.5 752.7 C 1401.62 758.91 1419.38 758.91 1435.5 752.7 C 1451.62 746.5 1469.38 746.5 1485.5 752.7 L 1485.5 805.28 C 1469.38 799.08 1451.62 799.08 1435.5 805.28 C 1419.38 811.49 1401.62 811.49 1385.5 805.28 L 1385.5 752.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1434.5" y="782">TOUCH_IDLE</text></g><path d="M 1475.07 912 L 1446.99 817.6" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1445.49 812.57 L 1450.84 818.28 L 1446.99 817.6 L 1444.13 820.28 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1813.5 1048.7 C 1829.62 1054.91 1847.38 1054.91 1863.5 1048.7 C 1879.62 1042.5 1897.38 1042.5 1913.5 1048.7 L 1913.5 1101.28 C 1897.38 1095.08 1879.62 1095.08 1863.5 1101.28 C 1847.38 1107.49 1829.62 1107.49 1813.5 1101.28 L 1813.5 1048.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1862.5" y="1078">TOUCH_IDLE</text></g><path d="M 1889.84 1221 L 1870.49 1113.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1869.56 1108.6 L 1874.25 1114.87 L 1870.49 1113.77 L 1867.36 1116.11 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1765.5 1319.7 C 1781.62 1325.91 1799.38 1325.91 1815.5 1319.7 C 1831.62 1313.5 1849.38 1313.5 1865.5 1319.7 L 1865.5 1372.28 C 1849.38 1366.08 1831.62 1366.08 1815.5 1372.28 C 1799.38 1378.49 1781.62 1378.49 1765.5 1372.28 L 1765.5 1319.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1814.5" y="1349">TOUCH_TOUCH</text></g><path d="M 1957.75 1277.02 L 1871.23 1318.98" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1866.51 1321.27 L 1871.28 1315.06 L 1871.23 1318.98 L 1874.33 1321.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2054.5 2324.7 C 2070.62 2330.91 2088.38 2330.91 2104.5 2324.7 C 2120.62 2318.5 2138.38 2318.5 2154.5 2324.7 L 2154.5 2377.28 C 2138.38 2371.08 2120.62 2371.08 2104.5 2377.28 C 2088.38 2383.49 2070.62 2383.49 2054.5 2377.28 L 2054.5 2324.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2103.5" y="2347">that finger</text><text x="2103.5" y="2361">TOUCH_IDLE</text></g><path d="M 1864.5 2355.16 L 2048.13 2351.98" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2053.38 2351.89 L 2046.44 2355.51 L 2048.13 2351.98 L 2046.32 2348.51 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1737.5 1659.7 C 1753.62 1665.91 1771.38 1665.91 1787.5 1659.7 C 1803.62 1653.5 1821.38 1653.5 1837.5 1659.7 L 1837.5 1712.28 C 1821.38 1706.08 1803.62 1706.08 1787.5 1712.28 C 1771.38 1718.49 1753.62 1718.49 1737.5 1712.28 L 1737.5 1659.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1786.5" y="1689">TOUCH_DEAD</text></g><path d="M 1749.4 1590 L 1772.25 1647.58" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1774.19 1652.46 L 1768.36 1647.25 L 1772.25 1647.58 L 1774.86 1644.66 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1928.5 1564 L 2431 1564 Q 2441 1564 2441 1574 L 2441 1837.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2441 1842.88 L 2437.5 1835.88 L 2441 1837.63 L 2444.5 1835.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1582.5 1591 L 1582.5 1642.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1582.5 1647.88 L 1579 1640.88 L 1582.5 1642.63 L 1586 1640.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1666.5 1956.7 C 1682.62 1962.91 1700.38 1962.91 1716.5 1956.7 C 1732.62 1950.5 1750.38 1950.5 1766.5 1956.7 L 1766.5 2009.28 C 1750.38 2003.08 1732.62 2003.08 1716.5 2009.28 C 1700.38 2015.49 1682.62 2015.49 1666.5 2009.28 L 1666.5 1956.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1715.5" y="1979">that finger</text><text x="1715.5" y="1993">TOUCH_IDLE</text></g><path d="M 1565 1976.2 L 1660.14 1980.47" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1665.38 1980.71 L 1658.23 1983.89 L 1660.14 1980.47 L 1658.55 1976.9 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1606.09 1749 L 1698.45 1944.74" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1700.69 1949.49 L 1694.54 1944.65 L 1698.45 1944.74 L 1700.87 1941.66 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="11px"><rect fill="#ffffff" stroke="none" x="1647" y="1843" width="14" height="14" stroke-width="0"/><text x="1652.96" y="1852.39">no</text></g><path d="M 1003.5 1058.7 C 1019.62 1064.91 1037.38 1064.91 1053.5 1058.7 C 1069.62 1052.5 1087.38 1052.5 1103.5 1058.7 L 1103.5 1111.28 C 1087.38 1105.08 1069.62 1105.08 1053.5 1111.28 C 1037.38 1117.49 1019.62 1117.49 1003.5 1111.28 L 1003.5 1058.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1052.5" y="1088">TOUCH_TOUCH</text></g><path d="M 1044.69 1022 L 1048.08 1046.19" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1048.8 1051.39 L 1044.37 1044.94 L 1048.08 1046.19 L 1051.3 1043.98 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 501 830.2 C 517.12 836.41 534.88 836.41 551 830.2 C 567.12 824 584.88 824 601 830.2 L 601 882.78 C 584.88 876.58 567.12 876.58 551 882.78 C 534.88 888.99 517.12 888.99 501 882.78 L 501 830.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="550" y="859.5">TOUCH_IDLE</text></g><path d="M 831.5 1372.7 C 847.62 1378.91 865.38 1378.91 881.5 1372.7 C 897.62 1366.5 915.38 1366.5 931.5 1372.7 L 931.5 1425.28 C 915.38 1419.08 897.62 1419.08 881.5 1425.28 C 865.38 1431.49 847.62 1431.49 831.5 1425.28 L 831.5 1372.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="880.5" y="1402">TOUCH_TOUCH</text></g><path d="M 902.67 1306 L 890.31 1360.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 889.15 1365.41 L 887.29 1357.81 L 890.31 1360.29 L 894.11 1359.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 668.5 1372.7 C 684.62 1378.91 702.38 1378.91 718.5 1372.7 C 734.62 1366.5 752.38 1366.5 768.5 1372.7 L 768.5 1425.28 C 752.38 1419.08 734.62 1419.08 718.5 1425.28 C 702.38 1431.49 684.62 1431.49 668.5 1425.28 L 668.5 1372.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="717.5" y="1402">TOUCH_DEAD</text></g><path d="M 502 1323.02 L 662.49 1379.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 667.45 1381.08 L 659.68 1382.07 L 662.49 1379.34 L 662 1375.46 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 745.72 1306 L 729.8 1360.39" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 728.33 1365.43 L 726.93 1357.73 L 729.8 1360.39 L 733.65 1359.69 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 423.5 1819.7 C 439.62 1825.91 457.38 1825.91 473.5 1819.7 C 489.62 1813.5 507.38 1813.5 523.5 1819.7 L 523.5 1872.28 C 507.38 1866.08 489.62 1866.08 473.5 1872.28 C 457.38 1878.49 439.62 1878.49 423.5 1872.28 L 423.5 1819.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="472.5" y="1849">TOUCH_IDLE</text></g><path d="M 561.33 1686 L 477.11 1808.26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 474.13 1812.58 L 475.22 1804.83 L 477.11 1808.26 L 480.99 1808.8 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 302.5 1817.7 C 318.62 1823.91 336.38 1823.91 352.5 1817.7 C 368.62 1811.5 386.38 1811.5 402.5 1817.7 L 402.5 1870.28 C 386.38 1864.08 368.62 1864.08 352.5 1870.28 C 336.38 1876.49 318.62 1876.49 302.5 1870.28 L 302.5 1817.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="351.5" y="1847">TOUCH_TOUCH</text></g><path d="M 668.5 1722.7 C 684.62 1728.91 702.38 1728.91 718.5 1722.7 C 734.62 1716.5 752.38 1716.5 768.5 1722.7 L 768.5 1775.28 C 752.38 1769.08 734.62 1769.08 718.5 1775.28 C 702.38 1781.49 684.62 1781.49 668.5 1775.28 L 668.5 1722.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="717.5" y="1752">TOUCH_TOUCH</text></g><path d="M 809.5 1655.7 C 825.62 1661.91 843.38 1661.91 859.5 1655.7 C 875.62 1649.5 893.38 1649.5 909.5 1655.7 L 909.5 1708.28 C 893.38 1702.08 875.62 1702.08 859.5 1708.28 C 843.38 1714.49 825.62 1714.49 809.5 1708.28 L 809.5 1655.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="858.5" y="1685">TOUCH_IDLE</text></g><path d="M 939.65 1751 L 902.08 1718.65" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 898.1 1715.23 L 905.69 1717.14 L 902.08 1718.65 L 901.12 1722.45 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 881.5 1924.7 C 897.62 1930.91 915.38 1930.91 931.5 1924.7 C 947.62 1918.5 965.38 1918.5 981.5 1924.7 L 981.5 1977.28 C 965.38 1971.08 947.62 1971.08 931.5 1977.28 C 915.38 1983.49 897.62 1983.49 881.5 1977.28 L 881.5 1924.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="930.5" y="1954">TOUCH_IDLE</text></g><path d="M 1073.44 1774 L 961.55 1913.53" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 958.26 1917.63 L 959.91 1909.98 L 961.55 1913.53 L 965.37 1914.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1116.5 1870.7 C 1132.62 1876.91 1150.38 1876.91 1166.5 1870.7 C 1182.62 1864.5 1200.38 1864.5 1216.5 1870.7 L 1216.5 1923.28 C 1200.38 1917.08 1182.62 1917.08 1166.5 1923.28 C 1150.38 1929.49 1132.62 1929.49 1116.5 1923.28 L 1116.5 1870.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1165.5" y="1900">TOUCH_TOUCH</text></g><path d="M 1146.92 1654 L 1163.37 1858.15" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1163.79 1863.39 L 1159.74 1856.69 L 1163.37 1858.15 L 1166.72 1856.13 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1943.5 757.7 C 1959.62 763.91 1977.38 763.91 1993.5 757.7 C 2009.62 751.5 2027.38 751.5 2043.5 757.7 L 2043.5 810.28 C 2027.38 804.08 2009.62 804.08 1993.5 810.28 C 1977.38 816.49 1959.62 816.49 1943.5 810.28 L 1943.5 757.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1992.5" y="787">TOUCH_IDLE</text></g><path d="M 1927.26 726 L 1951.59 747.3" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1955.54 750.76 L 1947.97 748.79 L 1951.59 747.3 L 1952.58 743.52 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1590.5 1189.7 C 1606.62 1195.91 1624.38 1195.91 1640.5 1189.7 C 1656.62 1183.5 1674.38 1183.5 1690.5 1189.7 L 1690.5 1242.28 C 1674.38 1236.08 1656.62 1236.08 1640.5 1242.28 C 1624.38 1248.49 1606.62 1248.49 1590.5 1242.28 L 1590.5 1189.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1639.5" y="1219">TOUCH_TOUCH</text></g><path d="M 1663.32 1052 L 1645.9 1177.19" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1645.18 1182.39 L 1642.68 1174.98 L 1645.9 1177.19 L 1649.61 1175.94 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1216.5 2665.7 C 1232.62 2671.91 1250.38 2671.91 1266.5 2665.7 C 1282.62 2659.5 1300.38 2659.5 1316.5 2665.7 L 1316.5 2718.28 C 1300.38 2712.08 1282.62 2712.08 1266.5 2718.28 C 1250.38 2724.49 1232.62 2724.49 1216.5 2718.28 L 1216.5 2665.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1265.5" y="2688">that finger</text><text x="1265.5" y="2702">TOUCH_IDLE</text></g><path d="M 1262.14 2631 L 1263.72 2653.15" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1264.1 2658.38 L 1260.11 2651.65 L 1263.72 2653.15 L 1267.09 2651.15 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2399 1850.2 C 2415.12 1856.41 2432.88 1856.41 2449 1850.2 C 2465.12 1844 2482.88 1844 2499 1850.2 L 2499 1902.78 C 2482.88 1896.58 2465.12 1896.58 2449 1902.78 C 2432.88 1908.99 2415.12 1908.99 2399 1902.78 L 2399 1850.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2448" y="1879.5">TOUCH_DEAD</text></g><path d="M 2711 887 L 2711 1866.5 Q 2711 1876.5 2701 1876.5 L 2505.37 1876.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2500.12 1876.5 L 2507.12 1873 L 2505.37 1876.5 L 2507.12 1880 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2398.5 1900.7 C 2414.62 1906.91 2432.38 1906.91 2448.5 1900.7 C 2464.62 1894.5 2482.38 1894.5 2498.5 1900.7 L 2498.5 1953.28 C 2482.38 1947.08 2464.62 1947.08 2448.5 1953.28 C 2432.38 1959.49 2414.62 1959.49 2398.5 1953.28 L 2398.5 1900.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2447.5" y="1930">TOUCH_DEAD</text></g><path d="M 2398.5 1950.7 C 2414.62 1956.91 2432.38 1956.91 2448.5 1950.7 C 2464.62 1944.5 2482.38 1944.5 2498.5 1950.7 L 2498.5 2003.28 C 2482.38 1997.08 2464.62 1997.08 2448.5 2003.28 C 2432.38 2009.49 2414.62 2009.49 2398.5 2003.28 L 2398.5 1950.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2447.5" y="1980">TOUCH_DEAD</text></g><path d="M 268 2299.2 C 284.12 2305.41 301.88 2305.41 318 2299.2 C 334.12 2293 351.88 2293 368 2299.2 L 368 2351.78 C 351.88 2345.58 334.12 2345.58 318 2351.78 C 301.88 2357.99 284.12 2357.99 268 2351.78 L 268 2299.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="317" y="2328.5">TOUCH_DEAD</text></g><path d="M 93.58 2171 L 265.55 2289.39" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 269.87 2292.37 L 262.12 2291.28 L 265.55 2289.39 L 266.09 2285.51 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 410.5 2352.7 C 426.62 2358.91 444.38 2358.91 460.5 2352.7 C 476.62 2346.5 494.38 2346.5 510.5 2352.7 L 510.5 2405.28 C 494.38 2399.08 476.62 2399.08 460.5 2405.28 C 444.38 2411.49 426.62 2411.49 410.5 2405.28 L 410.5 2352.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="459.5" y="2382">TOUCH_DEAD</text></g><path d="M 368 2344.27 L 404.54 2357.99" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 409.45 2359.84 L 401.67 2360.65 L 404.54 2357.99 L 404.13 2354.1 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 535.5 2397.7 C 551.62 2403.91 569.38 2403.91 585.5 2397.7 C 601.62 2391.5 619.38 2391.5 635.5 2397.7 L 635.5 2450.28 C 619.38 2444.08 601.62 2444.08 585.5 2450.28 C 569.38 2456.49 551.62 2456.49 535.5 2450.28 L 535.5 2397.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="584.5" y="2427">TOUCH_DEAD</text></g><path d="M 510.5 2397 L 529.51 2403.84" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 534.45 2405.62 L 526.68 2406.54 L 529.51 2403.84 L 529.05 2399.96 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1582.5 1649 L 1646 1699 L 1582.5 1749 L 1519 1699 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1581.5" y="1695">that finger state ==</text><text x="1581.5" y="1709">TOUCH_TOUCH</text></g><path d="M 1978.5 1034.7 C 1994.62 1040.91 2012.38 1040.91 2028.5 1034.7 C 2044.62 1028.5 2062.38 1028.5 2078.5 1034.7 L 2078.5 1087.28 C 2062.38 1081.08 2044.62 1081.08 2028.5 1087.28 C 2012.38 1093.49 1994.62 1093.49 1978.5 1087.28 L 1978.5 1034.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2027.5" y="1064">TOUCH_DEAD</text></g><path d="M 2000.91 1021 L 2002.47 1023.26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2005.45 1027.58 L 1998.6 1023.8 L 2002.47 1023.26 L 2004.36 1019.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1737.5 1711.7 C 1753.62 1717.91 1771.38 1717.91 1787.5 1711.7 C 1803.62 1705.5 1821.38 1705.5 1837.5 1711.7 L 1837.5 1764.28 C 1821.38 1758.08 1803.62 1758.08 1787.5 1764.28 C 1771.38 1770.49 1753.62 1770.49 1737.5 1764.28 L 1737.5 1711.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1786.5" y="1741">TOUCH_DEAD</text></g><path d="M 1737.5 1763.7 C 1753.62 1769.91 1771.38 1769.91 1787.5 1763.7 C 1803.62 1757.5 1821.38 1757.5 1837.5 1763.7 L 1837.5 1816.28 C 1821.38 1810.08 1803.62 1810.08 1787.5 1816.28 C 1771.38 1822.49 1753.62 1822.49 1737.5 1816.28 L 1737.5 1763.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1786.5" y="1793">TOUCH_DEAD</text></g><path d="M 740.5 774 L 815.13 774" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 820.38 774 L 813.38 777.5 L 815.13 774 L 813.38 770.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 601 827.14 L 637.01 806" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 641.54 803.34 L 637.27 809.9 L 637.01 806 L 633.73 803.86 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 648.79 926 L 601.92 892.69" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 597.64 889.65 L 605.37 890.85 L 601.92 892.69 L 601.32 896.56 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="218.5" y="1511" width="209" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="322" y="1534">DRAGGING_OR_TAP</text></g><path d="M 205.04 1871 C 207.84 1867.86 211.82 1866.05 216.02 1866 L 249.99 1866 C 254.19 1866.05 258.17 1867.86 260.97 1871 L 280.95 1894 C 281.51 1895.28 281.51 1896.72 280.95 1898 L 260.97 1921 C 258.17 1924.14 254.19 1925.95 249.99 1926 L 216.02 1926 C 211.82 1925.95 207.84 1924.14 205.04 1921 L 185.06 1898 C 184.5 1896.72 184.5 1895.28 185.06 1894 L 205.04 1871 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="232" y="1892">first</text><text x="232" y="1906">finger up</text></g><path d="M 318.07 1551 L 241.92 1859.82" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 240.66 1864.91 L 238.94 1857.28 L 241.92 1859.82 L 245.74 1858.96 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 340.04 1366 C 342.84 1362.86 346.82 1361.05 351.02 1361 L 384.99 1361 C 389.19 1361.05 393.17 1362.86 395.97 1366 L 415.95 1389 C 416.51 1390.28 416.51 1391.72 415.95 1393 L 395.97 1416 C 393.17 1419.14 389.19 1420.95 384.99 1421 L 351.02 1421 C 346.82 1420.95 342.84 1419.14 340.04 1416 L 320.06 1393 C 319.5 1391.72 319.5 1390.28 320.06 1389 L 340.04 1366 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="367" y="1394">timeout</text></g><path d="M 329.43 1511 L 356.41 1427.06" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 358.02 1422.06 L 359.21 1429.8 L 356.41 1427.06 L 352.54 1427.66 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 416.5 1409.23 L 614.82 1483.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 619.74 1485.61 L 611.95 1486.42 L 614.82 1483.76 L 614.41 1479.87 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 399.54 1437 C 402.34 1433.86 406.32 1432.05 410.52 1432 L 444.49 1432 C 448.69 1432.05 452.67 1433.86 455.47 1437 L 475.45 1460 C 476.01 1461.28 476.01 1462.72 475.45 1464 L 455.47 1487 C 452.67 1490.14 448.69 1491.95 444.49 1492 L 410.52 1492 C 406.32 1491.95 402.34 1490.14 399.54 1487 L 379.56 1464 C 379 1462.72 379 1461.28 379.56 1460 L 399.54 1437 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="426.5" y="1458">move &gt; </text><text x="426.5" y="1472">threshold</text></g><path d="M 353.29 1511 L 376.75 1495.51" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 381.13 1492.62 L 377.22 1499.39 L 376.75 1495.51 L 373.36 1493.55 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 476 1470.66 L 602.73 1493.28" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 607.9 1494.2 L 600.39 1496.42 L 602.73 1493.28 L 601.62 1489.53 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 355.93 2025 L 353.24 1882.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 353.14 1877.62 L 356.77 1884.55 L 353.24 1882.87 L 349.77 1884.68 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 349.44 1811.5 L 325.48 1557.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 324.99 1552.11 L 329.13 1558.75 L 325.48 1557.34 L 322.16 1559.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 338.77 1551 L 572.91 1848" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 576.16 1852.12 L 569.07 1848.79 L 572.91 1848 L 574.57 1844.46 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 250.5 2131.7 C 266.62 2137.91 284.38 2137.91 300.5 2131.7 C 316.62 2125.5 334.38 2125.5 350.5 2131.7 L 350.5 2184.28 C 334.38 2178.08 316.62 2178.08 300.5 2184.28 C 284.38 2190.49 266.62 2190.49 250.5 2184.28 L 250.5 2131.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="299.5" y="2161">TOUCH_IDLE</text></g><path d="M 240.73 1926 L 290.54 2119.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 291.85 2124.42 L 286.71 2118.51 L 290.54 2119.33 L 293.49 2116.77 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 350.5 2158 L 595.63 2158" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 600.88 2158 L 593.88 2161.5 L 595.63 2158 L 593.88 2154.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 315.43 1511 L 240.11 1311.96" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 238.25 1307.05 L 244 1312.35 L 240.11 1311.96 L 237.45 1314.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 518 1902 L 558 1942 L 518 1982 L 478 1942 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(493.5,1928.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="49" height="27" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 50px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;">drag lock<br />enabled?<br /></div></div></foreignObject><text x="25" y="20" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">[Not supported by viewer]</text></switch></g><path d="M 558 1942 L 651 1942 L 651 2121.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 651 2126.88 L 647.5 2119.88 L 651 2121.63 L 654.5 2119.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(645.5,1978.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="13" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">no</div></div></foreignObject><text x="7" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">no</text></switch></g><path d="M 518 1982 L 518 2016.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 518 2021.88 L 514.5 2014.88 L 518 2016.63 L 521.5 2014.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(509.5,1999.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="18" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">yes<br /></div></div></foreignObject><text x="9" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">yes&lt;br&gt;</text></switch></g><path d="M 2281.54 336 C 2284.34 332.86 2288.32 331.05 2292.52 331 L 2326.49 331 C 2330.69 331.05 2334.67 332.86 2337.47 336 L 2357.45 359 C 2358.01 360.28 2358.01 361.72 2357.45 363 L 2337.47 386 C 2334.67 389.14 2330.69 390.95 2326.49 391 L 2292.52 391 C 2288.32 390.95 2284.34 389.14 2281.54 386 L 2261.56 363 C 2261 361.72 2261 360.28 2261.56 359 L 2281.54 336 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2308.5" y="364">thumb</text></g><path d="M 1581 315.1 L 2254.64 357.54" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2259.88 357.87 L 2252.68 360.93 L 2254.64 357.54 L 2253.12 353.94 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2293.5 435.7 C 2309.62 441.91 2327.38 441.91 2343.5 435.7 C 2359.62 429.5 2377.38 429.5 2393.5 435.7 L 2393.5 488.28 C 2377.38 482.08 2359.62 482.08 2343.5 488.28 C 2327.38 494.49 2309.62 494.49 2293.5 488.28 L 2293.5 435.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2342.5" y="465">TOUCH_DEAD</text></g><path d="M 2319.6 391 L 2330.53 423.46" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2332.2 428.44 L 2326.65 422.92 L 2330.53 423.46 L 2333.29 420.69 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2322.61 494.5 L 2143.22 773.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2140.38 778.06 L 2141.22 770.28 L 2143.22 773.64 L 2147.11 774.06 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1862.65 541 L 2255.09 382.92" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2259.96 380.95 L 2254.78 386.82 L 2255.09 382.92 L 2252.16 380.32 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1251" y="646" width="154" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1327" y="669">TOUCH_2_RELEASE</text></g><path d="M 1118.04 586 C 1120.84 582.86 1124.82 581.05 1129.02 581 L 1162.99 581 C 1167.19 581.05 1171.17 582.86 1173.97 586 L 1193.95 609 C 1194.51 610.28 1194.51 611.72 1193.95 613 L 1173.97 636 C 1171.17 639.14 1167.19 640.95 1162.99 641 L 1129.02 641 C 1124.82 640.95 1120.84 639.14 1118.04 636 L 1098.06 613 C 1097.5 611.72 1097.5 610.28 1098.06 609 L 1118.04 586 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1145" y="607">second</text><text x="1145" y="621">finger up</text></g><path d="M 1261.82 646 L 1200.6 627.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1195.57 625.98 L 1203.28 624.65 L 1200.6 627.5 L 1201.26 631.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1409.54 561 C 1412.34 557.86 1416.32 556.05 1420.52 556 L 1454.49 556 C 1458.69 556.05 1462.67 557.86 1465.47 561 L 1485.45 584 C 1486.01 585.28 1486.01 586.72 1485.45 588 L 1465.47 611 C 1462.67 614.14 1458.69 615.95 1454.49 616 L 1420.52 616 C 1416.32 615.95 1412.34 614.14 1409.54 611 L 1389.56 588 C 1389 586.72 1389 585.28 1389.56 584 L 1409.54 561 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1436.5" y="589">timeout</text></g><path d="M 1355.38 646 L 1391.3 619.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1395.53 616.66 L 1391.95 623.62 L 1391.3 619.76 L 1387.82 617.96 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1456.54 641 C 1459.34 637.86 1463.32 636.05 1467.52 636 L 1501.49 636 C 1505.69 636.05 1509.67 637.86 1512.47 641 L 1532.45 664 C 1533.01 665.28 1533.01 666.72 1532.45 668 L 1512.47 691 C 1509.67 694.14 1505.69 695.95 1501.49 696 L 1467.52 696 C 1463.32 695.95 1459.34 694.14 1456.54 691 L 1436.56 668 C 1436 666.72 1436 665.28 1436.56 664 L 1456.54 641 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1483.5" y="662">move &gt; </text><text x="1483.5" y="676">threshold</text></g><path d="M 1405 666 L 1429.63 666" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1434.88 666 L 1427.88 669.5 L 1429.63 666 L 1427.88 662.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1486 582.77 L 1741.65 565.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1746.88 565.4 L 1740.13 569.36 L 1741.65 565.75 L 1739.67 562.37 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1533 650.5 L 1744.36 582.94" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1749.36 581.34 L 1743.76 586.81 L 1744.36 582.94 L 1741.63 580.14 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1131.68 581 L 1058.06 426.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1055.8 422.01 L 1061.97 426.82 L 1058.06 426.75 L 1055.66 429.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1375.04 982 C 1377.84 978.86 1381.82 977.05 1386.02 977 L 1419.99 977 C 1424.19 977.05 1428.17 978.86 1430.97 982 L 1450.95 1005 C 1451.51 1006.28 1451.51 1007.72 1450.95 1009 L 1430.97 1032 C 1428.17 1035.14 1424.19 1036.95 1419.99 1037 L 1386.02 1037 C 1381.82 1036.95 1377.84 1035.14 1375.04 1032 L 1355.06 1009 C 1354.5 1007.72 1354.5 1006.28 1355.06 1005 L 1375.04 982 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1402" y="1003">first</text><text x="1402" y="1017">finger down</text></g><path d="M 1332.4 686 L 1395.03 970.78" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1396.16 975.91 L 1391.24 969.82 L 1395.03 970.78 L 1398.08 968.32 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1219.87 231 L 1460.39 64.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1464.71 61.64 L 1460.95 68.5 L 1460.39 64.62 L 1456.96 62.74 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1175.5 757.7 C 1191.62 763.91 1209.38 763.91 1225.5 757.7 C 1241.62 751.5 1259.38 751.5 1275.5 757.7 L 1275.5 810.28 C 1259.38 804.08 1241.62 804.08 1225.5 810.28 C 1209.38 816.49 1191.62 816.49 1175.5 810.28 L 1175.5 757.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1224.5" y="787">TOUCH_IDLE</text></g><path d="M 1253.73 751.5 L 1306.45 690.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1309.89 686.84 L 1307.95 694.42 L 1306.45 690.81 L 1302.66 689.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1215.54 541 C 1218.34 537.86 1222.32 536.05 1226.52 536 L 1260.49 536 C 1264.69 536.05 1268.67 537.86 1271.47 541 L 1291.45 564 C 1292.01 565.28 1292.01 566.72 1291.45 568 L 1271.47 591 C 1268.67 594.14 1264.69 595.95 1260.49 596 L 1226.52 596 C 1222.32 595.95 1218.34 594.14 1215.54 591 L 1195.56 568 C 1195 566.72 1195 565.28 1195.56 564 L 1215.54 541 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1242.5" y="562">first</text><text x="1242.5" y="576">finger up</text></g><path d="M 1311.1 646 L 1272.96 600.86" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1269.57 596.85 L 1276.76 599.94 L 1272.96 600.86 L 1271.42 604.46 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1208.79 536 L 1080.53 425.16" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1076.56 421.73 L 1084.14 423.66 L 1080.53 425.16 L 1079.57 428.96 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1300.54 1042 C 1303.34 1038.86 1307.32 1037.05 1311.52 1037 L 1345.49 1037 C 1349.69 1037.05 1353.67 1038.86 1356.47 1042 L 1376.45 1065 C 1377.01 1066.28 1377.01 1067.72 1376.45 1069 L 1356.47 1092 C 1353.67 1095.14 1349.69 1096.95 1345.49 1097 L 1311.52 1097 C 1307.32 1096.95 1303.34 1095.14 1300.54 1092 L 1280.56 1069 C 1280 1067.72 1280 1066.28 1280.56 1065 L 1300.54 1042 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1327.5" y="1063">second</text><text x="1327.5" y="1077">finger down</text></g><path d="M 1328.02 686 L 1328.45 1030.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1328.46 1035.88 L 1324.95 1028.89 L 1328.45 1030.63 L 1331.95 1028.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1372.5 1149.7 C 1388.62 1155.91 1406.38 1155.91 1422.5 1149.7 C 1438.62 1143.5 1456.38 1143.5 1472.5 1149.7 L 1472.5 1202.28 C 1456.38 1196.08 1438.62 1196.08 1422.5 1202.28 C 1406.38 1208.49 1388.62 1208.49 1372.5 1202.28 L 1372.5 1149.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1421.5" y="1179">TOUCH_DEAD</text></g><path d="M 1441.5 1070.7 C 1457.62 1076.91 1475.38 1076.91 1491.5 1070.7 C 1507.62 1064.5 1525.38 1064.5 1541.5 1070.7 L 1541.5 1123.28 C 1525.38 1117.08 1507.62 1117.08 1491.5 1123.28 C 1475.38 1129.49 1457.62 1129.49 1441.5 1123.28 L 1441.5 1070.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1490.5" y="1100">TOUCH_DEAD</text></g><path d="M 1432.5 1037 L 1455.08 1059.96" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1458.76 1063.7 L 1451.35 1061.17 L 1455.08 1059.96 L 1456.35 1056.26 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1541.5 1100.45 L 1985.9 1131.08" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1991.13 1131.44 L 1983.91 1134.45 L 1985.9 1131.08 L 1984.39 1127.47 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1354.37 1097 L 1390.31 1138.68" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1393.74 1142.65 L 1386.52 1139.64 L 1390.31 1138.68 L 1391.82 1135.07 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1472.5 1172.85 L 1985.89 1140.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1991.13 1140.17 L 1984.37 1144.1 L 1985.89 1140.5 L 1983.93 1137.11 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1011 744 L 1051 784 L 1011 824 L 971 784 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(985.5,770.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="51" height="27" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 52px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;">drag<br />disabled?<br /></div></div></foreignObject><text x="26" y="20" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">drag&lt;br&gt;disabled?&lt;br&gt;</text></switch></g><path d="M 1011 824 L 1011 887.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1011 892.88 L 1007.5 885.88 L 1011 887.63 L 1014.5 885.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(1005.5,845.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="13" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">no</div></div></foreignObject><text x="7" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">no</text></switch></g><path d="M 1051 784 L 1141 784 L 1141 1166 L 1169.13 1166" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1174.38 1166 L 1167.38 1169.5 L 1169.13 1166 L 1167.38 1162.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(1132.5,782.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="18" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">yes</div></div></foreignObject><text x="9" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">yes</text></switch></g><path d="M 2026.54 671 C 2029.34 667.86 2033.32 666.05 2037.52 666 L 2071.49 666 C 2075.69 666.05 2079.67 667.86 2082.47 671 L 2102.45 694 C 2103.01 695.28 2103.01 696.72 2102.45 698 L 2082.47 721 C 2079.67 724.14 2075.69 725.95 2071.49 726 L 2037.52 726 C 2033.32 725.95 2029.34 724.14 2026.54 721 L 2006.56 698 C 2006 696.72 2006 695.28 2006.56 694 L 2026.54 671 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2053.5" y="699">palm</text></g><path d="M 1848.78 581 L 2000.44 665.78" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2005.02 668.34 L 1997.21 667.98 L 2000.44 665.78 L 2000.62 661.87 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1533.54 967 C 1536.34 963.86 1540.32 962.05 1544.52 962 L 1578.49 962 C 1582.69 962.05 1586.67 963.86 1589.47 967 L 1609.45 990 C 1610.01 991.28 1610.01 992.72 1609.45 994 L 1589.47 1017 C 1586.67 1020.14 1582.69 1021.95 1578.49 1022 L 1544.52 1022 C 1540.32 1021.95 1536.34 1020.14 1533.54 1017 L 1513.56 994 C 1513 992.72 1513 991.28 1513.56 990 L 1533.54 967 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1560.5" y="988">either finger</text><text x="1560.5" y="1002">palm</text></g><path d="M 1661.07 849 L 1586.03 956.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1583.03 961.08 L 1584.16 953.34 L 1586.03 956.77 L 1589.9 957.34 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1312.54 501 C 1315.34 497.86 1319.32 496.05 1323.52 496 L 1357.49 496 C 1361.69 496.05 1365.67 497.86 1368.47 501 L 1388.45 524 C 1389.01 525.28 1389.01 526.72 1388.45 528 L 1368.47 551 C 1365.67 554.14 1361.69 555.95 1357.49 556 L 1323.52 556 C 1319.32 555.95 1315.34 554.14 1312.54 551 L 1292.56 528 C 1292 526.72 1292 525.28 1292.56 524 L 1312.54 501 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1339.5" y="515">remaining</text><text x="1339.5" y="529"> finger</text><text x="1339.5" y="543">palm</text></g><path d="M 1329.79 646 L 1337.26 562.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1337.72 557.11 L 1340.59 564.4 L 1337.26 562.34 L 1333.61 563.77 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1441.54 1404 C 1444.34 1400.86 1448.32 1399.05 1452.52 1399 L 1486.49 1399 C 1490.69 1399.05 1494.67 1400.86 1497.47 1404 L 1517.45 1427 C 1518.01 1428.28 1518.01 1429.72 1517.45 1431 L 1497.47 1454 C 1494.67 1457.14 1490.69 1458.95 1486.49 1459 L 1452.52 1459 C 1448.32 1458.95 1444.34 1457.14 1441.54 1454 L 1421.56 1431 C 1421 1429.72 1421 1428.28 1421.56 1427 L 1441.54 1404 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1468.5" y="1425">any finger</text><text x="1468.5" y="1439">palm</text></g><path d="M 1579.39 1386 L 1523.93 1407.7" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1519.04 1409.61 L 1524.28 1403.8 L 1523.93 1407.7 L 1526.84 1410.32 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1484.88 1399 L 1526.09 1318.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1528.49 1313.97 L 1528.41 1321.8 L 1526.09 1318.64 L 1522.18 1318.6 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1470.5 1259.7 C 1486.62 1265.91 1504.38 1265.91 1520.5 1259.7 C 1536.62 1253.5 1554.38 1253.5 1570.5 1259.7 L 1570.5 1312.28 C 1554.38 1306.08 1536.62 1306.08 1520.5 1312.28 C 1504.38 1318.49 1486.62 1318.49 1470.5 1312.28 L 1470.5 1259.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1519.5" y="1282">that finger</text><text x="1519.5" y="1296">TOUCH_DEAD</text></g><path d="M 1531.49 1253.5 L 1666.2 855.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1667.88 850.06 L 1668.95 857.81 L 1666.2 855.03 L 1662.32 855.57 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1508.5 714.7 C 1524.62 720.91 1542.38 720.91 1558.5 714.7 C 1574.62 708.5 1592.38 708.5 1608.5 714.7 L 1608.5 767.28 C 1592.38 761.08 1574.62 761.08 1558.5 767.28 C 1542.38 773.49 1524.62 773.49 1508.5 767.28 L 1508.5 714.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1557.5" y="737">that finger</text><text x="1557.5" y="751">TOUCH_DEAD</text></g><path d="M 1561.1 962 L 1558.59 774.02" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1558.51 768.77 L 1562.11 775.72 L 1558.59 774.02 L 1555.11 775.81 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1555.29 708.5 L 1518.6 337.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1518.09 332.11 L 1522.26 338.73 L 1518.6 337.34 L 1515.29 339.42 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1860.31 1042.5 L 1815.59 587.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1815.07 582.11 L 1819.24 588.74 L 1815.59 587.34 L 1812.28 589.42 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2351.54 266 C 2354.34 262.86 2358.32 261.05 2362.52 261 L 2396.49 261 C 2400.69 261.05 2404.67 262.86 2407.47 266 L 2427.45 289 C 2428.01 290.28 2428.01 291.72 2427.45 293 L 2407.47 316 C 2404.67 319.14 2400.69 320.95 2396.49 321 L 2362.52 321 C 2358.32 320.95 2354.34 319.14 2351.54 316 L 2331.56 293 C 2331 291.72 2331 290.28 2331.56 289 L 2351.54 266 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2378.5" y="294">palm</text></g><path d="M 1581 309.49 L 2324.63 292.27" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2329.88 292.15 L 2322.97 295.81 L 2324.63 292.27 L 2322.8 288.81 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2373.18 321 L 2351.65 423.27" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2350.57 428.41 L 2348.59 420.84 L 2351.65 423.27 L 2355.44 422.28 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2091.55 666 L 2298.41 498.51" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2302.49 495.2 L 2299.25 502.33 L 2298.41 498.51 L 2294.85 496.89 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2184.54 1236 C 2187.34 1232.86 2191.32 1231.05 2195.52 1231 L 2229.49 1231 C 2233.69 1231.05 2237.67 1232.86 2240.47 1236 L 2260.45 1259 C 2261.01 1260.28 2261.01 1261.72 2260.45 1263 L 2240.47 1286 C 2237.67 1289.14 2233.69 1290.95 2229.49 1291 L 2195.52 1291 C 2191.32 1290.95 2187.34 1289.14 2184.54 1286 L 2164.56 1263 C 2164 1261.72 2164 1260.28 2164.56 1259 L 2184.54 1236 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2211.5" y="1257">any finger</text><text x="2211.5" y="1271">palm</text></g><path d="M 2082.09 1156 L 2170.28 1227.01" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2174.37 1230.3 L 2166.72 1228.64 L 2170.28 1227.01 L 2171.11 1223.18 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2271 935.7 C 2287.12 941.91 2304.88 941.91 2321 935.7 C 2337.12 929.5 2354.88 929.5 2371 935.7 L 2371 988.28 C 2354.88 982.08 2337.12 982.08 2321 988.28 C 2304.88 994.49 2287.12 994.49 2271 988.28 L 2271 935.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2320" y="958">that finger</text><text x="2320" y="972">TOUCH_DEAD</text></g><path d="M 2223.39 1231 L 2307.03 1000.49" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2308.83 995.55 L 2309.73 1003.32 L 2307.03 1000.49 L 2303.15 1000.94 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2330 929.5 L 2330 561 L 1884.37 561" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1879.12 561 L 1886.12 557.5 L 1884.37 561 L 1886.12 564.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1201.5 392.7 C 1217.62 398.91 1235.38 398.91 1251.5 392.7 C 1267.62 386.5 1285.38 386.5 1301.5 392.7 L 1301.5 445.28 C 1285.38 439.08 1267.62 439.08 1251.5 445.28 C 1235.38 451.49 1217.62 451.49 1201.5 445.28 L 1201.5 392.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1250.5" y="422">TOUCH_DEAD</text></g><path d="M 1315.55 496 L 1282.6 456.4" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1279.25 452.36 L 1286.41 455.5 L 1282.6 456.4 L 1281.03 459.98 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1219.2 451.5 L 1037.31 634.48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1033.61 638.21 L 1036.06 630.78 L 1037.31 634.48 L 1041.03 635.71 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 823.54 1006 C 826.34 1002.86 830.32 1001.05 834.52 1001 L 868.49 1001 C 872.69 1001.05 876.67 1002.86 879.47 1006 L 899.45 1029 C 900.01 1030.28 900.01 1031.72 899.45 1033 L 879.47 1056 C 876.67 1059.14 872.69 1060.95 868.49 1061 L 834.52 1061 C 830.32 1060.95 826.34 1059.14 823.54 1056 L 803.56 1033 C 803 1031.72 803 1030.28 803.56 1029 L 823.54 1006 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="850.5" y="1034">palm</text></g><path d="M 821.5 853.7 C 837.62 859.91 855.38 859.91 871.5 853.7 C 887.62 847.5 905.38 847.5 921.5 853.7 L 921.5 906.28 C 905.38 900.08 887.62 900.08 871.5 906.28 C 855.38 912.49 837.62 912.49 821.5 906.28 L 821.5 853.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="870.5" y="883">TOUCH_DEAD</text></g><path d="M 940.77 1166 L 874.85 1066.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 871.96 1061.93 L 878.74 1065.84 L 874.85 1066.31 L 872.9 1069.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 855.47 1001 L 866.36 918.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 867.05 913.61 L 869.6 921.01 L 866.36 918.81 L 862.66 920.09 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 921.5 892.19 L 939.81 896.65" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 944.91 897.89 L 937.28 899.64 L 939.81 896.65 L 938.94 892.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1962.54 2163 C 1965.34 2159.86 1969.32 2158.05 1973.52 2158 L 2007.49 2158 C 2011.69 2158.05 2015.67 2159.86 2018.47 2163 L 2038.45 2186 C 2039.01 2187.28 2039.01 2188.72 2038.45 2190 L 2018.47 2213 C 2015.67 2216.14 2011.69 2217.95 2007.49 2218 L 1973.52 2218 C 1969.32 2217.95 1965.34 2216.14 1962.54 2213 L 1942.56 2190 C 1942 2188.72 1942 2187.28 1942.56 2186 L 1962.54 2163 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1989.5" y="2184">any finger</text><text x="1989.5" y="2198">palm</text></g><path d="M 1861 2224.62 L 1935.87 2203.45" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1940.92 2202.02 L 1935.14 2207.29 L 1935.87 2203.45 L 1933.24 2200.56 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2179 2186 L 2261 2186 Q 2271 2186 2271 2176 L 2271 1146 Q 2271 1136 2261 1136 L 2128.62 1136" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2123.37 1136 L 2130.37 1132.5 L 2128.62 1136 L 2130.37 1139.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2078.5 2159.7 C 2094.62 2165.91 2112.38 2165.91 2128.5 2159.7 C 2144.62 2153.5 2162.38 2153.5 2178.5 2159.7 L 2178.5 2212.28 C 2162.38 2206.08 2144.62 2206.08 2128.5 2212.28 C 2112.38 2218.49 2094.62 2218.49 2078.5 2212.28 L 2078.5 2159.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2127.5" y="2182">that finger</text><text x="2127.5" y="2196">TOUCH_DEAD</text></g><path d="M 2039 2187.3 L 2072.13 2186.82" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2077.38 2186.74 L 2070.43 2190.34 L 2072.13 2186.82 L 2070.33 2183.34 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1083.54 1501 C 1086.34 1497.86 1090.32 1496.05 1094.52 1496 L 1128.49 1496 C 1132.69 1496.05 1136.67 1497.86 1139.47 1501 L 1159.45 1524 C 1160.01 1525.28 1160.01 1526.72 1159.45 1528 L 1139.47 1551 C 1136.67 1554.14 1132.69 1555.95 1128.49 1556 L 1094.52 1556 C 1090.32 1555.95 1086.34 1554.14 1083.54 1551 L 1063.56 1528 C 1063 1526.72 1063 1525.28 1063.56 1524 L 1083.54 1501 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1110.5" y="1522">either finger</text><text x="1110.5" y="1536">palm</text></g><path d="M 926 1511.19 L 1056.65 1521.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1061.89 1522.04 L 1054.63 1524.97 L 1056.65 1521.62 L 1055.19 1517.99 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1040.5 1392.7 C 1056.62 1398.91 1074.38 1398.91 1090.5 1392.7 C 1106.62 1386.5 1124.38 1386.5 1140.5 1392.7 L 1140.5 1445.28 C 1124.38 1439.08 1106.62 1439.08 1090.5 1445.28 C 1074.38 1451.49 1056.62 1451.49 1040.5 1445.28 L 1040.5 1392.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1089.5" y="1415">that finger</text><text x="1089.5" y="1429">TOUCH_DEAD</text></g><path d="M 1105.61 1496 L 1098.1 1457.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1097.09 1452.6 L 1101.88 1458.79 L 1098.1 1457.75 L 1095.01 1460.14 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1071.46 1386.5 L 968.94 1211.49" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 966.28 1206.96 L 972.84 1211.24 L 968.94 1211.49 L 966.8 1214.77 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 450.54 1595 C 453.34 1591.86 457.32 1590.05 461.52 1590 L 495.49 1590 C 499.69 1590.05 503.67 1591.86 506.47 1595 L 526.45 1618 C 527.01 1619.28 527.01 1620.72 526.45 1622 L 506.47 1645 C 503.67 1648.14 499.69 1649.95 495.49 1650 L 461.52 1650 C 457.32 1649.95 453.34 1648.14 450.54 1645 L 430.56 1622 C 430 1620.72 430 1619.28 430.56 1618 L 450.54 1595 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="477.5" y="1623">palm</text></g><path d="M 633.48 1853 L 713.79 1779.94" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 717.67 1776.4 L 714.85 1783.7 L 713.79 1779.94 L 710.14 1778.52 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 639.7 1526 L 532.5 1588.51" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 527.97 1591.16 L 532.25 1584.61 L 532.5 1588.51 L 535.78 1590.65 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 731.5 1945.7 C 747.62 1951.91 765.38 1951.91 781.5 1945.7 C 797.62 1939.5 815.38 1939.5 831.5 1945.7 L 831.5 1998.28 C 815.38 1992.08 797.62 1992.08 781.5 1998.28 C 765.38 2004.49 747.62 2004.49 731.5 1998.28 L 731.5 1945.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="780.5" y="1975">TOUCH_DEAD</text></g><path d="M 504.32 1650 L 749.37 1934.67" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 752.79 1938.65 L 745.58 1935.63 L 749.37 1934.67 L 750.88 1931.06 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 758.7 2004.5 L 675.71 2122.79" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 672.69 2127.08 L 673.85 2119.34 L 675.71 2122.79 L 679.58 2123.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1517.54 2576 C 1520.34 2572.86 1524.32 2571.05 1528.52 2571 L 1562.49 2571 C 1566.69 2571.05 1570.67 2572.86 1573.47 2576 L 1593.45 2599 C 1594.01 2600.28 1594.01 2601.72 1593.45 2603 L 1573.47 2626 C 1570.67 2629.14 1566.69 2630.95 1562.49 2631 L 1528.52 2631 C 1524.32 2630.95 1520.34 2629.14 1517.54 2626 L 1497.56 2603 C 1497 2601.72 1497 2600.28 1497.56 2599 L 1517.54 2576 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1544.5" y="2597">any finger</text><text x="1544.5" y="2611">palm</text></g><path d="M 1361.9 2521 L 1491.16 2577.32" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1495.98 2579.42 L 1488.16 2579.83 L 1491.16 2577.32 L 1490.96 2573.42 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1490.5 2697.7 C 1506.62 2703.91 1524.38 2703.91 1540.5 2697.7 C 1556.62 2691.5 1574.38 2691.5 1590.5 2697.7 L 1590.5 2750.28 C 1574.38 2744.08 1556.62 2744.08 1540.5 2750.28 C 1524.38 2756.49 1506.62 2756.49 1490.5 2750.28 L 1490.5 2697.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1539.5" y="2720">that finger</text><text x="1539.5" y="2734">TOUCH_DEAD</text></g><path d="M 1544.28 2631 L 1542.08 2685.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1541.87 2690.38 L 1538.65 2683.25 L 1542.08 2685.14 L 1545.65 2683.53 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1490.5 2755.97 L 1375.37 2829.58" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1370.94 2832.41 L 1374.95 2825.69 L 1375.37 2829.58 L 1378.72 2831.59 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 357.94 1551 L 424.47 1589.08" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 429.03 1591.69 L 421.22 1591.25 L 424.47 1589.08 L 424.69 1585.17 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1558.5 45.78 L 2324.9 274.69" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2329.93 276.19 L 2322.22 277.54 L 2324.9 274.69 L 2324.22 270.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 983.74 934 L 897.53 997.23" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 893.3 1000.34 L 896.87 993.38 L 897.53 997.23 L 901.01 999.02 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2561 589 L 2590 589 L 2590 2501 L 1387.37 2501" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1382.12 2501 L 1389.12 2497.5 L 1387.37 2501 L 1389.12 2504.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2461 562.2 C 2477.12 568.41 2494.88 568.41 2511 562.2 C 2527.12 556 2544.88 556 2561 562.2 L 2561 614.78 C 2544.88 608.58 2527.12 608.58 2511 614.78 C 2494.88 620.99 2477.12 620.99 2461 614.78 L 2461 562.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2510" y="591.5">TOUCH_DEAD</text></g><path d="M 2303.04 1233.5 C 2305.84 1230.36 2309.82 1228.55 2314.02 1228.5 L 2347.99 1228.5 C 2352.19 1228.55 2356.17 1230.36 2358.97 1233.5 L 2378.95 1256.5 C 2379.51 1257.78 2379.51 1259.22 2378.95 1260.5 L 2358.97 1283.5 C 2356.17 1286.64 2352.19 1288.45 2347.99 1288.5 L 2314.02 1288.5 C 2309.82 1288.45 2305.84 1286.64 2303.04 1283.5 L 2283.06 1260.5 C 2282.5 1259.22 2282.5 1257.78 2283.06 1256.5 L 2303.04 1233.5 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2330" y="1254.5">move &gt; </text><text x="2330" y="1268.5">threshold</text></g><path d="M 2379.5 1258.5 L 2451 1258.5 L 2451 1837.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2451 1842.88 L 2447.5 1835.88 L 2451 1837.63 L 2454.5 1835.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1990 2048 L 1990 1801 L 2431 1801 L 2431 1837.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2431 1842.88 L 2427.5 1835.88 L 2431 1837.63 L 2434.5 1835.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1962.04 2053 C 1964.84 2049.86 1968.82 2048.05 1973.02 2048 L 2006.99 2048 C 2011.19 2048.05 2015.17 2049.86 2017.97 2053 L 2037.95 2076 C 2038.51 2077.28 2038.51 2078.72 2037.95 2080 L 2017.97 2103 C 2015.17 2106.14 2011.19 2107.95 2006.99 2108 L 1973.02 2108 C 1968.82 2107.95 1964.84 2106.14 1962.04 2103 L 1942.06 2080 C 1941.5 2078.72 1941.5 2077.28 1942.06 2076 L 1962.04 2053 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1989" y="2074">move &gt; </text><text x="1989" y="2088">threshold</text></g><path d="M 840.72 749.1 C 841.86 745.9 843.72 744.04 845.68 744.12 L 914.14 744.12 C 915.7 744.08 917.2 744.63 918.17 745.61 C 919.15 746.59 919.49 747.88 919.1 749.1 L 900.25 798.9 C 899.11 802.1 897.25 803.96 895.29 803.88 L 825.84 803.88 C 824.45 803.69 823.23 803.05 822.47 802.1 C 821.72 801.15 821.5 799.99 821.87 798.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="869.5" y="770">button 1</text><text x="869.5" y="784">press</text></g><path d="M 900.61 804 L 986.42 889.51" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 990.14 893.21 L 982.71 890.75 L 986.42 889.51 L 987.65 885.79 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/></g></svg>
\ No newline at end of file
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="3202px" height="3012px" viewBox="-0.5 -0.5 3202 3012" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2021-02-12T11:06:26.676Z&quot; agent=&quot;5.0 (Windows)&quot; etag=&quot;Zc_Q4wUsDTEamwoFVVqv&quot; version=&quot;14.3.1&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;rBU0XCT8gyggZLzt--pc&quot; name=&quot;Page-1&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;"><defs/><g><rect x="1" y="698.5" width="1320" height="1820" rx="198" ry="198" fill="none" stroke="#000000" stroke-width="3" stroke-dasharray="9 9" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 1318px; height: 1px; padding-top: 706px; margin-left: 2px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">(this section exists for [n] = 1, [n] = 2, and [n] = 3)</div></div></div></foreignObject><text x="661" y="718" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">(this section exists for [n] = 1, [n] = 2, and [n] = 3)</text></switch></g><path d="M 562.5 2100.5 L 171.08 1389.08" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 168.54 1384.48 L 174.99 1388.93 L 171.08 1389.08 L 168.85 1392.3 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1008.12 889 L 205.6 1324.17" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 200.98 1326.67 L 205.47 1320.25 L 205.6 1324.17 L 208.8 1326.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2114.9 1346 L 3097.24 882.6" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3101.99 880.36 L 3097.15 886.51 L 3097.24 882.6 L 3094.16 880.18 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2255 1753.5 L 2255 587.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2255 582.12 L 2258.5 589.12 L 2255 587.37 L 2251.5 589.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1537.61 1763.5 L 3097.45 887.36" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3102.03 884.79 L 3097.64 891.27 L 3097.45 887.36 L 3094.21 885.17 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1718.16 1198.5 L 1767.44 692.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1767.94 687.11 L 1770.75 694.42 L 1767.44 692.34 L 1763.78 693.74 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1865.35 1677.5 L 3099.11 890.42" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3103.53 887.6 L 3099.51 894.32 L 3099.11 890.42 L 3095.75 888.42 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2001.72 331 L 3097.21 832.16" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3101.98 834.35 L 3094.16 834.62 L 3097.21 832.16 L 3097.07 828.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 771.5 1818.37 L 209 2019.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 204.05 2021.58 L 209.46 2015.92 L 209 2019.81 L 211.82 2022.51 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1951" cy="31" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1950.5" y="35.5">IDLE</text></g><rect x="1893" y="291" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1957.5" y="315.5">TOUCH</text></g><path d="M 1927.04 106 C 1929.84 102.86 1933.82 101.05 1938.02 101 L 1971.99 101 C 1976.19 101.05 1980.17 102.86 1982.97 106 L 2002.95 129 C 2003.51 130.28 2003.51 131.72 2002.95 133 L 1982.97 156 C 1980.17 159.14 1976.19 160.95 1971.99 161 L 1938.02 161 C 1933.82 160.95 1929.84 159.14 1927.04 156 L 1907.06 133 C 1906.5 131.72 1906.5 130.28 1907.06 129 L 1927.04 106 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1954.5" y="128.5">first</text><text x="1954.5" y="142.5">finger down</text></g><path d="M 1952.2 61 L 1953.55 94.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1953.76 99.88 L 1949.98 93.03 L 1953.55 94.64 L 1956.97 92.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1664.04 306 C 1666.84 302.86 1670.82 301.05 1675.02 301 L 1708.99 301 C 1713.19 301.05 1717.17 302.86 1719.97 306 L 1739.95 329 C 1740.51 330.28 1740.51 331.72 1739.95 333 L 1719.97 356 C 1717.17 359.14 1713.19 360.95 1708.99 361 L 1675.02 361 C 1670.82 360.95 1666.84 359.14 1664.04 356 L 1644.06 333 C 1643.5 331.72 1643.5 330.28 1644.06 329 L 1664.04 306 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1691.5" y="335.5">finger up</text></g><path d="M 1893 315.89 L 1746.85 326.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1741.61 327.27 L 1748.33 323.25 L 1746.85 326.88 L 1748.86 330.23 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1415.22 644.1 C 1416.36 640.9 1418.22 639.04 1420.18 639.12 L 1488.64 639.12 C 1490.2 639.08 1491.7 639.63 1492.67 640.61 C 1493.65 641.59 1493.99 642.88 1493.6 644.1 L 1474.75 693.9 C 1473.61 697.1 1471.75 698.96 1469.79 698.88 L 1400.34 698.88 C 1398.95 698.69 1397.73 698.05 1396.97 697.1 C 1396.22 696.15 1396 694.99 1396.37 693.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1444.5" y="666.5">button 1</text><text x="1444.5" y="680.5">press</text></g><path d="M 2011.54 400.5 C 2014.34 397.36 2018.32 395.55 2022.52 395.5 L 2056.49 395.5 C 2060.69 395.55 2064.67 397.36 2067.47 400.5 L 2087.45 423.5 C 2088.01 424.78 2088.01 426.22 2087.45 427.5 L 2067.47 450.5 C 2064.67 453.64 2060.69 455.45 2056.49 455.5 L 2022.52 455.5 C 2018.32 455.45 2014.34 453.64 2011.54 450.5 L 1991.56 427.5 C 1991 426.22 1991 424.78 1991.56 423.5 L 2011.54 400.5 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2039" y="430">timeout</text></g><path d="M 1972.24 331 L 2014.45 390.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2017.5 394.59 L 2010.59 390.92 L 2014.45 390.31 L 2016.29 386.86 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2535.54 486 C 2538.34 482.86 2542.32 481.05 2546.52 481 L 2580.49 481 C 2584.69 481.05 2588.67 482.86 2591.47 486 L 2611.45 509 C 2612.01 510.28 2612.01 511.72 2611.45 513 L 2591.47 536 C 2588.67 539.14 2584.69 540.95 2580.49 541 L 2546.52 541 C 2542.32 540.95 2538.34 539.14 2535.54 536 L 2515.56 513 C 2515 511.72 2515 510.28 2515.56 509 L 2535.54 486 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2563" y="508.5">move &gt; </text><text x="2563" y="522.5">threshold</text></g><path d="M 2018.55 331 L 2508.95 492.98" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2513.94 494.63 L 2506.19 495.76 L 2508.95 492.98 L 2508.39 489.11 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1830.04 416 C 1832.84 412.86 1836.82 411.05 1841.02 411 L 1874.99 411 C 1879.19 411.05 1883.17 412.86 1885.97 416 L 1905.95 439 C 1906.51 440.28 1906.51 441.72 1905.95 443 L 1885.97 466 C 1883.17 469.14 1879.19 470.95 1874.99 471 L 1841.02 471 C 1836.82 470.95 1832.84 469.14 1830.04 466 L 1810.06 443 C 1809.5 441.72 1809.5 440.28 1810.06 439 L 1830.04 416 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1857.5" y="438.5">second</text><text x="1857.5" y="452.5">finger down</text></g><path d="M 1942.62 331 L 1884.96 405.95" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1881.76 410.11 L 1883.25 402.43 L 1884.96 405.95 L 1888.8 406.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="2052" y="809" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2116.5" y="833.5">TOUCH_2</text></g><path d="M 1867.54 946 C 1870.34 942.86 1874.32 941.05 1878.52 941 L 1912.49 941 C 1916.69 941.05 1920.67 942.86 1923.47 946 L 1943.45 969 C 1944.01 970.28 1944.01 971.72 1943.45 973 L 1923.47 996 C 1920.67 999.14 1916.69 1000.95 1912.49 1001 L 1878.52 1001 C 1874.32 1000.95 1870.34 999.14 1867.54 996 L 1847.56 973 C 1847 971.72 1847 970.28 1847.56 969 L 1867.54 946 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1895" y="968.5">second</text><text x="1895" y="982.5">finger up</text></g><path d="M 2085.8 849 L 1947.66 937.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1943.24 940.4 L 1947.24 933.67 L 1947.66 937.56 L 1951.02 939.57 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1472.22 778.6 C 1473.36 775.4 1475.22 773.54 1477.18 773.62 L 1545.64 773.62 C 1547.2 773.58 1548.7 774.13 1549.67 775.11 C 1550.65 776.09 1550.99 777.38 1550.6 778.6 L 1531.75 828.4 C 1530.61 831.6 1528.75 833.46 1526.79 833.38 L 1457.34 833.38 C 1455.95 833.19 1454.73 832.55 1453.97 831.6 C 1453.22 830.65 1453 829.49 1453.37 828.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1501.5" y="801">button 2</text><text x="1501.5" y="815">press</text></g><path d="M 2417 909 L 2903 909 L 2903 1837.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2903 1842.88 L 2899.5 1835.88 L 2903 1837.63 L 2906.5 1835.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2340.54 884 C 2343.34 880.86 2347.32 879.05 2351.52 879 L 2385.49 879 C 2389.69 879.05 2393.67 880.86 2396.47 884 L 2416.45 907 C 2417.01 908.28 2417.01 909.72 2416.45 911 L 2396.47 934 C 2393.67 937.14 2389.69 938.95 2385.49 939 L 2351.52 939 C 2347.32 938.95 2343.34 937.14 2340.54 934 L 2320.56 911 C 2320 909.72 2320 908.28 2320.56 907 L 2340.54 884 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2368" y="906.5">move &gt; </text><text x="2368" y="920.5">threshold</text></g><path d="M 2169.54 966 C 2172.34 962.86 2176.32 961.05 2180.52 961 L 2214.49 961 C 2218.69 961.05 2222.67 962.86 2225.47 966 L 2245.45 989 C 2246.01 990.28 2246.01 991.72 2245.45 993 L 2225.47 1016 C 2222.67 1019.14 2218.69 1020.95 2214.49 1021 L 2180.52 1021 C 2176.32 1020.95 2172.34 1019.14 2169.54 1016 L 2149.56 993 C 2149 991.72 2149 990.28 2149.56 989 L 2169.54 966 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2197" y="995.5">timeout</text></g><path d="M 2126.94 849 L 2179.76 955.3" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2182.1 960 L 2175.85 955.29 L 2179.76 955.3 L 2182.11 952.17 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2179.88 849 L 2313.93 891.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2318.93 893.23 L 2311.2 894.45 L 2313.93 891.64 L 2313.32 887.78 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1108.72 586.1 C 1109.86 582.9 1111.72 581.04 1113.68 581.12 L 1182.14 581.12 C 1183.7 581.08 1185.2 581.63 1186.17 582.61 C 1187.15 583.59 1187.49 584.88 1187.1 586.1 L 1168.25 635.9 C 1167.11 639.1 1165.25 640.96 1163.29 640.88 L 1093.84 640.88 C 1092.45 640.69 1091.23 640.05 1090.47 639.1 C 1089.72 638.15 1089.5 636.99 1089.87 635.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1138" y="608.5">button 1</text><text x="1138" y="622.5">release</text></g><path d="M 1472.22 989.6 C 1473.36 986.4 1475.22 984.54 1477.18 984.62 L 1545.64 984.62 C 1547.2 984.58 1548.7 985.13 1549.67 986.11 C 1550.65 987.09 1550.99 988.38 1550.6 989.6 L 1531.75 1039.4 C 1530.61 1042.6 1528.75 1044.46 1526.79 1044.38 L 1457.34 1044.38 C 1455.95 1044.19 1454.73 1043.55 1453.97 1042.6 C 1453.22 1041.65 1453 1040.49 1453.37 1039.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1501.5" y="1012">button 2</text><text x="1501.5" y="1026">release</text></g><path d="M 1831.09 814 L 1780.68 691.89" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1778.68 687.03 L 1784.59 692.17 L 1780.68 691.89 L 1778.12 694.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="980" y="849" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1044.5" y="873.5">[n]FGTAP_TAPPED</text></g><path d="M 1163.54 934.5 C 1166.34 931.36 1170.32 929.55 1174.52 929.5 L 1208.49 929.5 C 1212.69 929.55 1216.67 931.36 1219.47 934.5 L 1239.45 957.5 C 1240.01 958.78 1240.01 960.22 1239.45 961.5 L 1219.47 984.5 C 1216.67 987.64 1212.69 989.45 1208.49 989.5 L 1174.52 989.5 C 1170.32 989.45 1166.34 987.64 1163.54 984.5 L 1143.56 961.5 C 1143 960.22 1143 958.78 1143.56 957.5 L 1163.54 934.5 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1191" y="964">timeout</text></g><path d="M 1077.38 889 L 1137.58 926.19" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1142.05 928.95 L 1134.25 928.25 L 1137.58 926.19 L 1137.93 922.3 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 989.54 916 C 992.34 912.86 996.32 911.05 1000.52 911 L 1034.49 911 C 1038.69 911.05 1042.67 912.86 1045.47 916 L 1065.45 939 C 1066.01 940.28 1066.01 941.72 1065.45 943 L 1045.47 966 C 1042.67 969.14 1038.69 970.95 1034.49 971 L 1000.52 971 C 996.32 970.95 992.34 969.14 989.54 966 L 969.56 943 C 969 941.72 969 940.28 969.56 939 L 989.54 916 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1017" y="938.5">first</text><text x="1017" y="952.5">finger down</text></g><path d="M 1037.36 889 L 1031.23 905.05" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1029.36 909.96 L 1028.59 902.17 L 1031.23 905.05 L 1035.12 904.67 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="656" y="1563.5" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="720.5" y="1588">[n]FGTAP_DRAGGING</text></g><path d="M 693.04 1668.5 C 695.84 1665.36 699.82 1663.55 704.02 1663.5 L 737.99 1663.5 C 742.19 1663.55 746.17 1665.36 748.97 1668.5 L 768.95 1691.5 C 769.51 1692.78 769.51 1694.22 768.95 1695.5 L 748.97 1718.5 C 746.17 1721.64 742.19 1723.45 737.99 1723.5 L 704.02 1723.5 C 699.82 1723.45 695.84 1721.64 693.04 1718.5 L 673.06 1695.5 C 672.5 1694.22 672.5 1692.78 673.06 1691.5 L 693.04 1668.5 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="720.5" y="1691">first</text><text x="720.5" y="1705">finger up</text></g><path d="M 668.22 2210.6 C 669.36 2207.4 671.22 2205.54 673.18 2205.62 L 741.64 2205.62 C 743.2 2205.58 744.7 2206.13 745.67 2207.11 C 746.65 2208.09 746.99 2209.38 746.6 2210.6 L 727.75 2260.4 C 726.61 2263.6 724.75 2265.46 722.79 2265.38 L 653.34 2265.38 C 651.95 2265.19 650.73 2264.55 649.97 2263.6 C 649.22 2262.65 649 2261.49 649.37 2260.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="697.5" y="2233">button [n]</text><text x="697.5" y="2247">release</text></g><path d="M 721 1603.5 L 721 1657.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 721 1662.38 L 717.5 1655.38 L 721 1657.13 L 724.5 1655.38 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1396 669 L 1339.37 669" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1334.12 669 L 1341.12 665.5 L 1339.37 669 L 1341.12 672.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1210.15 989.5 L 1226.99 1016.59" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1229.76 1021.05 L 1223.09 1016.95 L 1226.99 1016.59 L 1229.04 1013.26 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="2562.5" cy="809" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2562" y="813.5">IDLE</text></g><path d="M 2119.04 1038.5 C 2121.84 1035.36 2125.82 1033.55 2130.02 1033.5 L 2163.99 1033.5 C 2168.19 1033.55 2172.17 1035.36 2174.97 1038.5 L 2194.95 1061.5 C 2195.51 1062.78 2195.51 1064.22 2194.95 1065.5 L 2174.97 1088.5 C 2172.17 1091.64 2168.19 1093.45 2163.99 1093.5 L 2130.02 1093.5 C 2125.82 1093.45 2121.84 1091.64 2119.04 1088.5 L 2099.06 1065.5 C 2098.5 1064.22 2098.5 1062.78 2099.06 1061.5 L 2119.04 1038.5 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2146.5" y="1061">third</text><text x="2146.5" y="1075">finger down</text></g><path d="M 2119.56 849 L 2142.35 1027.18" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2143.02 1032.39 L 2138.66 1025.89 L 2142.35 1027.18 L 2145.6 1025 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="2007.5" y="1346" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2072" y="1370.5">TOUCH_3</text></g><path d="M 2140.65 1248.5 L 2087.29 1340.49" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2084.66 1345.03 L 2085.15 1337.22 L 2087.29 1340.49 L 2091.2 1340.73 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1392.22 1456.1 C 1393.36 1452.9 1395.22 1451.04 1397.18 1451.12 L 1465.64 1451.12 C 1467.2 1451.08 1468.7 1451.63 1469.67 1452.61 C 1470.65 1453.59 1470.99 1454.88 1470.6 1456.1 L 1451.75 1505.9 C 1450.61 1509.1 1448.75 1510.96 1446.79 1510.88 L 1377.34 1510.88 C 1375.95 1510.69 1374.73 1510.05 1373.97 1509.1 C 1373.22 1508.15 1373 1506.99 1373.37 1505.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1421.5" y="1478.5">button 3</text><text x="1421.5" y="1492.5">press</text></g><path d="M 1472.22 1168.6 C 1473.36 1165.4 1475.22 1163.54 1477.18 1163.62 L 1545.64 1163.62 C 1547.2 1163.58 1548.7 1164.13 1549.67 1165.11 C 1550.65 1166.09 1550.99 1167.38 1550.6 1168.6 L 1531.75 1218.4 C 1530.61 1221.6 1528.75 1223.46 1526.79 1223.38 L 1457.34 1223.38 C 1455.95 1223.19 1454.73 1222.55 1453.97 1221.6 C 1453.22 1220.65 1453 1219.49 1453.37 1218.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1501.5" y="1191">button 3</text><text x="1501.5" y="1205">release</text></g><path d="M 2294.04 1539 C 2296.84 1535.86 2300.82 1534.05 2305.02 1534 L 2338.99 1534 C 2343.19 1534.05 2347.17 1535.86 2349.97 1539 L 2369.95 1562 C 2370.51 1563.28 2370.51 1564.72 2369.95 1566 L 2349.97 1589 C 2347.17 1592.14 2343.19 1593.95 2338.99 1594 L 2305.02 1594 C 2300.82 1593.95 2296.84 1592.14 2294.04 1589 L 2274.06 1566 C 2273.5 1564.72 2273.5 1563.28 2274.06 1562 L 2294.04 1539 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2321.5" y="1561.5">move &gt; </text><text x="2321.5" y="1575.5">threshold</text></g><path d="M 2097.7 1386 L 2279.21 1530.04" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2283.32 1533.31 L 2275.66 1531.7 L 2279.21 1530.04 L 2280.01 1526.21 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="793.5" cy="2601" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="793" y="2605.5">IDLE</text></g><path d="M 2158.04 1539 C 2160.84 1535.86 2164.82 1534.05 2169.02 1534 L 2202.99 1534 C 2207.19 1534.05 2211.17 1535.86 2213.97 1539 L 2233.95 1562 C 2234.51 1563.28 2234.51 1564.72 2233.95 1566 L 2213.97 1589 C 2211.17 1592.14 2207.19 1593.95 2202.99 1594 L 2169.02 1594 C 2164.82 1593.95 2160.84 1592.14 2158.04 1589 L 2138.06 1566 C 2137.5 1564.72 2137.5 1563.28 2138.06 1562 L 2158.04 1539 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2185.5" y="1568.5">timeout</text></g><path d="M 2083.96 1386 L 2165.64 1528.48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2168.25 1533.03 L 2161.73 1528.7 L 2165.64 1528.48 L 2167.8 1525.22 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1922.04 821.5 C 1924.84 818.36 1928.82 816.55 1933.02 816.5 L 1966.99 816.5 C 1971.19 816.55 1975.17 818.36 1977.97 821.5 L 1997.95 844.5 C 1998.51 845.78 1998.51 847.22 1997.95 848.5 L 1977.97 871.5 C 1975.17 874.64 1971.19 876.45 1966.99 876.5 L 1933.02 876.5 C 1928.82 876.45 1924.84 874.64 1922.04 871.5 L 1902.06 848.5 C 1901.5 847.22 1901.5 845.78 1902.06 844.5 L 1922.04 821.5 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1949.5" y="844">first</text><text x="1949.5" y="858">finger up</text></g><path d="M 2052 835.81 L 2004.83 840.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1999.61 841.3 L 2006.21 837.09 L 2004.83 840.75 L 2006.94 844.05 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1001" cy="521" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1000.5" y="525.5">IDLE</text></g><path d="M 2043.54 1539 C 2046.34 1535.86 2050.32 1534.05 2054.52 1534 L 2088.49 1534 C 2092.69 1534.05 2096.67 1535.86 2099.47 1539 L 2119.45 1562 C 2120.01 1563.28 2120.01 1564.72 2119.45 1566 L 2099.47 1589 C 2096.67 1592.14 2092.69 1593.95 2088.49 1594 L 2054.52 1594 C 2050.32 1593.95 2046.34 1592.14 2043.54 1589 L 2023.56 1566 C 2023 1564.72 2023 1563.28 2023.56 1562 L 2043.54 1539 Z" fill="#ffffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2071" y="1561.5">fourth</text><text x="2071" y="1575.5">finger down</text></g><path d="M 2072.4 1386 L 2071.68 1527.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2071.66 1532.88 L 2068.19 1525.86 L 2071.68 1527.63 L 2075.19 1525.9 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1092.67 581 L 1052.16 554.49" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1047.77 551.61 L 1055.54 552.52 L 1052.16 554.49 L 1051.71 558.37 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="628.5" y="1065" width="240" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="748" y="1089.5">[n]FGTAP_DRAGGING_OR_DOUBLETAP</text></g><path d="M 880 1041.17 L 814.54 1062.99" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 809.56 1064.65 L 815.09 1059.11 L 814.54 1062.99 L 817.31 1065.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 720.54 1246 C 723.34 1242.86 727.32 1241.05 731.52 1241 L 765.49 1241 C 769.69 1241.05 773.67 1242.86 776.47 1246 L 796.45 1269 C 797.01 1270.28 797.01 1271.72 796.45 1273 L 776.47 1296 C 773.67 1299.14 769.69 1300.95 765.49 1301 L 731.52 1301 C 727.32 1300.95 723.34 1299.14 720.54 1296 L 700.56 1273 C 700 1271.72 700 1270.28 700.56 1269 L 720.54 1246 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="748" y="1275.5">timeout</text></g><path d="M 748.5 1105 L 748.5 1234.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 748.5 1239.88 L 745 1232.88 L 748.5 1234.63 L 752 1232.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 650.54 967 C 653.34 963.86 657.32 962.05 661.52 962 L 695.49 962 C 699.69 962.05 703.67 963.86 706.47 967 L 726.45 990 C 727.01 991.28 727.01 992.72 726.45 994 L 706.47 1017 C 703.67 1020.14 699.69 1021.95 695.49 1022 L 661.52 1022 C 657.32 1021.95 653.34 1020.14 650.54 1017 L 630.56 994 C 630 992.72 630 991.28 630.56 990 L 650.54 967 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="678" y="989.5">first</text><text x="678" y="1003.5">finger up</text></g><path d="M 733.45 1065 L 704.91 1027.09" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 701.75 1022.89 L 708.76 1026.38 L 704.91 1027.09 L 703.17 1030.59 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 534.72 794.1 C 535.86 790.9 537.72 789.04 539.68 789.12 L 608.14 789.12 C 609.7 789.08 611.2 789.63 612.17 790.61 C 613.15 791.59 613.49 792.88 613.1 794.1 L 594.25 843.9 C 593.11 847.1 591.25 848.96 589.29 848.88 L 519.84 848.88 C 518.45 848.69 517.23 848.05 516.47 847.1 C 515.72 846.15 515.5 844.99 515.87 843.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="564" y="816.5">button [n]</text><text x="564" y="830.5">release</text></g><path d="M 926.54 1121 C 929.34 1117.86 933.32 1116.05 937.52 1116 L 971.49 1116 C 975.69 1116.05 979.67 1117.86 982.47 1121 L 1002.45 1144 C 1003.01 1145.28 1003.01 1146.72 1002.45 1148 L 982.47 1171 C 979.67 1174.14 975.69 1175.95 971.49 1176 L 937.52 1176 C 933.32 1175.95 929.34 1174.14 926.54 1171 L 906.56 1148 C 906 1146.72 906 1145.28 906.56 1144 L 926.54 1121 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="954" y="1143.5">second</text><text x="954" y="1157.5">finger down</text></g><path d="M 816.04 1105 L 899.89 1129.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 904.93 1131.32 L 897.22 1132.69 L 899.89 1129.83 L 899.21 1125.98 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 579.54 1233.5 C 582.34 1230.36 586.32 1228.55 590.52 1228.5 L 624.49 1228.5 C 628.69 1228.55 632.67 1230.36 635.47 1233.5 L 655.45 1256.5 C 656.01 1257.78 656.01 1259.22 655.45 1260.5 L 635.47 1283.5 C 632.67 1286.64 628.69 1288.45 624.49 1288.5 L 590.52 1288.5 C 586.32 1288.45 582.34 1286.64 579.54 1283.5 L 559.56 1260.5 C 559 1259.22 559 1257.78 559.56 1256.5 L 579.54 1233.5 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="607" y="1256">move &gt; </text><text x="607" y="1270">threshold</text></g><path d="M 732.25 1105 L 635.9 1223.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 632.59 1227.63 L 634.28 1219.99 L 635.9 1223.56 L 639.72 1224.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 642.82 1514.5 L 693.57 1559.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 697.5 1562.76 L 689.94 1560.75 L 693.57 1559.29 L 694.57 1555.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2320 550.47 L 2508.71 519.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2513.9 519.04 L 2507.55 523.61 L 2508.71 519.88 L 2506.43 516.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="2190" y="541" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2254.5" y="565.5">HOLD</text></g><path d="M 2307.04 671 C 2309.84 667.86 2313.82 666.05 2318.02 666 L 2351.99 666 C 2356.19 666.05 2360.17 667.86 2362.97 671 L 2382.95 694 C 2383.51 695.28 2383.51 696.72 2382.95 698 L 2362.97 721 C 2360.17 724.14 2356.19 725.95 2351.99 726 L 2318.02 726 C 2313.82 725.95 2309.84 724.14 2307.04 721 L 2287.06 698 C 2286.5 696.72 2286.5 695.28 2287.06 694 L 2307.04 671 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2334.5" y="693.5">first</text><text x="2334.5" y="707.5">finger up</text></g><path d="M 2266.85 581 L 2313.98 660.52" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2316.65 665.04 L 2310.07 660.8 L 2313.98 660.52 L 2316.09 657.23 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2485.5 793.84 L 2506.75 798.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2511.9 799.04 L 2504.36 801.12 L 2506.75 798.03 L 2505.71 794.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2145.54 626 C 2148.34 622.86 2152.32 621.05 2156.52 621 L 2190.49 621 C 2194.69 621.05 2198.67 622.86 2201.47 626 L 2221.45 649 C 2222.01 650.28 2222.01 651.72 2221.45 653 L 2201.47 676 C 2198.67 679.14 2194.69 680.95 2190.49 681 L 2156.52 681 C 2152.32 680.95 2148.34 679.14 2145.54 676 L 2125.56 653 C 2125 651.72 2125 650.28 2125.56 649 L 2145.54 626 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2173" y="648.5">second</text><text x="2173" y="662.5">finger down</text></g><path d="M 2236.89 581 L 2204.94 616.28" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2201.42 620.17 L 2203.52 612.63 L 2204.94 616.28 L 2208.71 617.33 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2130.74 771.5 L 2123.26 802.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2122.04 807.91 L 2120.26 800.29 L 2123.26 802.81 L 2127.07 801.92 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2543.06 1155 L 2743.73 1227.54" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2748.67 1229.32 L 2740.9 1230.23 L 2743.73 1227.54 L 2743.28 1223.65 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="2434.25" y="1116" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2498.75" y="1140.5">TOUCH_2_HOLD</text></g><path d="M 2520.29 1233.5 C 2523.09 1230.36 2527.07 1228.55 2531.27 1228.5 L 2565.24 1228.5 C 2569.44 1228.55 2573.42 1230.36 2576.22 1233.5 L 2596.2 1256.5 C 2596.76 1257.78 2596.76 1259.22 2596.2 1260.5 L 2576.22 1283.5 C 2573.42 1286.64 2569.44 1288.45 2565.24 1288.5 L 2531.27 1288.5 C 2527.07 1288.45 2523.09 1286.64 2520.29 1283.5 L 2500.31 1260.5 C 2499.75 1259.22 2499.75 1257.78 2500.31 1256.5 L 2520.29 1233.5 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2547.75" y="1256">second</text><text x="2547.75" y="1270">finger up</text></g><path d="M 2507.25 1156 L 2533.88 1222.59" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2535.83 1227.46 L 2529.99 1222.26 L 2533.88 1222.59 L 2536.48 1219.66 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2464.32 1156 L 2365.53 1212.57" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2360.97 1215.17 L 2365.31 1208.66 L 2365.53 1212.57 L 2368.78 1214.73 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2623 957 L 2623 561 L 2326.37 561" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2321.12 561 L 2328.12 557.5 L 2326.37 561 L 2328.12 564.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2391.04 1233.5 C 2393.84 1230.36 2397.82 1228.55 2402.02 1228.5 L 2435.99 1228.5 C 2440.19 1228.55 2444.17 1230.36 2446.97 1233.5 L 2466.95 1256.5 C 2467.51 1257.78 2467.51 1259.22 2466.95 1260.5 L 2446.97 1283.5 C 2444.17 1286.64 2440.19 1288.45 2435.99 1288.5 L 2402.02 1288.5 C 2397.82 1288.45 2393.84 1286.64 2391.04 1283.5 L 2371.06 1260.5 C 2370.5 1259.22 2370.5 1257.78 2371.06 1256.5 L 2391.04 1233.5 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2418.5" y="1256">third</text><text x="2418.5" y="1270">finger down</text></g><path d="M 2486.15 1156 L 2442.14 1223.17" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2439.27 1227.56 L 2440.17 1219.79 L 2442.14 1223.17 L 2446.03 1223.63 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2283.5 1366 L 2143.87 1366" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2138.62 1366 L 2145.62 1362.5 L 2143.87 1366 L 2145.62 1369.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2238 2263 L 2395.93 2112.39" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2399.73 2108.77 L 2397.08 2116.14 L 2395.93 2112.39 L 2392.25 2111.07 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="2173" y="2223" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2237.5" y="2247.5">TOUCH_3_HOLD</text></g><path d="M 2209.91 2111 L 2232.42 2216.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2233.51 2221.91 L 2228.63 2215.79 L 2232.42 2216.77 L 2235.48 2214.33 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1934.04 2361 C 1936.84 2357.86 1940.82 2356.05 1945.02 2356 L 1978.99 2356 C 1983.19 2356.05 1987.17 2357.86 1989.97 2361 L 2009.95 2384 C 2010.51 2385.28 2010.51 2386.72 2009.95 2388 L 1989.97 2411 C 1987.17 2414.14 1983.19 2415.95 1978.99 2416 L 1945.02 2416 C 1940.82 2415.95 1936.84 2414.14 1934.04 2411 L 1914.06 2388 C 1913.5 2386.72 1913.5 2385.28 1914.06 2384 L 1934.04 2361 Z" fill="#ffffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1961.5" y="2383.5">fourth</text><text x="1961.5" y="2397.5">finger down</text></g><rect x="1693" y="2481" width="130" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1757.5" y="2505.5">DEAD</text></g><path d="M 2199.4 2263 L 2016.15 2357.94" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2011.49 2360.36 L 2016.1 2354.03 L 2016.15 2357.94 L 2019.32 2360.24 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1913.5 2413.34 L 1799.03 2477.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1794.45 2480.45 L 1798.83 2473.96 L 1799.03 2477.87 L 1802.27 2480.06 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2061.46 1594 L 1766.71 2474.96" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1765.05 2479.94 L 1763.95 2472.19 L 1766.71 2474.96 L 1770.59 2474.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1674.04 2576 C 1676.84 2572.86 1680.82 2571.05 1685.02 2571 L 1718.99 2571 C 1723.19 2571.05 1727.17 2572.86 1729.97 2576 L 1749.95 2599 C 1750.51 2600.28 1750.51 2601.72 1749.95 2603 L 1729.97 2626 C 1727.17 2629.14 1723.19 2630.95 1718.99 2631 L 1685.02 2631 C 1680.82 2630.95 1676.84 2629.14 1674.04 2626 L 1654.06 2603 C 1653.5 2601.72 1653.5 2600.28 1654.06 2599 L 1674.04 2576 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1701.5" y="2605.5">any finger up</text></g><path d="M 1816.54 2605 C 1819.34 2601.86 1823.32 2600.05 1827.52 2600 L 1861.49 2600 C 1865.69 2600.05 1869.67 2601.86 1872.47 2605 L 1892.45 2628 C 1893.01 2629.28 1893.01 2630.72 1892.45 2632 L 1872.47 2655 C 1869.67 2658.14 1865.69 2659.95 1861.49 2660 L 1827.52 2660 C 1823.32 2659.95 1819.34 2658.14 1816.54 2655 L 1796.56 2632 C 1796 2630.72 1796 2629.28 1796.56 2628 L 1816.54 2605 Z" fill="#ffffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1844" y="2627.5">fourth</text><text x="1844" y="2641.5">finger up</text></g><path d="M 1975.54 1479 C 1978.34 1475.86 1982.32 1474.05 1986.52 1474 L 2020.49 1474 C 2024.69 1474.05 2028.67 1475.86 2031.47 1479 L 2051.45 1502 C 2052.01 1503.28 2052.01 1504.72 2051.45 1506 L 2031.47 1529 C 2028.67 1532.14 2024.69 1533.95 2020.49 1534 L 1986.52 1534 C 1982.32 1533.95 1978.34 1532.14 1975.54 1529 L 1955.56 1506 C 1955 1504.72 1955 1503.28 1955.56 1502 L 1975.54 1479 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2003" y="1508.5">any finger up</text></g><path d="M 2062.5 1386 L 2021.35 1468.3" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2019 1473 L 2019 1465.17 L 2021.35 1468.3 L 2025.26 1468.3 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2230.04 2331 C 2232.84 2327.86 2236.82 2326.05 2241.02 2326 L 2274.99 2326 C 2279.19 2326.05 2283.17 2327.86 2285.97 2331 L 2305.95 2354 C 2306.51 2355.28 2306.51 2356.72 2305.95 2358 L 2285.97 2381 C 2283.17 2384.14 2279.19 2385.95 2274.99 2386 L 2241.02 2386 C 2236.82 2385.95 2232.84 2384.14 2230.04 2381 L 2210.06 2358 C 2209.5 2356.72 2209.5 2355.28 2210.06 2354 L 2230.04 2331 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2257.5" y="2360.5">any finger up</text></g><path d="M 2241.54 2263 L 2251.58 2319.73" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2252.5 2324.9 L 2247.83 2318.62 L 2251.58 2319.73 L 2254.72 2317.4 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2596.5 2351 L 2703 2351 Q 2713 2351 2713 2341 L 2713 1146 Q 2713 1136 2703 1136 L 2570.62 1136" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2565.37 1136 L 2572.37 1132.5 L 2570.62 1136 L 2572.37 1139.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1746.8 2521 L 1721.91 2565.44" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1719.35 2570.02 L 1719.71 2562.21 L 1721.91 2565.44 L 1725.82 2565.63 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1771.41 2521 L 1820.84 2594.71" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1823.76 2599.07 L 1816.96 2595.21 L 1820.84 2594.71 L 1822.77 2591.31 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="1765" cy="2981" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1764.5" y="2985.5">IDLE</text></g><path d="M 1760.4 2821 L 1812 2866 L 1760.4 2911 L 1708.8 2866 Z" fill="#ffffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1759.9" y="2863.5">if finger</text><text x="1759.9" y="2877.5">count == 0</text></g><path d="M 1718.19 2724.5 L 1745.16 2814.9" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1746.66 2819.93 L 1741.3 2814.22 L 1745.16 2814.9 L 1748.01 2812.22 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1833.81 2660 L 1778.57 2815" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1776.81 2819.95 L 1775.86 2812.18 L 1778.57 2815 L 1782.46 2814.53 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1762.2 2911 L 1763.55 2944.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1763.76 2949.88 L 1759.98 2943.03 L 1763.55 2944.64 L 1766.97 2942.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="993" y="1563.5" width="140" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1062.5" y="1588">[n]FGTAP_DRAGGING_2</text></g><path d="M 1115.96 1143.5 L 1158.68 1208.19" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1161.57 1212.57 L 1154.79 1208.65 L 1158.68 1208.19 L 1160.64 1204.8 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1071 1603.5 L 1124.63 1737.59" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1126.58 1742.46 L 1120.74 1737.26 L 1124.63 1737.59 L 1127.23 1734.66 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1006.9 1868.5 L 745.57 1608" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 741.85 1604.29 L 749.28 1606.75 L 745.57 1608 L 744.34 1611.71 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1000.54 1787.5 C 1003.34 1784.36 1007.32 1782.55 1011.52 1782.5 L 1045.49 1782.5 C 1049.69 1782.55 1053.67 1784.36 1056.47 1787.5 L 1076.45 1810.5 C 1077.01 1811.78 1077.01 1813.22 1076.45 1814.5 L 1056.47 1837.5 C 1053.67 1840.64 1049.69 1842.45 1045.49 1842.5 L 1011.52 1842.5 C 1007.32 1842.45 1003.34 1840.64 1000.54 1837.5 L 980.56 1814.5 C 980 1813.22 980 1811.78 980.56 1810.5 L 1000.54 1787.5 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1028" y="1810">second</text><text x="1028" y="1824">finger down</text></g><path d="M 747.86 1603.5 L 983.11 1778.7" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 987.32 1781.83 L 979.61 1780.46 L 983.11 1778.7 L 983.8 1774.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1048.1 1678.5 L 1058.88 1609.79" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1059.69 1604.6 L 1062.06 1612.06 L 1058.88 1609.79 L 1055.15 1610.98 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 705.84 2265.5 L 784.05 2564.84" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 785.38 2569.92 L 780.22 2564.03 L 784.05 2564.84 L 787 2562.26 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 792.04 1776 C 794.84 1772.86 798.82 1771.05 803.02 1771 L 836.99 1771 C 841.19 1771.05 845.17 1772.86 847.97 1776 L 867.95 1799 C 868.51 1800.28 868.51 1801.72 867.95 1803 L 847.97 1826 C 845.17 1829.14 841.19 1830.95 836.99 1831 L 803.02 1831 C 798.82 1830.95 794.84 1829.14 792.04 1826 L 772.06 1803 C 771.5 1801.72 771.5 1800.28 772.06 1799 L 792.04 1776 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="819.5" y="1798.5">third</text><text x="819.5" y="1812.5">finger down</text></g><path d="M 1040.66 1603.5 L 858.26 1766.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 854.35 1770.25 L 857.23 1762.98 L 858.26 1766.75 L 861.9 1768.19 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 3123.54 832 C 3126.34 828.86 3130.32 827.05 3134.52 827 L 3168.49 827 C 3172.69 827.05 3176.67 828.86 3179.47 832 L 3199.45 855 C 3200.01 856.28 3200.01 857.72 3199.45 859 L 3179.47 882 C 3176.67 885.14 3172.69 886.95 3168.49 887 L 3134.52 887 C 3130.32 886.95 3126.34 885.14 3123.54 882 L 3103.56 859 C 3103 857.72 3103 856.28 3103.56 855 L 3123.54 832 Z" fill="#000000" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#FFFFFF" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="3151" y="847.5">phys</text><text x="3151" y="861.5">button</text><text x="3151" y="875.5">press</text></g><path d="M 2315.57 581 L 3096.95 838.99" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3101.94 840.64 L 3094.19 841.76 L 3096.95 838.99 L 3096.39 835.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2182 830.76 L 3096.63 855.51" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3101.88 855.66 L 3094.79 858.97 L 3096.63 855.51 L 3094.98 851.97 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2546.01 1116 L 3097.15 880.25" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3101.97 878.19 L 3096.91 884.16 L 3097.15 880.25 L 3094.16 877.72 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2251.18 2223 L 3128.22 892.32" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3131.11 887.93 L 3130.18 895.7 L 3128.22 892.32 L 3124.34 891.85 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2891 2009.5 L 2891 2501 L 1829.37 2501" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1824.12 2501 L 1831.12 2497.5 L 1829.37 2501 L 1831.12 2504.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1994.6 61 L 3102.65 823.39" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 3106.98 826.37 L 3099.23 825.28 L 3102.65 823.39 L 3103.19 819.52 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 123.54 1328.5 C 126.34 1325.36 130.32 1323.55 134.52 1323.5 L 168.49 1323.5 C 172.69 1323.55 176.67 1325.36 179.47 1328.5 L 199.45 1351.5 C 200.01 1352.78 200.01 1354.22 199.45 1355.5 L 179.47 1378.5 C 176.67 1381.64 172.69 1383.45 168.49 1383.5 L 134.52 1383.5 C 130.32 1383.45 126.34 1381.64 123.54 1378.5 L 103.56 1355.5 C 103 1354.22 103 1352.78 103.56 1351.5 L 123.54 1328.5 Z" fill="#000000" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#FFFFFF" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="151" y="1344">phys</text><text x="151" y="1358">button</text><text x="151" y="1372">press</text></g><path d="M 124.22 2014.6 C 125.36 2011.4 127.22 2009.54 129.18 2009.62 L 197.64 2009.62 C 199.2 2009.58 200.7 2010.13 201.67 2011.11 C 202.65 2012.09 202.99 2013.38 202.6 2014.6 L 183.75 2064.4 C 182.61 2067.6 180.75 2069.46 178.79 2069.38 L 109.34 2069.38 C 107.95 2069.19 106.73 2068.55 105.97 2067.6 C 105.22 2066.65 105 2065.49 105.37 2064.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="153.5" y="2037">button [n]</text><text x="153.5" y="2051">release</text></g><path d="M 153 2396 L 153 2501 L 1686.63 2501" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1691.88 2501 L 1684.88 2504.5 L 1686.63 2501 L 1684.88 2497.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 704.03 1105 L 205.81 1329.08" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 201.02 1331.23 L 205.97 1325.17 L 205.81 1329.08 L 208.84 1331.55 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 671.48 1563.5 L 205.9 1375.47" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 201.04 1373.51 L 208.84 1372.88 L 205.9 1375.47 L 206.22 1379.37 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 993 1565.84 L 206.17 1367.3" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 201.08 1366.01 L 208.73 1364.33 L 206.17 1367.3 L 207.01 1371.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="488.5" y="2100.5" width="170" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="573" y="2125">[n]FGTAP_DRAGGING_WAIT</text></g><path d="M 552.04 2160.5 C 554.84 2157.36 558.82 2155.55 563.02 2155.5 L 596.99 2155.5 C 601.19 2155.55 605.17 2157.36 607.97 2160.5 L 627.95 2183.5 C 628.51 2184.78 628.51 2186.22 627.95 2187.5 L 607.97 2210.5 C 605.17 2213.64 601.19 2215.45 596.99 2215.5 L 563.02 2215.5 C 558.82 2215.45 554.84 2213.64 552.04 2210.5 L 532.06 2187.5 C 531.5 2186.22 531.5 2184.78 532.06 2183.5 L 552.04 2160.5 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="579.5" y="2190">timeout</text></g><path d="M 628.5 2005.45 L 607.56 2014.23" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 602.72 2016.26 L 607.82 2010.32 L 607.56 2014.23 L 610.53 2016.78 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 575.5 2140.5 L 576.37 2149.16" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 576.89 2154.39 L 572.71 2147.77 L 576.37 2149.16 L 579.67 2147.07 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 628.5 2206.05 L 643.14 2212.25" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 647.97 2214.3 L 640.16 2214.79 L 643.14 2212.25 L 642.89 2208.35 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 375.54 2107.5 C 378.34 2104.36 382.32 2102.55 386.52 2102.5 L 420.49 2102.5 C 424.69 2102.55 428.67 2104.36 431.47 2107.5 L 451.45 2130.5 C 452.01 2131.78 452.01 2133.22 451.45 2134.5 L 431.47 2157.5 C 428.67 2160.64 424.69 2162.45 420.49 2162.5 L 386.52 2162.5 C 382.32 2162.45 378.34 2160.64 375.54 2157.5 L 355.56 2134.5 C 355 2133.22 355 2131.78 355.56 2130.5 L 375.54 2107.5 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="403" y="2130">first</text><text x="403" y="2144">finger down</text></g><path d="M 488.5 2126.5 L 458.35 2128.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 453.12 2129 L 459.85 2125.01 L 458.35 2128.63 L 460.34 2132 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1903.5 200.7 C 1919.62 206.91 1937.38 206.91 1953.5 200.7 C 1969.62 194.5 1987.38 194.5 2003.5 200.7 L 2003.5 253.28 C 1987.38 247.08 1969.62 247.08 1953.5 253.28 C 1937.38 259.49 1919.62 259.49 1903.5 253.28 L 1903.5 200.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1953" y="231.5">TOUCH_TOUCH</text></g><path d="M 1390.5 527.7 C 1406.62 533.91 1424.38 533.91 1440.5 527.7 C 1456.62 521.5 1474.38 521.5 1490.5 527.7 L 1490.5 580.28 C 1474.38 574.08 1456.62 574.08 1440.5 580.28 C 1424.38 586.49 1406.62 586.49 1390.5 580.28 L 1390.5 527.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1440" y="558.5">TOUCH_IDLE</text></g><path d="M 1658.17 361 L 1481.92 517.28" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1477.99 520.76 L 1480.91 513.5 L 1481.92 517.28 L 1485.55 518.73 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1441.77 586.5 L 1443.58 632.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1443.78 637.88 L 1440.01 631.03 L 1443.58 632.64 L 1447.01 630.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1954.53 161 L 1954.11 188.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1954.03 193.38 L 1950.64 186.33 L 1954.11 188.13 L 1957.63 186.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1955.24 259.5 L 1956.59 284.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1956.87 289.88 L 1953 283.08 L 1956.59 284.64 L 1959.99 282.71 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2132.5 465.2 C 2148.62 471.41 2166.38 471.41 2182.5 465.2 C 2198.62 459 2216.38 459 2232.5 465.2 L 2232.5 517.78 C 2216.38 511.58 2198.62 511.58 2182.5 517.78 C 2166.38 523.99 2148.62 523.99 2132.5 517.78 L 2132.5 465.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2182" y="496">TOUCH_DEAD</text></g><path d="M 2612 520.65 L 2896.75 577.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2901.9 578.33 L 2894.36 580.4 L 2896.75 577.31 L 2895.72 573.53 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2088 447.88 L 2126.72 465.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2131.48 467.95 L 2123.66 468.2 L 2126.72 465.75 L 2126.6 461.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2216.4 524 L 2229.54 536.59" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2233.33 540.23 L 2225.85 537.91 L 2229.54 536.59 L 2230.7 532.86 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1931.16 816.5 L 1906.29 776.89" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1903.5 772.45 L 1910.19 776.51 L 1906.29 776.89 L 1904.26 780.24 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2370.5 962.2 C 2386.62 968.41 2404.38 968.41 2420.5 962.2 C 2436.62 956 2454.38 956 2470.5 962.2 L 2470.5 1014.78 C 2454.38 1008.58 2436.62 1008.58 2420.5 1014.78 C 2404.38 1020.99 2386.62 1020.99 2370.5 1014.78 L 2370.5 962.2 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2420" y="993">TOUCH_DEAD</text></g><path d="M 2482.96 1093.5 L 2489.3 1110.05" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2491.18 1114.96 L 2485.41 1109.67 L 2489.3 1110.05 L 2491.95 1107.17 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2246 990.46 L 2364.13 989.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2369.38 989.07 L 2362.42 992.65 L 2364.13 989.13 L 2362.34 985.65 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2564.5 963.2 C 2580.62 969.41 2598.38 969.41 2614.5 963.2 C 2630.62 957 2648.38 957 2664.5 963.2 L 2664.5 1015.78 C 2648.38 1009.58 2630.62 1009.58 2614.5 1015.78 C 2598.38 1021.99 2580.62 1021.99 2564.5 1015.78 L 2564.5 963.2 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2614" y="994">TOUCH_IDLE</text></g><path d="M 2555.64 1228.5 L 2604.97 1028.18" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2606.23 1023.09 L 2607.95 1030.72 L 2604.97 1028.18 L 2601.16 1029.05 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2088.5 712.7 C 2104.62 718.91 2122.38 718.91 2138.5 712.7 C 2154.62 706.5 2172.38 706.5 2188.5 712.7 L 2188.5 765.28 C 2172.38 759.08 2154.62 759.08 2138.5 765.28 C 2122.38 771.49 2104.62 771.49 2088.5 765.28 L 2088.5 712.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2138" y="743.5">TOUCH_TOUCH</text></g><path d="M 2161.57 681 L 2153.78 700.58" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2151.84 705.46 L 2151.17 697.66 L 2153.78 700.58 L 2157.68 700.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1886.24 471 L 2103.54 701.86" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2107.14 705.69 L 2099.8 702.99 L 2103.54 701.86 L 2104.89 698.19 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1794.5 820.2 C 1810.62 826.41 1828.38 826.41 1844.5 820.2 C 1860.62 814 1878.38 814 1894.5 820.2 L 1894.5 872.78 C 1878.38 866.58 1860.62 866.58 1844.5 872.78 C 1828.38 878.99 1810.62 878.99 1794.5 872.78 L 1794.5 820.2 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1844" y="851">TOUCH_IDLE</text></g><path d="M 1883.21 941 L 1860.23 884.89" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1858.24 880.03 L 1864.13 885.19 L 1860.23 884.89 L 1857.65 887.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2279.5 1046.2 C 2295.62 1052.41 2313.38 1052.41 2329.5 1046.2 C 2345.62 1040 2363.38 1040 2379.5 1046.2 L 2379.5 1098.78 C 2363.38 1092.58 2345.62 1092.58 2329.5 1098.78 C 2313.38 1104.99 2295.62 1104.99 2279.5 1098.78 L 2279.5 1046.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2329" y="1077">TOUCH_IDLE</text></g><path d="M 2314.66 1213.5 L 2325.41 1111.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2325.96 1106.11 L 2328.71 1113.44 L 2325.41 1111.33 L 2321.75 1112.71 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2283.5 1339.7 C 2299.62 1345.91 2317.38 1345.91 2333.5 1339.7 C 2349.62 1333.5 2367.38 1333.5 2383.5 1339.7 L 2383.5 1392.28 C 2367.38 1386.08 2349.62 1386.08 2333.5 1392.28 C 2317.38 1398.49 2299.62 1398.49 2283.5 1392.28 L 2283.5 1339.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2333" y="1370.5">TOUCH_TOUCH</text></g><path d="M 2395.14 1288.5 L 2363.31 1328.52" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2360.04 1332.63 L 2361.66 1324.97 L 2363.31 1328.52 L 2367.14 1329.33 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2496.5 2324.7 C 2512.62 2330.91 2530.38 2330.91 2546.5 2324.7 C 2562.62 2318.5 2580.38 2318.5 2596.5 2324.7 L 2596.5 2377.28 C 2580.38 2371.08 2562.62 2371.08 2546.5 2377.28 C 2530.38 2383.49 2512.62 2383.49 2496.5 2377.28 L 2496.5 2324.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2546" y="2348.5">that finger</text><text x="2546" y="2362.5">TOUCH_IDLE</text></g><path d="M 2306.5 2355.16 L 2490.13 2351.98" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2495.38 2351.89 L 2488.44 2355.51 L 2490.13 2351.98 L 2488.32 2348.51 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2153 1948.2 C 2169.12 1954.41 2186.88 1954.41 2203 1948.2 C 2219.12 1942 2236.88 1942 2253 1948.2 L 2253 2000.78 C 2236.88 1994.58 2219.12 1994.58 2203 2000.78 C 2186.88 2006.99 2169.12 2006.99 2153 2000.78 L 2153 1948.2 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2202.5" y="1979">TOUCH_DEAD</text></g><path d="M 2187.24 1594 L 2201.39 1935.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2201.61 1940.88 L 2197.82 1934.03 L 2201.39 1935.64 L 2204.82 1933.74 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2370.5 1564 L 2883 1564 L 2883 1837.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2883 1842.88 L 2879.5 1835.88 L 2883 1837.63 L 2886.5 1835.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1414.89 1561 L 1418.77 1517.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1419.23 1512.11 L 1422.1 1519.4 L 1418.77 1517.34 L 1415.13 1518.78 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1883.5 1569.7 C 1899.62 1575.91 1917.38 1575.91 1933.5 1569.7 C 1949.62 1563.5 1967.38 1563.5 1983.5 1569.7 L 1983.5 1622.28 C 1967.38 1616.08 1949.62 1616.08 1933.5 1622.28 C 1917.38 1628.49 1899.62 1628.49 1883.5 1622.28 L 1883.5 1569.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1933" y="1593.5">that finger</text><text x="1933" y="1607.5">TOUCH_IDLE</text></g><path d="M 1980.67 1534 L 1962.08 1558.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1958.91 1562.61 L 1960.36 1554.92 L 1962.08 1558.43 L 1965.93 1559.16 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 880 998.2 C 896.12 1004.41 913.88 1004.41 930 998.2 C 946.12 992 963.88 992 980 998.2 L 980 1050.78 C 963.88 1044.58 946.12 1044.58 930 1050.78 C 913.88 1056.99 896.12 1056.99 880 1050.78 L 880 998.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="929.5" y="1029">TOUCH_TOUCH</text></g><path d="M 986.06 971 L 968.66 987.6" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 964.87 991.23 L 967.51 983.86 L 968.66 987.6 L 972.35 988.93 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 644 868.2 C 660.12 874.41 677.88 874.41 694 868.2 C 710.12 862 727.88 862 744 868.2 L 744 920.78 C 727.88 914.58 710.12 914.58 694 920.78 C 677.88 926.99 660.12 926.99 644 920.78 L 644 868.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="693.5" y="899">TOUCH_IDLE</text></g><path d="M 1044.5 1084.7 C 1060.62 1090.91 1078.38 1090.91 1094.5 1084.7 C 1110.62 1078.5 1128.38 1078.5 1144.5 1084.7 L 1144.5 1137.28 C 1128.38 1131.08 1110.62 1131.08 1094.5 1137.28 C 1078.38 1143.49 1060.62 1143.49 1044.5 1137.28 L 1044.5 1084.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1094" y="1115.5">TOUCH_TOUCH</text></g><path d="M 1003 1133.88 L 1038.32 1125.04" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1043.42 1123.77 L 1037.47 1128.86 L 1038.32 1125.04 L 1035.78 1122.07 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 556 1455.7 C 572.12 1461.91 589.88 1461.91 606 1455.7 C 622.12 1449.5 639.88 1449.5 656 1455.7 L 656 1508.28 C 639.88 1502.08 622.12 1502.08 606 1508.28 C 589.88 1514.49 572.12 1514.49 556 1508.28 L 556 1455.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="605.5" y="1486.5">TOUCH_DEAD</text></g><path d="M 607.3 1288.5 L 606.26 1443.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 606.23 1448.38 L 602.77 1441.36 L 606.26 1443.13 L 609.77 1441.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 728.24 1301 L 631.51 1444.22" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 628.57 1448.57 L 629.59 1440.81 L 631.51 1444.22 L 635.39 1444.73 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 628.5 1958.2 C 644.62 1964.41 662.38 1964.41 678.5 1958.2 C 694.62 1952 712.38 1952 728.5 1958.2 L 728.5 2010.78 C 712.38 2004.58 694.62 2004.58 678.5 2010.78 C 662.38 2016.99 644.62 2016.99 628.5 2010.78 L 628.5 1958.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="678" y="1989">TOUCH_IDLE</text></g><path d="M 716.07 1723.5 L 679.53 1945.72" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 678.68 1950.9 L 676.36 1943.42 L 679.53 1945.72 L 683.27 1944.56 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 363 1965.7 C 379.12 1971.91 396.88 1971.91 413 1965.7 C 429.12 1959.5 446.88 1959.5 463 1965.7 L 463 2018.28 C 446.88 2012.08 429.12 2012.08 413 2018.28 C 396.88 2024.49 379.12 2024.49 363 2018.28 L 363 1965.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="412.5" y="1996.5">TOUCH_TOUCH</text></g><path d="M 993 1684.7 C 1009.12 1690.91 1026.88 1690.91 1043 1684.7 C 1059.12 1678.5 1076.88 1678.5 1093 1684.7 L 1093 1737.28 C 1076.88 1731.08 1059.12 1731.08 1043 1737.28 C 1026.88 1743.49 1009.12 1743.49 993 1737.28 L 993 1684.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1042.5" y="1715.5">TOUCH_TOUCH</text></g><path d="M 1115.59 1803.5 L 1068.78 1863.48" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1065.55 1867.62 L 1067.1 1859.95 L 1068.78 1863.48 L 1072.62 1864.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2385.5 757.7 C 2401.62 763.91 2419.38 763.91 2435.5 757.7 C 2451.62 751.5 2469.38 751.5 2485.5 757.7 L 2485.5 810.28 C 2469.38 804.08 2451.62 804.08 2435.5 810.28 C 2419.38 816.49 2401.62 816.49 2385.5 810.28 L 2385.5 757.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2435" y="788.5">TOUCH_IDLE</text></g><path d="M 2369.26 726 L 2393.59 747.3" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2397.54 750.76 L 2389.97 748.79 L 2393.59 747.3 L 2394.58 743.52 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2109.5 1189.7 C 2125.62 1195.91 2143.38 1195.91 2159.5 1189.7 C 2175.62 1183.5 2193.38 1183.5 2209.5 1189.7 L 2209.5 1242.28 C 2193.38 1236.08 2175.62 1236.08 2159.5 1242.28 C 2143.38 1248.49 2125.62 1248.49 2109.5 1242.28 L 2109.5 1189.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2159" y="1220.5">TOUCH_TOUCH</text></g><path d="M 2149.46 1093.5 L 2156.32 1177.15" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2156.74 1182.39 L 2152.68 1175.7 L 2156.32 1177.15 L 2159.66 1175.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1658.5 2665.7 C 1674.62 2671.91 1692.38 2671.91 1708.5 2665.7 C 1724.62 2659.5 1742.38 2659.5 1758.5 2665.7 L 1758.5 2718.28 C 1742.38 2712.08 1724.62 2712.08 1708.5 2718.28 C 1692.38 2724.49 1674.62 2724.49 1658.5 2718.28 L 1658.5 2665.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1708" y="2689.5">that finger</text><text x="1708" y="2703.5">TOUCH_IDLE</text></g><path d="M 1704.14 2631 L 1705.72 2653.15" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1706.1 2658.38 L 1702.11 2651.65 L 1705.72 2653.15 L 1709.09 2651.15 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2841 1850.2 C 2857.12 1856.41 2874.88 1856.41 2891 1850.2 C 2907.12 1844 2924.88 1844 2941 1850.2 L 2941 1902.78 C 2924.88 1896.58 2907.12 1896.58 2891 1902.78 C 2874.88 1908.99 2857.12 1908.99 2841 1902.78 L 2841 1850.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2890.5" y="1881">TOUCH_DEAD</text></g><path d="M 3153 887 L 3153 1876.5 L 2947.37 1876.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2942.12 1876.5 L 2949.12 1873 L 2947.37 1876.5 L 2949.12 1880 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2840.5 1900.7 C 2856.62 1906.91 2874.38 1906.91 2890.5 1900.7 C 2906.62 1894.5 2924.38 1894.5 2940.5 1900.7 L 2940.5 1953.28 C 2924.38 1947.08 2906.62 1947.08 2890.5 1953.28 C 2874.38 1959.49 2856.62 1959.49 2840.5 1953.28 L 2840.5 1900.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2890" y="1931.5">TOUCH_DEAD</text></g><path d="M 2840.5 1950.7 C 2856.62 1956.91 2874.38 1956.91 2890.5 1950.7 C 2906.62 1944.5 2924.38 1944.5 2940.5 1950.7 L 2940.5 2003.28 C 2924.38 1997.08 2906.62 1997.08 2890.5 2003.28 C 2874.38 2009.49 2856.62 2009.49 2840.5 2003.28 L 2840.5 1950.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2890" y="1981.5">TOUCH_DEAD</text></g><path d="M 103 2237.2 C 119.12 2243.41 136.88 2243.41 153 2237.2 C 169.12 2231 186.88 2231 203 2237.2 L 203 2289.78 C 186.88 2283.58 169.12 2283.58 153 2289.78 C 136.88 2295.99 119.12 2295.99 103 2289.78 L 103 2237.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="152.5" y="2268">TOUCH_DEAD</text></g><path d="M 153.87 2069.5 L 153.17 2224.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 153.15 2229.88 L 149.68 2222.87 L 153.17 2224.63 L 156.68 2222.9 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 103 2287.2 C 119.12 2293.41 136.88 2293.41 153 2287.2 C 169.12 2281 186.88 2281 203 2287.2 L 203 2339.78 C 186.88 2333.58 169.12 2333.58 153 2339.78 C 136.88 2345.99 119.12 2345.99 103 2339.78 L 103 2287.2 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="152.5" y="2318">TOUCH_DEAD</text></g><path d="M 103 2337.2 C 119.12 2343.41 136.88 2343.41 153 2337.2 C 169.12 2331 186.88 2331 203 2337.2 L 203 2389.78 C 186.88 2383.58 169.12 2383.58 153 2389.78 C 136.88 2395.99 119.12 2395.99 103 2389.78 L 103 2337.2 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="152.5" y="2368">TOUCH_DEAD</text></g><path d="M 2420.5 1034.7 C 2436.62 1040.91 2454.38 1040.91 2470.5 1034.7 C 2486.62 1028.5 2504.38 1028.5 2520.5 1034.7 L 2520.5 1087.28 C 2504.38 1081.08 2486.62 1081.08 2470.5 1087.28 C 2454.38 1093.49 2436.62 1093.49 2420.5 1087.28 L 2420.5 1034.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2470" y="1065.5">TOUCH_DEAD</text></g><path d="M 2442.91 1021 L 2444.47 1023.26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2447.45 1027.58 L 2440.6 1023.8 L 2444.47 1023.26 L 2446.36 1019.83 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2153 2000.2 C 2169.12 2006.41 2186.88 2006.41 2203 2000.2 C 2219.12 1994 2236.88 1994 2253 2000.2 L 2253 2052.78 C 2236.88 2046.58 2219.12 2046.58 2203 2052.78 C 2186.88 2058.99 2169.12 2058.99 2153 2052.78 L 2153 2000.2 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2202.5" y="2031">TOUCH_DEAD</text></g><path d="M 2153 2052.2 C 2169.12 2058.41 2186.88 2058.41 2203 2052.2 C 2219.12 2046 2236.88 2046 2253 2052.2 L 2253 2104.78 C 2236.88 2098.58 2219.12 2098.58 2203 2104.78 C 2186.88 2110.99 2169.12 2110.99 2153 2104.78 L 2153 2052.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2202.5" y="2083">TOUCH_DEAD</text></g><path d="M 980 669.73 L 991.69 674.2" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 996.59 676.07 L 988.8 676.84 L 991.69 674.2 L 991.3 670.31 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 644 865.35 L 619 850.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 614.47 848.13 L 622.28 848.63 L 619 850.77 L 618.75 854.68 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 683.27 962 L 687.83 933.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 688.66 928.1 L 691.02 935.57 L 687.83 933.29 L 684.1 934.47 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="213" y="1591" width="200" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="312.5" y="1615.5">[n]FGTAP_DRAGGING_OR_TAP</text></g><path d="M 203.54 1791.5 C 206.34 1788.36 210.32 1786.55 214.52 1786.5 L 248.49 1786.5 C 252.69 1786.55 256.67 1788.36 259.47 1791.5 L 279.45 1814.5 C 280.01 1815.78 280.01 1817.22 279.45 1818.5 L 259.47 1841.5 C 256.67 1844.64 252.69 1846.45 248.49 1846.5 L 214.52 1846.5 C 210.32 1846.45 206.34 1844.64 203.54 1841.5 L 183.56 1818.5 C 183 1817.22 183 1815.78 183.56 1814.5 L 203.54 1791.5 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="231" y="1814">first</text><text x="231" y="1828">finger up</text></g><path d="M 305.07 1631 L 245.75 1780.58" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 243.81 1785.46 L 243.14 1777.66 L 245.75 1780.58 L 249.64 1780.24 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 356.54 1454 C 359.34 1450.86 363.32 1449.05 367.52 1449 L 401.49 1449 C 405.69 1449.05 409.67 1450.86 412.47 1454 L 432.45 1477 C 433.01 1478.28 433.01 1479.72 432.45 1481 L 412.47 1504 C 409.67 1507.14 405.69 1508.95 401.49 1509 L 367.52 1509 C 363.32 1508.95 359.34 1507.14 356.54 1504 L 336.56 1481 C 336 1479.72 336 1478.28 336.56 1477 L 356.54 1454 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="384" y="1483.5">timeout</text></g><path d="M 323.83 1591 L 365.22 1514.6" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 367.72 1509.98 L 367.46 1517.81 L 365.22 1514.6 L 361.31 1514.47 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 433 1494.06 L 650.52 1561.61" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 655.53 1563.17 L 647.81 1564.43 L 650.52 1561.61 L 649.88 1557.75 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 433.54 1528.5 C 436.34 1525.36 440.32 1523.55 444.52 1523.5 L 478.49 1523.5 C 482.69 1523.55 486.67 1525.36 489.47 1528.5 L 509.45 1551.5 C 510.01 1552.78 510.01 1554.22 509.45 1555.5 L 489.47 1578.5 C 486.67 1581.64 482.69 1583.45 478.49 1583.5 L 444.52 1583.5 C 440.32 1583.45 436.34 1581.64 433.54 1578.5 L 413.56 1555.5 C 413 1554.22 413 1552.78 413.56 1551.5 L 433.54 1528.5 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="461" y="1551">move &gt; </text><text x="461" y="1565">threshold</text></g><path d="M 364.65 1591 L 407.06 1574.58" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 411.96 1572.68 L 406.69 1578.47 L 407.06 1574.58 L 404.17 1571.95 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 510 1559.11 L 649.67 1575.25" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 654.89 1575.86 L 647.53 1578.53 L 649.67 1575.25 L 648.34 1571.58 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 405.53 2102.5 L 410.37 2030.85" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 410.73 2025.62 L 413.75 2032.84 L 410.37 2030.85 L 406.76 2032.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 404.47 1959.5 L 319.87 1637.16" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 318.53 1632.08 L 323.7 1637.96 L 319.87 1637.16 L 316.92 1639.74 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 297.5 2209.2 C 313.62 2215.41 331.38 2215.41 347.5 2209.2 C 363.62 2203 381.38 2203 397.5 2209.2 L 397.5 2261.78 C 381.38 2255.58 363.62 2255.58 347.5 2261.78 C 331.38 2267.99 313.62 2267.99 297.5 2261.78 L 297.5 2209.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="347" y="2240">TOUCH_IDLE</text></g><path d="M 239.81 1846.5 L 336.8 2196.86" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 338.2 2201.92 L 332.96 2196.11 L 336.8 2196.86 L 339.71 2194.24 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 397.5 2235.5 L 642.63 2235.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 647.88 2235.5 L 640.88 2239 L 642.63 2235.5 L 640.88 2232 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 300.46 1591 L 173.7 1388.89" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 170.91 1384.45 L 177.59 1388.52 L 173.7 1388.89 L 171.66 1392.24 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 573.5 1988.5 L 613.5 2028.5 L 573.5 2068.5 L 533.5 2028.5 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="573" y="2026">drag lock</text><text x="573" y="2040">enabled?</text></g><path d="M 613.4 2028.6 L 698 2028.6 L 698 2199.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 698 2204.38 L 694.5 2197.38 L 698 2199.13 L 701.5 2197.38 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2071px; margin-left: 700px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="700" y="2075" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">no</text></switch></g><path d="M 573.5 2068.5 L 573.5 2094.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 573.5 2099.38 L 570 2092.38 L 573.5 2094.13 L 577 2092.38 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2079px; margin-left: 575px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes<br /></div></div></div></foreignObject><text x="575" y="2083" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">yes&#xa;</text></switch></g><path d="M 2723.54 336 C 2726.34 332.86 2730.32 331.05 2734.52 331 L 2768.49 331 C 2772.69 331.05 2776.67 332.86 2779.47 336 L 2799.45 359 C 2800.01 360.28 2800.01 361.72 2799.45 363 L 2779.47 386 C 2776.67 389.14 2772.69 390.95 2768.49 391 L 2734.52 391 C 2730.32 390.95 2726.34 389.14 2723.54 386 L 2703.56 363 C 2703 361.72 2703 360.28 2703.56 359 L 2723.54 336 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2751" y="365.5">thumb</text></g><path d="M 2023 315.1 L 2696.64 357.54" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2701.88 357.87 L 2694.68 360.93 L 2696.64 357.54 L 2695.12 353.94 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2735.5 435.7 C 2751.62 441.91 2769.38 441.91 2785.5 435.7 C 2801.62 429.5 2819.38 429.5 2835.5 435.7 L 2835.5 488.28 C 2819.38 482.08 2801.62 482.08 2785.5 488.28 C 2769.38 494.49 2751.62 494.49 2735.5 488.28 L 2735.5 435.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2785" y="466.5">TOUCH_DEAD</text></g><path d="M 2761.6 391 L 2772.53 423.46" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2774.2 428.44 L 2768.65 422.92 L 2772.53 423.46 L 2775.29 420.69 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2764.61 494.5 L 2585.22 773.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2582.38 778.06 L 2583.22 770.28 L 2585.22 773.64 L 2589.11 774.06 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2304.65 541 L 2697.09 382.92" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2701.96 380.95 L 2696.78 386.82 L 2697.09 382.92 L 2694.16 380.32 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1693" y="646" width="154" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1769.5" y="670.5">TOUCH_2_RELEASE</text></g><path d="M 1632.34 759 C 1635.14 755.86 1639.12 754.05 1643.32 754 L 1677.29 754 C 1681.49 754.05 1685.47 755.86 1688.27 759 L 1708.25 782 C 1708.81 783.28 1708.81 784.72 1708.25 786 L 1688.27 809 C 1685.47 812.14 1681.49 813.95 1677.29 814 L 1643.32 814 C 1639.12 813.95 1635.14 812.14 1632.34 809 L 1612.36 786 C 1611.8 784.72 1611.8 783.28 1612.36 782 L 1632.34 759 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1659.8" y="781.5">second</text><text x="1659.8" y="795.5">finger up</text></g><path d="M 1751.41 686 L 1692.53 749.34" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1688.95 753.18 L 1691.15 745.67 L 1692.53 749.34 L 1696.28 750.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1818.04 538.5 C 1820.84 535.36 1824.82 533.55 1829.02 533.5 L 1862.99 533.5 C 1867.19 533.55 1871.17 535.36 1873.97 538.5 L 1893.95 561.5 C 1894.51 562.78 1894.51 564.22 1893.95 565.5 L 1873.97 588.5 C 1871.17 591.64 1867.19 593.45 1862.99 593.5 L 1829.02 593.5 C 1824.82 593.45 1820.84 591.64 1818.04 588.5 L 1798.06 565.5 C 1797.5 564.22 1797.5 562.78 1798.06 561.5 L 1818.04 538.5 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1845.5" y="568">timeout</text></g><path d="M 1784.83 646 L 1819.96 598.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1823.09 594.4 L 1821.73 602.11 L 1819.96 598.62 L 1816.11 597.94 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1907.04 596 C 1909.84 592.86 1913.82 591.05 1918.02 591 L 1951.99 591 C 1956.19 591.05 1960.17 592.86 1962.97 596 L 1982.95 619 C 1983.51 620.28 1983.51 621.72 1982.95 623 L 1962.97 646 C 1960.17 649.14 1956.19 650.95 1951.99 651 L 1918.02 651 C 1913.82 650.95 1909.84 649.14 1907.04 646 L 1887.06 623 C 1886.5 621.72 1886.5 620.28 1887.06 619 L 1907.04 596 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1934.5" y="618.5">move &gt; </text><text x="1934.5" y="632.5">threshold</text></g><path d="M 1843.33 646 L 1880.36 635.9" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1885.42 634.52 L 1879.59 639.74 L 1880.36 635.9 L 1877.75 632.99 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1894.5 563.2 L 2183.63 561.44" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2188.88 561.4 L 2181.9 564.95 L 2183.63 561.44 L 2181.86 557.95 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1983.5 619.45 L 2896.64 590.3" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2901.88 590.13 L 2895 593.85 L 2896.64 590.3 L 2894.77 586.86 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1611.8 789.97 L 1557.32 796.69" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1552.11 797.33 L 1558.63 793 L 1557.32 796.69 L 1559.49 799.95 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1777.54 1033.5 C 1780.34 1030.36 1784.32 1028.55 1788.52 1028.5 L 1822.49 1028.5 C 1826.69 1028.55 1830.67 1030.36 1833.47 1033.5 L 1853.45 1056.5 C 1854.01 1057.78 1854.01 1059.22 1853.45 1060.5 L 1833.47 1083.5 C 1830.67 1086.64 1826.69 1088.45 1822.49 1088.5 L 1788.52 1088.5 C 1784.32 1088.45 1780.34 1086.64 1777.54 1083.5 L 1757.56 1060.5 C 1757 1059.22 1757 1057.78 1757.56 1056.5 L 1777.54 1033.5 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1805" y="1056">first</text><text x="1805" y="1070">finger down</text></g><path d="M 1771.81 686 L 1802.21 1022.16" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1802.69 1027.39 L 1798.57 1020.73 L 1802.21 1022.16 L 1805.54 1020.1 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1459.06 1044.5 L 1440.66 1057.35" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1436.36 1060.36 L 1440.09 1053.48 L 1440.66 1057.35 L 1444.1 1059.22 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1832.5 712.7 C 1848.62 718.91 1866.38 718.91 1882.5 712.7 C 1898.62 706.5 1916.38 706.5 1932.5 712.7 L 1932.5 765.28 C 1916.38 759.08 1898.62 759.08 1882.5 765.28 C 1866.38 771.49 1848.62 771.49 1832.5 765.28 L 1832.5 712.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1882" y="743.5">TOUCH_IDLE</text></g><path d="M 1832.5 706.56 L 1806.16 689.47" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1801.76 686.61 L 1809.54 687.48 L 1806.16 689.47 L 1805.73 693.35 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1582.04 646 C 1584.84 642.86 1588.82 641.05 1593.02 641 L 1626.99 641 C 1631.19 641.05 1635.17 642.86 1637.97 646 L 1657.95 669 C 1658.51 670.28 1658.51 671.72 1657.95 673 L 1637.97 696 C 1635.17 699.14 1631.19 700.95 1626.99 701 L 1593.02 701 C 1588.82 700.95 1584.84 699.14 1582.04 696 L 1562.06 673 C 1561.5 671.72 1561.5 670.28 1562.06 669 L 1582.04 646 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1609.5" y="668.5">first</text><text x="1609.5" y="682.5">finger up</text></g><path d="M 1693 668.41 L 1664.86 669.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1659.62 669.45 L 1666.5 665.73 L 1664.86 669.29 L 1666.72 672.73 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1585.55 701 L 1530.48 768.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1527.16 772.63 L 1528.87 765 L 1530.48 768.56 L 1534.29 769.42 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1639.04 1096 C 1641.84 1092.86 1645.82 1091.05 1650.02 1091 L 1683.99 1091 C 1688.19 1091.05 1692.17 1092.86 1694.97 1096 L 1714.95 1119 C 1715.51 1120.28 1715.51 1121.72 1714.95 1123 L 1694.97 1146 C 1692.17 1149.14 1688.19 1150.95 1683.99 1151 L 1650.02 1151 C 1645.82 1150.95 1641.84 1149.14 1639.04 1146 L 1619.06 1123 C 1618.5 1121.72 1618.5 1120.28 1619.06 1119 L 1639.04 1096 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1666.5" y="1118.5">second</text><text x="1666.5" y="1132.5">finger down</text></g><path d="M 1765.47 686 L 1675.2 1084.79" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1674.04 1089.91 L 1672.17 1082.31 L 1675.2 1084.79 L 1679 1083.86 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1814.5 1149.7 C 1830.62 1155.91 1848.38 1155.91 1864.5 1149.7 C 1880.62 1143.5 1898.38 1143.5 1914.5 1149.7 L 1914.5 1202.28 C 1898.38 1196.08 1880.62 1196.08 1864.5 1202.28 C 1848.38 1208.49 1830.62 1208.49 1814.5 1202.28 L 1814.5 1149.7 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1864" y="1180.5">TOUCH_DEAD</text></g><path d="M 1883.5 1070.7 C 1899.62 1076.91 1917.38 1076.91 1933.5 1070.7 C 1949.62 1064.5 1967.38 1064.5 1983.5 1070.7 L 1983.5 1123.28 C 1967.38 1117.08 1949.62 1117.08 1933.5 1123.28 C 1917.38 1129.49 1899.62 1129.49 1883.5 1123.28 L 1883.5 1070.7 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1933" y="1101.5">TOUCH_DEAD</text></g><path d="M 1854 1073.09 L 1877.4 1080.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1882.43 1081.64 L 1874.72 1082.97 L 1877.4 1080.13 L 1876.73 1076.27 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1983.5 1100.45 L 2427.9 1131.08" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2433.13 1131.44 L 2425.91 1134.45 L 2427.9 1131.08 L 2426.39 1127.47 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1715.5 1134.51 L 1808.37 1160.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1813.42 1161.78 L 1805.74 1163.27 L 1808.37 1160.37 L 1807.62 1156.53 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1914.5 1172.85 L 2427.89 1140.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2433.13 1140.17 L 2426.37 1144.1 L 2427.89 1140.5 L 2425.93 1137.11 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1293 629 L 1333 669 L 1293 709 L 1253 669 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1292.5" y="666.5">drag</text><text x="1292.5" y="680.5">disabled?</text></g><path d="M 1253 669 L 1220.2 669 L 1220.2 611 L 1193.87 611" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1188.62 611 L 1195.62 607.5 L 1193.87 611 L 1195.62 614.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 670px; margin-left: 1224px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="1224" y="674" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">yes</text></switch></g><path d="M 2468.54 671 C 2471.34 667.86 2475.32 666.05 2479.52 666 L 2513.49 666 C 2517.69 666.05 2521.67 667.86 2524.47 671 L 2544.45 694 C 2545.01 695.28 2545.01 696.72 2544.45 698 L 2524.47 721 C 2521.67 724.14 2517.69 725.95 2513.49 726 L 2479.52 726 C 2475.32 725.95 2471.34 724.14 2468.54 721 L 2448.56 698 C 2448 696.72 2448 695.28 2448.56 694 L 2468.54 671 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2496" y="700.5">palm</text></g><path d="M 2290.78 581 L 2442.44 665.78" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2447.02 668.34 L 2439.21 667.98 L 2442.44 665.78 L 2442.62 661.87 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1975.54 967 C 1978.34 963.86 1982.32 962.05 1986.52 962 L 2020.49 962 C 2024.69 962.05 2028.67 963.86 2031.47 967 L 2051.45 990 C 2052.01 991.28 2052.01 992.72 2051.45 994 L 2031.47 1017 C 2028.67 1020.14 2024.69 1021.95 2020.49 1022 L 1986.52 1022 C 1982.32 1021.95 1978.34 1020.14 1975.54 1017 L 1955.56 994 C 1955 992.72 1955 991.28 1955.56 990 L 1975.54 967 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2003" y="989.5">either finger</text><text x="2003" y="1003.5">palm</text></g><path d="M 2103.07 849 L 2028.03 956.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2025.03 961.08 L 2026.16 953.34 L 2028.03 956.77 L 2031.9 957.34 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1699.54 536 C 1702.34 532.86 1706.32 531.05 1710.52 531 L 1744.49 531 C 1748.69 531.05 1752.67 532.86 1755.47 536 L 1775.45 559 C 1776.01 560.28 1776.01 561.72 1775.45 563 L 1755.47 586 C 1752.67 589.14 1748.69 590.95 1744.49 591 L 1710.52 591 C 1706.32 590.95 1702.34 589.14 1699.54 586 L 1679.56 563 C 1679 561.72 1679 560.28 1679.56 559 L 1699.54 536 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1727" y="551.5">remaining</text><text x="1727" y="565.5"> finger</text><text x="1727" y="579.5">palm</text></g><path d="M 1761.9 646 L 1742.03 596.9" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1740.06 592.04 L 1745.93 597.21 L 1742.03 596.9 L 1739.44 599.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2011.54 1218.5 C 2014.34 1215.36 2018.32 1213.55 2022.52 1213.5 L 2056.49 1213.5 C 2060.69 1213.55 2064.67 1215.36 2067.47 1218.5 L 2087.45 1241.5 C 2088.01 1242.78 2088.01 1244.22 2087.45 1245.5 L 2067.47 1268.5 C 2064.67 1271.64 2060.69 1273.45 2056.49 1273.5 L 2022.52 1273.5 C 2018.32 1273.45 2014.34 1271.64 2011.54 1268.5 L 1991.56 1245.5 C 1991 1244.22 1991 1242.78 1991.56 1241.5 L 2011.54 1218.5 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2039" y="1241">any finger</text><text x="2039" y="1255">palm</text></g><path d="M 2067.11 1346 L 2049.24 1279.65" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2047.87 1274.58 L 2053.07 1280.43 L 2049.24 1279.65 L 2046.31 1282.25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2041.4 1213.5 L 2049.1 1091.83" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2049.43 1086.59 L 2052.48 1093.8 L 2049.1 1091.83 L 2045.49 1093.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1991 1032.2 C 2007.12 1038.41 2024.88 1038.41 2041 1032.2 C 2057.12 1026 2074.88 1026 2091 1032.2 L 2091 1084.78 C 2074.88 1078.58 2057.12 1078.58 2041 1084.78 C 2024.88 1090.99 2007.12 1090.99 1991 1084.78 L 1991 1032.2 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2040.5" y="1056">that finger</text><text x="2040.5" y="1070">TOUCH_DEAD</text></g><path d="M 2051.76 1026 L 2108.38 855.05" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2110.03 850.06 L 2111.15 857.81 L 2108.38 855.05 L 2104.5 855.61 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1963 712.7 C 1979.12 718.91 1996.88 718.91 2013 712.7 C 2029.12 706.5 2046.88 706.5 2063 712.7 L 2063 765.28 C 2046.88 759.08 2029.12 759.08 2013 765.28 C 1996.88 771.49 1979.12 771.49 1963 765.28 L 1963 712.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2012.5" y="736.5">that finger</text><text x="2012.5" y="750.5">TOUCH_DEAD</text></g><path d="M 2004.76 962 L 2012.73 772.01" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2012.95 766.77 L 2016.16 773.91 L 2012.73 772.01 L 2009.16 773.61 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2008.82 706.5 L 1961.38 337.32" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1960.71 332.11 L 1965.08 338.61 L 1961.38 337.32 L 1958.13 339.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2324.77 1040 L 2258.83 587.3" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2258.07 582.11 L 2262.55 588.53 L 2258.83 587.3 L 2255.62 589.54 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2793.54 266 C 2796.34 262.86 2800.32 261.05 2804.52 261 L 2838.49 261 C 2842.69 261.05 2846.67 262.86 2849.47 266 L 2869.45 289 C 2870.01 290.28 2870.01 291.72 2869.45 293 L 2849.47 316 C 2846.67 319.14 2842.69 320.95 2838.49 321 L 2804.52 321 C 2800.32 320.95 2796.34 319.14 2793.54 316 L 2773.56 293 C 2773 291.72 2773 290.28 2773.56 289 L 2793.54 266 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2821" y="295.5">palm</text></g><path d="M 2023 309.49 L 2766.63 292.27" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2771.88 292.15 L 2764.97 295.81 L 2766.63 292.27 L 2764.8 288.81 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2815.18 321 L 2793.65 423.27" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2792.57 428.41 L 2790.59 420.84 L 2793.65 423.27 L 2797.44 422.28 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2533.55 666 L 2740.41 498.51" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2744.49 495.2 L 2741.25 502.33 L 2740.41 498.51 L 2736.85 496.89 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2626.54 1236 C 2629.34 1232.86 2633.32 1231.05 2637.52 1231 L 2671.49 1231 C 2675.69 1231.05 2679.67 1232.86 2682.47 1236 L 2702.45 1259 C 2703.01 1260.28 2703.01 1261.72 2702.45 1263 L 2682.47 1286 C 2679.67 1289.14 2675.69 1290.95 2671.49 1291 L 2637.52 1291 C 2633.32 1290.95 2629.34 1289.14 2626.54 1286 L 2606.56 1263 C 2606 1261.72 2606 1260.28 2606.56 1259 L 2626.54 1236 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2654" y="1258.5">any finger</text><text x="2654" y="1272.5">palm</text></g><path d="M 2524.09 1156 L 2612.28 1227.01" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2616.37 1230.3 L 2608.72 1228.64 L 2612.28 1227.01 L 2613.11 1223.18 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2713 935.7 C 2729.12 941.91 2746.88 941.91 2763 935.7 C 2779.12 929.5 2796.88 929.5 2813 935.7 L 2813 988.28 C 2796.88 982.08 2779.12 982.08 2763 988.28 C 2746.88 994.49 2729.12 994.49 2713 988.28 L 2713 935.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2762.5" y="959.5">that finger</text><text x="2762.5" y="973.5">TOUCH_DEAD</text></g><path d="M 2665.39 1231 L 2749.03 1000.49" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2750.83 995.55 L 2751.73 1003.32 L 2749.03 1000.49 L 2745.15 1000.94 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2772 929.5 L 2772 561 L 2326.37 561" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2321.12 561 L 2328.12 557.5 L 2326.37 561 L 2328.12 564.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1551 537.2 C 1567.12 543.41 1584.88 543.41 1601 537.2 C 1617.12 531 1634.88 531 1651 537.2 L 1651 589.78 C 1634.88 583.58 1617.12 583.58 1601 589.78 C 1584.88 595.99 1567.12 595.99 1551 589.78 L 1551 537.2 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1600.5" y="568">TOUCH_DEAD</text></g><path d="M 1679 561.96 L 1657.37 562.39" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1652.12 562.49 L 1659.05 558.85 L 1657.37 562.39 L 1659.19 565.85 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1552.94 596 L 1494.64 635.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1490.29 638.37 L 1494.12 631.55 L 1494.64 635.43 L 1498.05 637.35 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 756.54 932 C 759.34 928.86 763.32 927.05 767.52 927 L 801.49 927 C 805.69 927.05 809.67 928.86 812.47 932 L 832.45 955 C 833.01 956.28 833.01 957.72 832.45 959 L 812.47 982 C 809.67 985.14 805.69 986.95 801.49 987 L 767.52 987 C 763.32 986.95 759.34 985.14 756.54 982 L 736.56 959 C 736 957.72 736 956.28 736.56 955 L 756.54 932 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="784" y="961.5">palm</text></g><path d="M 833 852.2 C 849.12 858.41 866.88 858.41 883 852.2 C 899.12 846 916.88 846 933 852.2 L 933 904.78 C 916.88 898.58 899.12 898.58 883 904.78 C 866.88 910.99 849.12 910.99 833 904.78 L 833 852.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="882.5" y="883">TOUCH_DEAD</text></g><path d="M 754.13 1065 L 774.34 993.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 775.76 988.08 L 777.23 995.76 L 774.34 993.13 L 770.5 993.87 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 822.14 927 L 837.24 914.97" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 841.35 911.7 L 838.05 918.8 L 837.24 914.97 L 833.69 913.32 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 933 875.57 L 973.64 873.18" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 978.88 872.88 L 972.1 876.78 L 973.64 873.18 L 971.69 869.79 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2404.54 2163 C 2407.34 2159.86 2411.32 2158.05 2415.52 2158 L 2449.49 2158 C 2453.69 2158.05 2457.67 2159.86 2460.47 2163 L 2480.45 2186 C 2481.01 2187.28 2481.01 2188.72 2480.45 2190 L 2460.47 2213 C 2457.67 2216.14 2453.69 2217.95 2449.49 2218 L 2415.52 2218 C 2411.32 2217.95 2407.34 2216.14 2404.54 2213 L 2384.56 2190 C 2384 2188.72 2384 2187.28 2384.56 2186 L 2404.54 2163 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2432" y="2185.5">any finger</text><text x="2432" y="2199.5">palm</text></g><path d="M 2303 2224.62 L 2377.87 2203.45" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2382.92 2202.02 L 2377.14 2207.29 L 2377.87 2203.45 L 2375.24 2200.56 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2620.5 2186 L 2703 2186 Q 2713 2186 2713 2176 L 2713 1146 Q 2713 1136 2703 1136 L 2570.62 1136" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2565.37 1136 L 2572.37 1132.5 L 2570.62 1136 L 2572.37 1139.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2520.5 2159.7 C 2536.62 2165.91 2554.38 2165.91 2570.5 2159.7 C 2586.62 2153.5 2604.38 2153.5 2620.5 2159.7 L 2620.5 2212.28 C 2604.38 2206.08 2586.62 2206.08 2570.5 2212.28 C 2554.38 2218.49 2536.62 2218.49 2520.5 2212.28 L 2520.5 2159.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2570" y="2183.5">that finger</text><text x="2570" y="2197.5">TOUCH_DEAD</text></g><path d="M 2481 2187.3 L 2514.13 2186.82" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2519.38 2186.74 L 2512.43 2190.34 L 2514.13 2186.82 L 2512.33 2183.34 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 875.04 1616.5 C 877.84 1613.36 881.82 1611.55 886.02 1611.5 L 919.99 1611.5 C 924.19 1611.55 928.17 1613.36 930.97 1616.5 L 950.95 1639.5 C 951.51 1640.78 951.51 1642.22 950.95 1643.5 L 930.97 1666.5 C 928.17 1669.64 924.19 1671.45 919.99 1671.5 L 886.02 1671.5 C 881.82 1671.45 877.84 1669.64 875.04 1666.5 L 855.06 1643.5 C 854.5 1642.22 854.5 1640.78 855.06 1639.5 L 875.04 1616.5 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="902.5" y="1639">either finger</text><text x="902.5" y="1653">palm</text></g><path d="M 1007.83 1603.5 L 957.49 1621.75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 952.55 1623.54 L 957.94 1617.86 L 957.49 1621.75 L 960.32 1624.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 823 1529.7 C 839.12 1535.91 856.88 1535.91 873 1529.7 C 889.12 1523.5 906.88 1523.5 923 1529.7 L 923 1582.28 C 906.88 1576.08 889.12 1576.08 873 1582.28 C 856.88 1588.49 839.12 1588.49 823 1582.28 L 823 1529.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="872.5" y="1553.5">that finger</text><text x="872.5" y="1567.5">TOUCH_DEAD</text></g><path d="M 892.47 1611.5 L 886.51 1594.51" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 884.77 1589.55 L 890.39 1595 L 886.51 1594.51 L 883.79 1597.32 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 823 1565.05 L 792.27 1570.61" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 787.1 1571.54 L 793.37 1566.85 L 792.27 1570.61 L 794.61 1573.74 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 543.54 1593.5 C 546.34 1590.36 550.32 1588.55 554.52 1588.5 L 588.49 1588.5 C 592.69 1588.55 596.67 1590.36 599.47 1593.5 L 619.45 1616.5 C 620.01 1617.78 620.01 1619.22 619.45 1620.5 L 599.47 1643.5 C 596.67 1646.64 592.69 1648.45 588.49 1648.5 L 554.52 1648.5 C 550.32 1648.45 546.34 1646.64 543.54 1643.5 L 523.56 1620.5 C 523 1619.22 523 1617.78 523.56 1616.5 L 543.54 1593.5 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="571" y="1623">palm</text></g><path d="M 1032.79 1782.5 L 1037.46 1749.8" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1038.2 1744.61 L 1040.67 1752.03 L 1037.46 1749.8 L 1033.74 1751.04 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 656 1598.72 L 626.2 1605.69" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 621.09 1606.89 L 627.11 1601.89 L 626.2 1605.69 L 628.7 1608.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 778.5 2023.2 C 794.62 2029.41 812.38 2029.41 828.5 2023.2 C 844.62 2017 862.38 2017 878.5 2023.2 L 878.5 2075.78 C 862.38 2069.58 844.62 2069.58 828.5 2075.78 C 812.38 2081.99 794.62 2081.99 778.5 2075.78 L 778.5 2023.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="828" y="2054">TOUCH_DEAD</text></g><path d="M 589.39 1648.5 L 805.86 2011.53" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 808.55 2016.04 L 801.96 2011.82 L 805.86 2011.53 L 807.97 2008.23 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 805.7 2082 L 722.71 2200.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 719.69 2204.58 L 720.85 2196.84 L 722.71 2200.29 L 726.58 2200.86 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1959.54 2576 C 1962.34 2572.86 1966.32 2571.05 1970.52 2571 L 2004.49 2571 C 2008.69 2571.05 2012.67 2572.86 2015.47 2576 L 2035.45 2599 C 2036.01 2600.28 2036.01 2601.72 2035.45 2603 L 2015.47 2626 C 2012.67 2629.14 2008.69 2630.95 2004.49 2631 L 1970.52 2631 C 1966.32 2630.95 1962.34 2629.14 1959.54 2626 L 1939.56 2603 C 1939 2601.72 1939 2600.28 1939.56 2599 L 1959.54 2576 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1987" y="2598.5">any finger</text><text x="1987" y="2612.5">palm</text></g><path d="M 1803.9 2521 L 1933.16 2577.32" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1937.98 2579.42 L 1930.16 2579.83 L 1933.16 2577.32 L 1932.96 2573.42 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1932.5 2697.7 C 1948.62 2703.91 1966.38 2703.91 1982.5 2697.7 C 1998.62 2691.5 2016.38 2691.5 2032.5 2697.7 L 2032.5 2750.28 C 2016.38 2744.08 1998.62 2744.08 1982.5 2750.28 C 1966.38 2756.49 1948.62 2756.49 1932.5 2750.28 L 1932.5 2697.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1982" y="2721.5">that finger</text><text x="1982" y="2735.5">TOUCH_DEAD</text></g><path d="M 1986.28 2631 L 1984.08 2685.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1983.87 2690.38 L 1980.65 2683.25 L 1984.08 2685.14 L 1987.65 2683.53 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1932.5 2755.97 L 1817.37 2829.58" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1812.94 2832.41 L 1816.95 2825.69 L 1817.37 2829.58 L 1820.72 2831.59 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 413 1613.9 L 516.63 1616.91" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 521.88 1617.06 L 514.78 1620.36 L 516.63 1616.91 L 514.99 1613.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 3003 588.5 L 3032 588.6 L 3032 2501 L 1829.37 2501" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1824.12 2501 L 1831.12 2497.5 L 1829.37 2501 L 1831.12 2504.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2903 562.2 C 2919.12 568.41 2936.88 568.41 2953 562.2 C 2969.12 556 2986.88 556 3003 562.2 L 3003 614.78 C 2986.88 608.58 2969.12 608.58 2953 614.78 C 2936.88 620.99 2919.12 620.99 2903 614.78 L 2903 562.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2952.5" y="593">TOUCH_DEAD</text></g><path d="M 2745.04 1233.5 C 2747.84 1230.36 2751.82 1228.55 2756.02 1228.5 L 2789.99 1228.5 C 2794.19 1228.55 2798.17 1230.36 2800.97 1233.5 L 2820.95 1256.5 C 2821.51 1257.78 2821.51 1259.22 2820.95 1260.5 L 2800.97 1283.5 C 2798.17 1286.64 2794.19 1288.45 2789.99 1288.5 L 2756.02 1288.5 C 2751.82 1288.45 2747.84 1286.64 2745.04 1283.5 L 2725.06 1260.5 C 2724.5 1259.22 2724.5 1257.78 2725.06 1256.5 L 2745.04 1233.5 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2772.5" y="1256">move &gt; </text><text x="2772.5" y="1270">threshold</text></g><path d="M 2821.5 1258.5 L 2893 1258.5 L 2893 1837.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2893 1842.88 L 2889.5 1835.88 L 2893 1837.63 L 2896.5 1835.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2432 2048 L 2432 1801 L 2873 1801 L 2873 1837.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2873 1842.88 L 2869.5 1835.88 L 2873 1837.63 L 2876.5 1835.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2404.04 2053 C 2406.84 2049.86 2410.82 2048.05 2415.02 2048 L 2448.99 2048 C 2453.19 2048.05 2457.17 2049.86 2459.97 2053 L 2479.95 2076 C 2480.51 2077.28 2480.51 2078.72 2479.95 2080 L 2459.97 2103 C 2457.17 2106.14 2453.19 2107.95 2448.99 2108 L 2415.02 2108 C 2410.82 2107.95 2406.84 2106.14 2404.04 2103 L 2384.06 2080 C 2383.5 2078.72 2383.5 2077.28 2384.06 2076 L 2404.04 2053 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2431.5" y="2075.5">move &gt; </text><text x="2431.5" y="2089.5">threshold</text></g><path d="M 901.22 626.1 C 902.36 622.9 904.22 621.04 906.18 621.12 L 974.64 621.12 C 976.2 621.08 977.7 621.63 978.67 622.61 C 979.65 623.59 979.99 624.88 979.6 626.1 L 960.75 675.9 C 959.61 679.1 957.75 680.96 955.79 680.88 L 886.34 680.88 C 884.95 680.69 883.73 680.05 882.97 679.1 C 882.22 678.15 882 676.99 882.37 675.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="930.5" y="648.5">button 1</text><text x="930.5" y="662.5">press</text></g><path d="M 1048.95 735.99 L 1045.77 842.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1045.61 847.88 L 1042.32 840.78 L 1045.77 842.63 L 1049.32 840.99 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1020 676 C 996 676 990 696 1009.2 700 C 990 708.8 1011.6 728 1027.2 720 C 1038 736 1074 736 1086 720 C 1110 720 1110 704 1095 696 C 1110 680 1086 664 1065 672 C 1050 660 1026 660 1020 676 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 696px; margin-left: 991px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">[n] = 1</div></div></div></foreignObject><text x="1050" y="700" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">[n] = 1</text></switch></g><path d="M 613.5 796.54 L 876.21 676.11" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 880.98 673.93 L 876.08 680.03 L 876.21 676.11 L 873.16 673.66 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1263 771.5 C 1239 771.5 1233 791.5 1252.2 795.5 C 1233 804.3 1254.6 823.5 1270.2 815.5 C 1281 831.5 1317 831.5 1329 815.5 C 1353 815.5 1353 799.5 1338 791.5 C 1353 775.5 1329 759.5 1308 767.5 C 1293 755.5 1269 755.5 1263 771.5 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 792px; margin-left: 1234px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">[n] = 1</div></div></div></foreignObject><text x="1293" y="795" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">[n] = 1</text></switch></g><path d="M 1293 709 L 1293 745.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1293 750.38 L 1289.5 743.38 L 1293 745.13 L 1296.5 743.38 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 727px; margin-left: 1294px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="1294" y="731" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">no</text></switch></g><path d="M 1219.22 1027.1 C 1220.36 1023.9 1222.22 1022.04 1224.18 1022.12 L 1292.64 1022.12 C 1294.2 1022.08 1295.7 1022.63 1296.67 1023.61 C 1297.65 1024.59 1297.99 1025.88 1297.6 1027.1 L 1278.75 1076.9 C 1277.61 1080.1 1275.75 1081.96 1273.79 1081.88 L 1204.34 1081.88 C 1202.95 1081.69 1201.73 1081.05 1200.97 1080.1 C 1200.22 1079.15 1200 1077.99 1200.37 1076.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1248.5" y="1049.5">button [n]</text><text x="1248.5" y="1063.5">release</text></g><ellipse cx="1392.5" cy="1091" rx="49.5" ry="30" fill="#ccccff" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1392" y="1095.5">IDLE</text></g><path d="M 1298 1065.32 L 1336.85 1075.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1341.92 1077.25 L 1334.25 1078.8 L 1336.85 1075.88 L 1336.08 1072.04 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1502 862 L 1542 902 L 1502 942 L 1462 902 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1501.5" y="899.5">drag</text><text x="1501.5" y="913.5">disabled?</text></g><path d="M 1502 833.5 L 1502 855.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1502 860.88 L 1498.5 853.88 L 1502 855.63 L 1505.5 853.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1288.5 882 C 1264.5 882 1258.5 902 1277.7 906 C 1258.5 914.8 1280.1 934 1295.7 926 C 1306.5 942 1342.5 942 1354.5 926 C 1378.5 926 1378.5 910 1363.5 902 C 1378.5 886 1354.5 870 1333.5 878 C 1318.5 866 1294.5 866 1288.5 882 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 902px; margin-left: 1260px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">[n] = 2</div></div></div></foreignObject><text x="1319" y="906" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">[n] = 2</text></switch></g><path d="M 1462 902 L 1389.37 902" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1384.12 902 L 1391.12 898.5 L 1389.37 902 L 1391.12 905.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 905px; margin-left: 1432px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="1432" y="909" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">no</text></switch></g><path d="M 1502 942 L 1502 978.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1502 983.38 L 1498.5 976.38 L 1502 978.13 L 1505.5 976.38 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 964px; margin-left: 1503px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="1503" y="967" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">yes</text></switch></g><path d="M 1259.38 895.18 L 1116.32 877.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1111.11 876.98 L 1118.48 874.36 L 1116.32 877.62 L 1117.63 881.31 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1238.42 808.11 L 1115.07 847.08" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1110.07 848.66 L 1115.69 843.22 L 1115.07 847.08 L 1117.8 849.89 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1469.95 1163.5 L 1429.2 1125.35" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1425.36 1121.76 L 1432.87 1123.99 L 1429.2 1125.35 L 1428.08 1129.1 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1502 1281 L 1542 1321 L 1502 1361 L 1462 1321 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1501.5" y="1318.5">drag</text><text x="1501.5" y="1332.5">disabled?</text></g><path d="M 1502 1281 L 1502 1229.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1502 1224.62 L 1505.5 1231.62 L 1502 1229.87 L 1498.5 1231.62 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1262px; margin-left: 1503px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">yes</div></div></div></foreignObject><text x="1503" y="1266" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">yes</text></switch></g><path d="M 1437 1451 L 1485.82 1353.36" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1488.17 1348.67 L 1488.17 1356.49 L 1485.82 1353.36 L 1481.91 1353.36 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1462 1321 L 1384.87 1321" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1379.62 1321 L 1386.62 1317.5 L 1384.87 1321 L 1386.62 1324.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1324px; margin-left: 1430px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">no</div></div></div></foreignObject><text x="1430" y="1328" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">no</text></switch></g><path d="M 1288.5 1301 C 1264.5 1301 1258.5 1321 1277.7 1325 C 1258.5 1333.8 1280.1 1353 1295.7 1345 C 1306.5 1361 1342.5 1361 1354.5 1345 C 1378.5 1345 1378.5 1329 1363.5 1321 C 1378.5 1305 1354.5 1289 1333.5 1297 C 1318.5 1285 1294.5 1285 1288.5 1301 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 1321px; margin-left: 1260px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">[n] = 3</div></div></div></foreignObject><text x="1319" y="1325" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">[n] = 3</text></switch></g><path d="M 1296.16 1283.88 L 1060.4 894.45" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1057.68 889.96 L 1064.3 894.13 L 1060.4 894.45 L 1058.31 897.76 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1757" y="1677.5" width="154" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1833.5" y="1702">TOUCH_3_RELEASE</text></g><path d="M 1901.64 1628.5 L 1858.06 1672.95" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1854.39 1676.7 L 1856.79 1669.25 L 1858.06 1672.95 L 1861.79 1674.15 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2470.03 1353.5 L 2495.72 1162.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2496.41 1157.11 L 2498.95 1164.51 L 2495.72 1162.31 L 2492.01 1163.58 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2072.54 1672.5 C 2075.34 1669.36 2079.32 1667.55 2083.52 1667.5 L 2117.49 1667.5 C 2121.69 1667.55 2125.67 1669.36 2128.47 1672.5 L 2148.45 1695.5 C 2149.01 1696.78 2149.01 1698.22 2148.45 1699.5 L 2128.47 1722.5 C 2125.67 1725.64 2121.69 1727.45 2117.49 1727.5 L 2083.52 1727.5 C 2079.32 1727.45 2075.34 1725.64 2072.54 1722.5 L 2052.56 1699.5 C 2052 1698.22 2052 1696.78 2052.56 1695.5 L 2072.54 1672.5 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2100" y="1702">timeout</text></g><path d="M 1911 1697.5 L 2045.63 1697.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2050.88 1697.5 L 2043.88 1701 L 2045.63 1697.5 L 2043.88 1694 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2279.5 1671.2 C 2295.62 1677.41 2313.38 1677.41 2329.5 1671.2 C 2345.62 1665 2363.38 1665 2379.5 1671.2 L 2379.5 1723.78 C 2363.38 1717.58 2345.62 1717.58 2329.5 1723.78 C 2313.38 1729.99 2295.62 1729.99 2279.5 1723.78 L 2279.5 1671.2 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2329" y="1702">TOUCH_DEAD</text></g><path d="M 2149 1697.5 L 2273.13 1697.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2278.38 1697.5 L 2271.38 1701 L 2273.13 1697.5 L 2271.38 1694 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2413 1668.2 C 2429.12 1674.41 2446.88 1674.41 2463 1668.2 C 2479.12 1662 2496.88 1662 2513 1668.2 L 2513 1720.78 C 2496.88 1714.58 2479.12 1714.58 2463 1720.78 C 2446.88 1726.99 2429.12 1726.99 2413 1720.78 L 2413 1668.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2462.5" y="1699">TOUCH_DEAD</text></g><path d="M 2379.5 1696.38 L 2406.63 1695.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2411.88 1695.65 L 2404.96 1699.31 L 2406.63 1695.77 L 2404.81 1692.31 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1713.54 1409 C 1716.34 1405.86 1720.32 1404.05 1724.52 1404 L 1758.49 1404 C 1762.69 1404.05 1766.67 1405.86 1769.47 1409 L 1789.45 1432 C 1790.01 1433.28 1790.01 1434.72 1789.45 1436 L 1769.47 1459 C 1766.67 1462.14 1762.69 1463.95 1758.49 1464 L 1724.52 1464 C 1720.32 1463.95 1716.34 1462.14 1713.54 1459 L 1693.56 1436 C 1693 1434.72 1693 1433.28 1693.56 1432 L 1713.54 1409 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1741" y="1431.5">either finger</text><text x="1741" y="1445.5">palm</text></g><path d="M 1665 1204.7 C 1681.12 1210.91 1698.88 1210.91 1715 1204.7 C 1731.12 1198.5 1748.88 1198.5 1765 1204.7 L 1765 1257.28 C 1748.88 1251.08 1731.12 1251.08 1715 1257.28 C 1698.88 1263.49 1681.12 1263.49 1665 1257.28 L 1665 1204.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1714.5" y="1228.5">that finger</text><text x="1714.5" y="1242.5">TOUCH_DEAD</text></g><path d="M 1737.58 1404 L 1720.07 1269.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1719.39 1264.61 L 1723.76 1271.1 L 1720.07 1269.81 L 1716.82 1272 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1826.98 1677.5 L 1754.14 1470.01" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1752.4 1465.05 L 1758.02 1470.5 L 1754.14 1470.01 L 1751.42 1472.82 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2191 1876.5 L 2834.63 1876.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2839.88 1876.5 L 2832.88 1880 L 2834.63 1876.5 L 2832.88 1873 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1807.54 1851.5 C 1810.34 1848.36 1814.32 1846.55 1818.52 1846.5 L 1852.49 1846.5 C 1856.69 1846.55 1860.67 1848.36 1863.47 1851.5 L 1883.45 1874.5 C 1884.01 1875.78 1884.01 1877.22 1883.45 1878.5 L 1863.47 1901.5 C 1860.67 1904.64 1856.69 1906.45 1852.49 1906.5 L 1818.52 1906.5 C 1814.32 1906.45 1810.34 1904.64 1807.54 1901.5 L 1787.56 1878.5 C 1787 1877.22 1787 1875.78 1787.56 1874.5 L 1807.54 1851.5 Z" fill="#67ab9f" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1835" y="1874">move &gt; </text><text x="1835" y="1888">threshold</text></g><path d="M 1834.17 1717.5 L 1835.2 1840.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1835.24 1845.38 L 1831.68 1838.41 L 1835.2 1840.13 L 1838.68 1838.35 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1810.54 1511.5 C 1813.34 1508.36 1817.32 1506.55 1821.52 1506.5 L 1855.49 1506.5 C 1859.69 1506.55 1863.67 1508.36 1866.47 1511.5 L 1886.45 1534.5 C 1887.01 1535.78 1887.01 1537.22 1886.45 1538.5 L 1866.47 1561.5 C 1863.67 1564.64 1859.69 1566.45 1855.49 1566.5 L 1821.52 1566.5 C 1817.32 1566.45 1813.34 1564.64 1810.54 1561.5 L 1790.56 1538.5 C 1790 1537.22 1790 1535.78 1790.56 1534.5 L 1810.54 1511.5 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1838" y="1534">third</text><text x="1838" y="1548">finger down</text></g><path d="M 1834.56 1677.5 L 1837.48 1572.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1837.63 1567.62 L 1840.93 1574.71 L 1837.48 1572.87 L 1833.94 1574.52 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1814.5 1412.7 C 1830.62 1418.91 1848.38 1418.91 1864.5 1412.7 C 1880.62 1406.5 1898.38 1406.5 1914.5 1412.7 L 1914.5 1465.28 C 1898.38 1459.08 1880.62 1459.08 1864.5 1465.28 C 1848.38 1471.49 1830.62 1471.49 1814.5 1465.28 L 1814.5 1412.7 Z" fill="#ffb570" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1864" y="1443.5">TOUCH_TOUCH</text></g><path d="M 1846.5 1506.5 L 1854.19 1477.65" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1855.55 1472.58 L 1857.12 1480.25 L 1854.19 1477.65 L 1850.36 1478.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1849.3 1406.5 L 1830.73 1366.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1828.5 1362.01 L 1834.64 1366.87 L 1830.73 1366.77 L 1828.3 1369.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1425" y="1763.5" width="154" height="40" rx="2.4" ry="2.4" fill="#ccffcc" stroke="#000000" stroke-width="2" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1501.5" y="1788">TOUCH_3_RELEASE_2</text></g><path d="M 1393.54 1653.5 C 1396.34 1650.36 1400.32 1648.55 1404.52 1648.5 L 1438.49 1648.5 C 1442.69 1648.55 1446.67 1650.36 1449.47 1653.5 L 1469.45 1676.5 C 1470.01 1677.78 1470.01 1679.22 1469.45 1680.5 L 1449.47 1703.5 C 1446.67 1706.64 1442.69 1708.45 1438.49 1708.5 L 1404.52 1708.5 C 1400.32 1708.45 1396.34 1706.64 1393.54 1703.5 L 1373.56 1680.5 C 1373 1679.22 1373 1677.78 1373.56 1676.5 L 1393.54 1653.5 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1421" y="1676">remaining</text><text x="1421" y="1690">finger up</text></g><path d="M 1486.67 1763.5 L 1448.37 1713.55" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1445.18 1709.39 L 1452.22 1712.81 L 1448.37 1713.55 L 1446.66 1717.07 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1362 1567.2 C 1378.12 1573.41 1395.88 1573.41 1412 1567.2 C 1428.12 1561 1445.88 1561 1462 1567.2 L 1462 1619.78 C 1445.88 1613.58 1428.12 1613.58 1412 1619.78 C 1395.88 1625.99 1378.12 1625.99 1362 1619.78 L 1362 1567.2 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1411.5" y="1591">that finger</text><text x="1411.5" y="1605">TOUCH_IDLE</text></g><path d="M 1418.15 1648.5 L 1416.34 1632.33" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1415.76 1627.11 L 1420.01 1633.68 L 1416.34 1632.33 L 1413.06 1634.46 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1699.54 1568.5 C 1702.34 1565.36 1706.32 1563.55 1710.52 1563.5 L 1744.49 1563.5 C 1748.69 1563.55 1752.67 1565.36 1755.47 1568.5 L 1775.45 1591.5 C 1776.01 1592.78 1776.01 1594.22 1775.45 1595.5 L 1755.47 1618.5 C 1752.67 1621.64 1748.69 1623.45 1744.49 1623.5 L 1710.52 1623.5 C 1706.32 1623.45 1702.34 1621.64 1699.54 1618.5 L 1679.56 1595.5 C 1679 1594.22 1679 1592.78 1679.56 1591.5 L 1699.54 1568.5 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1727" y="1598">either finger up</text></g><path d="M 1813.52 1677.5 L 1762.78 1627.95" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1759.02 1624.28 L 1766.47 1626.67 L 1762.78 1627.95 L 1761.58 1631.68 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1585.5 1654.7 C 1601.62 1660.91 1619.38 1660.91 1635.5 1654.7 C 1651.62 1648.5 1669.38 1648.5 1685.5 1654.7 L 1685.5 1707.28 C 1669.38 1701.08 1651.62 1701.08 1635.5 1707.28 C 1619.38 1713.49 1601.62 1713.49 1585.5 1707.28 L 1585.5 1654.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1635" y="1678.5">that finger</text><text x="1635" y="1692.5">TOUCH_IDLE</text></g><path d="M 1695.96 1623.5 L 1674.29 1644.11" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1670.48 1647.73 L 1673.14 1640.37 L 1674.29 1644.11 L 1677.97 1645.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1593.17 1713.5 L 1533.1 1759.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1528.94 1762.82 L 1532.36 1755.78 L 1533.1 1759.62 L 1536.62 1761.33 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1573.72 1803.5 L 1780.87 1861.26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1785.92 1862.67 L 1778.24 1864.17 L 1780.87 1861.26 L 1780.12 1857.42 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1562.54 1578.5 C 1565.34 1575.36 1569.32 1573.55 1573.52 1573.5 L 1607.49 1573.5 C 1611.69 1573.55 1615.67 1575.36 1618.47 1578.5 L 1638.45 1601.5 C 1639.01 1602.78 1639.01 1604.22 1638.45 1605.5 L 1618.47 1628.5 C 1615.67 1631.64 1611.69 1633.45 1607.49 1633.5 L 1573.52 1633.5 C 1569.32 1633.45 1565.34 1631.64 1562.54 1628.5 L 1542.56 1605.5 C 1542 1604.22 1542 1602.78 1542.56 1601.5 L 1562.54 1578.5 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1590" y="1601">second</text><text x="1590" y="1615">finger down</text></g><path d="M 1511.83 1763.5 L 1572.94 1639.21" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1575.26 1634.5 L 1575.31 1642.33 L 1572.94 1639.21 L 1569.03 1639.24 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1661.83 1416 L 1832.95 1213.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1836.33 1209.35 L 1834.49 1216.96 L 1832.95 1213.37 L 1829.14 1212.44 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1511.04 1514.5 C 1513.84 1511.36 1517.82 1509.55 1522.02 1509.5 L 1555.99 1509.5 C 1560.19 1509.55 1564.17 1511.36 1566.97 1514.5 L 1586.95 1537.5 C 1587.51 1538.78 1587.51 1540.22 1586.95 1541.5 L 1566.97 1564.5 C 1564.17 1567.64 1560.19 1569.45 1555.99 1569.5 L 1522.02 1569.5 C 1517.82 1569.45 1513.84 1567.64 1511.04 1564.5 L 1491.06 1541.5 C 1490.5 1540.22 1490.5 1538.78 1491.06 1537.5 L 1511.04 1514.5 Z" fill="#ff99cc" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1538.5" y="1530">remaining</text><text x="1538.5" y="1544"> finger</text><text x="1538.5" y="1558">palm</text></g><path d="M 1505.03 1763.5 L 1533.5 1575.8" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1534.28 1570.61 L 1536.69 1578.05 L 1533.5 1575.8 L 1529.77 1577 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1542 1234.7 C 1558.12 1240.91 1575.88 1240.91 1592 1234.7 C 1608.12 1228.5 1625.88 1228.5 1642 1234.7 L 1642 1287.28 C 1625.88 1281.08 1608.12 1281.08 1592 1287.28 C 1575.88 1293.49 1558.12 1293.49 1542 1287.28 L 1542 1234.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1591.5" y="1265.5">TOUCH_DEAD</text></g><path d="M 1544.71 1509.5 L 1584.62 1299.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1585.61 1294.6 L 1587.74 1302.13 L 1584.62 1299.76 L 1580.86 1300.82 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1592 1228.5 L 1592 921 L 1528.85 838.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1525.66 834.39 L 1532.69 837.82 L 1528.85 838.56 L 1527.14 842.07 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1719.54 1758.5 C 1722.34 1755.36 1726.32 1753.55 1730.52 1753.5 L 1764.49 1753.5 C 1768.69 1753.55 1772.67 1755.36 1775.47 1758.5 L 1795.45 1781.5 C 1796.01 1782.78 1796.01 1784.22 1795.45 1785.5 L 1775.47 1808.5 C 1772.67 1811.64 1768.69 1813.45 1764.49 1813.5 L 1730.52 1813.5 C 1726.32 1813.45 1722.34 1811.64 1719.54 1808.5 L 1699.56 1785.5 C 1699 1784.22 1699 1782.78 1699.56 1781.5 L 1719.54 1758.5 Z" fill="#99ffff" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1747" y="1788">timeout</text></g><path d="M 1579 1783.5 L 1692.63 1783.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1697.88 1783.5 L 1690.88 1787 L 1692.63 1783.5 L 1690.88 1780 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2283.54 1218.5 C 2286.34 1215.36 2290.32 1213.55 2294.52 1213.5 L 2328.49 1213.5 C 2332.69 1213.55 2336.67 1215.36 2339.47 1218.5 L 2359.45 1241.5 C 2360.01 1242.78 2360.01 1244.22 2359.45 1245.5 L 2339.47 1268.5 C 2336.67 1271.64 2332.69 1273.45 2328.49 1273.5 L 2294.52 1273.5 C 2290.32 1273.45 2286.34 1271.64 2283.54 1268.5 L 2263.56 1245.5 C 2263 1244.22 2263 1242.78 2263.56 1241.5 L 2283.54 1218.5 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2311" y="1241">first</text><text x="2311" y="1255">finger up</text></g><path d="M 1784.22 1306.1 C 1785.36 1302.9 1787.22 1301.04 1789.18 1301.12 L 1857.64 1301.12 C 1859.2 1301.08 1860.7 1301.63 1861.67 1302.61 C 1862.65 1303.59 1862.99 1304.88 1862.6 1306.1 L 1843.75 1355.9 C 1842.61 1359.1 1840.75 1360.96 1838.79 1360.88 L 1769.34 1360.88 C 1767.95 1360.69 1766.73 1360.05 1765.97 1359.1 C 1765.22 1358.15 1765 1356.99 1765.37 1355.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1813.5" y="1328.5">button 3</text><text x="1813.5" y="1342.5">press</text></g><path d="M 1903.72 1268.6 C 1904.86 1265.4 1906.72 1263.54 1908.68 1263.62 L 1977.14 1263.62 C 1978.7 1263.58 1980.2 1264.13 1981.17 1265.11 C 1982.15 1266.09 1982.49 1267.38 1982.1 1268.6 L 1963.25 1318.4 C 1962.11 1321.6 1960.25 1323.46 1958.29 1323.38 L 1888.84 1323.38 C 1887.45 1323.19 1886.23 1322.55 1885.47 1321.6 C 1884.72 1320.65 1884.5 1319.49 1884.87 1318.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1933" y="1291">button 3</text><text x="1933" y="1305">release</text></g><path d="M 1863 1315.62 L 1878.42 1310.78" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1883.43 1309.21 L 1877.8 1314.65 L 1878.42 1310.78 L 1875.71 1307.97 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1982.5 1319.06 L 2028.51 1343.06" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2033.16 1345.48 L 2025.34 1345.35 L 2028.51 1343.06 L 2028.58 1339.14 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2436.22 1454.6 C 2437.36 1451.4 2439.22 1449.54 2441.18 1449.62 L 2509.64 1449.62 C 2511.2 1449.58 2512.7 1450.13 2513.67 1451.11 C 2514.65 1452.09 2514.99 1453.38 2514.6 1454.6 L 2495.75 1504.4 C 2494.61 1507.6 2492.75 1509.46 2490.79 1509.38 L 2421.34 1509.38 C 2419.95 1509.19 2418.73 1508.55 2417.97 1507.6 C 2417.22 1506.65 2417 1505.49 2417.37 1504.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2465.5" y="1477">button 3</text><text x="2465.5" y="1491">press</text></g><path d="M 2436.22 1358.6 C 2437.36 1355.4 2439.22 1353.54 2441.18 1353.62 L 2509.64 1353.62 C 2511.2 1353.58 2512.7 1354.13 2513.67 1355.11 C 2514.65 1356.09 2514.99 1357.38 2514.6 1358.6 L 2495.75 1408.4 C 2494.61 1411.6 2492.75 1413.46 2490.79 1413.38 L 2421.34 1413.38 C 2419.95 1413.19 2418.73 1412.55 2417.97 1411.6 C 2417.22 1410.65 2417 1409.49 2417.37 1408.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2465.5" y="1381">button 3</text><text x="2465.5" y="1395">release</text></g><path d="M 2466 1449.5 L 2466 1419.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2466 1414.62 L 2469.5 1421.62 L 2466 1419.87 L 2462.5 1421.62 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2463.45 1662 L 2465.49 1515.87" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2465.57 1510.62 L 2468.97 1517.67 L 2465.49 1515.87 L 2461.97 1517.57 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 151.61 1383.5 L 153.87 2003.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 153.89 2008.38 L 150.36 2001.39 L 153.87 2003.13 L 157.36 2001.37 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1111.04 1748.5 C 1113.84 1745.36 1117.82 1743.55 1122.02 1743.5 L 1155.99 1743.5 C 1160.19 1743.55 1164.17 1745.36 1166.97 1748.5 L 1186.95 1771.5 C 1187.51 1772.78 1187.51 1774.22 1186.95 1775.5 L 1166.97 1798.5 C 1164.17 1801.64 1160.19 1803.45 1155.99 1803.5 L 1122.02 1803.5 C 1117.82 1803.45 1113.84 1801.64 1111.04 1798.5 L 1091.06 1775.5 C 1090.5 1774.22 1090.5 1772.78 1091.06 1771.5 L 1111.04 1748.5 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1138.5" y="1778">either finger up</text></g><path d="M 989.5 1874.7 C 1005.62 1880.91 1023.38 1880.91 1039.5 1874.7 C 1055.62 1868.5 1073.38 1868.5 1089.5 1874.7 L 1089.5 1927.28 C 1073.38 1921.08 1055.62 1921.08 1039.5 1927.28 C 1023.38 1933.49 1005.62 1933.49 989.5 1927.28 L 989.5 1874.7 Z" fill="#e1d5e7" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1039" y="1898.5">that finger</text><text x="1039" y="1912.5">TOUCH_IDLE</text></g><path d="M 472.54 1643.5 C 475.34 1640.36 479.32 1638.55 483.52 1638.5 L 517.49 1638.5 C 521.69 1638.55 525.67 1640.36 528.47 1643.5 L 548.45 1666.5 C 549.01 1667.78 549.01 1669.22 548.45 1670.5 L 528.47 1693.5 C 525.67 1696.64 521.69 1698.45 517.49 1698.5 L 483.52 1698.5 C 479.32 1698.45 475.34 1696.64 472.54 1693.5 L 452.56 1670.5 C 452 1669.22 452 1667.78 452.56 1666.5 L 472.54 1643.5 Z" fill="#7ea6e0" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="500" y="1666">second</text><text x="500" y="1680">finger down</text></g><path d="M 378.22 1631 L 445.91 1651.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 450.93 1653.3 L 443.21 1654.59 L 445.91 1651.76 L 445.26 1647.9 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 472.48 1698.5 L 186.37 2004.85" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 182.78 2008.68 L 185 2001.18 L 186.37 2004.85 L 190.12 2005.96 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1152.22 1218.6 C 1153.36 1215.4 1155.22 1213.54 1157.18 1213.62 L 1225.64 1213.62 C 1227.2 1213.58 1228.7 1214.13 1229.67 1215.11 C 1230.65 1216.09 1230.99 1217.38 1230.6 1218.6 L 1211.75 1268.4 C 1210.61 1271.6 1208.75 1273.46 1206.79 1273.38 L 1137.34 1273.38 C 1135.95 1273.19 1134.73 1272.55 1133.97 1271.6 C 1133.22 1270.65 1133 1269.49 1133.37 1268.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1181.5" y="1241">button [n]</text><text x="1181.5" y="1255">release</text></g><path d="M 1231 1221.78 L 2066.06 851.58" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2070.86 849.45 L 2065.88 855.49 L 2066.06 851.58 L 2063.05 849.09 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1992.22 1851.6 C 1993.36 1848.4 1995.22 1846.54 1997.18 1846.62 L 2065.64 1846.62 C 2067.2 1846.58 2068.7 1847.13 2069.67 1848.11 C 2070.65 1849.09 2070.99 1850.38 2070.6 1851.6 L 2051.75 1901.4 C 2050.61 1904.6 2048.75 1906.46 2046.79 1906.38 L 1977.34 1906.38 C 1975.95 1906.19 1974.73 1905.55 1973.97 1904.6 C 1973.22 1903.65 1973 1902.49 1973.37 1901.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2021.5" y="1874">button 3</text><text x="2021.5" y="1888">press</text></g><path d="M 1884 1876.5 L 1966.63 1876.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1971.88 1876.5 L 1964.88 1880 L 1966.63 1876.5 L 1964.88 1873 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2112.22 1851.6 C 2113.36 1848.4 2115.22 1846.54 2117.18 1846.62 L 2185.64 1846.62 C 2187.2 1846.58 2188.7 1847.13 2189.67 1848.11 C 2190.65 1849.09 2190.99 1850.38 2190.6 1851.6 L 2171.75 1901.4 C 2170.61 1904.6 2168.75 1906.46 2166.79 1906.38 L 2097.34 1906.38 C 2095.95 1906.19 2094.73 1905.55 2093.97 1904.6 C 2093.22 1903.65 2093 1902.49 2093.37 1901.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2141.5" y="1874">button 3</text><text x="2141.5" y="1888">release</text></g><path d="M 2071 1876.5 L 2086.63 1876.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2091.88 1876.5 L 2084.88 1880 L 2086.63 1876.5 L 2084.88 1873 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1863 1757.2 C 1879.12 1763.41 1896.88 1763.41 1913 1757.2 C 1929.12 1751 1946.88 1751 1963 1757.2 L 1963 1809.78 C 1946.88 1803.58 1929.12 1803.58 1913 1809.78 C 1896.88 1815.99 1879.12 1815.99 1863 1809.78 L 1863 1757.2 Z" fill="#ffd966" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1912.5" y="1788">TOUCH_DEAD</text></g><path d="M 1796 1783.5 L 1856.63 1783.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1861.88 1783.5 L 1854.88 1787 L 1856.63 1783.5 L 1854.88 1780 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2019.72 1758.6 C 2020.86 1755.4 2022.72 1753.54 2024.68 1753.62 L 2093.14 1753.62 C 2094.7 1753.58 2096.2 1754.13 2097.17 1755.11 C 2098.15 1756.09 2098.49 1757.38 2098.1 1758.6 L 2079.25 1808.4 C 2078.11 1811.6 2076.25 1813.46 2074.29 1813.38 L 2004.84 1813.38 C 2003.45 1813.19 2002.23 1812.55 2001.47 1811.6 C 2000.72 1810.65 2000.5 1809.49 2000.87 1808.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2049" y="1781">button 3</text><text x="2049" y="1795">press</text></g><path d="M 1963 1783.5 L 1994.13 1783.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1999.38 1783.5 L 1992.38 1787 L 1994.13 1783.5 L 1992.38 1780 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2225.22 1758.6 C 2226.36 1755.4 2228.22 1753.54 2230.18 1753.62 L 2298.64 1753.62 C 2300.2 1753.58 2301.7 1754.13 2302.67 1755.11 C 2303.65 1756.09 2303.99 1757.38 2303.6 1758.6 L 2284.75 1808.4 C 2283.61 1811.6 2281.75 1813.46 2279.79 1813.38 L 2210.34 1813.38 C 2208.95 1813.19 2207.73 1812.55 2206.97 1811.6 C 2206.22 1810.65 2206 1809.49 2206.37 1808.4 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="2254.5" y="1781">button 3</text><text x="2254.5" y="1795">release</text></g><path d="M 2098.5 1783.5 L 2199.63 1783.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2204.88 1783.5 L 2197.88 1787 L 2199.63 1783.5 L 2197.88 1780 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1620.22 1506.1 C 1621.36 1502.9 1623.22 1501.04 1625.18 1501.12 L 1693.64 1501.12 C 1695.2 1501.08 1696.7 1501.63 1697.67 1502.61 C 1698.65 1503.59 1698.99 1504.88 1698.6 1506.1 L 1679.75 1555.9 C 1678.61 1559.1 1676.75 1560.96 1674.79 1560.88 L 1605.34 1560.88 C 1603.95 1560.69 1602.73 1560.05 1601.97 1559.1 C 1601.22 1558.15 1601 1556.99 1601.37 1555.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1649.5" y="1528.5">button 3</text><text x="1649.5" y="1542.5">press</text></g><path d="M 1615.12 1573.5 L 1621.34 1565.92" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1624.67 1561.86 L 1622.93 1569.5 L 1621.34 1565.92 L 1617.52 1565.05 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1606.72 1421.1 C 1607.86 1417.9 1609.72 1416.04 1611.68 1416.12 L 1680.14 1416.12 C 1681.7 1416.08 1683.2 1416.63 1684.17 1417.61 C 1685.15 1418.59 1685.49 1419.88 1685.1 1421.1 L 1666.25 1470.9 C 1665.11 1474.1 1663.25 1475.96 1661.29 1475.88 L 1591.84 1475.88 C 1590.45 1475.69 1589.23 1475.05 1588.47 1474.1 C 1587.72 1473.15 1587.5 1471.99 1587.87 1470.9 Z" fill="#ff6666" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1636" y="1443.5">button 3</text><text x="1636" y="1457.5">release</text></g><path d="M 1645.24 1501 L 1642.26 1482.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1641.44 1477.1 L 1645.99 1483.47 L 1642.26 1482.29 L 1639.08 1484.57 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>
\ No newline at end of file
diff -Naur third_party_libinput_bak/doc/user/absolute-coordinate-ranges.rst third_party_libinput_new/doc/user/absolute-coordinate-ranges.rst
--- third_party_libinput_bak/doc/user/absolute-coordinate-ranges.rst	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/user/absolute-coordinate-ranges.rst	2023-03-29 15:35:51.659744100 +0800
@@ -140,7 +140,7 @@
 
 Once a match and override rule has been found, follow the instructions at
 the top of the
-`60-evdev.hwdb <https://github.com/systemd/systemd/blob/master/hwdb/60-evdev.hwdb>`_
+`60-evdev.hwdb <https://github.com/systemd/systemd/blob/main/hwdb.d/60-evdev.hwdb>`_
 file to save it locally and trigger the udev hwdb reload. Rebooting is
 always a good idea. If the match string is correct, the new properties will
 show up in the
diff -Naur third_party_libinput_bak/doc/user/building.rst third_party_libinput_new/doc/user/building.rst
--- third_party_libinput_bak/doc/user/building.rst	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/user/building.rst	2023-03-29 15:36:12.489930000 +0800
@@ -16,6 +16,29 @@
 system-provided libinput with one from the git repository, see
 see :ref:`reverting_install` to revert to the previous state.
 
+.. _distribution_repos:
+
+------------------------------------------------------------------------------
+Distribution repositories for libinput from git
+------------------------------------------------------------------------------
+
+Some distributions provide package repositories for users that want to test
+the latest libinput without building it manually.
+
+.. note:: The list below is provided for convenience. The libinput community
+   cannot provide any guarantees that the packages in those repositories are
+   correct, up-to-date and/or unmodified from the git branch. Due dilligence
+   is recommended.
+
+The following repositories provide an up-to-date package for libinput:
+
+- **Arch:** https://aur.archlinux.org/packages/libinput-git/
+- **Fedora:** https://copr.fedorainfracloud.org/coprs/whot/libinput-git/
+
+Please follow the respective repositories for instructions on how to enable
+the repository and install libinput.
+
+
 .. _building:
 
 ------------------------------------------------------------------------------
@@ -87,12 +110,10 @@
 
 ::
 
-     $> ls -l /usr/lib64/libinput.*
-     -rwxr-xr-x 1 root root    946 Apr 28  2015 /usr/lib64/libinput.la
-     lrwxrwxrwx 1 root root     19 Feb  1 15:12 /usr/lib64/libinput.so -> libinput.so.10.13.0
-     lrwxrwxrwx 1 root root     19 Feb  1 15:12 /usr/lib64/libinput.so.10 -> libinput.so.10.13.0
-     -rwxr-xr-x 1 root root 204992 Feb  1 15:12 /usr/lib64/libinput.so.10.13.0
-
+     $> ldconfig -p | grep libinput | awk '{print $NF}' | xargs ls -l
+     lrwxrwxrwx 1 root root      14 lug 22 13:06 /usr/lib/x86_64-linux-gnu/libinput.so -> libinput.so.10
+     lrwxrwxrwx 1 root root      19 lug 22 13:06 /usr/lib/x86_64-linux-gnu/libinput.so.10 -> libinput.so.10.13.0
+     -rwxr-xr-x 1 root root 1064144 lug 22 13:06 /usr/lib/x86_64-linux-gnu/libinput.so.10.13.0
 
 .. _reverting_install:
 
@@ -167,7 +188,7 @@
 running meson.
 
 .. hint:: The build dependencies for some distributions can be found in the
-	`GitLab Continuous Integration file <https://gitlab.freedesktop.org/libinput/libinput/blob/master/.gitlab-ci.yml>`_.
+	`GitLab Continuous Integration file <https://gitlab.freedesktop.org/libinput/libinput/blob/main/.gitlab-ci.yml>`_.
 	Search for **FEDORA_RPMS** in the **variables:** definition
 	and check the list for an entry for your distribution.
 
@@ -201,6 +222,14 @@
 `this blog post here <https://who-t.blogspot.com/2018/07/meson-fails-with-native-dependency-not-found.html>`_
 for instructions on how to fix it.
 
+..............................................................................
+Build dependencies per distribution
+..............................................................................
+
+
+.. include:: dependencies.rst
+
+
 .. _building_conditional:
 
 ------------------------------------------------------------------------------
@@ -253,6 +282,11 @@
     pkgconfig = import('pkgconfig')
     dep_libinput = dependency('libinput')
 
+Software that uses CMake should use: ::
+
+    find_package(Libinput)
+    target_link_libraries(myprogram PRIVATE Libinput::Libinput)
+
 Otherwise, the most rudimentary way to compile and link a program against
 libinput is:
 
diff -Naur third_party_libinput_bak/doc/user/configuration.rst third_party_libinput_new/doc/user/configuration.rst
--- third_party_libinput_bak/doc/user/configuration.rst	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/user/configuration.rst	2023-03-29 15:36:36.357927000 +0800
@@ -135,8 +135,9 @@
 ------------------------------------------------------------------------------
 
 DWT is the most generic form of palm detection on touchpad. While the user
-is typing the touchpad is disabled, the touchpad is enabled after a timeout.
-See :ref:`disable-while-typing` for more info.
+is typing on an internal keyboard the touchpad is disabled, the touchpad
+is enabled again after a timeout.  See :ref:`disable-while-typing` for more
+info.
 
 Disable-while-typing can be enabled or disabled, it is enabled by default on
 most touchpads.
diff -Naur third_party_libinput_bak/doc/user/contributing.rst third_party_libinput_new/doc/user/contributing.rst
--- third_party_libinput_bak/doc/user/contributing.rst	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/user/contributing.rst	2023-03-29 15:37:10.740756100 +0800
@@ -28,7 +28,7 @@
 Contact
 ------------------------------------------------------------------------------
 
-Questions can be asked on ``#wayland-devel`` on freenode or on the
+Questions can be asked on ``#wayland`` on oftc or on the
 `wayland-devel@lists.freedesktop.org
 <https://lists.freedesktop.org/mailman/listinfo/wayland-devel>`_ mailing
 list.
@@ -50,7 +50,7 @@
 then a good way of finding something is to search for the ``help needed``
 tag in our `issue tracker <https://gitlab.freedesktop.org/libinput/libinput/issues?label_name%5B%5D=help+needed>`_.
 These are issues that have been triaged to some degree and deemed to be a
-possible future feature to libinput. 
+possible future feature to libinput.
 
 .. note:: Some of these issue may require specific hardware to reproduce.
 
@@ -79,11 +79,11 @@
 Working on the code
 ------------------------------------------------------------------------------
 
-libinput has a roughly three-parts architecture: 
+libinput has a roughly three-parts architecture:
 
 -  the front-end code which handles the ``libinput_some_function()`` API calls in ``libinput.c``
 -  the generic evdev interface handling which maps those API calls to the
-   backend calls (``evdev.c``). 
+   backend calls (``evdev.c``).
 - there are device-specific backends which do most of the actual work -
   ``evdev-mt-touchpad.c`` is the one for touchpads for example.
 
@@ -140,6 +140,8 @@
 So it always pays to run that before submitting. This will also run the code
 through valgrind and pick up any memory leaks.
 
+.. _contributing_submitting_code:
+
 ------------------------------------------------------------------------------
 Submitting Code
 ------------------------------------------------------------------------------
@@ -149,32 +151,75 @@
 in the `libinput GitLab instance hosted by freedesktop.org
 <https://gitlab.freedesktop.org/libinput/libinput>`_.
 
-To submit a merge request, you need to
+Below are the steps required to submit a merge request. They do not
+replace `learning git <https://git-scm.com/doc>`__ but they should be
+sufficient to make some of the more confusing steps obvious.
 
 - `Register an account <https://gitlab.freedesktop.org/users/sign_in>`_ in
   the freedesktop.org GitLab instance.
 - `Fork libinput <https://gitlab.freedesktop.org/libinput/libinput/forks/new>`_
   into your username's namespace
-- Get libinput's main repository: ::
+- Get libinput's main repository. git will call this repository ``origin``. ::
 
     git clone https://gitlab.freedesktop.org/libinput/libinput.git
 
 - Add the forked git repository to your remotes (replace ``USERNAME``
-  with your username): ::
+  with your username). git will call this repository ``gitlab``. ::
 
     cd /path/to/libinput.git
     git remote add gitlab git@gitlab.freedesktop.org:USERNAME/libinput.git
     git fetch gitlab
 
-- Push your changes to your fork: ::
+- Create a new branch and commit your changes to that branch. ::
+
+    git switch -C mynewbranch
+    # edit files, make changes
+    git add file1 file2
+    git commit -s
+    # edit commit message in the editor
+
+  Replace ``mynewbranch`` (here and in the commands below) with a meaningful
+  name. See :ref:`contributing_commit_messages` for details on the commit
+  message format.
 
-    git push gitlab BRANCHNAME
+- Push your changes to your fork and submit a merge request ::
 
-- Submit a merge request. The URL for a merge request is: ::
+    git push gitlab mynewbranch
+
+  This command will print the URL to file a merge request, you then only
+  have to click through. Alternatively you can go to:
 
     https://gitlab.freedesktop.org/USERNAME/libinput/merge_requests
 
-  Select your branch name to merge and ``libinput/libinput`` ``master`` as target branch.
+  Select your branch name to merge and ``libinput/libinput`` ``main`` as target branch.
+
+- Verify that the CI completes successfully by visiting the merge request
+  page. A successful pipeline shows only green ticks, failure is indicated
+  by a red cross or a yellow exclamation mark (see
+  the `GitLab Docs
+  <https://docs.gitlab.com/ee/ci/pipelines/#pipeline-mini-graphs>`__). For
+  details about the failures, click on the failed jobs in the pipelines
+  and/or click the ``Expand`` button in the box for the test summaries.
+
+  A merge request without a successful pipeline may never be looked at by a
+  maintainer.
+
+- If changes are requested by the maintainers, please **amend** the
+  commit(s) and **force-push** the updated branch. ::
+
+    # edits in file foo.c
+    git add foo.c
+    git commit --amend
+    git push -f gitlab mynewbranch
+
+  A force-push will re-trigger the CI and notify the merge request that new
+  changes are available.
+
+  If the branch contains more than one commit, please look at
+  `git interactive rebases
+  <https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History>`__
+  to learn how to change multiple commits, or squash new changes into older
+  commits.
 
 ------------------------------------------------------------------------------
 Commit History
@@ -215,6 +260,8 @@
 If in doubt what prefix to use, look at other commits that change the
 same file(s) as the patch being sent.
 
+.. _contributing_commit_messages:
+
 ------------------------------------------------------------------------------
 Commit Messages
 ------------------------------------------------------------------------------
@@ -254,7 +301,7 @@
 ------------------------------------------------------------------------------
 
 Please see the `CODING_STYLE.md
-<https://gitlab.freedesktop.org/libinput/libinput/blob/master/CODING_STYLE.md>`_
+<https://gitlab.freedesktop.org/libinput/libinput/blob/main/CODING_STYLE.md>`_
 document in the source tree.
 
 ------------------------------------------------------------------------------
@@ -293,3 +340,96 @@
 process, even if you use other clients to track the list of available
 patches.
 
+------------------------------------------------------------------------------
+Failed pipeline errors
+------------------------------------------------------------------------------
+
+After submitting your merge request to GitLab, you might receive an email
+informing you that your pipeline failed.
+
+Visit your merge request page and check the `pipeline mini graph
+<https://docs.gitlab.com/ee/ci/pipelines/#pipeline-mini-graphs>`_ to know which
+step failed.
+
+Follow the appropriate section to fix the errors.
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Missing "Signed-off-by: author information"
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+As explained in :ref:`contributing_commit_messages`, every commit must contain a
+Signed-off-by line with your name and email address.
+
+When this line is not present, it can be added to your commit afterwards: ::
+
+  git commit --amend -s
+
+If the merge request contains more than one commit, it must be added to all of
+them: ::
+
+  git rebase --interactive --exec 'git commit --amend -s' main
+
+Once the problem is fixed, force-push your branch. See
+:ref:`contributing_submitting_code` for more details about how to push your code
+and interactive rebases.
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Committed gitlab-ci.yml differs from generated gitlab-ci.yml. Please verify
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+When your merge request modifies the CI templates, you might see this error
+mainly due two reasons: the wrong file was modified and/or
+``ci-fairy generate-template`` wasn't run.
+
+``.gitlab-ci.yaml`` is auto generated, changes should be made in:
+
+- ``.gitlab-ci/ci.template``
+
+- ``.gitlab-ci/config.yaml``
+
+Once the changes are ready, run
+`ci-fairy <https://freedesktop.pages.freedesktop.org/ci-templates/ci-fairy.html#templating-gitlab-ci-yml>`_
+to update ``.gitlab-ci.yaml``: ::
+
+  ci-fairy generate-template
+
+Finally, force-push you changes. See :ref:`contributing_submitting_code` for
+more details.
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Build errors
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Usually, checking the CI log is enough to catch this errors. However, your merge
+request is built using different configurations you might have not tested.
+
+In order to fix this kind of problems, you can compile libinput using the same
+flags used by the CI.
+
+For example, if an error is found in the ``build-no-libwacom`` step, open the
+log and search the build options: ::
+
+  [...]
+  + rm -rf 'build dir'
+  + meson 'build dir' -Dlibwacom=false
+  The Meson build system
+  [...]
+
+Use the same flags to fix the issue and force-push you changes. See
+:ref:`contributing_submitting_code` for more details.
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Test errors
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The test suite is run for your merge request to check for bugs, regressions and
+memory leaks among other issues.
+
+Open the CI error log and search for a message similar to: ::
+
+  :: Failure: ../test/test-touchpad.c:465: touchpad_2fg_scroll_slow_distance(synaptics-t440)
+
+See :ref:`test-suite` to learn how to run the failing tests.
+
+Once the tests are fixed, force-push you changes. See
+:ref:`contributing_submitting_code` for more details.
diff -Naur third_party_libinput_bak/doc/user/dependencies.rst third_party_libinput_new/doc/user/dependencies.rst
--- third_party_libinput_bak/doc/user/dependencies.rst	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/doc/user/dependencies.rst	2023-03-29 15:37:43.825701700 +0800
@@ -0,0 +1,21 @@
+.. warning:: The package lists are autogenerated from the `CI <https://gitlab.freedesktop.org/libinput/libinput/-/tree/master/.gitlab-ci.yml>`_.
+
+- Fedora: ::
+
+    dnf install @FEDORA_PACKAGES@
+
+- Ubuntu: ::
+
+    apt install @UBUNTU_PACKAGES@
+
+- Debian: ::
+
+    apt install @DEBIAN_PACKAGES@
+
+- Arch: ::
+
+    pacman -S @ARCH_PACKAGES@
+
+- Alpine: ::
+
+    apk add @ALPINE_PACKAGES@
diff -Naur third_party_libinput_bak/doc/user/development.rst third_party_libinput_new/doc/user/development.rst
--- third_party_libinput_bak/doc/user/development.rst	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/user/development.rst	2023-03-29 15:37:56.522511100 +0800
@@ -36,6 +36,7 @@
    normalization-of-relative-motion.rst
    seats.rst
    timestamps.rst
+   wheel-api.rst
 
 .. _hacking_on_libinput:
 
diff -Naur third_party_libinput_bak/doc/user/device-configuration-via-udev.rst third_party_libinput_new/doc/user/device-configuration-via-udev.rst
--- third_party_libinput_bak/doc/user/device-configuration-via-udev.rst	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/user/device-configuration-via-udev.rst	2023-03-29 15:38:03.521874400 +0800
@@ -150,7 +150,7 @@
 user in a local hwdb file. This property designates the touchpad on a Lenovo
 x220 with a touchpad firmware version 8.1. When this firmware version is
 installed, the touchpad is imprecise. The touchpad device does not send
-continuos x/y axis position updates, a behavior also observed on its
+continuous x/y axis position updates, a behavior also observed on its
 successor model, the Lenovo x230 which has the same firmware version. If the
 above property is set, libinput adjusts its behavior to better suit this
 particular model.
@@ -263,4 +263,4 @@
              device-specific quirks must go in to the :ref:`device-quirks` system.
 
 For information about older libinput versions, please see the documentation
-for your version avaialable in: https://wayland.freedesktop.org/libinput/doc/
+for your version available in: https://wayland.freedesktop.org/libinput/doc/
diff -Naur third_party_libinput_bak/doc/user/device-quirks.rst third_party_libinput_new/doc/user/device-quirks.rst
--- third_party_libinput_bak/doc/user/device-quirks.rst	2023-03-28 10:49:58.368608200 +0800
+++ third_party_libinput_new/doc/user/device-quirks.rst	2023-03-29 15:38:13.981465800 +0800
@@ -6,7 +6,7 @@
 
 libinput requires extra information from devices that is not always readily
 available. For example, some touchpads are known to have jumping cursors
-under specific conditions. libinput ships a set of files containting the
+under specific conditions. libinput ships a set of files containing the
 so-called model quirks to provide that information. Model quirks are usually
 installed under ``/usr/share/libinput/<filename>.quirks`` and are standard
 ``.ini`` files. A file may contain multiple section headers (``[some
@@ -157,7 +157,7 @@
     Specifies the touch size required to trigger a press (N) and to trigger
     a release (M). O > N > M. See :ref:`touchpad_touch_size_hwdb` for more
     details.
-AttrTouchPressureRange=N:M, AttrPalmPressureThreshold=O, AttrThumbPressureThreshold=P
+AttrPressureRange=N:M, AttrPalmPressureThreshold=O, AttrThumbPressureThreshold=P
     Specifies the touch pressure required to trigger a press (N) and to
     trigger a release (M), when a palm touch is triggered (O) and when a
     thumb touch is triggered (P). O > P > N > M. See
@@ -177,6 +177,19 @@
     Disables the evdev event type/code tuples on the device. Entries may be
     a named event type, or a named event code, or a named event type with a
     hexadecimal event code, separated by a single colon.
+AttrEventCodeEnable=EV_ABS;BTN_STYLUS;EV_KEY:0x123;
+    Enables the evdev event type/code tuples on the device. Entries may be
+    a named event type, or a named event code, or a named event type with a
+    hexadecimal event code, separated by a single colon.
+AttrInputPropDisable=INPUT_PROP_BUTTONPAD;INPUT_PROP_POINTER;
+    Disables the evdev input property on the device. Entries may be
+    a named input property or the hexadecimal value of that property.
+AttrInputPropEnable=INPUT_PROP_BUTTONPAD;INPUT_PROP_POINTER;
+    Enables the evdev input property on the device. Entries may be
+    a named input property or the hexadecimal value of that property.
 AttrPointingStickIntegration=internal|external
     Indicates the integration of the pointing stick. This is a string enum.
     Only needed for external pointing sticks. These are rare.
+AttrTabletSmoothing=1|0
+    Enables (1) or disables (0) input smoothing for tablet devices. Smoothing is enabled
+    by default, except on AES devices.
diff -Naur third_party_libinput_bak/doc/user/faqs.rst third_party_libinput_new/doc/user/faqs.rst
--- third_party_libinput_bak/doc/user/faqs.rst	2023-03-28 10:49:58.372608300 +0800
+++ third_party_libinput_new/doc/user/faqs.rst	2023-03-29 15:38:21.841165200 +0800
@@ -218,7 +218,7 @@
 
 Synclient and syndaemon rely on X input device properties that are specific
 to the xf86-input-synaptics X.Org input driver. Both were written when the
-synaptics driver was the only commmon touchpad driver in existence. They
+synaptics driver was the only common touchpad driver in existence. They
 assume that if the properties aren't available, no touchpad is available
 either. The xf86-input-libinput X.Org input driver does not export these
 driver-specific properties, synclient/syndaemon will thus not detect the
diff -Naur third_party_libinput_bak/doc/user/features.rst third_party_libinput_new/doc/user/features.rst
--- third_party_libinput_bak/doc/user/features.rst	2023-03-28 10:49:58.372608300 +0800
+++ third_party_libinput_new/doc/user/features.rst	2023-03-29 15:38:27.328493200 +0800
@@ -5,7 +5,7 @@
 ==============================================================================
 
 Below is a list of features supported by libinput. The availability of
-features usually depends on the device type and a device's capabilties.
+features usually depends on the device type and a device's capabilities.
 Not all features are user-configurable, some rely on :ref:`device-quirks`
 to be useful.
 
diff -Naur third_party_libinput_bak/doc/user/gestures.rst third_party_libinput_new/doc/user/gestures.rst
--- third_party_libinput_bak/doc/user/gestures.rst	2023-03-28 10:49:58.372608300 +0800
+++ third_party_libinput_new/doc/user/gestures.rst	2023-03-29 15:38:42.493316100 +0800
@@ -20,9 +20,10 @@
 
 A single gesture cannot change the finger count. For example, if a user
 puts down a fourth finger during a three-finger swipe gesture, libinput will
-end the three-finger gesture and, if applicable, start a four-finger swipe
-gesture. A caller may however decide that those gestures are semantically
-identical and continue the two gestures as one single gesture.
+end (cancel) the three-finger gesture and, if applicable, start a
+four-finger swipe gesture. A caller may however decide that those gestures
+are semantically identical and continue the two gestures as one single
+gesture.
 
 .. _gestures_pinch:
 
@@ -73,6 +74,227 @@
 The illustration above shows a vertical three-finger swipe. The coordinates
 provided during the gesture are the movements of the logical center.
 
+.. _gestures_hold:
+
+------------------------------------------------------------------------------
+Hold gestures
+------------------------------------------------------------------------------
+
+A hold gesture is one where the user places one or more fingers on the
+device without significant movement. The exact conditions when a hold gesture
+transitions to pointer motion, scrolling or other gestures
+are implementation-defined.
+
+The hold gesture is intended to allow for the implementation of two specific
+features:
+
+- where a two-finger scrolling starts kinetic scrolling in the caller, a
+  subsequent hold gesture can be used to stop that kinetic scroll motion,
+  and
+- hold-to-trigger interactions where the interaction could be a click, a
+  context menu, or some other context-specific interaction.
+
+Hold gestures have three potential logical states:
+
+- **begin**: one or more fingers are placed on the device at the same time
+- **end**: all fingers are removed and the device enters a neutral logical state
+- **end(cancelled)**: all fingers are part of a known interaction and the
+  currenthold gesture is no longer active. This may also occurs when
+  switching between hold gestures with different finger counts.
+
+.. note:: By definition, a hold gesture does not move and thus no coordinate
+          updates are available.
+
+For example, a user that puts one finger, then a second finger down and
+releases them later may trigger the following event sequence:
+
+=============  ============  ============
+Action         Event         Finger count
+=============  ============  ============
+Finger 1 down  <no event>
+Finger 2 down  **begin**     2
+Finger 2 up    **end**       2
+Finger 1 up    <no event>
+=============  ============  ============
+
+A hold gesture may by be **cancelled**. This occurs
+when the hold gesture changes into some other interaction and should no
+longer be considered the current hold gesture. A **end(cancelled)** event
+applies to the whole gesture (all fingers). For example, a pointer motion on
+a touchpad may trigger this sequence:
+
++-------------------+-----------------------+
+| Action            |  Event                |
++===================+=======================+
+| | Finger 1 down   | | **hold begin**      |
++-------------------+-----------------------+
+| | Finger 1 motion | | **hold cancel**     |
+| |                 | | **pointer motion**  |
++-------------------+-----------------------+
+| | Finger 1 motion | | **pointer motion**  |
++-------------------+-----------------------+
+| | Finger 1 up     | | *no event*          |
++-------------------+-----------------------+
+
+.. note:: Many interactions with a touchpad will start with a hold
+          gesture that is then cancelled as that gesture turns into e.g.
+          pointer motion. A caller **must** handle hold gesture
+          cancellations correctly.
+
+A two-finger scroll motion on a touchpad may trigger this sequence:
+
++------------------------+---------------------+--------------+
+| Action                 |  Event              | Finger count |
++========================+=====================+==============+
+| | Finger 1 down        | | **hold begin**    | | 1          |
++------------------------+---------------------+--------------+
+| | Finger 2 down        | | **hold cancel**   | | 1          |
+| |                      | | **hold begin**    | | 2          |
++------------------------+---------------------+--------------+
+| | Finger 1+2 motion    | | **hold cancel**   | | 2          |
+| |                      | | **pointer axis**  | |            |
++------------------------+---------------------+--------------+
+| | Finger 1+2 motion    | | **pointer axis**  |              |
++------------------------+---------------------+--------------+
+| | Finger 1 up          | | **pointer axis**  |              |
+| | Finger 2 up          | | (scroll stop)     |              |
++------------------------+---------------------+--------------+
+
+A three-finger-swipe on a touchpad may trigger this sequence:
+
++---------------------+---------------------+--------------+
+| Action              |  Event              | Finger count |
++=====================+=====================+==============+
+| | Finger 1 down     |  | **hold begin**   | | 1          |
++---------------------+---------------------+--------------+
+| | Finger 2 down     | | **hold cancel**   | | 1          |
+| |                   | | **hold begin**    | | 2          |
++---------------------+---------------------+--------------+
+| | Finger 3 down     | | **hold cancel**   | | 2          |
+| |                   | | **hold begin**    | | 3          |
++---------------------+---------------------+--------------+
+| | Finger motion     | | **hold cancel**   | | 3          |
+| |                   | | **swipe begin**   | | 3          |
++---------------------+---------------------+--------------+
+| | Finger motion     | | **swipe update**  | | 3          |
++---------------------+---------------------+--------------+
+| | Finger 1 up       | | **swipe end**     | | 3          |
+| | Finger 2 up       | |                   | |            |
+| | Finger 3 up       | |                   | |            |
++---------------------+---------------------+--------------+
+
+Single-finger hold gestures
+...........................
+
+libinput uses implementation-defined timeouts based on other interactions
+to determine whether a single-finger hold gestures should start. In other
+words, a caller **must not** rely on a hold gesture always being triggered
+as soon as a single finger is placed on the touchpad. This is true for any
+hold gesture but especially so for single-finger hold gestures.
+
+Hold gestures with a single finger are prone to being extremely short-lived.
+On many devices it is impossible to hold a finger still enough for there to
+be no pointer motion events, even if those deltas are miniscule. Changing
+movement thresholds to rely on hold gestures would reduce device
+responsiveness.
+
+It is thus the responsibility of the caller to determine where hold gestures
+transition in and out of other interactions. For example, a two-finger hold
+may produce a cancelled single-finger hold gesture first:
+
++--------------------+----------------------+--------------+--------------+
+| Action             |  Event               | Finger count | Notes        |
++====================+======================+==============+==============+
+| | Finger 1 down    | | **hold begin**     | | 1          |              |
++--------------------+----------------------+--------------+--------------+
+| | Finger 1 motion  | | **hold cancel**    | | 1          | | tiny deltas|
+| |                  | | **pointer motion** | |            | |            |
++--------------------+----------------------+--------------+--------------+
+| | Finger 2 down    | | **hold begin**     | | 2          |              |
++--------------------+----------------------+--------------+--------------+
+| | Finger 1 up      | | **hold end**       | |            |              |
+| | Finger 2 up      | |                    | |            |              |
++--------------------+----------------------+--------------+--------------+
+
+Note how the second hold gesture started with a finger count of 2 - without
+the user ever lifting the first finger. Cancellation of hold gesture does
+not imply the user has lifted a finger.
+
+A hold gesture may start after a previous gesture completed. For example, a
+single finger move-and-hold may trigger different sequences for the same
+user interaction:
+
++--------------------+---------------------+-------------------+--------------+
+| Action             |  Device 1           | Device 2          | Notes        |
++====================+=====================+===================+==============+
+| | Finger 1 down    | | **hold begin**    |  | **hold begin** |              |
++--------------------+---------------------+-------------------+--------------+
+| | Finger 1 motion  | | **hold cancel**   |                   | | tiny deltas|
+|                    | | **pointer motion**|                   | |            |
++--------------------+---------------------+-------------------+--------------+
+|                    | |  **hold begin**   |                   |              |
++--------------------+---------------------+-------------------+--------------+
+| |  Finger 1 up     | |  **hold end**     | |  **hold end**   |              |
++--------------------+---------------------+-------------------+--------------+
+
+A caller that wants to use hold gestures must thus be able to infer the same
+interaction based on a stream of pointer motion events with small deltas.
+
+libinput may start a new hold begin gesture once the pointer stops moving.
+The time between the last pointer motion event and the hold begin event is
+implementation-defined.
+
+
+Hold gestures and thumb/palm detection
+......................................
+
+Thumb and palm detection effectively remove touches from being counted
+towards an interaction, see :ref:`thumb_detection` and
+:ref:`palm_detection` for details.
+
+In the context of hold gestures, thumbs and palms are treated by libinput as
+if the finger was removed from the device. Where other non-thumb/non-palm
+fingers remain on the device, an **hold update** event is sent. Otherwise,
+the hold gesture terminates with a **hold cancel** event.
+
+Notably, libinput's thumb and palm detection is not a simple boolean per
+touch but specific to the state of that touch in the overall context. For
+example, a touch may be a thumb for tapping but not for clickfinger
+interactions. A caller must not infer the number of physical fingers from
+the hold gesture.
+
+Likewise, libinput may classify a finger as thumb in the same hardware event
+as a new finger is placed on the touchpad. In that case, the hold gesture
+**may** continue as one-finger gesture despite there being two physical
+touch points.
+
+Information to determine whether a touch is a thumb or a palm may not be
+available until some time into an interaction. Thus very short brushes
+of the touchpad by a palm may trigger a **hold begin** followed by an
+immediate **hold end** as libinput lacks sufficient information to identify
+the touch as thumb/palm and send the corresponding **hold cancel**
+event. A caller must not assume that a hold gesture always represents a
+valid finger down.
+
+Hold gestures and tap-to-click
+..............................
+
+:ref:`tapping` is the feature that enables short-lived touches to trigger
+button presses.
+
+.. warning:: Summary: do not use hold gestures to do your own tap-to-click
+             implementation
+
+In the context of hold gestures, tap-to-click cancels current hold gestures
+and a finger dragging (see :ref:`tapndrag`) does not begin a hold
+gesture. Where tap-to-click is disabled a tap-like gesture may create
+**hold begin** followed by a **hold end** event. Callers **must not** use
+hold gestures for their own tap-to-click implementation as the data is not
+reliable enough. libinput may change internal timeouts and thresholds
+depending on whether tap-to-click is enabled and the hold gesture event may
+not match touch sequences that a user would expect to be a tap-to-click
+interaction.
+
 .. _gestures_touchscreens:
 
 ------------------------------------------------------------------------------
diff -Naur third_party_libinput_bak/doc/user/incorrectly-enabled-hires.rst third_party_libinput_new/doc/user/incorrectly-enabled-hires.rst
--- third_party_libinput_bak/doc/user/incorrectly-enabled-hires.rst	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/doc/user/incorrectly-enabled-hires.rst	2023-03-29 15:39:19.170971800 +0800
@@ -0,0 +1,62 @@
+.. _incorrectly_enabled_hires:
+
+==============================================================================
+Incorrectly enabled high-resolution scroll
+==============================================================================
+
+Some devices might announce support for high-resolution scroll wheel by enabling
+``REL_WHEEL_HI_RES`` and/or ``REL_HWHEEL_HI_RES`` but never send a
+high-resolution scroll event.
+
+When the first low-resolution scroll event is received without any previous
+high-resolution event, libinput prints a bug warning with the text **"device
+supports high-resolution scroll but only low-resolution events have been
+received"** and a link to this page.
+
+.. note:: This warning will be printed only once
+
+In most cases this is a bug on the device firmware, the kernel driver or in a
+software used to create user-space devices through uinput.
+
+Once the bug is detected, libinput will start emulating high-resolution scroll
+events.
+
+------------------------------------------------------------------------------
+Detecting and fixing the issue
+------------------------------------------------------------------------------
+
+Events sent by a buggy device can be shown in the
+:ref:`libinput record <libinput-record>` output for the device. Notice that
+``REL_WHEEL_HI_RES`` and ``REL_HWHEEL_HI_RES`` are set but only ``REL_WHEEL``
+events are sent: ::
+
+    # Supported Events:
+    # Event type 0 (EV_SYN)
+    # Event type 1 (EV_KEY)
+    #   Event code 272 (BTN_LEFT)
+    # Event type 2 (EV_REL)
+    #   Event code 0 (REL_X)
+    #   Event code 1 (REL_Y)
+    #   Event code 6 (REL_HWHEEL)
+    #   Event code 8 (REL_WHEEL)
+    #   Event code 11 (REL_WHEEL_HI_RES)
+    #   Event code 12 (REL_HWHEEL_HI_RES)
+    [...]
+    quirks:
+    events:
+    - evdev:
+        - [  0,      0,   2,   8,       1] # EV_REL / REL_WHEEL                 1
+        - [  0,      0,   0,   0,       0] # ------------ SYN_REPORT (0) ---------- +0ms
+    - evdev:
+        - [  0,  15126,   2,   8,       1] # EV_REL / REL_WHEEL                 1
+        - [  0,  15126,   0,   0,       0] # ------------ SYN_REPORT (0) ---------- +15ms
+    - evdev:
+        - [  0,  30250,   2,   8,       1] # EV_REL / REL_WHEEL                 1
+        - [  0,  30250,   0,   0,       0] # ------------ SYN_REPORT (0) ---------- +15ms
+
+The issue can be fixed by adding a quirk to unset the ``REL_WHEEL_HI_RES`` and
+``REL_HWHEEL_HI_RES`` event codes: ::
+
+    AttrEventCodeDisable=REL_WHEEL_HI_RES;REL_HWHEEL_HI_RES;
+
+Please see :ref:`device-quirks` for details.
diff -Naur third_party_libinput_bak/doc/user/meson.build third_party_libinput_new/doc/user/meson.build
--- third_party_libinput_bak/doc/user/meson.build	2023-03-28 10:49:58.372608300 +0800
+++ third_party_libinput_new/doc/user/meson.build	2023-03-29 15:39:41.939818200 +0800
@@ -4,6 +4,11 @@
 	error('Program "sphinx-build" not found or not executable. Try building with -Ddocumentation=false')
 endif
 
+yq = find_program('yq', required : false)
+if not yq.found()
+	warning('Program "yq" not found or not executable. Dependency list will not be built.')
+endif
+
 sphinx_config = configuration_data()
 sphinx_config.set('PROJECT_NAME', meson.project_name())
 sphinx_config.set('PROJECT_VERSION', meson.project_version())
@@ -45,6 +50,7 @@
 	[ 'faqs.rst', 'faq.html'],
 	[ 'features.rst', 'features.html'],
 	[ 'gestures.rst', 'gestures.html'],
+	[ 'incorrectly-enabled-hires.rst', 'incorrectly-enabled-hires.html'],
 	[ 'middle-button-emulation.rst', 'middle_button_emulation.html'],
 	[ 'normalization-of-relative-motion.rst', 'motion_normalization.html'],
 	[ 'palm-detection.rst', 'palm_detection.html'],
@@ -138,6 +144,7 @@
 	'device-quirks.rst',
 	'faqs.rst',
 	'gestures.rst',
+	'incorrectly-enabled-hires.rst',
 	'middle-button-emulation.rst',
 	'normalization-of-relative-motion.rst',
 	'palm-detection.rst',
@@ -162,24 +169,18 @@
 	'trackpoints.rst',
 	'trackpoint-configuration.rst',
 	'what-is-libinput.rst',
+	'wheel-api.rst',
 	'features.rst',
 	'development.rst',
 	'troubleshooting.rst',
 	'configuration.rst',
 )
 
-config_noop = configuration_data()
-# Set a dummy replacement to silence meson warnings:
-# meson.build:487: WARNING: Got an empty configuration_data() object and
-# 		   found no substitutions in the input file 'foo'. If you
-# 		   want to copy a file to the build dir, use the 'copy:'
-# 		   keyword argument added in 0.47.0
-config_noop.set('dummy', 'dummy')
 src_sphinx = []
 foreach f : src_rst
 	sf = configure_file(input: f,
 			    output: '@PLAINNAME@',
-			    configuration : config_noop)
+			    copy : true)
 	src_sphinx += [ sf ]
 endforeach
 
@@ -187,6 +188,19 @@
 	       output: 'index.rst',
 	       configuration: sphinx_config)
 
+dependencies_config = configuration_data()
+if yq.found()
+	distributions = ['fedora', 'ubuntu', 'debian', 'arch', 'alpine']
+	foreach distro : distributions
+		yq_filter = '.distributions[] | select(.name == "@0@") | .packages | join(" ")'.format(distro)
+		deps = run_command(yq, '-r', yq_filter,
+				   meson.source_root() / '.gitlab-ci' / 'config.yml').stdout()
+		dependencies_config.set('@0@_PACKAGES'.format(distro.to_upper()), deps)
+endforeach
+endif
+configure_file(input: 'dependencies.rst',
+	       output: 'dependencies.rst',
+	       configuration: dependencies_config)
 
 # do not use -j, it breaks on Ubuntu
 sphinx_output_dir = 'Documentation'
@@ -194,6 +208,6 @@
 	      input : [ sphinx_conf_py, git_version_page ] + src_sphinx + dst_404s,
 	      output : [ sphinx_output_dir ],
 	      command : [ sphinx, '-q', '-b', 'html',
-			  '-d', join_paths(meson.current_build_dir(), 'doctrees'),
+			  '-d', meson.current_build_dir() / 'doctrees',
 			  meson.current_build_dir(), sphinx_output_dir],
 	      build_by_default : true)
diff -Naur third_party_libinput_bak/doc/user/normalization-of-relative-motion.rst third_party_libinput_new/doc/user/normalization-of-relative-motion.rst
--- third_party_libinput_bak/doc/user/normalization-of-relative-motion.rst	2023-03-28 10:49:58.372608300 +0800
+++ third_party_libinput_new/doc/user/normalization-of-relative-motion.rst	2023-03-29 15:40:20.639518900 +0800
@@ -27,6 +27,11 @@
 movement speed increases, acceleration is applied - at high speeds a low-dpi
 device will roughly feel the same as a higher-dpi mouse.
 
+The reason for the normalization is convenience: a caller can assume that a
+delta of 1 should result in a movement of 1 pixel on a traditional
+(low-dpi) screen. On screens with high resolutions, the caller must scale
+according to the UI scale factors.
+
 This normalization only applies to accelerated coordinates, unaccelerated
 coordinates are left in device-units. It is up to the caller to interpret
 those coordinates correctly.
diff -Naur third_party_libinput_bak/doc/user/palm-detection.rst third_party_libinput_new/doc/user/palm-detection.rst
--- third_party_libinput_bak/doc/user/palm-detection.rst	2023-03-28 10:49:58.372608300 +0800
+++ third_party_libinput_new/doc/user/palm-detection.rst	2023-03-29 15:40:27.691583100 +0800
@@ -157,6 +157,11 @@
   typing.
 - Physical buttons work even while the touchpad is disabled. This includes
   :ref:`software-emulated buttons <t440_support>`.
+- libinput pairs touchpads and keyboards for the disable-while-typing
+  feature. In the most common case, the internal touchpad is paired only
+  with the internal keyboard. Typing on an external keyboard will thus not
+  disable the touchpad. Some devices require a :ref:`quirk <device-quirks>`
+  to be correctly paired.
 
 Disable-while-typing can be enabled and disabled by calling
 **libinput_device_config_dwt_set_enabled()**.
diff -Naur third_party_libinput_bak/doc/user/reporting-bugs.rst third_party_libinput_new/doc/user/reporting-bugs.rst
--- third_party_libinput_bak/doc/user/reporting-bugs.rst	2023-03-28 10:49:58.372608300 +0800
+++ third_party_libinput_new/doc/user/reporting-bugs.rst	2023-03-29 15:40:51.558954600 +0800
@@ -305,7 +305,7 @@
 
 Whether the bug fix ends up in your distribution depends on a number of
 things. Any given bug fix **may** be cherry-picked into the current stable
-branch, depending on its severity, impact, and likelyhood to cause
+branch, depending on its severity, impact, and likelihood to cause
 regressions. Once cherry-picked it will land in the next stable branch
 release. These are usually a few weeks apart.
 
diff -Naur third_party_libinput_bak/doc/user/scrolling.rst third_party_libinput_new/doc/user/scrolling.rst
--- third_party_libinput_bak/doc/user/scrolling.rst	2023-03-28 10:49:58.372608300 +0800
+++ third_party_libinput_new/doc/user/scrolling.rst	2023-03-29 15:40:59.178101400 +0800
@@ -130,6 +130,9 @@
 Scroll sources
 ------------------------------------------------------------------------------
 
+.. note:: Scroll sources are deprecated with libinput 1.19. The scroll
+   source is now encoded in the event type.
+
 libinput provides a pointer axis *source* for each scroll event. The
 source can be obtained with the **libinput_event_pointer_get_axis_source()**
 function and is one of **wheel**, **finger**, or **continuous**. The source
diff -Naur third_party_libinput_bak/doc/user/switches.rst third_party_libinput_new/doc/user/switches.rst
--- third_party_libinput_bak/doc/user/switches.rst	2023-03-28 10:49:58.376608400 +0800
+++ third_party_libinput_new/doc/user/switches.rst	2023-03-29 15:41:09.019715200 +0800
@@ -28,15 +28,17 @@
 the device is disabled while the lid is logically closed. This is to avoid
 ghost touches that can be caused by interference with touchpads and the
 closed lid. The touchpad is automatically re-enabled whenever the lid is
-openend.
+opened.
 
 This handling of lid switches is transparent to the user, no notifications
 are sent and the device appears as enabled at all times.
 
 On some devices, the device's lid state does not always reflect the physical
-state and the lid state may report as closed even when the lid is physicall
-open. libinput employs some heuristics to detect user input (specificially
-typing) to re-enable the touchpad on those devices.
+state and the lid state may report as closed even when the lid is physically
+open. libinput employs some heuristics to detect user input (specifically
+typing) to re-enable the touchpad on those devices. Where input is detected,
+libinput updates the lid status of the kernel device so other consumers of
+the kernel events also get the accurate state.
 
 .. _switches_tablet_mode:
 
diff -Naur third_party_libinput_bak/doc/user/tablet-debugging.rst third_party_libinput_new/doc/user/tablet-debugging.rst
--- third_party_libinput_bak/doc/user/tablet-debugging.rst	2023-03-28 10:49:58.376608400 +0800
+++ third_party_libinput_new/doc/user/tablet-debugging.rst	2023-03-29 15:41:20.606606300 +0800
@@ -39,6 +39,6 @@
 - **resolution** indicates that the device does not have a resolution set
   for the x and y axes. This can be fixed with a hwdb entry, locate and read
   the `60-evdev.hwdb
-  <https://github.com/systemd/systemd/tree/master/hwdb/60-evdev.hwdb>`__ file
+  <https://github.com/systemd/systemd/blob/main/hwdb.d/60-evdev.hwdb>`__ file
   on your machine and file a pull request with the fixes against
   `systemd <https://github.com/systemd/systemd/>`__.
diff -Naur third_party_libinput_bak/doc/user/tapping.rst third_party_libinput_new/doc/user/tapping.rst
--- third_party_libinput_bak/doc/user/tapping.rst	2023-03-28 10:49:58.376608400 +0800
+++ third_party_libinput_new/doc/user/tapping.rst	2023-03-29 15:41:29.118301400 +0800
@@ -49,6 +49,11 @@
 **libinput_device_config_tap_set_drag_enabled()**. Most devices have
 tap-and-drag enabled by default.
 
+.. note:: Dragging is always done with one finger. The number of fingers on
+          the initial tap decide the type of button click. For example, to
+          middle-click drag, tap with three fingers followed by a
+          single-finger drag.
+
 Also optional is a feature called "drag lock". With drag lock disabled, lifting
 the finger will stop any drag process. When enabled, libinput will ignore a
 finger up event during a drag process, provided the finger is set down again
diff -Naur third_party_libinput_bak/doc/user/trackpoint-configuration.rst third_party_libinput_new/doc/user/trackpoint-configuration.rst
--- third_party_libinput_bak/doc/user/trackpoint-configuration.rst	2023-03-28 10:49:58.380608500 +0800
+++ third_party_libinput_new/doc/user/trackpoint-configuration.rst	2023-03-29 15:42:18.410899500 +0800
@@ -20,7 +20,7 @@
 The magic trackpoint multiplier
 ------------------------------------------------------------------------------
 
-To accomodate for the wildly different input data on trackpoint, libinput
+To accommodate for the wildly different input data on trackpoint, libinput
 uses a multiplier that is applied to input deltas. Trackpoints that send
 comparatively high deltas can be "slowed down", trackpoints that send low
 deltas can be "sped up" to match the expected range. The actual acceleration
diff -Naur third_party_libinput_bak/doc/user/trackpoints.rst third_party_libinput_new/doc/user/trackpoints.rst
--- third_party_libinput_bak/doc/user/trackpoints.rst	2023-03-28 10:49:58.380608500 +0800
+++ third_party_libinput_new/doc/user/trackpoints.rst	2023-03-29 15:42:26.493700400 +0800
@@ -5,7 +5,7 @@
 ==============================================================================
 
 This page provides an overview of trackpoint handling in libinput, also
-refered to as Pointing Stick or Trackstick. The device itself is usually a
+referred to as Pointing Stick or Trackstick. The device itself is usually a
 round plastic stick between the G, H and B keys with a set of buttons below
 the space bar.
 
@@ -50,7 +50,7 @@
 trackpoint is in a neutral state and no events are reported. Trackpoint data
 is hard to generalize, see
 `Observations on trackpoint input data
-<a href="https://who-t.blogspot.com/2018/06/observations-on-trackpoint-input-data.html">`_
+<https://who-t.blogspot.com/2018/06/observations-on-trackpoint-input-data.html>`_
 for more details.
 
 .. figure:: trackpoint-delta-illustration.svg
diff -Naur third_party_libinput_bak/doc/user/troubleshooting.rst third_party_libinput_new/doc/user/troubleshooting.rst
--- third_party_libinput_bak/doc/user/troubleshooting.rst	2023-03-28 10:49:58.380608500 +0800
+++ third_party_libinput_new/doc/user/troubleshooting.rst	2023-03-29 15:42:33.667115000 +0800
@@ -14,3 +14,4 @@
    touchpad-pressure-debugging.rst
    trackpoint-configuration.rst
    tablet-debugging.rst
+   incorrectly-enabled-hires.rst
diff -Naur third_party_libinput_bak/doc/user/wheel-api.rst third_party_libinput_new/doc/user/wheel-api.rst
--- third_party_libinput_bak/doc/user/wheel-api.rst	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/doc/user/wheel-api.rst	2023-03-29 15:42:48.930132900 +0800
@@ -0,0 +1,183 @@
+.. _wheel_scrolling:
+
+==============================================================================
+Wheel scrolling
+==============================================================================
+
+libinput provides two events to handle wheel scrolling:
+
+- ``LIBINPUT_EVENT_POINTER_AXIS`` events are sent for regular wheel clicks,
+  usually those representing one detent on the device. These wheel clicks
+  usually require a rotation of 15 or 20 degrees.
+  **This event is deprecated as of libinput 1.19.**
+
+- ``LIBINPUT_EVENT_POINTER_SCROLL_WHEEL`` events are sent for regular and/or
+  high resolution wheel movements. High-resolution events are often 4 or 8
+  times more frequent than wheel clicks and require the device to be switched
+  into high-resolution mode (Linux kernel 5.0 and later). Where
+  high-resolution wheels are not provided by the kernel, libinput emulates
+  these events for regular wheel clicks.
+  **This event is available since libinput 1.19.**
+
+The events are separate for historical reasons. Both events are
+generated for the same device but are independent event streams. Callers
+must not assume any relation between the two, i.e. there is no guarantee
+that an axis event is sent before or after any specific high-resolution
+event and vice versa. Callers should not handle both events.
+
+.. warning:: do not handle both ``LIBINPUT_EVENT_POINTER_AXIS`` and
+   ``LIBINPUT_EVENT_POINTER_SCROLL_WHEEL``. Always use the latter where
+   possible, otherwise only use the former.
+
+Both events have their own set of APIs to access the data within:
+
+- ``LIBINPUT_EVENT_POINTER_AXIS``: Deprecated as of libinput 1.19, where
+  possible it is recommended to handle **only**
+  ``LIBINPUT_EVENT_POINTER_SCROLL_WHEEL``.
+
+  * ``libinput_event_pointer_get_axis_value()`` returns the angle of movement
+    in degrees.
+  * ``libinput_event_pointer_get_axis_source()`` returns the source of the
+    event: wheel, finger or continuous.
+  * ``libinput_event_pointer_get_axis_value_discrete()`` returns the number of
+    logical wheel clicks.
+
+- ``LIBINPUT_EVENT_POINTER_SCROLL_WHEEL`` available since libinput 1.19.
+
+  * ``libinput_event_pointer_get_scroll_value_v120()`` returns a value
+    normalized into the 0..120 range, see below. Any multiple of 120 should
+    be treated as one full wheel click.
+
+.. note:: Where possible, the ``libinput_event_pointer_get_axis_value()``,
+          ``libinput_event_pointer_get_axis_source()`` and
+          ``libinput_event_pointer_get_axis_value_discrete()`` API should be
+          avoided.
+
+------------------------------------------------------------------------------
+The v120 Wheel API
+------------------------------------------------------------------------------
+
+The ``v120`` value matches the Windows API for wheel scrolling. Wheel
+movements are normalized into multiples (or fractions) of 120 with each
+multiple of 120 representing one detent of movement. The ``v120`` API is the
+recommended API for callers that do not care about the exact physical
+motion and is the simplest API to handle high-resolution scrolling.
+
+Most wheels provide 24 detents per 360 degree rotation (click angle of 15),
+others provide 18 detents per 360 degree rotation (click angle 20). Mice
+falling outside these two are rare but do exist. Below is a table showing
+the various values for a single event, depending on the click angle of the
+wheel:
+
++-------------+------------+---------------+------+
+| Click angle | Axis value | Discrete value| v120 |
++=============+============+===============+======+
+| 15          |      15    | 1             | 120  |
++-------------+------------+---------------+------+
+| 20          |      20    | 1             | 120  |
++-------------+------------+---------------+------+
+
+Fast scrolling may trigger cover than one detent per event and thus each
+event may contain multiples of the value, discrete or v120 value:
+
++-------------+------------+---------------+------+
+| Click angle | Axis value | Discrete value| v120 |
++=============+============+===============+======+
+| 15          |      30    | 2             |  240 |
++-------------+------------+---------------+------+
+| 20          |      60    | 3             |  360 |
++-------------+------------+---------------+------+
+
+Scrolling on high-resolution wheels will produce fractions of 120, depending
+on the resolution of the wheel. The example below shows a mouse with click
+angle 15 and a resolution of 3 events per wheel click and a mouse with click
+angle 20 and a resolution of 2 events per wheel click.
+
++-------------+------------+---------------+------+
+| Click angle | Axis value | Discrete value| v120 |
++=============+============+===============+======+
+| 15          |      5     | 0             | 40   |
++-------------+------------+---------------+------+
+| 20          |     10     | 0             | 60   |
++-------------+------------+---------------+------+
+
+------------------------------------------------------------------------------
+Event sequences for high-resolution wheel mice
+------------------------------------------------------------------------------
+
+High-resolution scroll wheels provide multiple events for each detent is
+hit. For those mice, an event sequence covering two detents may look like
+this:
+
++--------------+---------+------------+---------------+------+
+| Event number |   Type  | Axis value | Discrete value| v120 |
++==============+=========+============+===============+======+
+| 1            |  WHEEL  |      5     | n/a           | 40   |
++--------------+---------+------------+---------------+------+
+| 2            |  WHEEL  |      5     | n/a           | 40   |
++--------------+---------+------------+---------------+------+
+| 3            |  WHEEL  |      5     | n/a           | 40   |
++--------------+---------+------------+---------------+------+
+| 4            |  AXIS   |     15     | 1             | 120  |
++--------------+---------+------------+---------------+------+
+| 5            |  WHEEL  |      5     | n/a           | 40   |
++--------------+---------+------------+---------------+------+
+| 6            |  WHEEL  |      5     | n/a           | 40   |
++--------------+---------+------------+---------------+------+
+| 7            |  AXIS   |     15     | 1             | 120  |
++--------------+---------+------------+---------------+------+
+
+The above assumes a click angle of 15 for the physical detents. Note how the
+second set of high-resolution events do **not** add up to a multiple of
+120 before the low-resolution event. A caller must not assume any relation
+between ``LIBINPUT_EVENT_POINTER_SCROLL_WHEEL`` and
+``LIBINPUT_EVENT_POINTER_AXIS``.
+
+Fast-scrolling on a high-resolution mouse may trigger multiple fractions per
+hardware scanout cycle and result in an event sequence like this:
+
++---------------+---------+------------+---------------+------+
+| Event number  |   Type  | Axis value | Discrete value| v120 |
++===============+=========+============+===============+======+
+| 1             |  WHEEL  |      5     | n/a           | 40   |
++---------------+---------+------------+---------------+------+
+| 2             |  WHEEL  |     10     | n/a           | 80   |
++---------------+---------+------------+---------------+------+
+| 3             |  AXIS   |     15     | 1             | 120  |
++---------------+---------+------------+---------------+------+
+| 4             |  WHEEL  |     10     | n/a           | 80   |
++---------------+---------+------------+---------------+------+
+| 5             |  WHEEL  |     10     | n/a           | 80   |
++---------------+---------+------------+---------------+------+
+| 6             |  AXIS   |     15     | 1             | 120  |
++---------------+---------+------------+---------------+------+
+| 7             |  WHEEL  |      5     | n/a           | 40   |
++---------------+---------+------------+---------------+------+
+
+Note how the first low-resolution event is sent at an accumulated 15
+degrees, the second at an accumulated 20 degrees. The libinput API does not
+specify the smallest fraction a wheel supports.
+
+------------------------------------------------------------------------------
+Event sequences for regular wheel mice
+------------------------------------------------------------------------------
+
+``LIBINPUT_EVENT_POINTER_SCROLL_WHEEL`` for low-resolution mice are virtually
+identical to ``LIBINPUT_EVENT_POINTER_AXIS`` events. Note that the discrete
+value is always 0 for ``LIBINPUT_EVENT_POINTER_SCROLL_WHEEL``.
+
++--------------+---------+------------+---------------+------+
+| Event number |   Type  | Axis value | Discrete value| v120 |
++==============+=========+============+===============+======+
+| 1            |  AXIS   |     15     | 1             | 120  |
++--------------+---------+------------+---------------+------+
+| 2            |  WHEEL  |     15     | n/a           | 120  |
++--------------+---------+------------+---------------+------+
+| 3            |  WHEEL  |     15     | n/a           | 120  |
++--------------+---------+------------+---------------+------+
+| 4            |  AXIS   |     15     | 1             | 120  |
++--------------+---------+------------+---------------+------+
+
+Note that the order of ``LIBINPUT_EVENT_POINTER_AXIS`` vs
+``LIBINPUT_EVENT_POINTER_SCROLL_WHEEL`` events is not guaranteed, as shown in
+the example above.
diff -Naur third_party_libinput_bak/export_include/libinput.h third_party_libinput_new/export_include/libinput.h
--- third_party_libinput_bak/export_include/libinput.h	2023-03-28 10:49:58.380608500 +0800
+++ third_party_libinput_new/export_include/libinput.h	2023-03-29 15:46:05.659266900 +0800
@@ -253,6 +253,12 @@
  *
  * The source for a libinput_pointer_axis event. See
  * libinput_event_pointer_get_axis_source() for details.
+ *
+ * @note Pointer axis sources are deprecated, the source is now encoded in
+ * the event types
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
  */
 enum libinput_pointer_axis_source {
 	/**
@@ -742,8 +748,80 @@
 	LIBINPUT_EVENT_POINTER_MOTION = 400,
 	LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE,
 	LIBINPUT_EVENT_POINTER_BUTTON,
+	/**
+	 * A scroll event from various sources.
+	 *
+	 * This event is deprecated as of libinput 1.19. Use
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS instead.
+	 *
+	 * Use libinput_event_pointer_get_axis_source() to determine the
+	 * source of a scroll event. For libinput versions 1.19 and later,
+	 * the source is encoded in the event type.
+	 *
+	 * This event is sent **in addition** to events of type
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
+	 * Do not mix and match, either use the old event or the new events.
+	 * libinput makes no guarantee about the relation between
+	 * @ref LIBINPUT_EVENT_POINTER_AXIS and the new event types
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS. You may receive
+	 * multiple zero, one or more new events per legacy event.
+	 *
+	 * @warning Ignore this event if you are processing
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
+	 */
 	LIBINPUT_EVENT_POINTER_AXIS,
 
+	/**
+	 * A scroll event from a wheel. This event is sent is sent **in
+	 * addition** to the @ref LIBINPUT_EVENT_POINTER_AXIS
+	 * event for all events with a
+	 * libinput_event_pointer_get_axis_source() of @ref
+	 * LIBINPUT_POINTER_AXIS_SOURCE_WHEEL. Ignore @ref
+	 * LIBINPUT_EVENT_POINTER_AXIS if you are processing this event.
+	 *
+	 * See the libinput documentation for details.
+	 *
+	 * @since 1.19
+	 */
+	LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+
+	/**
+	 * A scroll event caused by the movement of one or more fingers on a
+	 * device. This event is sent is sent **in addition** to the @ref
+	 * LIBINPUT_EVENT_POINTER_AXIS event for all events with a
+	 * libinput_event_pointer_get_axis_source() of @ref
+	 * LIBINPUT_POINTER_AXIS_SOURCE_FINGER. Ignore @ref
+	 * LIBINPUT_EVENT_POINTER_AXIS if you are processing this event.
+	 *
+	 * See the libinput documentation for details.
+	 *
+	 * @since 1.19
+	 */
+	LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+
+	/**
+	 * A scroll event from a continuous scroll source, e.g. button
+	 * scrolling. This event is sent is sent **in
+	 * addition** to the @ref LIBINPUT_EVENT_POINTER_AXIS
+	 * event for all events with a
+	 * libinput_event_pointer_get_axis_source() of @ref
+	 * LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS. Ignore @ref
+	 * LIBINPUT_EVENT_POINTER_AXIS if you are processing this event.
+	 *
+	 * See the libinput documentation for details.
+	 *
+	 * @since 1.19
+	 */
+	LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+
 	LIBINPUT_EVENT_TOUCH_DOWN = 500,
 	LIBINPUT_EVENT_TOUCH_UP,
 	LIBINPUT_EVENT_TOUCH_MOTION,
@@ -896,6 +974,11 @@
 	LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,
 	LIBINPUT_EVENT_GESTURE_PINCH_UPDATE,
 	LIBINPUT_EVENT_GESTURE_PINCH_END,
+	/**
+	 * @since 1.19
+	 */
+	LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+	LIBINPUT_EVENT_GESTURE_HOLD_END,
 
 	/**
 	 * @since 1.7
@@ -1410,10 +1493,15 @@
  * is a scroll stop event.
  *
  * For pointer events that are not of type @ref LIBINPUT_EVENT_POINTER_AXIS,
- * this function returns 0.
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL, @ref
+ * LIBINPUT_EVENT_POINTER_SCROLL_FINGER, or @ref
+ * LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS this function returns 0.
  *
  * @note It is an application bug to call this function for events other than
- * @ref LIBINPUT_EVENT_POINTER_AXIS.
+ * @ref LIBINPUT_EVENT_POINTER_AXIS,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, or
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
  *
  * @return Non-zero if this event contains a value for this axis
  */
@@ -1469,10 +1557,12 @@
  * Scrolling is in discrete steps, the value is the angle the wheel moved
  * in degrees. The default is 15 degrees per wheel click, but some mice may
  * have differently grained wheels. It is up to the caller how to interpret
- * such different step sizes.
+ * such different step sizes. Callers should use
+ * libinput_event_pointer_get_scroll_value_v120() for a simpler API of
+ * handling scroll wheel events of different step sizes.
  *
- * If the source is @ref LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS, no
- * terminating event is guaranteed (though it may happen).
+ * If the source is @ref LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS, libinput
+ * guarantees that a scroll sequence is terminated with a scroll value of 0.
  * The coordinate system is identical to the cursor movement, i.e. a
  * scroll value of 1 represents the equivalent relative motion of 1.
  *
@@ -1485,6 +1575,12 @@
  * @note It is an application bug to call this function for events other than
  * @ref LIBINPUT_EVENT_POINTER_AXIS.
  *
+ * @note This function is superfluous as of libinput 1.19. The event
+ * codes for @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL, @ref
+ * LIBINPUT_EVENT_POINTER_SCROLL_FINGER and @ref
+ * LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS have the axis source encoded in
+ * the event type.
+ *
  * @return The source for this axis event
  */
 enum libinput_pointer_axis_source
@@ -1496,6 +1592,14 @@
  * Return the axis value in discrete steps for a given axis event. How a
  * value translates into a discrete step depends on the source.
  *
+ * @note This function does not support high-resolution mouse wheels and
+ * should be considered deprecated as of libinput 1.19. Callers should use
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL and
+ * libinput_event_pointer_get_scroll_value_v120() instead.
+ *
+ * If the event is not of type @ref LIBINPUT_EVENT_POINTER_AXIS, this
+ * function returns 0.
+ *
  * If the source is @ref LIBINPUT_POINTER_AXIS_SOURCE_WHEEL, the discrete
  * value correspond to the number of physical mouse wheel clicks.
  *
@@ -1505,6 +1609,7 @@
  * @return The discrete value for the given event.
  *
  * @see libinput_event_pointer_get_axis_value
+ * @see libinput_event_pointer_get_scroll_value_v120
  */
 double
 libinput_event_pointer_get_axis_value_discrete(struct libinput_event_pointer *event,
@@ -1513,6 +1618,98 @@
 /**
  * @ingroup event_pointer
  *
+ * Return the axis value of the given axis. The interpretation of the value
+ * depends on the axis. For the two scrolling axes
+ * @ref LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL and
+ * @ref LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, the value of the event is in
+ * relative scroll units, with the positive direction being down or right,
+ * respectively. If libinput_event_pointer_has_axis() returns 0 for an axis,
+ * this function returns 0 for that axis.
+ *
+ * If the event is @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, libinput
+ * guarantees that a scroll sequence is terminated with a scroll value of 0.
+ * A caller may use this information to decide on whether kinetic scrolling
+ * should be triggered on this scroll sequence.
+ * The coordinate system is identical to the cursor movement, i.e. a
+ * scroll value of 1 represents the equivalent relative motion of 1.
+ *
+ * If the event is @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL, no terminating
+ * event is guaranteed (though it may happen).
+ * Scrolling is in discrete steps, the value is the angle the wheel moved
+ * in degrees. The default is 15 degrees per wheel click, but some mice may
+ * have differently grained wheels. It is up to the caller how to interpret
+ * such different step sizes. Callers should use
+ * libinput_event_pointer_get_scroll_value_v120() for a simpler API of
+ * handling scroll wheel events of different step sizes.
+ *
+ * If the event is @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS, libinput
+ * guarantees that a scroll sequence is terminated with a scroll value of 0.
+ * The coordinate system is identical to the cursor movement, i.e. a
+ * scroll value of 1 represents the equivalent relative motion of 1.
+ *
+ * For pointer events that are not of type
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, or
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS, this function returns zero.
+ *
+ * @note It is an application bug to call this function for events other than
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, or
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
+ *
+ * @return The axis value of this event
+ *
+ * @see libinput_event_pointer_get_scroll_value_v120
+ *
+ * @since 1.19
+ */
+double
+libinput_event_pointer_get_scroll_value(struct libinput_event_pointer *event,
+					enum libinput_pointer_axis axis);
+
+/**
+ * @ingroup event_pointer
+ *
+ * For events of type @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL
+ * the v120-normalized value represents the movement in logical mouse wheel
+ * clicks, normalized to the -120..+120 range.
+ *
+ * A value that is a fraction of ±120 indicates a wheel movement less than
+ * one logical click, a caller should either scroll by the respective
+ * fraction of the normal scroll distance or accumulate that value until a
+ * multiple of 120 is reached.
+ *
+ * For most callers, this is the preferred way of handling high-resolution
+ * scroll events.
+ *
+ * The normalized v120 value does not take device-specific physical angles
+ * or distances into account, i.e. a wheel with a click angle of 20 degrees
+ * produces only 18 logical clicks per 360 degree rotation, a wheel with a
+ * click angle of 15 degrees produces 24 logical clicks per 360 degree
+ * rotation. Where the physical angle matters, use
+ * libinput_event_pointer_get_axis_value() instead.
+ *
+ * The magic number 120 originates from the <a
+ * href="http://download.microsoft.com/download/b/d/1/bd1f7ef4-7d72-419e-bc5c-9f79ad7bb66e/wheel.docx">
+ * Windows Vista Mouse Wheel design document</a>.
+ *
+ * @note It is an application bug to call this function for events other than
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL.
+ *
+ * @return A value normalized to the 0-±120 range
+ *
+ * @see libinput_event_pointer_get_axis_value
+ * @see libinput_event_pointer_get_axis_value_discrete
+ *
+ * @since 1.19
+ */
+double
+libinput_event_pointer_get_scroll_value_v120(struct libinput_event_pointer *event,
+					     enum libinput_pointer_axis axis);
+
+/**
+ * @ingroup event_pointer
+ *
  * @return The generic libinput_event of this event
  */
 struct libinput_event *
@@ -4560,10 +4757,9 @@
  * @ingroup config
  *
  * Enable or disable tap-and-drag on this device. When enabled, a
- * single-finger tap immediately followed by a finger down results in a
- * button down event, subsequent finger motion thus triggers a drag. The
- * button is released on finger up. See the libinput documentation for more
- * details.
+ * tap immediately followed by a finger down results in a button down event,
+ * subsequent finger motion thus triggers a drag. The button is released
+ * on finger up. See the libinput documentation for more details.
  *
  * @param device The device to configure
  * @param enable @ref LIBINPUT_CONFIG_DRAG_ENABLED to enable, @ref
@@ -5053,7 +5249,7 @@
  * mode.
  *
  * @param device The device to configure
- * @param mode The mode to set the device to.
+ * @param profile The profile to set the device to.
  *
  * @return A config status code
  *
@@ -5061,7 +5257,7 @@
  */
 enum libinput_config_status
 libinput_device_config_accel_set_profile(struct libinput_device *device,
-					 enum libinput_config_accel_profile mode);
+					 enum libinput_config_accel_profile profile);
 
 /**
  * @ingroup config
diff -Naur third_party_libinput_bak/include/config.h third_party_libinput_new/include/config.h
--- third_party_libinput_bak/include/config.h	2023-03-28 10:49:58.380608500 +0800
+++ third_party_libinput_new/include/config.h	2023-03-29 15:49:16.291378200 +0800
@@ -5,34 +5,33 @@
 
 #pragma once
 
+#define HAVE_GSTACK 0
+
+#define HAVE_GTK3 1
+
+#define HAVE_GTK4 0
+
 #define HAVE_LIBEVDEV_DISABLE_PROPERTY 0
 
-#define HAVE_LIBWACOM 0
+#define HAVE_LIBSYSTEMD 0
 
-#define HAVE_LOCALE_H 1 
+#define HAVE_LIBWACOM 1
+
+#define HAVE_LOCALE_H 1
 
-#ifndef __MUSL__
-#undef HAVE_VERSIONSORT
-#else
 #define HAVE_VERSIONSORT 1
-#endif
-#define HTTP_DOC_LINK "https://wayland.freedesktop.org/libinput/doc/latest"
+
+#define HTTP_DOC_LINK "https://wayland.freedesktop.org/libinput/doc/1.19.4"
 
 #define LIBINPUT_QUIRKS_DIR "/usr/share/libinput"
 
 #define LIBINPUT_QUIRKS_OVERRIDE_FILE "/etc/libinput/local-overrides.quirks"
 
-#undef NDEBUG
-#define LIBINPUT_TOOL_PATH ""
 #define LIBINPUT_QUIRKS_SRCDIR ""
+
+#define LIBINPUT_TOOL_PATH ""
+
 #define MESON_BUILD_ROOT ""
-#ifndef static_assert
-# ifdef _Static_assert
-#  define static_assert(cond, msg) _Static_assert(cond, msg)
-# else
-#  define static_assert(cond, msg)
-# endif
-#endif
 
-#define index strchr
-#define ffs __builtin_ffs
+#define _GNU_SOURCE 1
+
diff -Naur third_party_libinput_bak/include/libinput-version.h third_party_libinput_new/include/libinput-version.h
--- third_party_libinput_bak/include/libinput-version.h	2023-03-28 10:49:58.380608500 +0800
+++ third_party_libinput_new/include/libinput-version.h	2023-03-29 15:49:31.091863200 +0800
@@ -25,8 +25,8 @@
 #define LIBINPUT_VERSION_H
 
 #define LIBINPUT_VERSION_MAJOR 1
-#define LIBINPUT_VERSION_MINOR 16
+#define LIBINPUT_VERSION_MINOR 19
 #define LIBINPUT_VERSION_MICRO 4
-#define LIBINPUT_VERSION "1.16.4"
+#define LIBINPUT_VERSION "1.19.4"
 
 #endif
diff -Naur third_party_libinput_bak/meson.build third_party_libinput_new/meson.build
--- third_party_libinput_bak/meson.build	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/meson.build	2023-03-29 17:20:30.299268700 +0800
@@ -1,29 +1,31 @@
 project('libinput', 'c',
-	version : '1.16.4',
+	version : '1.19.4',
 	license : 'MIT/Expat',
 	default_options : [ 'c_std=gnu99', 'warning_level=2' ],
-	meson_version : '>= 0.45.0')
+	meson_version : '>= 0.49.0')
 
 libinput_version = meson.project_version().split('.')
 
-dir_data        = join_paths(get_option('prefix'), get_option('datadir'), 'libinput')
-dir_sysconf     = join_paths(get_option('prefix'), get_option('sysconfdir'), 'libinput')
-dir_libexec     = join_paths(get_option('prefix'), get_option('libexecdir'), 'libinput')
-dir_lib         = join_paths(get_option('prefix'), get_option('libdir'))
-dir_man1        = join_paths(get_option('prefix'), get_option('mandir'), 'man1')
-dir_system_udev = join_paths(get_option('prefix'), 'lib', 'udev')
-dir_src_quirks  = join_paths(meson.current_source_dir(), 'quirks')
-dir_src_test    = join_paths(meson.current_source_dir(), 'test')
-dir_src         = join_paths(meson.current_source_dir(), 'src')
+dir_data        = get_option('prefix') / get_option('datadir') / 'libinput'
+dir_etc         = get_option('prefix') / get_option('sysconfdir')
+dir_overrides   = get_option('prefix') / get_option('sysconfdir') / 'libinput'
+dir_libexec     = get_option('prefix') / get_option('libexecdir') / 'libinput'
+dir_lib         = get_option('prefix') / get_option('libdir')
+dir_man1        = get_option('prefix') / get_option('mandir') / 'man1'
+dir_system_udev = get_option('prefix') / 'lib' / 'udev'
+dir_src_quirks  = meson.current_source_dir() / 'quirks'
+dir_src_test    = meson.current_source_dir() / 'test'
+dir_src         = meson.current_source_dir() / 'src'
 
 dir_udev = get_option('udev-dir')
 if dir_udev == ''
 	dir_udev = dir_system_udev
 endif
 dir_udev_callouts = dir_udev
-dir_udev_rules    = join_paths(dir_udev, 'rules.d')
-dir_udev_hwdb     = join_paths(dir_udev, 'hwdb.d')
+dir_udev_rules    = dir_udev / 'rules.d'
 
+# Collection of man pages, we'll append to that
+src_man = files()
 
 # We use libtool-version numbers because it's easier to understand.
 # Before making a release, the libinput_so_*
@@ -43,19 +45,35 @@
 
 # Compiler setup
 cc = meson.get_compiler('c')
-cppflags = ['-Wno-unused-parameter', '-fvisibility=hidden']
-cflags = cppflags + ['-Wmissing-prototypes', '-Wstrict-prototypes']
-add_project_arguments(cflags, language : 'c')
-add_project_arguments(cppflags, language : 'cpp')
+cflags = [
+	'-Wno-unused-parameter',
+	'-Wmissing-prototypes',
+	'-Wstrict-prototypes',
+	'-Wundef',
+	'-Wlogical-op',
+	'-Wpointer-arith',
+	'-Wuninitialized',
+	'-Winit-self',
+	'-Wstrict-prototypes',
+	'-Wimplicit-fallthrough',
+	'-Wredundant-decls',
+	'-Wincompatible-pointer-types',
+	'-Wformat=2',
+	'-Wno-missing-field-initializers',
+	'-Wmissing-declarations',
+
+	'-fvisibility=hidden',
+]
+add_project_arguments(cc.get_supported_arguments(cflags), language : 'c')
 
 # config.h
 config_h = configuration_data()
 
 doc_url_base = 'https://wayland.freedesktop.org/libinput/doc'
 if libinput_version[2].to_int() >= 90
-	doc_url = '@0@/latest/'.format(doc_url_base)
+	doc_url = '@0@/latest'.format(doc_url_base)
 else
-	doc_url = '@0@/@1@/'.format(doc_url_base, meson.project_version())
+	doc_url = '@0@/@1@'.format(doc_url_base, meson.project_version())
 endif
 config_h.set_quoted('HTTP_DOC_LINK', doc_url)
 
@@ -125,6 +143,9 @@
 dep_udev = dependency('libudev')
 dep_mtdev = dependency('mtdev', version : '>= 1.1.0')
 dep_libevdev = dependency('libevdev')
+config_h.set10('HAVE_LIBEVDEV_DISABLE_PROPERTY',
+		dep_libevdev.version().version_compare('>= 1.9.902'))
+
 dep_lm = cc.find_library('m', required : false)
 dep_rt = cc.find_library('rt', required : false)
 
@@ -137,15 +158,7 @@
 have_libwacom = get_option('libwacom')
 config_h.set10('HAVE_LIBWACOM', have_libwacom)
 if have_libwacom
-	dep_libwacom = dependency('libwacom', version : '>= 0.20')
-
-	result = cc.has_function('libwacom_get_paired_device',
-				 dependencies: dep_libwacom)
-	config_h.set10('HAVE_LIBWACOM_GET_PAIRED_DEVICE', result)
-
-	result = cc.has_function('libwacom_get_button_evdev_code',
-				 dependencies: dep_libwacom)
-	config_h.set10('HAVE_LIBWACOM_GET_BUTTON_EVDEV_CODE', result)
+	dep_libwacom = dependency('libwacom', version : '>= 0.27')
 else
 	dep_libwacom = declare_dependency()
 endif
@@ -217,8 +230,8 @@
 	if dir_libepoll == ''
 		dir_libepoll = get_option('prefix')
 	endif
-	includes_epoll = include_directories(join_paths(dir_libepoll, 'include/libepoll-shim'))
-	dep_libepoll = cc.find_library('epoll-shim', dirs : join_paths(dir_libepoll, 'lib'))
+	includes_epoll = include_directories(dir_libepoll / 'include' / 'libepoll-shim')
+	dep_libepoll = cc.find_library('epoll-shim', dirs : dir_libepoll / 'lib')
 	code = '''
 	#include <sys/epoll.h>
 	int main(void) { epoll_create1(0); }
@@ -256,7 +269,7 @@
 			          output : 'test-util-includes-@0@.c'.format(h),
 				  configuration : c)
 	executable('test-build-@0@'.format(h),
-		   testfile, join_paths(dir_src, h),
+		   testfile, dir_src / h,
 		   include_directories : [includes_src, includes_include],
 		   install : false)
 endforeach
@@ -303,7 +316,7 @@
 
 ############ libquirks.a #############
 libinput_data_path = dir_data
-libinput_data_override_path = join_paths(dir_sysconf, 'local-overrides.quirks')
+libinput_data_override_path = dir_overrides / 'local-overrides.quirks'
 config_h.set_quoted('LIBINPUT_QUIRKS_DIR', dir_data)
 config_h.set_quoted('LIBINPUT_QUIRKS_OVERRIDE_FILE', libinput_data_override_path)
 
@@ -325,11 +338,16 @@
 			   include_directories : includes_include)
 dep_libquirks = declare_dependency(link_with : libquirks)
 
+# Create /etc/libinput
+install_subdir('libinput', install_dir : dir_etc)
+
 ############ libinput.so ############
 install_headers('src/libinput.h')
 src_libinput = src_libfilter + [
 	'src/libinput.c',
 	'src/libinput.h',
+	'src/libinput-private-config.c',
+	'src/libinput-private-config.h',
 	'src/libinput-private.h',
 	'src/evdev.c',
 	'src/evdev.h',
@@ -382,7 +400,7 @@
 		configuration : libinput_version_h_config,
 )
 
-mapfile = join_paths(dir_src, 'libinput.sym')
+mapfile = dir_src / 'libinput.sym'
 version_flag = '-Wl,--version-script,@0@'.format(mapfile)
 lib_libinput = shared_library('input',
 		src_libinput,
@@ -411,13 +429,6 @@
 			input : 'src/libinput-git-version.h.in',
 			output :'libinput-git-version.h')
 
-if meson.version().version_compare('<0.43.0')
-	# Restore the SELinux context for the libinput.so.a.b.c on install
-	# meson bug https://github.com/mesonbuild/meson/issues/1967
-	meson.add_install_script('src/libinput-restore-selinux-context.sh',
-				 dir_lib, lib_libinput.full_path())
-endif
-
 ############ documentation ############
 
 if get_option('documentation')
@@ -443,10 +454,6 @@
 dep_tools_shared = declare_dependency(link_with : lib_tools_shared,
 				      dependencies : deps_tools_shared)
 
-man_config = configuration_data()
-man_config.set('LIBINPUT_VERSION', meson.project_version())
-man_config.set('LIBINPUT_DATA_DIR', dir_data)
-
 deps_tools = [ dep_tools_shared, dep_libinput ]
 libinput_debug_events_sources = [
 	'tools/libinput-debug-events.c',
@@ -459,11 +466,6 @@
 	   install_dir : libinput_tool_path,
 	   install : true
 	   )
-configure_file(input : 'tools/libinput-debug-events.man',
-	       output : 'libinput-debug-events.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
 
 libinput_debug_tablet_sources = [ 'tools/libinput-debug-tablet.c' ]
 executable('libinput-debug-tablet',
@@ -473,11 +475,6 @@
 	   install_dir : libinput_tool_path,
 	   install : true)
 
-configure_file(input : 'tools/libinput-debug-tablet.man',
-	       output : 'libinput-debug-tablet.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
 
 libinput_quirks_sources = [ 'tools/libinput-quirks.c' ]
 libinput_quirks = executable('libinput-quirks',
@@ -493,23 +490,6 @@
      suite : ['all']
      )
 
-configure_file(input : 'tools/libinput-quirks.man',
-	       output : 'libinput-quirks.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
-# Same man page for the subtools to stay consistent with the other tools
-configure_file(input : 'tools/libinput-quirks.man',
-	       output : 'libinput-quirks-list.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
-configure_file(input : 'tools/libinput-quirks.man',
-	       output : 'libinput-quirks-validate.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
-
 libinput_list_devices_sources = [ 'tools/libinput-list-devices.c' ]
 libinput_list_devices = executable('libinput-list-devices',
 				   libinput_list_devices_sources,
@@ -522,12 +502,6 @@
      libinput_list_devices,
      suite : ['all', 'root', 'hardware'])
 
-configure_file(input : 'tools/libinput-list-devices.man',
-	       output : 'libinput-list-devices.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
-
 libinput_measure_sources = [ 'tools/libinput-measure.c' ]
 executable('libinput-measure',
 	   libinput_measure_sources,
@@ -536,11 +510,6 @@
 	   install_dir : libinput_tool_path,
 	   install : true,
 	   )
-configure_file(input : 'tools/libinput-measure.man',
-	       output : 'libinput-measure.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
 
 libinput_analyze_sources = [ 'tools/libinput-analyze.c' ]
 executable('libinput-analyze',
@@ -550,52 +519,27 @@
 	   install_dir : libinput_tool_path,
 	   install : true,
 	   )
-configure_file(input : 'tools/libinput-analyze.man',
-	       output : 'libinput-analyze.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
 
 src_python_tools = files(
 	      'tools/libinput-analyze-per-slot-delta.py',
+	      'tools/libinput-analyze-recording.py',
+	      'tools/libinput-analyze-touch-down-state.py',
 	      'tools/libinput-measure-fuzz.py',
 	      'tools/libinput-measure-touchpad-size.py',
 	      'tools/libinput-measure-touchpad-tap.py',
 	      'tools/libinput-measure-touchpad-pressure.py',
 	      'tools/libinput-measure-touch-size.py',
+	      'tools/libinput-replay.py'
 )
 
-config_noop = configuration_data()
-# Set a dummy replacement to silence meson warnings:
-# meson.build:487: WARNING: Got an empty configuration_data() object and
-# 		   found no substitutions in the input file 'foo'. If you
-# 		   want to copy a file to the build dir, use the 'copy:'
-# 		   keyword argument added in 0.47.0
-config_noop.set('dummy', 'dummy')
 foreach t : src_python_tools
 	configure_file(input: t,
 		       output: '@BASENAME@',
-		       configuration : config_noop,
+		       copy: true,
 		       install_dir : libinput_tool_path
 		      )
 endforeach
 
-src_man = files(
-	      'tools/libinput-measure-fuzz.man',
-	      'tools/libinput-measure-touchpad-size.man',
-	      'tools/libinput-measure-touchpad-tap.man',
-	      'tools/libinput-measure-touchpad-pressure.man',
-	      'tools/libinput-measure-touch-size.man',
-	      'tools/libinput-analyze-per-slot-delta.man',
-)
-
-foreach m : src_man
-	configure_file(input : m,
-		       output : '@BASENAME@.1',
-		       configuration : man_config,
-		       install_dir : dir_man1)
-endforeach
-
 libinput_record_sources = [ 'tools/libinput-record.c', git_version_h ]
 executable('libinput-record',
 	   libinput_record_sources,
@@ -604,30 +548,52 @@
 	   install_dir : libinput_tool_path,
 	   install : true,
 	   )
-configure_file(input : 'tools/libinput-record.man',
-	       output : 'libinput-record.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
-
-install_data('tools/libinput-replay',
-	     install_dir : libinput_tool_path)
-configure_file(input : 'tools/libinput-replay.man',
-	       output : 'libinput-replay.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
 
 if get_option('debug-gui')
-	dep_gtk = dependency('gtk+-3.0', version : '>= 3.20')
+	dep_gtk = dependency('gtk4', version : '>= 4.0', required : false)
+	config_h.set10('HAVE_GTK4', dep_gtk.found())
+	if not dep_gtk.found()
+		dep_gtk = dependency('gtk+-3.0', version : '>= 3.20')
+		config_h.set10('HAVE_GTK3', dep_gtk.found())
+	endif
+
 	dep_cairo = dependency('cairo')
 	dep_glib = dependency('glib-2.0')
+	dep_wayland_client = dependency('wayland-client', required : false)
+	dep_wayland_protocols = dependency('wayland-protocols', required : false)
+	dep_x11 = dependency('x11', required : false)
 
 	debug_gui_sources = [ 'tools/libinput-debug-gui.c' ]
+
+	if dep_wayland_client.found() and dep_wayland_protocols.found()
+		wayland_scanner = find_program('wayland-scanner')
+		wlproto_dir = dep_wayland_protocols.get_pkgconfig_variable('pkgdatadir')
+
+		proto_name = 'pointer-constraints-unstable-v1'
+		input = files(wlproto_dir / 'unstable' / 'pointer-constraints' / '@0@.xml'.format(proto_name))
+
+		wayland_headers = custom_target('@0@ client header'.format(proto_name),
+			input: input,
+			output: '@0@-client-protocol.h'.format(proto_name),
+			command: [wayland_scanner, 'client-header', '@INPUT@', '@OUTPUT@'],
+		)
+
+		wayland_sources = custom_target('@0@ source'.format(proto_name),
+			input: input,
+			output: '@0@-protocol.c'.format(proto_name),
+			command: [wayland_scanner, 'private-code', '@INPUT@', '@OUTPUT@'],
+		)
+
+		debug_gui_sources += [ wayland_headers, wayland_sources ]
+	endif
+
 	deps_debug_gui = [
 			dep_gtk,
 			dep_cairo,
 			dep_glib,
+			dep_wayland_client,
+			dep_wayland_protocols,
+			dep_x11,
 			] + deps_tools
 	executable('libinput-debug-gui',
 		   debug_gui_sources,
@@ -636,11 +602,7 @@
 		   install_dir : libinput_tool_path,
 		   install : true
 		   )
-	configure_file(input : 'tools/libinput-debug-gui.man',
-		       output : 'libinput-debug-gui.1',
-		       configuration : man_config,
-		       install_dir : dir_man1,
-		       )
+	src_man += files('tools/libinput-debug-gui.man')
 endif
 
 libinput_sources = [ 'tools/libinput-tool.c' ]
@@ -651,11 +613,6 @@
 			   include_directories : [includes_src, includes_include],
 			   install : true
 			  )
-configure_file(input : 'tools/libinput.man',
-	       output : 'libinput.1',
-	       configuration : man_config,
-	       install_dir : dir_man1,
-	       )
 
 ptraccel_debug_sources = [ 'tools/ptraccel-debug.c' ]
 executable('ptraccel-debug',
@@ -706,7 +663,7 @@
 
 test('symbols-leak-test',
      find_program('test/symbols-leak-test'),
-     args : [ join_paths(dir_src, 'libinput.sym'), dir_src],
+     args : [ dir_src / 'libinput.sym', dir_src],
      suite : ['all'])
 
 # build-test only
@@ -751,6 +708,8 @@
 	config_h.set10('HAVE_LIBSYSTEMD', dep_libsystemd.found())
 
 	litest_sources = [
+		'src/libinput-private-config.c',
+		'src/libinput-private-config.h',
 		'test/litest.h',
 		'test/litest-int.h',
 		'test/litest-device-absinfo-override.c',
@@ -773,6 +732,8 @@
 		'test/litest-device-dell-canvas-totem-touch.c',
 		'test/litest-device-elantech-touchpad.c',
 		'test/litest-device-elan-tablet.c',
+		'test/litest-device-format-string.c',
+		'test/litest-device-generic-pressurepad.c',
 		'test/litest-device-generic-singletouch.c',
 		'test/litest-device-gpio-keys.c',
 		'test/litest-device-huion-pentablet.c',
@@ -780,6 +741,7 @@
 		'test/litest-device-ignored-mouse.c',
 		'test/litest-device-keyboard.c',
 		'test/litest-device-keyboard-all-codes.c',
+		'test/litest-device-keyboard-quirked.c',
 		'test/litest-device-keyboard-razer-blackwidow.c',
 		'test/litest-device-keyboard-razer-blade-stealth.c',
 		'test/litest-device-keyboard-razer-blade-stealth-videoswitch.c',
@@ -803,6 +765,7 @@
 		'test/litest-device-synaptics-x220.c',
 		'test/litest-device-synaptics-hover.c',
 		'test/litest-device-synaptics-i2c.c',
+		'test/litest-device-synaptics-pressurepad.c',
 		'test/litest-device-synaptics-rmi4.c',
 		'test/litest-device-synaptics-st.c',
 		'test/litest-device-synaptics-t440.c',
@@ -861,11 +824,11 @@
 
 	litest_config_h = configuration_data()
 	litest_config_h.set_quoted('LIBINPUT_DEVICE_GROUPS_RULES_FILE',
-			    join_paths(meson.current_build_dir(),
-				       '80-libinput-device-groups-litest.rules'))
+				   meson.current_build_dir() /
+				   '80-libinput-device-groups-litest.rules')
 	litest_config_h.set_quoted('LIBINPUT_FUZZ_OVERRIDE_UDEV_RULES_FILE',
-			    join_paths(meson.current_build_dir(),
-				       '90-libinput-fuzz-override-litest.rules'))
+				   meson.current_build_dir() /
+				   '90-libinput-fuzz-override-litest.rules')
 
 	def_no_main = '-DLITEST_NO_MAIN'
 	def_disable_backtrace = '-DLITEST_DISABLE_BACKTRACE_LOGGING'
@@ -911,8 +874,8 @@
 	     test_utils,
 	     suite : ['all'])
 
-	libinput_test_runner_sources = litest_sources + [
-		'src/libinput-util.h',
+	# When adding new files to this list, update the CI
+	tests_sources = [
 		'test/test-udev.c',
 		'test/test-path.c',
 		'test/test-pointer.c',
@@ -933,31 +896,25 @@
 		'test/test-switch.c',
 		'test/test-quirks.c',
 	]
+	libinput_test_runner_sources = litest_sources + tests_sources + [
+		'src/libinput-util.h',
+	]
 	libinput_test_runner = executable('libinput-test-suite',
 					  libinput_test_runner_sources,
 					  include_directories : [includes_src, includes_include],
 					  dependencies : deps_litest,
 					  install_dir : libinput_tool_path,
 					  install : get_option('install-tests'))
-	configure_file(input : 'test/libinput-test-suite.man',
-		       output : 'libinput-test-suite.1',
-		       configuration : man_config,
-		       install_dir : dir_man1,
-		       )
 
-	# Update this list and the one in litest.c when new group names are
-	# required
-        groups = [
-		'config', 'context', 'device', 'events', 'gestures', 'keyboard', 'lid',
-		'log', 'misc', 'pad', 'path', 'pointer', 'quirks', 'switch', 'tablet',
-		'tablet-mode', 'tap', 'timer', 'totem', 'touch', 'touchpad', 'trackball',
-		'trackpoint', 'udev',
-	]
-	foreach group : groups
+	src_man += 'test/libinput-test-suite.man'
+
+	foreach testfile : tests_sources
+		tfile = testfile.split('test/test-')[1]
+		group = tfile.split('.c')[0]
 		test('libinput-test-suite-@0@'.format(group),
 		     libinput_test_runner,
 		     suite : ['all', 'valgrind', 'root', 'hardware'],
-		     args : ['--filter-group=@0@:*'.format(group),
+		     args : ['--filter-group=@0@'.format(group),
 			     '--xml-output=junit-@0@-XXXXXX.xml'.format(group)],
 		     is_parallel : false,
 		     timeout : 1200)
@@ -972,7 +929,7 @@
 	valgrind = find_program('valgrind', required : false)
 	if valgrind.found()
 		valgrind_env = environment()
-		valgrind_suppressions_file = join_paths(dir_src_test, 'valgrind.suppressions')
+		valgrind_suppressions_file = dir_src_test / 'valgrind.suppressions'
 		add_test_setup('valgrind',
 				exe_wrapper : [ valgrind,
 						'--leak-check=full',
@@ -987,5 +944,50 @@
 	configure_file(output : 'litest-config.h',
 		       configuration : litest_config_h)
 endif
+
+
+############ man pages ############
+man_config = configuration_data()
+man_config.set('LIBINPUT_VERSION', meson.project_version())
+man_config.set('LIBINPUT_DATA_DIR', dir_data)
+src_man += files(
+	'tools/libinput.man',
+	'tools/libinput-analyze.man',
+	'tools/libinput-analyze-per-slot-delta.man',
+	'tools/libinput-analyze-recording.man',
+	'tools/libinput-analyze-touch-down-state.man',
+	'tools/libinput-debug-events.man',
+	'tools/libinput-debug-tablet.man',
+	'tools/libinput-list-devices.man',
+	'tools/libinput-measure.man',
+	'tools/libinput-measure-fuzz.man',
+	'tools/libinput-measure-touchpad-size.man',
+	'tools/libinput-measure-touchpad-tap.man',
+	'tools/libinput-measure-touchpad-pressure.man',
+	'tools/libinput-measure-touch-size.man',
+	'tools/libinput-quirks.man',
+	'tools/libinput-record.man',
+	'tools/libinput-replay.man',
+)
+
+foreach m : src_man
+	configure_file(input : m,
+		       output : '@BASENAME@.1',
+		       configuration : man_config,
+		       install_dir : dir_man1)
+endforeach
+
+# Same man page for the subtools to stay consistent with the other tools
+configure_file(input : 'tools/libinput-quirks.man',
+	       output : 'libinput-quirks-list.1',
+	       configuration : man_config,
+	       install_dir : dir_man1,
+	       )
+configure_file(input : 'tools/libinput-quirks.man',
+	       output : 'libinput-quirks-validate.1',
+	       configuration : man_config,
+	       install_dir : dir_man1,
+	       )
+
 ############ output files ############
 configure_file(output : 'config.h', configuration : config_h)
diff -Naur third_party_libinput_bak/meson_options.txt third_party_libinput_new/meson_options.txt
--- third_party_libinput_bak/meson_options.txt	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/meson_options.txt	2023-03-29 17:17:01.333040900 +0800
@@ -24,8 +24,8 @@
        description: 'Install the libinput test command [default=false]')
 option('documentation',
        type: 'boolean',
-       value: true,
-       description: 'Build the documentation [default=true]')
+       value: false,
+       description: 'Build the documentation [default=false]')
 option('coverity',
        type: 'boolean',
        value: false,
diff -Naur third_party_libinput_bak/quirks/10-generic-mouse.quirks third_party_libinput_new/quirks/10-generic-mouse.quirks
--- third_party_libinput_bak/quirks/10-generic-mouse.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/10-generic-mouse.quirks	2023-03-29 15:49:53.075688500 +0800
@@ -0,0 +1,6 @@
+# Do not edit this file, it will be overwritten on update
+
+# https://gitlab.freedesktop.org/libinput/libinput/-/issues/656
+[Emulated Mouse]
+MatchName=ImPS/2 Generic Wheel Mouse
+ModelBouncingKeys=1
diff -Naur third_party_libinput_bak/quirks/30-vendor-a4tech.quirks third_party_libinput_new/quirks/30-vendor-a4tech.quirks
--- third_party_libinput_bak/quirks/30-vendor-a4tech.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/30-vendor-a4tech.quirks	2023-03-29 15:50:28.029437000 +0800
@@ -0,0 +1,5 @@
+[A4TECH USB X-710BK]
+MatchVendor=0x09DA
+MatchProduct=0x9090
+MatchUdevType=mouse
+ModelBouncingKeys=1
diff -Naur third_party_libinput_bak/quirks/30-vendor-microsoft.quirks third_party_libinput_new/quirks/30-vendor-microsoft.quirks
--- third_party_libinput_bak/quirks/30-vendor-microsoft.quirks	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/30-vendor-microsoft.quirks	2023-03-29 16:11:53.458910900 +0800
@@ -5,9 +5,19 @@
 MatchDMIModalias=dmi:*svnMicrosoftCorporation:pnSurface3:*
 AttrLidSwitchReliability=write_open
 
-[Microsoft Surface 3 Type Cover Keyboard]
-MatchName=*Microsoft Surface Type Cover Keyboard*
-MatchDMIModalias=dmi:*svnMicrosoftCorporation:pnSurface3:*
+# Matches both Surface Laptop keyboards as well as type covers.
+# i.e.
+# - Surface 3: Microsoft Surface 3 Type Cover Keyboard
+# - Surface Laptop 3: Microsoft Surface 045E:09AE Keyboard
+# - Surface Book 2: Microsoft Surface Keyboard
+[Microsoft Surface Keyboard]
+MatchName=*Microsoft Surface *Keyboard*
+MatchDMIModalias=dmi:*svnMicrosoftCorporation:*
+AttrKeyboardIntegration=internal
+
+[Microsoft Surface Cover]
+MatchName=*Microsoft Surface *Cover*
+MatchDMIModalias=dmi:*svnMicrosoftCorporation:*
 AttrKeyboardIntegration=internal
 
 [Microsoft Nano Transceiver v2.0]
diff -Naur third_party_libinput_bak/quirks/30-vendor-razer.quirks third_party_libinput_new/quirks/30-vendor-razer.quirks
--- third_party_libinput_bak/quirks/30-vendor-razer.quirks	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/30-vendor-razer.quirks	2023-03-29 16:12:27.542775500 +0800
@@ -1,20 +1,175 @@
 # Do not edit this file, it will be overwritten on update
 
-[Razer Blade Keyboard]
+[Razer Blade Lid Switch]
+MatchName=*Lid Switch*
+MatchDMIModalias=dmi:*svnRazer:pnBlade*
+AttrLidSwitchReliability=write_open
+
+[RazerBladeStealth Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0205
+AttrKeyboardIntegration=internal
+
+[RazerBladeStealthLate2016 Keyboard]
 MatchUdevType=keyboard
 MatchBus=usb
 MatchVendor=0x1532
 MatchProduct=0x0220
 AttrKeyboardIntegration=internal
 
-[Razer Blade Keyboard]
+[RazerBladeProLate2016 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0210
+AttrKeyboardIntegration=internal
+
+[RazerBladeLate2016 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0224
+AttrKeyboardIntegration=internal
+
+[RazerBladeQHD Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x020F
+AttrKeyboardIntegration=internal
+
+[RazerBladeStealthMid2017 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x022D
+AttrKeyboardIntegration=internal
+
+[RazerBladePro2017 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0225
+AttrKeyboardIntegration=internal
+
+[RazerBladePro2017FullHD Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x022F
+AttrKeyboardIntegration=internal
+
+[RazerBladeStealthLate2017 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0232
+AttrKeyboardIntegration=internal
+
+[RazerBlade2018 Keyboard]
 MatchUdevType=keyboard
 MatchBus=usb
 MatchVendor=0x1532
 MatchProduct=0x0233
 AttrKeyboardIntegration=internal
 
-[Razer Blade Lid Switch]
-MatchName=*Lid Switch*
-MatchDMIModalias=dmi:*svnRazer:pnBlade*
-AttrLidSwitchReliability=write_open
+[RazerBlade2018Mercury Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0240
+AttrKeyboardIntegration=internal
+
+[RazerBlade2018Base Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x023B
+AttrKeyboardIntegration=internal
+
+[RazerBladeStealth2019 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0239
+AttrKeyboardIntegration=internal
+
+[RazerBladeStealthLate2019 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x024A
+AttrKeyboardIntegration=internal
+
+[RazerBladeStealthEarly2020 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0252
+AttrKeyboardIntegration=internal
+
+[RazerBladeStealthLate2020 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0259
+AttrKeyboardIntegration=internal
+
+[RazerBlade2019Adv Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x023A
+AttrKeyboardIntegration=internal
+
+[RazerBladeMid2019Mercury Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0245
+AttrKeyboardIntegration=internal
+
+[RazerBlade2019Base Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0246
+AttrKeyboardIntegration=internal
+
+[RazerBladeEarly2020Base Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0255
+AttrKeyboardIntegration=internal
+
+[RazerBladeProLate2019 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x024C
+AttrKeyboardIntegration=internal
+
+[RazerBlade2019StudioEdition Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x024D
+AttrKeyboardIntegration=internal
+
+[RazerBladePro2019 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0234
+AttrKeyboardIntegration=internal
+
+[RazerBlade15Advanced2020 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x1532
+MatchProduct=0x0253
+AttrKeyboardIntegration=internal
+
diff -Naur third_party_libinput_bak/quirks/30-vendor-starlabs.quirks third_party_libinput_new/quirks/30-vendor-starlabs.quirks
--- third_party_libinput_bak/quirks/30-vendor-starlabs.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/30-vendor-starlabs.quirks	2023-03-29 16:12:47.878624200 +0800
@@ -0,0 +1,41 @@
+[StarBook Mk V]
+MatchName=STAR0001:00 093A:0255 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnStarLabs:pnStarBook*
+AttrEventCodeDisable=BTN_RIGHT
+
+[StarLabTop Mk IV - coreboot firmware]
+MatchName=STAR0001:00 093A:1336 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnStarLabs:pnLabTop*
+AttrEventCodeDisable=BTN_RIGHT
+
+[StarLabTop Mk IV - AMI firmware]
+MatchName=PCT1336:00 093A:1336 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnStarLabs:pnLabTop*
+AttrEventCodeDisable=BTN_RIGHT
+
+[StarLite Mk III - coreboot firmware]
+MatchName=STAR0001:00 093A:0255 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnStarLabs:pnLite*
+AttrEventCodeDisable=BTN_RIGHT
+
+[StarLite Mk III - AMI firmware]
+MatchName=HTIX5288:00 093A:0255 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnStarLabs:pnLite*
+AttrEventCodeDisable=BTN_RIGHT
+
+[StarLite Mk II - coreboot firmware]
+MatchName=STAR0001:00 0911:5288 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnStarLabs:pnLite*
+AttrEventCodeDisable=BTN_RIGHT
+
+[StarLite Mk II - AMI firmware]
+MatchName=ALPS0001:00 0911:5288 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnStarLabs:pnLite*
+AttrEventCodeDisable=BTN_RIGHT
diff -Naur third_party_libinput_bak/quirks/50-framework.quirks third_party_libinput_new/quirks/50-framework.quirks
--- third_party_libinput_bak/quirks/50-framework.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/50-framework.quirks	2023-03-29 16:13:27.600873500 +0800
@@ -0,0 +1,5 @@
+[Framework Laptop Touchpad]
+MatchName=PIXA3854:00 093A:0274 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnFramework:pnLaptop:*
+AttrEventCodeDisable=BTN_RIGHT
diff -Naur third_party_libinput_bak/quirks/50-system-apple.quirks third_party_libinput_new/quirks/50-system-apple.quirks
--- third_party_libinput_bak/quirks/50-system-apple.quirks	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/50-system-apple.quirks	2023-03-29 16:13:41.132482600 +0800
@@ -27,6 +27,12 @@
 MatchName=*Apple Inc. Apple Internal Keyboard*
 AttrKeyboardIntegration=internal
 
+[Apple Internal Keyboard (SPI)]
+MatchUdevType=keyboard
+MatchBus=spi
+MatchVendor=0x5AC
+AttrKeyboardIntegration=internal
+
 # The Apple MagicMouse has a touchpad built-in but the kernel still
 # emulates a full 2/3 button mouse for us. Ignore anything from the
 # ABS interface
@@ -89,3 +95,22 @@
 MatchVendor=0x5AC
 MatchProduct=0x0262
 AttrPalmSizeThreshold=1600
+
+[Apple Laptop Touchpad (SPI)]
+MatchUdevType=touchpad
+MatchBus=spi
+MatchVendor=0x5AC
+ModelAppleTouchpad=1
+AttrSizeHint=104x75
+AttrTouchSizeRange=150:130
+AttrPalmSizeThreshold=1600
+
+# The Linux applespi driver currently uses the Synaptics vendor for some reason
+[Apple Laptop Touchpad (SPI)]
+MatchUdevType=touchpad
+MatchBus=spi
+MatchVendor=0x6CB
+ModelAppleTouchpad=1
+AttrSizeHint=104x75
+AttrTouchSizeRange=150:130
+AttrPalmSizeThreshold=1600
diff -Naur third_party_libinput_bak/quirks/50-system-asus.quirks third_party_libinput_new/quirks/50-system-asus.quirks
--- third_party_libinput_bak/quirks/50-system-asus.quirks	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/50-system-asus.quirks	2023-03-29 16:13:48.035653100 +0800
@@ -24,3 +24,12 @@
 MatchName=*Intel Virtual Button*
 MatchDMIModalias=dmi:*svnASUSTeKCOMPUTERINC.:pnVivoBookFlip14_ASUSFlipTP412UA:*
 ModelTabletModeSwitchUnreliable=1
+
+# keyboard has a different vid/pid to the touchpad 
+# so libinput won't pair the two together and dwt isn't active.
+# see: https://gitlab.freedesktop.org/libinput/libinput/-/issues/615
+[Asus ROG Zephyrus G15 2021 keyboard]
+MatchVendor=0x0B05
+MatchProduct=0x19B6
+MatchUdevType=keyboard
+AttrKeyboardIntegration=internal
diff -Naur third_party_libinput_bak/quirks/50-system-chuwi.quirks third_party_libinput_new/quirks/50-system-chuwi.quirks
--- third_party_libinput_bak/quirks/50-system-chuwi.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/50-system-chuwi.quirks	2023-03-29 16:14:07.871562500 +0800
@@ -0,0 +1,9 @@
+[Chuwi Gemibook]
+MatchName=HTIX5288:00 093A:1336 Touchpad
+MatchUdevType=touchpad
+AttrEventCodeDisable=BTN_RIGHT
+
+[Chuwi AeroBook Plus]
+MatchName=SYNA3602:01 093A:1336 Touchpad
+MatchUdevType=touchpad
+AttrEventCodeDisable=BTN_RIGHT
diff -Naur third_party_libinput_bak/quirks/50-system-dell.quirks third_party_libinput_new/quirks/50-system-dell.quirks
--- third_party_libinput_bak/quirks/50-system-dell.quirks	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/50-system-dell.quirks	2023-03-29 16:14:24.634994000 +0800
@@ -11,7 +11,20 @@
 MatchDMIModalias=dmi:*svnDellInc.:*
 AttrMscTimestamp=watch
 
-[Dell Lattitude E6220 Touchpad]
+[Dell Inspiron 15R N5110 Touchpad]
+MatchUdevType=touchpad
+MatchName=*AlpsPS/2 ALPS GlidePoint
+MatchVersion=0x0300
+MatchDMIModalias=dmi:*svnDellInc.:*pnInspironN5110*
+AttrPressureRange=100:95
+
+[Dell Latitude E5510 Touchpad]
+MatchUdevType=touchpad
+MatchName=*AlpsPS/2 ALPS GlidePoint
+MatchDMIModalias=dmi:*svnDellInc.:pnLatitudeE5510:*
+AttrPressureRange=100:90
+
+[Dell Latitude E6220 Touchpad]
 MatchName=*AlpsPS/2 ALPS GlidePoint
 MatchDMIModalias=dmi:*svnDellInc.:pnLatitudeE6220:*
 AttrPressureRange=100:90
@@ -28,6 +41,11 @@
 AttrPressureRange=15:10
 AttrPalmPressureThreshold=150
 
+[Dell XPS 15 9500 Touchpad]
+MatchName=* Touchpad
+MatchDMIModalias=dmi:*svnDellInc.:pnXPS159500:*
+ModelTouchpadVisibleMarker=0
+
 [Dell Latitude D620 Trackpoint]
 MatchName=*DualPoint Stick
 MatchDMIModalias=dmi:*svnDellInc.:pnLatitudeD620*
@@ -65,6 +83,23 @@
 MatchDMIModalias=dmi:*svnDellInc.:pnLatitudeE7470*
 AttrTrackpointMultiplier=0.125
 
+[Latitude 7480 Touchpad]
+MatchName=DLL07A0*
+MatchDMIModalias=dmi:**bvnDellInc.:*:pnLatitude7480*
+AttrPressureRange=35:34
+
+[Latitude 7490 Trackpoint]
+MatchName=*Mouse
+MatchUdevType=pointingstick
+MatchDMIModalias=dmi:**bvnDellInc.:*:pnLatitude7490*
+AttrTrackpointMultiplier=0.3
+
+[Precision 7x50 Touchpad]
+MatchBus=i2c
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnDellInc.:pnPrecision7?50*
+AttrInputPropDisable=INPUT_PROP_BUTTONPAD
+
 # The touch device has the same vid/pid as the totem, the MatchName
 # directive is required here
 [Canvas Totem]
diff -Naur third_party_libinput_bak/quirks/50-system-gigabyte.quirks third_party_libinput_new/quirks/50-system-gigabyte.quirks
--- third_party_libinput_bak/quirks/50-system-gigabyte.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/50-system-gigabyte.quirks	2023-03-29 16:15:58.560059500 +0800
@@ -0,0 +1,5 @@
+[Gigabyte Aero 15 touchpad]
+MatchUdevType=touchpad
+MatchName=ETPS/2 Elantech Touchpad
+MatchDMIModalias=dmi:*svnGIGABYTE:pnAERO15-XA*
+AttrPalmSizeThreshold=800
diff -Naur third_party_libinput_bak/quirks/50-system-google.quirks third_party_libinput_new/quirks/50-system-google.quirks
--- third_party_libinput_bak/quirks/50-system-google.quirks	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/50-system-google.quirks	2023-03-29 16:16:13.626226500 +0800
@@ -89,7 +89,7 @@
 
 [Google Chromebook Eve]
 MatchUdevType=touchpad
-MatchName=ACPI0C50:00 18D1:5028
+MatchName=ACPI0C50:00 18D1:5028*
 MatchDMIModalias=dmi:*svnGoogle:pnEve*
 ModelChromebook=1
 AttrPressureRange=6:4
diff -Naur third_party_libinput_bak/quirks/50-system-gpd.quirks third_party_libinput_new/quirks/50-system-gpd.quirks
--- third_party_libinput_bak/quirks/50-system-gpd.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/50-system-gpd.quirks	2023-03-29 16:16:32.244635100 +0800
@@ -0,0 +1,5 @@
+[GPD Win Max - All versions]
+MatchName=HTIX5288:00 093A:0255 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnGPD:*pnG1619-*
+AttrEventCodeDisable=BTN_RIGHT
diff -Naur third_party_libinput_bak/quirks/50-system-hp.quirks third_party_libinput_new/quirks/50-system-hp.quirks
--- third_party_libinput_bak/quirks/50-system-hp.quirks	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/50-system-hp.quirks	2023-03-29 16:46:34.402596000 +0800
@@ -14,15 +14,17 @@
 MatchDMIModalias=dmi:*svnHewlett-Packard:*pnHPCompaq8510w*
 AttrEventCodeDisable=BTN_TOOL_DOUBLETAP;BTN_TOOL_TRIPLETAP;
 
-[HP Pavillion dmi4]
+[HP Pavilion dmi4]
 MatchName=*SynPS/2 Synaptics TouchPad
 MatchDMIModalias=dmi:*svnHewlett-Packard:*pnHPPaviliondm4NotebookPC*
 ModelHPPavilionDM4Touchpad=1
 
+# Touchpad is a clickpad but INPUT_PROP_BUTTONPAD is not set, see
+# https://bugs.freedesktop.org/show_bug.cgi?id=97147
 [HP Stream 11]
-MatchName=SYN1EDE:00 06CB:7442
+MatchName=SYN1EDE:00 06CB:7442*
 MatchDMIModalias=dmi:*svnHewlett-Packard:pnHPStreamNotebookPC11*
-ModelHPStream11Touchpad=1
+AttrInputPropEnable=INPUT_PROP_BUTTONPAD
 
 # The HP stream x360's embedded-controller filters out events form its builtin
 # keyboard when in tablet-mode itself; and it has a capacitive home-button
@@ -44,7 +46,7 @@
 MatchDMIModalias=dmi:*svnHewlett-Packard*:pnFalco*
 AttrPressureRange=12:8
 
-[HP Spectre x360 Convertable 15-bl1xx]
+[HP Spectre x360 Convertible 15-bl1xx]
 MatchUdevType=touchpad
 MatchName=*SynPS/2 Synaptics TouchPad
 MatchDMIModalias=dmi:*svnHP:pnHPSpectrex360Convertible15-bl1XX:*
@@ -52,7 +54,7 @@
 AttrThumbPressureThreshold=90
 AttrPalmPressureThreshold=100
 
-[HP Spectre x360 Convertable 15-ch0xx]
+[HP Spectre x360 Convertible 15-ch0xx]
 MatchUdevType=touchpad
 MatchName=*SynPS/2 Synaptics TouchPad
 MatchDMIModalias=dmi:*svnHP:pnHPSpectrex360Convertible15-ch0xx:*
diff -Naur third_party_libinput_bak/quirks/50-system-huawei.quirks third_party_libinput_new/quirks/50-system-huawei.quirks
--- third_party_libinput_bak/quirks/50-system-huawei.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/50-system-huawei.quirks	2023-03-29 16:47:12.098443500 +0800
@@ -0,0 +1,7 @@
+# Clickpad that announces BTN_RIGHT
+# https://bugzilla.redhat.com/show_bug.cgi?id=1972370
+[Huawei MateBook 2020 Touchpad]
+MatchName=ELAN2604:00 04F3:3114 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnHUAWEI:*pvrM1010*
+AttrEventCodeDisable=BTN_RIGHT
diff -Naur third_party_libinput_bak/quirks/50-system-lenovo.quirks third_party_libinput_new/quirks/50-system-lenovo.quirks
--- third_party_libinput_bak/quirks/50-system-lenovo.quirks	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/50-system-lenovo.quirks	2023-03-29 16:47:47.819426800 +0800
@@ -26,30 +26,41 @@
 MatchDMIModalias=dmi:*svnLENOVO:*:pvrThinkPadT440p*
 ModelLenovoT450Touchpad=1
 
+[Lenovo T470 Trackpoint]
+MatchName=*TPPS/2 IBM TrackPoint
+MatchDMIModalias=dmi:*svnLENOVO:*:pvrThinkPadT470:*
+AttrTrackpointMultiplier=0.4
+
 [Lenovo T480 Trackpoint]
 MatchName=*TPPS/2 IBM TrackPoint
 MatchDMIModalias=dmi:*svnLENOVO:*:pvrThinkPadT480:*
 AttrTrackpointMultiplier=0.4
 
+# Touchpad is a clickpad but INPUT_PROP_BUTTONPAD is not set, see
+# https://gitlab.freedesktop.org/libinput/libinput/issues/177
 [Lenovo T480s Touchpad]
 MatchName=Elan Touchpad
 MatchDMIModalias=dmi:*svnLENOVO:*:pvrThinkPadT480s*
-ModelLenovoT480sTouchpad=1
+AttrInputPropEnable=INPUT_PROP_BUTTONPAD
 
+# Touchpad is a clickpad but INPUT_PROP_BUTTONPAD is not set, see
+# https://gitlab.freedesktop.org/libinput/libinput/issues/177
 [Lenovo T490s Touchpad]
 MatchName=Elan Touchpad
 MatchDMIModalias=dmi:*svnLENOVO:*:pvrThinkPadT490s*
-ModelLenovoT490sTouchpad=1
+AttrInputPropEnable=INPUT_PROP_BUTTONPAD
 
 [Lenovo T490s Trackpoint]
 MatchName=*TPPS/2 IBM TrackPoint
 MatchDMIModalias=dmi:*svnLENOVO:*:pvrThinkPadT490s:*
 AttrTrackpointMultiplier=0.4
 
+# Touchpad is a clickpad but INPUT_PROP_BUTTONPAD is not set, see
+# https://gitlab.freedesktop.org/libinput/libinput/issues/234
 [Lenovo L380 Touchpad]
 MatchName=Elan Touchpad
 MatchDMIModalias=dmi:*svnLENOVO:*:pvrThinkPadL380*
-ModelLenovoL380Touchpad=1
+AttrInputPropEnable=INPUT_PROP_BUTTONPAD
 
 [Lenovo X200 Trackpoint]
 MatchName=*TPPS/2 IBM TrackPoint
@@ -130,6 +141,20 @@
 MatchDMIModalias=dmi:*svnLENOVO:*:pvrThinkPadX1Yoga1st:*
 AttrTrackpointMultiplier=1.25
 
+# A true pressurepad so let's not use pressure for contact size
+# https://gitlab.freedesktop.org/libinput/libinput/-/issues/562
+[Lenovo Yoga 9i Pressurepad]
+MatchBus=i2c
+MatchVendor=0x06CB
+MatchProduct=0xCE37
+AttrEventCodeDisable=ABS_MT_PRESSURE;ABS_PRESSURE;
+
+[Lenovo Yoga C930 Tablet]
+MatchBus=i2c
+MatchVendor=0x056A
+MatchProduct=0x5196
+AttrTabletSmoothing=1
+
 # Lenovo Carbon X1 6th gen (RMI4 only, PS/2 is broken on this device,
 # sends bogus ABS_MT_TOOL_TYPE events for MT_TOOL_PALM
 [Lenovo Carbon X1 6th gen]
@@ -148,6 +173,11 @@
 MatchDMIModalias=dmi:*svnLENOVO:*pvrThinkPadX60Tablet:*
 ModelTabletModeNoSuspend=1
 
+[Lenovo X61 Tablet]
+MatchName=AT Translated Set 2 keyboard
+MatchDMIModalias=dmi:*svnLENOVO:*pvrThinkPadX61Tablet:*
+ModelTabletModeNoSuspend=1
+
 # Lenovo X220 Tablet special bezel buttons are associated to the
 # keyboard and would therefore mistakenly be deactivated as well.
 # See https://gitlab.freedesktop.org/libinput/libinput/issues/154
@@ -191,3 +221,62 @@
 MatchName=AT Raw Set 2 keyboard
 MatchDMIModalias=dmi:*svnLENOVO:*pvrThinkPadX1Tablet:*
 ModelTabletModeNoSuspend=1
+
+# Misidentified as an external keyboard by libinput
+# Tested on Legion 5 15AR05H
+[Lenovo Legion 5 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x048D
+MatchProduct=0xC100
+AttrKeyboardIntegration=internal
+
+[Lenovo Legion 5 Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x048D
+MatchProduct=0xC955
+AttrKeyboardIntegration=internal
+
+# Tested on Lenovo Legion 5 Pro 16ACH6H
+[Lenovo Legion 5 Pro Keyboard]
+MatchUdevType=keyboard
+MatchBus=usb
+MatchVendor=0x048D
+MatchProduct=0xC101
+AttrKeyboardIntegration=internal
+
+# https://gitlab.freedesktop.org/libinput/libinput/-/issues/604
+[Lenovo Yoga Slim 9 14ITL5 Pressurepad]
+MatchBus=i2c
+MatchVendor=0x27C6
+MatchProduct=0x01E8
+AttrEventCodeDisable=ABS_MT_PRESSURE;ABS_PRESSURE;
+
+# Duet 7i tablet switch activated by folding keyboard cover, or removing it.
+# We must not disable volume rocker 'keyboard'.
+[Lenovo Duet 7i]
+MatchName=AT Raw Set 2 keyboard
+MatchDMIModalias=dmi:*svnLENOVO:*pvrYogaDuet713IML05:*
+ModelTabletModeNoSuspend=1
+
+# https://gitlab.freedesktop.org/libinput/libinput/-/issues/651
+[Lenovo TrackPoint Keyboard II USB]
+MatchBus=usb
+MatchVendor=0x17EF
+MatchProduct=0x60EE
+ModelLenovoTrackpointKeyboard2=1
+
+[Lenovo TrackPoint Keyboard II Bluetooth]
+MatchBus=bluetooth
+MatchVendor=0x17EF
+MatchProduct=0x60E1
+ModelLenovoTrackpointKeyboard2=1
+
+# Modifies pressure range to avoid random jumps.
+# https://gitlab.freedesktop.org/libinput/libinput/-/issues/407
+[Lenovo Yoga 2 Pro touchpad]
+MatchUdevType=touchpad
+MatchName=*SynPS/2 Synaptics TouchPad
+MatchDMIModalias=dmi:*svnLENOVO:*:pvrLenovoYoga2Pro*
+AttrPressureRange=50:45
diff -Naur third_party_libinput_bak/quirks/50-system-pine64.quirks third_party_libinput_new/quirks/50-system-pine64.quirks
--- third_party_libinput_bak/quirks/50-system-pine64.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/50-system-pine64.quirks	2023-03-29 16:48:00.082580200 +0800
@@ -0,0 +1,6 @@
+[PineBook Pro Keyboard]
+MatchVendor=0x258A
+MatchProduct=0x001E
+MatchUdevType=keyboard
+MatchBus=usb
+AttrKeyboardIntegration=internal
diff -Naur third_party_libinput_bak/quirks/50-system-prestigio.quirks third_party_libinput_new/quirks/50-system-prestigio.quirks
--- third_party_libinput_bak/quirks/50-system-prestigio.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/50-system-prestigio.quirks	2023-03-29 16:48:13.159533400 +0800
@@ -0,0 +1,7 @@
+# Clickpad that announces BTN_RIGHT
+# https://gitlab.freedesktop.org/libinput/libinput/-/issues/674
+[Prestigio Smartbook 141 C2 Touchpad]
+MatchName=SYNA3602:00 0911:5288 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnPrestigio:*pnPSB141C02*
+AttrEventCodeDisable=BTN_RIGHT
diff -Naur third_party_libinput_bak/quirks/50-system-purism.quirks third_party_libinput_new/quirks/50-system-purism.quirks
--- third_party_libinput_bak/quirks/50-system-purism.quirks	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/quirks/50-system-purism.quirks	2023-03-29 16:48:30.120512100 +0800
@@ -0,0 +1,7 @@
+# Clickpad that announces BTN_RIGHT
+# https://gitlab.freedesktop.org/libinput/libinput/-/issues/629
+[Librem 14v1 Touchpad]
+MatchName=HTIX5288:00 0911:5288 Touchpad
+MatchUdevType=touchpad
+MatchDMIModalias=dmi:*svnPurism:*pn[Ll]ibrem*14:*
+AttrEventCodeDisable=BTN_RIGHT
diff -Naur third_party_libinput_bak/quirks/README.md third_party_libinput_new/quirks/README.md
--- third_party_libinput_bak/quirks/README.md	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/quirks/README.md	2023-03-29 16:49:13.870018200 +0800
@@ -1,4 +1,5 @@
-= libinput data file format =
+libinput quirks file format
+===========================
 
 This directory contains hardware quirks used by libinput to work around bugs
 in the hardware, device behavior and to supply information not obtained
@@ -6,28 +7,36 @@
 
 **THIS IS NOT STABLE API**
 
-The data format may change at any time. If your data file is not part of the
-libinput git tree, do not expect it to work after an update. Absolutely no
-guarantees are made for backwards-compatibility.
+The data format may change at any time. If your quirks file is not part of
+the libinput git tree, do not expect it to work after an update. Absolutely
+no guarantees are made for backwards-compatibility.
 
 **THIS IS NOT A CONFIGURATION API**
 
 Use the `libinput_device_config_foo()` functions for device configuration.
-The quirks are hardware quirks only.
+Quirks here are hardware quirks only.
 
-== Data file naming ==
+Data file naming
+----------------
 
 Data files are read in versionsort order, read order determines how values
-override each other. A values read later override previously values. The
-current structure is 10-generic-foo.quirks for generic settings,
-30-vendor-foo.quirks for vendor-specific settings and 50-system-foo.quirks
-for system vendors. This is not a fixed naming scheme and may change at any
-time. It's an approximation only because some vendors are also system
-vendors, e.g. Microsoft makes devices and laptops.
+override each other. Values read later override previously read values. The
+current structure is:
+- `10-generic-foo.quirks` for generic settings,
+- `30-vendor-foo.quirks` for vendor-specific settings, and
+- `50-system-foo.quirks` for system vendors.
+
+This is not a fixed naming scheme and may change at any time. It's an
+approximation only because some vendors are also system vendors, e.g.
+Microsoft makes devices and laptops.
+
+Laptop-specific quirks should always go into the laptop vendor's file even
+where they apply to a component of a different vendor. For example, a quirk
+for a Synaptics touchpad specific to a Dell laptop should go into the Dell
+quirks file.
 
-Laptop-specific quirks should always go into the laptop vendor's file.
-
-== Sections, matches and values ==
+Sections, matches and values
+----------------------------
 
 A data file must contain at least one section, each section must have at
 least one `Match` tag and at least one of either `Attr` or `Model`. Section
@@ -54,24 +63,29 @@
 
 All `Attr` tag values are specific to that attribute.
 
-== Parser errors ==
+Parser errors
+-------------
+
+The following requirements must be met:
 
-The following will cause parser errors and are considered invalid data
-files:
+* No whitespace is allowed at the beginning of the line
+* A Section must have at least one `Match*` entry
+* A Section must not repeat `Match*` entry
+* A Section must have at least one of `Model*` or `Attr*` entries
+* A `Model` tag may only have the value `1` or `0`
+* String properties must not be enclosed in quotes
+* Hex numbers must use uppercase letters (e.g. `0x12AB`)
 
-* Whitespace at the beginning of the line
-* Sections without at least one `Match*` entry
-* Sections with the same `Match*` entry repeated
-* Sections without at least one of `Model*` or `Attr` entries
-* A `Model` tag with a value other than `1` or `0`
-* A string property with enclosing quotes
+Failure to meet these requirements will cause a parser error and the quirks
+files will not be used.
 
-== Debugging ==
+Debugging
+---------
 
 When modifying a data file, use the `libinput list-quirks` tool to
 verify the changes. The tool can be pointed at the data directory to
 analyse, use `--verbose` to get more info. For example:
 
 ```
-libinput list-quirks --data-dir /path/to/git/repo/data/ --verbose /dev/input/event0
+libinput list-quirks --data-dir /path/to/git/repo/quirks/ --verbose /dev/input/event0
 ```
diff -Naur third_party_libinput_bak/src/evdev-debounce.c third_party_libinput_new/src/evdev-debounce.c
--- third_party_libinput_bak/src/evdev-debounce.c	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-debounce.c	2023-03-29 16:52:33.992248700 +0800
@@ -57,7 +57,9 @@
 
    7 and 8 are cases where the first event happens within the first timeout
    but the second event is outside that timeout (but within the timeout of
-   the second event). These cases are currently unhandled.
+   the second event). These cases are handled by restarting the timer on every
+   event that could be part of a bouncing sequence, which makes these cases
+   indistinguishable from 5 and 6.
 */
 
 enum debounce_event {
@@ -162,7 +164,7 @@
 	fallback->debounce.spurious_enabled = true;
 	evdev_log_info(fallback->device,
 		       "Enabling spurious button debouncing, "
-		       "see %sbutton-debouncing.html for details\n",
+		       "see %s/button-debouncing.html for details\n",
 		       HTTP_DOC_LINK);
 }
 
@@ -176,7 +178,7 @@
 
 	code = evdev_to_left_handed(device, code);
 
-	evdev_pointer_notify_physical_button(device, time, code, state);
+	fallback_notify_physical_button(fallback, device, time, code, state);
 }
 
 static void
@@ -236,6 +238,7 @@
 		log_debounce_bug(fallback, event);
 		break;
 	case DEBOUNCE_EVENT_RELEASE:
+		debounce_set_timer(fallback, time);
 		debounce_set_state(fallback, DEBOUNCE_STATE_IS_UP_DELAYING);
 		/* Note: In the debouncing RPR case, we use the last
 		 * release's time stamp */
@@ -258,6 +261,7 @@
 {
 	switch (event) {
 	case DEBOUNCE_EVENT_PRESS:
+		debounce_set_timer(fallback, time);
 		debounce_set_state(fallback, DEBOUNCE_STATE_IS_DOWN_WAITING);
 		break;
 	case DEBOUNCE_EVENT_RELEASE:
@@ -304,6 +308,8 @@
 {
 	switch (event) {
 	case DEBOUNCE_EVENT_PRESS:
+		debounce_set_timer(fallback, time);
+		debounce_set_timer_short(fallback, time);
 		/* Note: in a bouncing PRP case, we use the last press
 		 * event time */
 		fallback->debounce.button_time = time;
@@ -332,6 +338,8 @@
 		log_debounce_bug(fallback, event);
 		break;
 	case DEBOUNCE_EVENT_RELEASE:
+		debounce_set_timer(fallback, time);
+		debounce_set_timer_short(fallback, time);
 		debounce_set_state(fallback, DEBOUNCE_STATE_IS_UP_DETECTING_SPURIOUS);
 		break;
 	case DEBOUNCE_EVENT_TIMEOUT_SHORT:
@@ -355,6 +363,7 @@
 {
 	switch (event) {
 	case DEBOUNCE_EVENT_PRESS:
+		debounce_set_timer(fallback, time);
 		/* Note: in a debouncing PRP case, we use the last press'
 		 * time */
 		fallback->debounce.button_time = time;
@@ -379,6 +388,7 @@
 		log_debounce_bug(fallback, event);
 		break;
 	case DEBOUNCE_EVENT_RELEASE:
+		debounce_set_timer(fallback, time);
 		debounce_set_state(fallback, DEBOUNCE_STATE_IS_UP_WAITING);
 		break;
 	case DEBOUNCE_EVENT_TIMEOUT_SHORT:
diff -Naur third_party_libinput_bak/src/evdev-fallback.c third_party_libinput_new/src/evdev-fallback.c
--- third_party_libinput_bak/src/evdev-fallback.c	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-fallback.c	2023-03-29 16:59:17.083592600 +0800
@@ -61,6 +61,28 @@
 	}
 }
 
+void
+fallback_notify_physical_button(struct fallback_dispatch *dispatch,
+				struct evdev_device *device,
+				uint64_t time,
+				int button,
+				enum libinput_button_state state)
+{
+	if (button == BTN_MIDDLE)
+		dispatch->wheel.is_inhibited = (state == LIBINPUT_BUTTON_STATE_PRESSED);
+
+	/* Lenovo TrackPoint Keyboard II sends its own scroll events when its
+	 * trackpoint is moved while the middle button is pressed.
+	 * Do not inhibit the scroll events.
+	 * https://gitlab.freedesktop.org/libinput/libinput/-/issues/651
+	 */
+	if (evdev_device_has_model_quirk(device,
+					 QUIRK_MODEL_LENOVO_TRACKPOINT_KEYBOARD_2))
+		dispatch->wheel.is_inhibited = false;
+
+	evdev_pointer_notify_physical_button(device, time, button, state);
+}
+
 static enum libinput_switch_state
 fallback_interface_get_switch_state(struct evdev_dispatch *evdev_dispatch,
 				    enum libinput_switch sw)
@@ -108,7 +130,7 @@
 		return true;
 	case BUTTONSCROLL_READY:
 		device->scroll.button_scroll_state = BUTTONSCROLL_SCROLLING;
-		/* fallthrough */
+		_fallthrough_;
 	case BUTTONSCROLL_SCROLLING:
 		evdev_post_scroll(device, time,
 				  LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS,
@@ -208,53 +230,100 @@
 {
 	struct normalized_coords wheel_degrees = { 0.0, 0.0 };
 	struct discrete_coords discrete = { 0.0, 0.0 };
+	struct wheel_v120 v120 = { 0.0, 0.0 };
 
 	if (!(device->seat_caps & EVDEV_DEVICE_POINTER))
 		return;
 
+	if (!dispatch->wheel.emulate_hi_res_wheel &&
+	    !dispatch->wheel.hi_res_event_received &&
+	    (dispatch->wheel.lo_res.x != 0 || dispatch->wheel.lo_res.y != 0)) {
+		evdev_log_bug_kernel(device,
+				     "device supports high-resolution scroll but only low-resolution events have been received.\n"
+				     "See %s/incorrectly-enabled-hires.html for details\n",
+				     HTTP_DOC_LINK);
+		dispatch->wheel.emulate_hi_res_wheel = true;
+		dispatch->wheel.hi_res.x = dispatch->wheel.lo_res.x * 120;
+		dispatch->wheel.hi_res.y = dispatch->wheel.lo_res.y * 120;
+	}
+
+	if (dispatch->wheel.is_inhibited) {
+		dispatch->wheel.hi_res.x = 0;
+		dispatch->wheel.hi_res.y = 0;
+		dispatch->wheel.lo_res.x = 0;
+		dispatch->wheel.lo_res.y = 0;
+		return;
+	}
+
 	if (device->model_flags & EVDEV_MODEL_LENOVO_SCROLLPOINT) {
 		struct normalized_coords unaccel = { 0.0, 0.0 };
 
-		dispatch->wheel.y *= -1;
-		normalize_delta(device, &dispatch->wheel, &unaccel);
+		dispatch->wheel.hi_res.y *= -1;
+		normalize_delta(device, &dispatch->wheel.hi_res, &unaccel);
 		evdev_post_scroll(device,
 				  time,
 				  LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS,
 				  &unaccel);
-		dispatch->wheel.x = 0;
-		dispatch->wheel.y = 0;
+		dispatch->wheel.hi_res.x = 0;
+		dispatch->wheel.hi_res.y = 0;
 
 		return;
 	}
 
-	if (dispatch->wheel.y != 0) {
-		wheel_degrees.y = -1 * dispatch->wheel.y *
-					device->scroll.wheel_click_angle.y;
-		discrete.y = -1 * dispatch->wheel.y;
+	if (dispatch->wheel.hi_res.y != 0) {
+		int value = dispatch->wheel.hi_res.y;
+
+		v120.y = -1 * value;
+		wheel_degrees.y = -1 * value/120.0 * device->scroll.wheel_click_angle.y;
+		evdev_notify_axis_wheel(
+			device,
+			time,
+			bit(LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL),
+			&wheel_degrees,
+			&v120);
+		dispatch->wheel.hi_res.y = 0;
+	}
+
+	if (dispatch->wheel.lo_res.y != 0) {
+		int value = dispatch->wheel.lo_res.y;
 
-		evdev_notify_axis(
+		wheel_degrees.y = -1 * value * device->scroll.wheel_click_angle.y;
+		discrete.y = -1 * value;
+		evdev_notify_axis_legacy_wheel(
 			device,
 			time,
 			bit(LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL),
-			LIBINPUT_POINTER_AXIS_SOURCE_WHEEL,
 			&wheel_degrees,
 			&discrete);
-		dispatch->wheel.y = 0;
+		dispatch->wheel.lo_res.y = 0;
+	}
+
+	if (dispatch->wheel.hi_res.x != 0) {
+		int value = dispatch->wheel.hi_res.x;
+
+		v120.x = value;
+		wheel_degrees.x = value/120.0 * device->scroll.wheel_click_angle.x;
+		evdev_notify_axis_wheel(
+			device,
+			time,
+			bit(LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL),
+			&wheel_degrees,
+			&v120);
+		dispatch->wheel.hi_res.x = 0;
 	}
 
-	if (dispatch->wheel.x != 0) {
-		wheel_degrees.x = dispatch->wheel.x *
-					device->scroll.wheel_click_angle.x;
-		discrete.x = dispatch->wheel.x;
+	if (dispatch->wheel.lo_res.x != 0) {
+		int value = dispatch->wheel.lo_res.x;
 
-		evdev_notify_axis(
+		wheel_degrees.x = value * device->scroll.wheel_click_angle.x;
+		discrete.x = value;
+		evdev_notify_axis_legacy_wheel(
 			device,
 			time,
 			bit(LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL),
-			LIBINPUT_POINTER_AXIS_SOURCE_WHEEL,
 			&wheel_degrees,
 			&discrete);
-		dispatch->wheel.x = 0;
+		dispatch->wheel.lo_res.x = 0;
 	}
 }
 
@@ -827,11 +896,25 @@
 		dispatch->pending_event |= EVDEV_RELATIVE_MOTION;
 		break;
 	case REL_WHEEL:
-		dispatch->wheel.y += e->value;
+		dispatch->wheel.lo_res.y += e->value;
+		if (dispatch->wheel.emulate_hi_res_wheel)
+			dispatch->wheel.hi_res.y += e->value * 120;
 		dispatch->pending_event |= EVDEV_WHEEL;
 		break;
 	case REL_HWHEEL:
-		dispatch->wheel.x += e->value;
+		dispatch->wheel.lo_res.x += e->value;
+		if (dispatch->wheel.emulate_hi_res_wheel)
+			dispatch->wheel.hi_res.x += e->value * 120;
+		dispatch->pending_event |= EVDEV_WHEEL;
+		break;
+	case REL_WHEEL_HI_RES:
+		dispatch->wheel.hi_res.y += e->value;
+		dispatch->wheel.hi_res_event_received = true;
+		dispatch->pending_event |= EVDEV_WHEEL;
+		break;
+	case REL_HWHEEL_HI_RES:
+		dispatch->wheel.hi_res.x += e->value;
+		dispatch->wheel.hi_res_event_received = true;
 		dispatch->pending_event |= EVDEV_WHEEL;
 		break;
 	}
@@ -1158,7 +1241,7 @@
 fallback_interface_remove(struct evdev_dispatch *evdev_dispatch)
 {
 	struct fallback_dispatch *dispatch = fallback_dispatch(evdev_dispatch);
-	struct evdev_paired_keyboard *kbd, *tmp;
+	struct evdev_paired_keyboard *kbd;
 
 	libinput_timer_cancel(&dispatch->debounce.timer);
 	libinput_timer_cancel(&dispatch->debounce.timer_short);
@@ -1167,7 +1250,6 @@
 	libinput_device_remove_event_listener(&dispatch->tablet_mode.other.listener);
 
 	list_for_each_safe(kbd,
-			   tmp,
 			   &dispatch->lid.paired_keyboard_list,
 			   link) {
 		evdev_paired_keyboard_destroy(kbd);
@@ -1433,10 +1515,9 @@
 {
 	struct fallback_dispatch *dispatch =
 			fallback_dispatch(device->dispatch);
-	struct evdev_paired_keyboard *kbd, *tmp;
+	struct evdev_paired_keyboard *kbd;
 
 	list_for_each_safe(kbd,
-			   tmp,
 			   &dispatch->lid.paired_keyboard_list,
 			   link) {
 		if (!kbd->device)
@@ -1746,6 +1827,22 @@
 					want_config);
 	}
 
+	/* On kernel < 5.0 we need to emulate high-resolution
+	   wheel scroll events */
+	if ((libevdev_has_event_code(device->evdev,
+				     EV_REL,
+				     REL_WHEEL) &&
+	     !libevdev_has_event_code(device->evdev,
+				      EV_REL,
+				      REL_WHEEL_HI_RES)) ||
+	    (libevdev_has_event_code(device->evdev,
+				     EV_REL,
+				     REL_HWHEEL) &&
+	     !libevdev_has_event_code(device->evdev,
+				      EV_REL,
+				     REL_HWHEEL_HI_RES)))
+	    dispatch->wheel.emulate_hi_res_wheel = true;
+
 	fallback_init_debounce(dispatch);
 	fallback_init_arbitration(dispatch, device);
 
diff -Naur third_party_libinput_bak/src/evdev-fallback.h third_party_libinput_new/src/evdev-fallback.h
--- third_party_libinput_bak/src/evdev-fallback.h	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-fallback.h	2023-03-29 17:00:12.895753600 +0800
@@ -96,7 +96,14 @@
 	} mt;
 
 	struct device_coords rel;
-	struct device_coords wheel;
+
+	struct {
+		struct device_coords lo_res;
+		struct device_coords hi_res;
+		bool emulate_hi_res_wheel;
+		bool is_inhibited;
+		bool hi_res_event_received;
+	} wheel;
 
 	struct {
 		/* The struct for the tablet mode switch device itself */
@@ -241,5 +248,11 @@
 void fallback_init_debounce(struct fallback_dispatch *dispatch);
 void fallback_debounce_handle_state(struct fallback_dispatch *dispatch,
 				    uint64_t time);
+void
+fallback_notify_physical_button(struct fallback_dispatch *dispatch,
+				struct evdev_device *device,
+				uint64_t time,
+				int button,
+				enum libinput_button_state state);
 
 #endif
diff -Naur third_party_libinput_bak/src/evdev-middle-button.c third_party_libinput_new/src/evdev-middle-button.c
--- third_party_libinput_bak/src/evdev-middle-button.c	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-middle-button.c	2023-03-29 17:00:20.821264600 +0800
@@ -32,7 +32,7 @@
 /*****************************************
  * BEFORE YOU EDIT THIS FILE, look at the state diagram in
  * doc/middle-button-emulation-state-machine.svg (generated with
- * https://draw.io).
+ * https://www.diagrams.net).
  *
  * Any changes in this file must be represented in the diagram.
  *
diff -Naur third_party_libinput_bak/src/evdev-mt-touchpad-buttons.c third_party_libinput_new/src/evdev-mt-touchpad-buttons.c
--- third_party_libinput_bak/src/evdev-mt-touchpad-buttons.c	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-mt-touchpad-buttons.c	2023-03-29 17:04:04.682474900 +0800
@@ -37,7 +37,7 @@
 /*****************************************
  * BEFORE YOU EDIT THIS FILE, look at the state diagram in
  * doc/touchpad-softbutton-state-machine.svg (generated with
- * https://draw.io).
+ * https://www.diagrams.net).
  * Any changes in this file must be represented in the diagram.
  *
  * The state machine only affects the soft button area code.
@@ -102,15 +102,6 @@
 }
 
 static inline bool
-is_inside_bottom_left_area(const struct tp_dispatch *tp,
-			   const struct tp_touch *t)
-{
-	return is_inside_bottom_button_area(tp, t) &&
-	       !is_inside_bottom_middle_area(tp, t) &&
-	       !is_inside_bottom_right_area(tp, t);
-}
-
-static inline bool
 is_inside_top_button_area(const struct tp_dispatch *tp,
 			  const struct tp_touch *t)
 {
@@ -126,14 +117,6 @@
 }
 
 static inline bool
-is_inside_top_left_area(const struct tp_dispatch *tp,
-			const struct tp_touch *t)
-{
-	return is_inside_top_button_area(tp, t) &&
-	       t->point.x < tp->buttons.top_area.leftbutton_right_edge;
-}
-
-static inline bool
 is_inside_top_middle_area(const struct tp_dispatch *tp,
 			  const struct tp_touch *t)
 {
@@ -143,17 +126,21 @@
 }
 
 static void
-tp_button_set_enter_timer(struct tp_dispatch *tp, struct tp_touch *t)
+tp_button_set_enter_timer(struct tp_dispatch *tp,
+			  struct tp_touch *t,
+			  uint64_t time)
 {
 	libinput_timer_set(&t->button.timer,
-			   t->time + DEFAULT_BUTTON_ENTER_TIMEOUT);
+			   time + DEFAULT_BUTTON_ENTER_TIMEOUT);
 }
 
 static void
-tp_button_set_leave_timer(struct tp_dispatch *tp, struct tp_touch *t)
+tp_button_set_leave_timer(struct tp_dispatch *tp,
+			  struct tp_touch *t,
+			  uint64_t time)
 {
 	libinput_timer_set(&t->button.timer,
-			   t->time + DEFAULT_BUTTON_LEAVE_TIMEOUT);
+			   time + DEFAULT_BUTTON_LEAVE_TIMEOUT);
 }
 
 /*
@@ -164,7 +151,8 @@
 tp_button_set_state(struct tp_dispatch *tp,
 		    struct tp_touch *t,
 		    enum button_state new_state,
-		    enum button_event event)
+		    enum button_event event,
+		    uint64_t time)
 {
 	libinput_timer_cancel(&t->button.timer);
 
@@ -184,10 +172,10 @@
 		break;
 	case BUTTON_STATE_TOP_NEW:
 		t->button.current = event;
-		tp_button_set_enter_timer(tp, t);
+		tp_button_set_enter_timer(tp, t, time);
 		break;
 	case BUTTON_STATE_TOP_TO_IGNORE:
-		tp_button_set_leave_timer(tp, t);
+		tp_button_set_leave_timer(tp, t, time);
 		break;
 	case BUTTON_STATE_IGNORE:
 		t->button.current = 0;
@@ -198,24 +186,25 @@
 static void
 tp_button_none_handle_event(struct tp_dispatch *tp,
 			    struct tp_touch *t,
-			    enum button_event event)
+			    enum button_event event,
+			    uint64_t time)
 {
 	switch (event) {
 	case BUTTON_EVENT_IN_BOTTOM_R:
 	case BUTTON_EVENT_IN_BOTTOM_M:
 	case BUTTON_EVENT_IN_BOTTOM_L:
-		tp_button_set_state(tp, t, BUTTON_STATE_BOTTOM, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_BOTTOM, event, time);
 		break;
 	case BUTTON_EVENT_IN_TOP_R:
 	case BUTTON_EVENT_IN_TOP_M:
 	case BUTTON_EVENT_IN_TOP_L:
-		tp_button_set_state(tp, t, BUTTON_STATE_TOP_NEW, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_TOP_NEW, event, time);
 		break;
 	case BUTTON_EVENT_IN_AREA:
-		tp_button_set_state(tp, t, BUTTON_STATE_AREA, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_AREA, event, time);
 		break;
 	case BUTTON_EVENT_UP:
-		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event, time);
 		break;
 	case BUTTON_EVENT_PRESS:
 	case BUTTON_EVENT_RELEASE:
@@ -227,7 +216,8 @@
 static void
 tp_button_area_handle_event(struct tp_dispatch *tp,
 			    struct tp_touch *t,
-			    enum button_event event)
+			    enum button_event event,
+			    uint64_t time)
 {
 	switch (event) {
 	case BUTTON_EVENT_IN_BOTTOM_R:
@@ -239,7 +229,7 @@
 	case BUTTON_EVENT_IN_AREA:
 		break;
 	case BUTTON_EVENT_UP:
-		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event, time);
 		break;
 	case BUTTON_EVENT_PRESS:
 	case BUTTON_EVENT_RELEASE:
@@ -281,7 +271,8 @@
 static void
 tp_button_bottom_handle_event(struct tp_dispatch *tp,
 			      struct tp_touch *t,
-			      enum button_event event)
+			      enum button_event event,
+			      uint64_t time)
 {
 	switch (event) {
 	case BUTTON_EVENT_IN_BOTTOM_R:
@@ -291,13 +282,14 @@
 			tp_button_set_state(tp,
 					    t,
 					    BUTTON_STATE_BOTTOM,
-					    event);
+					    event,
+					    time);
 		break;
 	case BUTTON_EVENT_IN_TOP_R:
 	case BUTTON_EVENT_IN_TOP_M:
 	case BUTTON_EVENT_IN_TOP_L:
 	case BUTTON_EVENT_IN_AREA:
-		tp_button_set_state(tp, t, BUTTON_STATE_AREA, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_AREA, event, time);
 
 		/* We just transitioned one finger from BOTTOM to AREA,
 		 * if there are other fingers in BOTTOM that started
@@ -308,7 +300,7 @@
 						       t->button.initial_time);
 		break;
 	case BUTTON_EVENT_UP:
-		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event, time);
 		break;
 	case BUTTON_EVENT_PRESS:
 	case BUTTON_EVENT_RELEASE:
@@ -320,13 +312,14 @@
 static void
 tp_button_top_handle_event(struct tp_dispatch *tp,
 			   struct tp_touch *t,
-			   enum button_event event)
+			   enum button_event event,
+			   uint64_t time)
 {
 	switch (event) {
 	case BUTTON_EVENT_IN_BOTTOM_R:
 	case BUTTON_EVENT_IN_BOTTOM_M:
 	case BUTTON_EVENT_IN_BOTTOM_L:
-		tp_button_set_state(tp, t, BUTTON_STATE_TOP_TO_IGNORE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_TOP_TO_IGNORE, event, time);
 		break;
 	case BUTTON_EVENT_IN_TOP_R:
 	case BUTTON_EVENT_IN_TOP_M:
@@ -335,13 +328,14 @@
 			tp_button_set_state(tp,
 					    t,
 					    BUTTON_STATE_TOP_NEW,
-					    event);
+					    event,
+					    time);
 		break;
 	case BUTTON_EVENT_IN_AREA:
-		tp_button_set_state(tp, t, BUTTON_STATE_TOP_TO_IGNORE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_TOP_TO_IGNORE, event, time);
 		break;
 	case BUTTON_EVENT_UP:
-		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event, time);
 		break;
 	case BUTTON_EVENT_PRESS:
 	case BUTTON_EVENT_RELEASE:
@@ -353,13 +347,14 @@
 static void
 tp_button_top_new_handle_event(struct tp_dispatch *tp,
 			       struct tp_touch *t,
-			       enum button_event event)
+			       enum button_event event,
+			       uint64_t time)
 {
 	switch(event) {
 	case BUTTON_EVENT_IN_BOTTOM_R:
 	case BUTTON_EVENT_IN_BOTTOM_M:
 	case BUTTON_EVENT_IN_BOTTOM_L:
-		tp_button_set_state(tp, t, BUTTON_STATE_AREA, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_AREA, event, time);
 		break;
 	case BUTTON_EVENT_IN_TOP_R:
 	case BUTTON_EVENT_IN_TOP_M:
@@ -368,21 +363,22 @@
 			tp_button_set_state(tp,
 					    t,
 					    BUTTON_STATE_TOP_NEW,
-					    event);
+					    event,
+					    time);
 		break;
 	case BUTTON_EVENT_IN_AREA:
-		tp_button_set_state(tp, t, BUTTON_STATE_AREA, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_AREA, event, time);
 		break;
 	case BUTTON_EVENT_UP:
-		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event, time);
 		break;
 	case BUTTON_EVENT_PRESS:
-		tp_button_set_state(tp, t, BUTTON_STATE_TOP, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_TOP, event, time);
 		break;
 	case BUTTON_EVENT_RELEASE:
 		break;
 	case BUTTON_EVENT_TIMEOUT:
-		tp_button_set_state(tp, t, BUTTON_STATE_TOP, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_TOP, event, time);
 		break;
 	}
 }
@@ -390,7 +386,8 @@
 static void
 tp_button_top_to_ignore_handle_event(struct tp_dispatch *tp,
 				     struct tp_touch *t,
-				     enum button_event event)
+				     enum button_event event,
+				     uint64_t time)
 {
 	switch(event) {
 	case BUTTON_EVENT_IN_TOP_R:
@@ -400,12 +397,14 @@
 			tp_button_set_state(tp,
 					    t,
 					    BUTTON_STATE_TOP,
-					    event);
+					    event,
+					    time);
 		else
 			tp_button_set_state(tp,
 					    t,
 					    BUTTON_STATE_TOP_NEW,
-					    event);
+					    event,
+					    time);
 		break;
 	case BUTTON_EVENT_IN_BOTTOM_R:
 	case BUTTON_EVENT_IN_BOTTOM_M:
@@ -413,13 +412,13 @@
 	case BUTTON_EVENT_IN_AREA:
 		break;
 	case BUTTON_EVENT_UP:
-		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event, time);
 		break;
 	case BUTTON_EVENT_PRESS:
 	case BUTTON_EVENT_RELEASE:
 		break;
 	case BUTTON_EVENT_TIMEOUT:
-		tp_button_set_state(tp, t, BUTTON_STATE_IGNORE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_IGNORE, event, time);
 		break;
 	}
 }
@@ -427,7 +426,8 @@
 static void
 tp_button_ignore_handle_event(struct tp_dispatch *tp,
 			      struct tp_touch *t,
-			      enum button_event event)
+			      enum button_event event,
+			      uint64_t time)
 {
 	switch (event) {
 	case BUTTON_EVENT_IN_BOTTOM_R:
@@ -439,7 +439,7 @@
 	case BUTTON_EVENT_IN_AREA:
 		break;
 	case BUTTON_EVENT_UP:
-		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event);
+		tp_button_set_state(tp, t, BUTTON_STATE_NONE, event, time);
 		break;
 	case BUTTON_EVENT_PRESS:
 		t->button.current = BUTTON_EVENT_IN_AREA;
@@ -461,25 +461,25 @@
 
 	switch(t->button.state) {
 	case BUTTON_STATE_NONE:
-		tp_button_none_handle_event(tp, t, event);
+		tp_button_none_handle_event(tp, t, event, time);
 		break;
 	case BUTTON_STATE_AREA:
-		tp_button_area_handle_event(tp, t, event);
+		tp_button_area_handle_event(tp, t, event, time);
 		break;
 	case BUTTON_STATE_BOTTOM:
-		tp_button_bottom_handle_event(tp, t, event);
+		tp_button_bottom_handle_event(tp, t, event, time);
 		break;
 	case BUTTON_STATE_TOP:
-		tp_button_top_handle_event(tp, t, event);
+		tp_button_top_handle_event(tp, t, event, time);
 		break;
 	case BUTTON_STATE_TOP_NEW:
-		tp_button_top_new_handle_event(tp, t, event);
+		tp_button_top_new_handle_event(tp, t, event, time);
 		break;
 	case BUTTON_STATE_TOP_TO_IGNORE:
-		tp_button_top_to_ignore_handle_event(tp, t, event);
+		tp_button_top_to_ignore_handle_event(tp, t, event, time);
 		break;
 	case BUTTON_STATE_IGNORE:
-		tp_button_ignore_handle_event(tp, t, event);
+		tp_button_ignore_handle_event(tp, t, event, time);
 		break;
 	}
 
@@ -794,7 +794,8 @@
 
 	if (!tp->buttons.is_clickpad)
 		return LIBINPUT_CONFIG_CLICK_METHOD_NONE;
-	else if (evdev_device_has_model_quirk(device, QUIRK_MODEL_APPLE_TOUCHPAD))
+
+	if (evdev_device_has_model_quirk(device, QUIRK_MODEL_APPLE_TOUCHPAD))
 		return LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER;
 
 	return LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS;
@@ -917,6 +918,38 @@
 				want_config_option);
 }
 
+static bool
+tp_guess_clickpad(const struct tp_dispatch *tp, struct evdev_device *device)
+{
+	bool is_clickpad;
+	bool has_left = libevdev_has_event_code(device->evdev, EV_KEY, BTN_LEFT),
+	     has_right = libevdev_has_event_code(device->evdev, EV_KEY, BTN_RIGHT);
+
+	is_clickpad = libevdev_has_property(device->evdev, INPUT_PROP_BUTTONPAD);
+
+	/* A non-clickpad without a right button is a clickpad, assume the
+	 * kernel is wrong.
+	 * Exceptions here:
+	 * - The one-button Apple touchpad (discontinued in 2008) has a
+	 *   single physical button
+	 * - Wacom touch devices have neither left nor right buttons
+	 */
+	if (is_clickpad) {
+		if (has_right) {
+			evdev_log_bug_kernel(device,
+					     "clickpad with right button, assuming it is not a clickpad\n");
+			is_clickpad = false;
+		}
+	} else if (has_left && !has_right &&
+		   (tp->device->model_flags & EVDEV_MODEL_APPLE_TOUCHPAD_ONEBUTTON) == 0) {
+		evdev_log_bug_kernel(device,
+				     "missing right button, assuming it is a clickpad.\n");
+		is_clickpad = true;
+	}
+
+	return is_clickpad;
+}
+
 void
 tp_init_buttons(struct tp_dispatch *tp,
 		struct evdev_device *device)
@@ -925,23 +958,11 @@
 	const struct input_absinfo *absinfo_x, *absinfo_y;
 	int i;
 
-	tp->buttons.is_clickpad = libevdev_has_property(device->evdev,
-							INPUT_PROP_BUTTONPAD);
+	tp->buttons.is_clickpad = tp_guess_clickpad(tp, device);
+
 	tp->buttons.has_topbuttons = libevdev_has_property(device->evdev,
 						        INPUT_PROP_TOPBUTTONPAD);
 
-	if (libevdev_has_event_code(device->evdev, EV_KEY, BTN_MIDDLE) ||
-	    libevdev_has_event_code(device->evdev, EV_KEY, BTN_RIGHT)) {
-		if (tp->buttons.is_clickpad)
-			evdev_log_bug_kernel(device,
-					     "clickpad advertising right button\n");
-	} else if (libevdev_has_event_code(device->evdev, EV_KEY, BTN_LEFT) &&
-		   !tp->buttons.is_clickpad &&
-		   libevdev_get_id_vendor(device->evdev) != VENDOR_ID_APPLE) {
-			evdev_log_bug_kernel(device,
-					     "non clickpad without right button?\n");
-	}
-
 	absinfo_x = device->abs.absinfo_x;
 	absinfo_y = device->abs.absinfo_y;
 
@@ -1123,8 +1144,9 @@
 	case 0:
 	case 1: button = BTN_LEFT; break;
 	case 2: button = BTN_RIGHT; break;
+	case 3: button = BTN_MIDDLE; break;
 	default:
-		button = BTN_MIDDLE; break;
+		button = 0;
 		break;
 	}
 
@@ -1210,19 +1232,19 @@
 				break;
 			case BUTTON_EVENT_IN_TOP_L:
 				is_top = 1;
-				/* fallthrough */
+				_fallthrough_;
 			case BUTTON_EVENT_IN_BOTTOM_L:
 				area |= LEFT;
 				break;
 			case BUTTON_EVENT_IN_TOP_M:
 				is_top = 1;
-				/* fallthrough */
+				_fallthrough_;
 			case BUTTON_EVENT_IN_BOTTOM_M:
 				area |= MIDDLE;
 				break;
 			case BUTTON_EVENT_IN_TOP_R:
 				is_top = 1;
-				/* fallthrough */
+				_fallthrough_;
 			case BUTTON_EVENT_IN_BOTTOM_R:
 				area |= RIGHT;
 				break;
@@ -1286,8 +1308,7 @@
 	if (tp->buttons.is_clickpad ||
 	    tp->device->model_flags & EVDEV_MODEL_APPLE_TOUCHPAD_ONEBUTTON)
 		return tp_post_clickpadbutton_buttons(tp, time);
-	else
-		return tp_post_physical_buttons(tp, time);
+	return tp_post_physical_buttons(tp, time);
 }
 
 bool
diff -Naur third_party_libinput_bak/src/evdev-mt-touchpad-edge-scroll.c third_party_libinput_new/src/evdev-mt-touchpad-edge-scroll.c
--- third_party_libinput_bak/src/evdev-mt-touchpad-edge-scroll.c	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-mt-touchpad-edge-scroll.c	2023-03-29 17:13:03.653853700 +0800
@@ -88,7 +88,8 @@
 
 static inline void
 tp_edge_scroll_set_timer(struct tp_dispatch *tp,
-			 struct tp_touch *t)
+			 struct tp_touch *t,
+			 uint64_t time)
 {
 	const int DEFAULT_SCROLL_LOCK_TIMEOUT = ms2us(300);
 	/* if we use software buttons, we disable timeout-based
@@ -100,13 +101,14 @@
 		return;
 
 	libinput_timer_set(&t->scroll.timer,
-			   t->time + DEFAULT_SCROLL_LOCK_TIMEOUT);
+			   time + DEFAULT_SCROLL_LOCK_TIMEOUT);
 }
 
 static void
 tp_edge_scroll_set_state(struct tp_dispatch *tp,
 			 struct tp_touch *t,
-			 enum tp_edge_scroll_touch_state state)
+			 enum tp_edge_scroll_touch_state state,
+			 uint64_t time)
 {
 	libinput_timer_cancel(&t->scroll.timer);
 
@@ -119,7 +121,7 @@
 	case EDGE_SCROLL_TOUCH_STATE_EDGE_NEW:
 		t->scroll.edge = tp_touch_get_edge(tp, t);
 		t->scroll.initial = t->point;
-		tp_edge_scroll_set_timer(tp, t);
+		tp_edge_scroll_set_timer(tp, t, time);
 		break;
 	case EDGE_SCROLL_TOUCH_STATE_EDGE:
 		break;
@@ -132,16 +134,21 @@
 static void
 tp_edge_scroll_handle_none(struct tp_dispatch *tp,
 			   struct tp_touch *t,
-			   enum scroll_event event)
+			   enum scroll_event event,
+			   uint64_t time)
 {
 	switch (event) {
 	case SCROLL_EVENT_TOUCH:
 		if (tp_touch_get_edge(tp, t)) {
-			tp_edge_scroll_set_state(tp, t,
-					EDGE_SCROLL_TOUCH_STATE_EDGE_NEW);
+			tp_edge_scroll_set_state(tp,
+						 t,
+						 EDGE_SCROLL_TOUCH_STATE_EDGE_NEW,
+						 time);
 		} else {
-			tp_edge_scroll_set_state(tp, t,
-					EDGE_SCROLL_TOUCH_STATE_AREA);
+			tp_edge_scroll_set_state(tp,
+						 t,
+						 EDGE_SCROLL_TOUCH_STATE_AREA,
+						 time);
 		}
 		break;
 	case SCROLL_EVENT_MOTION:
@@ -159,7 +166,8 @@
 static void
 tp_edge_scroll_handle_edge_new(struct tp_dispatch *tp,
 			       struct tp_touch *t,
-			       enum scroll_event event)
+			       enum scroll_event event,
+			       uint64_t time)
 {
 	switch (event) {
 	case SCROLL_EVENT_TOUCH:
@@ -171,15 +179,23 @@
 	case SCROLL_EVENT_MOTION:
 		t->scroll.edge &= tp_touch_get_edge(tp, t);
 		if (!t->scroll.edge)
-			tp_edge_scroll_set_state(tp, t,
-					EDGE_SCROLL_TOUCH_STATE_AREA);
+			tp_edge_scroll_set_state(tp,
+						 t,
+						 EDGE_SCROLL_TOUCH_STATE_AREA,
+						 time);
 		break;
 	case SCROLL_EVENT_RELEASE:
-		tp_edge_scroll_set_state(tp, t, EDGE_SCROLL_TOUCH_STATE_NONE);
+		tp_edge_scroll_set_state(tp,
+					 t,
+					 EDGE_SCROLL_TOUCH_STATE_NONE,
+					 time);
 		break;
 	case SCROLL_EVENT_TIMEOUT:
 	case SCROLL_EVENT_POSTED:
-		tp_edge_scroll_set_state(tp, t, EDGE_SCROLL_TOUCH_STATE_EDGE);
+		tp_edge_scroll_set_state(tp,
+					 t,
+					 EDGE_SCROLL_TOUCH_STATE_EDGE,
+					 time);
 		break;
 	}
 }
@@ -187,7 +203,8 @@
 static void
 tp_edge_scroll_handle_edge(struct tp_dispatch *tp,
 			   struct tp_touch *t,
-			   enum scroll_event event)
+			   enum scroll_event event,
+			   uint64_t time)
 {
 	switch (event) {
 	case SCROLL_EVENT_TOUCH:
@@ -202,12 +219,17 @@
 		if (t->scroll.edge == (EDGE_RIGHT | EDGE_BOTTOM)) {
 			t->scroll.edge &= tp_touch_get_edge(tp, t);
 			if (!t->scroll.edge)
-				tp_edge_scroll_set_state(tp, t,
-						EDGE_SCROLL_TOUCH_STATE_AREA);
+				tp_edge_scroll_set_state(tp,
+							 t,
+							 EDGE_SCROLL_TOUCH_STATE_AREA,
+							 time);
 		}
 		break;
 	case SCROLL_EVENT_RELEASE:
-		tp_edge_scroll_set_state(tp, t, EDGE_SCROLL_TOUCH_STATE_NONE);
+		tp_edge_scroll_set_state(tp,
+					 t,
+					 EDGE_SCROLL_TOUCH_STATE_NONE,
+					 time);
 		break;
 	case SCROLL_EVENT_POSTED:
 		break;
@@ -217,7 +239,8 @@
 static void
 tp_edge_scroll_handle_area(struct tp_dispatch *tp,
 			   struct tp_touch *t,
-			   enum scroll_event event)
+			   enum scroll_event event,
+			   uint64_t time)
 {
 	switch (event) {
 	case SCROLL_EVENT_TOUCH:
@@ -230,7 +253,10 @@
 	case SCROLL_EVENT_MOTION:
 		break;
 	case SCROLL_EVENT_RELEASE:
-		tp_edge_scroll_set_state(tp, t, EDGE_SCROLL_TOUCH_STATE_NONE);
+		tp_edge_scroll_set_state(tp,
+					 t,
+					 EDGE_SCROLL_TOUCH_STATE_NONE,
+					 time);
 		break;
 	}
 }
@@ -238,22 +264,23 @@
 static void
 tp_edge_scroll_handle_event(struct tp_dispatch *tp,
 			    struct tp_touch *t,
-			    enum scroll_event event)
+			    enum scroll_event event,
+			    uint64_t time)
 {
 	enum tp_edge_scroll_touch_state current = t->scroll.edge_state;
 
 	switch (current) {
 	case EDGE_SCROLL_TOUCH_STATE_NONE:
-		tp_edge_scroll_handle_none(tp, t, event);
+		tp_edge_scroll_handle_none(tp, t, event, time);
 		break;
 	case EDGE_SCROLL_TOUCH_STATE_EDGE_NEW:
-		tp_edge_scroll_handle_edge_new(tp, t, event);
+		tp_edge_scroll_handle_edge_new(tp, t, event, time);
 		break;
 	case EDGE_SCROLL_TOUCH_STATE_EDGE:
-		tp_edge_scroll_handle_edge(tp, t, event);
+		tp_edge_scroll_handle_edge(tp, t, event, time);
 		break;
 	case EDGE_SCROLL_TOUCH_STATE_AREA:
-		tp_edge_scroll_handle_area(tp, t, event);
+		tp_edge_scroll_handle_area(tp, t, event, time);
 		break;
 	}
 
@@ -271,7 +298,7 @@
 {
 	struct tp_touch *t = data;
 
-	tp_edge_scroll_handle_event(t->tp, t, SCROLL_EVENT_TIMEOUT);
+	tp_edge_scroll_handle_event(t->tp, t, SCROLL_EVENT_TIMEOUT, now);
 }
 
 void
@@ -359,10 +386,16 @@
 		case TOUCH_HOVERING:
 			break;
 		case TOUCH_BEGIN:
-			tp_edge_scroll_handle_event(tp, t, SCROLL_EVENT_TOUCH);
+			tp_edge_scroll_handle_event(tp,
+						    t,
+						    SCROLL_EVENT_TOUCH,
+						    time);
 			break;
 		case TOUCH_UPDATE:
-			tp_edge_scroll_handle_event(tp, t, SCROLL_EVENT_MOTION);
+			tp_edge_scroll_handle_event(tp,
+						    t,
+						    SCROLL_EVENT_MOTION,
+						    time);
 			break;
 		case TOUCH_MAYBE_END:
 			/* This shouldn't happen we transfer to TOUCH_END
@@ -371,9 +404,12 @@
 					"touch %d: unexpected state %d\n",
 					t->index,
 					t->state);
-			/* fallthrough */
+			_fallthrough_;
 		case TOUCH_END:
-			tp_edge_scroll_handle_event(tp, t, SCROLL_EVENT_RELEASE);
+			tp_edge_scroll_handle_event(tp,
+						    t,
+						    SCROLL_EVENT_RELEASE,
+						    time);
 			break;
 		}
 	}
@@ -390,7 +426,6 @@
 	struct device_float_coords fraw;
 	struct normalized_coords normalized, tmp;
 	const struct normalized_coords zero = { 0.0, 0.0 };
-	const struct discrete_coords zero_discrete = { 0.0, 0.0 };
 
 	tp_for_each_touch(tp, t) {
 		if (!t->dirty)
@@ -408,11 +443,10 @@
 			case EDGE_NONE:
 				if (t->scroll.direction != -1) {
 					/* Send stop scroll event */
-					evdev_notify_axis(device, time,
-						bit(t->scroll.direction),
-						LIBINPUT_POINTER_AXIS_SOURCE_FINGER,
-						&zero,
-						&zero_discrete);
+					evdev_notify_axis_finger(device,
+								 time,
+								 bit(t->scroll.direction),
+								 &zero);
 					t->scroll.direction = -1;
 				}
 				continue;
@@ -458,14 +492,12 @@
 		if (*delta == 0.0)
 			continue;
 
-		evdev_notify_axis(device, time,
-				  bit(axis),
-				  LIBINPUT_POINTER_AXIS_SOURCE_FINGER,
-				  &normalized,
-				  &zero_discrete);
+		evdev_notify_axis_finger(device, time,
+					 bit(axis),
+					 &normalized);
 		t->scroll.direction = axis;
 
-		tp_edge_scroll_handle_event(tp, t, SCROLL_EVENT_POSTED);
+		tp_edge_scroll_handle_event(tp, t, SCROLL_EVENT_POSTED, time);
 	}
 
 	return 0; /* Edge touches are suppressed by edge_scroll_touch_active */
@@ -477,15 +509,13 @@
 	struct evdev_device *device = tp->device;
 	struct tp_touch *t;
 	const struct normalized_coords zero = { 0.0, 0.0 };
-	const struct discrete_coords zero_discrete = { 0.0, 0.0 };
 
 	tp_for_each_touch(tp, t) {
 		if (t->scroll.direction != -1) {
-			evdev_notify_axis(device, time,
-					    bit(t->scroll.direction),
-					    LIBINPUT_POINTER_AXIS_SOURCE_FINGER,
-					    &zero,
-					    &zero_discrete);
+			evdev_notify_axis_finger(device,
+						 time,
+						 bit(t->scroll.direction),
+						 &zero);
 			t->scroll.direction = -1;
 			/* reset touch to area state, avoids loading the
 			 * state machine with special case handling */
diff -Naur third_party_libinput_bak/src/evdev-mt-touchpad-gestures.c third_party_libinput_new/src/evdev-mt-touchpad-gestures.c
--- third_party_libinput_bak/src/evdev-mt-touchpad-gestures.c	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-mt-touchpad-gestures.c	2023-03-29 17:14:36.024289700 +0800
@@ -28,9 +28,34 @@
 
 #include "evdev-mt-touchpad.h"
 
+#define QUICK_GESTURE_HOLD_TIMEOUT ms2us(40)
+#define DEFAULT_GESTURE_HOLD_TIMEOUT ms2us(180)
 #define DEFAULT_GESTURE_SWITCH_TIMEOUT ms2us(100)
 #define DEFAULT_GESTURE_SWIPE_TIMEOUT ms2us(150)
-#define DEFAULT_GESTURE_PINCH_TIMEOUT ms2us(150)
+#define DEFAULT_GESTURE_PINCH_TIMEOUT ms2us(300)
+
+#define HOLD_AND_MOTION_THRESHOLD 0.5 /* mm */
+#define PINCH_DISAMBIGUATION_MOVE_THRESHOLD 1.5 /* mm */
+
+enum gesture_event {
+	GESTURE_EVENT_RESET,
+	GESTURE_EVENT_FINGER_DETECTED,
+	GESTURE_EVENT_HOLD_TIMEOUT,
+	GESTURE_EVENT_HOLD_AND_MOTION,
+	GESTURE_EVENT_POINTER_MOTION,
+	GESTURE_EVENT_SCROLL,
+	GESTURE_EVENT_SWIPE,
+	GESTURE_EVENT_PINCH,
+};
+
+/*****************************************
+ * DO NOT EDIT THIS FILE!
+ *
+ * Look at the state diagram in doc/touchpad-gestures-state-machine.svg
+ * (generated with https://www.diagrams.net)
+ *
+ * Any changes in this file must be represented in the diagram.
+ */
 
 static inline const char*
 gesture_state_to_str(enum tp_gesture_state state)
@@ -38,6 +63,9 @@
 	switch (state) {
 	CASE_RETURN_STRING(GESTURE_STATE_NONE);
 	CASE_RETURN_STRING(GESTURE_STATE_UNKNOWN);
+	CASE_RETURN_STRING(GESTURE_STATE_HOLD);
+	CASE_RETURN_STRING(GESTURE_STATE_HOLD_AND_MOTION);
+	CASE_RETURN_STRING(GESTURE_STATE_POINTER_MOTION);
 	CASE_RETURN_STRING(GESTURE_STATE_SCROLL);
 	CASE_RETURN_STRING(GESTURE_STATE_PINCH);
 	CASE_RETURN_STRING(GESTURE_STATE_SWIPE);
@@ -45,6 +73,22 @@
 	return NULL;
 }
 
+static inline const char*
+gesture_event_to_str(enum gesture_event event)
+{
+	switch(event) {
+	CASE_RETURN_STRING(GESTURE_EVENT_RESET);
+	CASE_RETURN_STRING(GESTURE_EVENT_FINGER_DETECTED);
+	CASE_RETURN_STRING(GESTURE_EVENT_HOLD_TIMEOUT);
+	CASE_RETURN_STRING(GESTURE_EVENT_HOLD_AND_MOTION);
+	CASE_RETURN_STRING(GESTURE_EVENT_POINTER_MOTION);
+	CASE_RETURN_STRING(GESTURE_EVENT_SCROLL);
+	CASE_RETURN_STRING(GESTURE_EVENT_SWIPE);
+	CASE_RETURN_STRING(GESTURE_EVENT_PINCH);
+	}
+	return NULL;
+}
+
 static struct device_float_coords
 tp_get_touches_delta(struct tp_dispatch *tp, bool average)
 {
@@ -118,6 +162,11 @@
 				       "%s in unknown gesture mode\n",
 				       __func__);
 		break;
+	case GESTURE_STATE_HOLD:
+	case GESTURE_STATE_HOLD_AND_MOTION:
+		gesture_notify_hold(&tp->device->base, time,
+				    tp->gesture.finger_count);
+		break;
 	case GESTURE_STATE_SCROLL:
 		tp_gesture_init_scroll(tp);
 		break;
@@ -133,16 +182,17 @@
 				     tp->gesture.finger_count,
 				     &zero, &zero);
 		break;
+	case GESTURE_STATE_POINTER_MOTION:
+		break;
 	}
 
 	tp->gesture.started = true;
 }
 
-static void
-tp_gesture_post_pointer_motion(struct tp_dispatch *tp, uint64_t time)
+static struct device_float_coords
+tp_get_raw_pointer_motion(struct tp_dispatch *tp)
 {
 	struct device_float_coords raw;
-	struct normalized_coords delta;
 
 	/* When a clickpad is clicked, combine motion of all active touches */
 	if (tp->buttons.is_clickpad && tp->buttons.state)
@@ -150,6 +200,33 @@
 	else
 		raw = tp_get_average_touches_delta(tp);
 
+	return raw;
+}
+
+static bool
+tp_has_pending_pointer_motion(struct tp_dispatch *tp, uint64_t time)
+{
+	struct device_float_coords raw;
+
+	if (!(tp->queued & TOUCHPAD_EVENT_MOTION))
+		return false;
+
+	/* Checking for raw pointer motion is enough in this case.
+	 * Calling tp_filter_motion is intentionally omitted to avoid calling
+	 * it twice (here and in tp_gesture_post_pointer_motion) with the same
+	 * event.
+	 */
+	raw = tp_get_raw_pointer_motion(tp);
+	return !device_float_is_zero(raw);
+}
+
+static void
+tp_gesture_post_pointer_motion(struct tp_dispatch *tp, uint64_t time)
+{
+	struct device_float_coords raw;
+	struct normalized_coords delta;
+
+	raw = tp_get_raw_pointer_motion(tp);
 	delta = tp_filter_motion(tp, &raw, time);
 
 	if (!normalized_is_zero(delta) || !device_float_is_zero(raw)) {
@@ -194,6 +271,33 @@
 	return n;
 }
 
+static inline int
+tp_gesture_same_directions(int dir1, int dir2)
+{
+	/*
+	 * In some cases (semi-mt touchpads) we may seen one finger move
+	 * e.g. N/NE and the other W/NW so we not only check for overlapping
+	 * directions, but also for neighboring bits being set.
+	 * The ((dira & 0x80) && (dirb & 0x01)) checks are to check for bit 0
+	 * and 7 being set as they also represent neighboring directions.
+	 */
+	return ((dir1 | (dir1 >> 1)) & dir2) ||
+		((dir2 | (dir2 >> 1)) & dir1) ||
+		((dir1 & 0x80) && (dir2 & 0x01)) ||
+		((dir2 & 0x80) && (dir1 & 0x01));
+}
+
+static struct phys_coords
+tp_gesture_mm_moved(struct tp_dispatch *tp, struct tp_touch *t)
+{
+	struct device_coords delta;
+
+	delta.x = abs(t->point.x - t->gesture.initial.x);
+	delta.y = abs(t->point.y - t->gesture.initial.y);
+
+	return evdev_device_unit_delta_to_mm(tp->device, &delta);
+}
+
 static uint32_t
 tp_gesture_get_direction(struct tp_dispatch *tp, struct tp_touch *touch)
 {
@@ -225,6 +329,16 @@
 	*center = device_average(first->point, second->point);
 }
 
+static inline void
+tp_gesture_init_pinch(struct tp_dispatch *tp)
+{
+	tp_gesture_get_pinch_info(tp,
+				  &tp->gesture.initial_distance,
+				  &tp->gesture.angle,
+				  &tp->gesture.center);
+	tp->gesture.prev_scale = 1.0;
+}
+
 static void
 tp_gesture_set_scroll_buildup(struct tp_dispatch *tp)
 {
@@ -368,108 +482,382 @@
 	}
 }
 
-static enum tp_gesture_state
-tp_gesture_handle_state_none(struct tp_dispatch *tp, uint64_t time)
+static inline void
+log_gesture_bug(struct tp_dispatch *tp, enum gesture_event event)
 {
-	struct tp_touch *first, *second;
-	struct tp_touch *touches[4];
-	unsigned int ntouches;
-	unsigned int i;
+	evdev_log_bug_libinput(tp->device,
+			       "invalid gesture event %s in state %s\n",
+			       gesture_event_to_str(event),
+			       gesture_state_to_str(tp->gesture.state));
+}
 
-	ntouches = tp_gesture_get_active_touches(tp, touches, 4);
-	if (ntouches < 2)
-		return GESTURE_STATE_NONE;
+static bool
+tp_gesture_is_quick_hold(struct tp_dispatch *tp)
+{
+	/* When 1 or 2 fingers are used to hold, always use a "quick" hold to
+	 * make the hold to stop kinetic scrolling user interaction feel more
+	 * natural.
+	 */
+	return (tp->gesture.finger_count == 1) ||
+	       (tp->gesture.finger_count == 2);
+}
 
-	if (!tp->gesture.enabled) {
-		if (ntouches == 2)
-			return GESTURE_STATE_SCROLL;
-		else
-			return GESTURE_STATE_NONE;
-	}
+static bool
+tp_gesture_use_hold_timer(struct tp_dispatch *tp)
+{
+	/* When tap is not enabled, always use the timer */
+	if (!tp->tap.enabled)
+		return true;
 
-	first = touches[0];
-	second = touches[1];
+	/* Always use the timer if it is a quick hold */
+	if (tp_gesture_is_quick_hold(tp))
+		return true;
 
-	/* For 3+ finger gestures, we only really need to track two touches.
-	 * The human hand's finger arrangement means that for a pinch, the
-	 * bottom-most touch will always be the thumb, and the top-most touch
-	 * will always be one of the fingers.
-	 *
-	 * For 3+ finger swipes, the fingers will likely (but not necessarily)
-	 * be in a horizontal line. They all move together, regardless, so it
-	 * doesn't really matter which two of those touches we track.
-	 *
-	 * Tracking top and bottom is a change from previous versions, where
-	 * we tracked leftmost and rightmost. This change enables:
-	 *
-	 * - More accurate pinch detection if thumb is near the center
-	 * - Better resting-thumb detection while two-finger scrolling
-	 * - On capable hardware, allow 3- or 4-finger swipes with resting
-	 *   thumb or held-down clickpad
+	/* If the number of fingers on the touchpad exceeds the number of
+	 * allowed fingers to tap, use the timer.
 	 */
-	if (ntouches > 2) {
-		second = touches[0];
+	if (tp->gesture.finger_count > 3)
+		return true;
 
-		for (i = 1; i < ntouches && i < tp->num_slots; i++) {
-			if (touches[i]->point.y < first->point.y)
-				first = touches[i];
-			else if (touches[i]->point.y >= second->point.y)
-				second = touches[i];
-		}
+	/* If the tap state machine is already in a hold status, for example
+	 * when holding with 3 fingers and then holding with 2, use the timer.
+	 */
+	if (tp->tap.state == TAP_STATE_HOLD ||
+	    tp->tap.state == TAP_STATE_TOUCH_2_HOLD ||
+	    tp->tap.state == TAP_STATE_TOUCH_3_HOLD)
+		return true;
 
-		if (first == second)
-			return GESTURE_STATE_NONE;
+	/* If the tap state machine is in dead status, use the timer. This
+	 * happens when the user holds after cancelling a gesture/scroll.
+	 */
+	if (tp->tap.state == TAP_STATE_DEAD)
+		return true;
+
+	/* Otherwise, sync the hold notification with the tap state machine */
+	return false;
+}
+
+static void
+tp_gesture_set_hold_timer(struct tp_dispatch *tp, uint64_t time)
+{
+	uint64_t timeout;
 
+	if (!tp->gesture.hold_enabled)
+		return;
+
+	if (tp_gesture_use_hold_timer(tp)) {
+		timeout = tp_gesture_is_quick_hold(tp) ?
+			  QUICK_GESTURE_HOLD_TIMEOUT :
+			  DEFAULT_GESTURE_HOLD_TIMEOUT;
+
+		libinput_timer_set(&tp->gesture.hold_timer, time + timeout);
 	}
+}
 
-	tp->gesture.initial_time = time;
-	first->gesture.initial = first->point;
-	second->gesture.initial = second->point;
-	tp->gesture.touches[0] = first;
-	tp->gesture.touches[1] = second;
+static void
+tp_gesture_none_handle_event(struct tp_dispatch *tp,
+			     enum gesture_event event,
+			     uint64_t time)
+{
+	switch(event) {
+	case GESTURE_EVENT_RESET:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		break;
+	case GESTURE_EVENT_FINGER_DETECTED:
+		tp_gesture_set_hold_timer(tp, time);
+		tp->gesture.state = GESTURE_STATE_UNKNOWN;
+		break;
+	case GESTURE_EVENT_HOLD_TIMEOUT:
+		break;
+	case GESTURE_EVENT_POINTER_MOTION:
+		tp->gesture.state = GESTURE_STATE_POINTER_MOTION;
+		break;
+	case GESTURE_EVENT_SCROLL:
+		tp->gesture.state = GESTURE_STATE_SCROLL;
+		break;
+	case GESTURE_EVENT_HOLD_AND_MOTION:
+	case GESTURE_EVENT_SWIPE:
+	case GESTURE_EVENT_PINCH:
+		log_gesture_bug(tp, event);
+		break;
+	}
+}
 
-	return GESTURE_STATE_UNKNOWN;
+static void
+tp_gesture_unknown_handle_event(struct tp_dispatch *tp,
+				enum gesture_event event,
+				uint64_t time)
+{
+	switch(event) {
+	case GESTURE_EVENT_RESET:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp->gesture.state = GESTURE_STATE_NONE;
+		break;
+	case GESTURE_EVENT_HOLD_TIMEOUT:
+		tp->gesture.state = GESTURE_STATE_HOLD;
+		tp_gesture_start(tp, time);
+		break;
+	case GESTURE_EVENT_POINTER_MOTION:
+		/* Don't cancel the hold timer. This pointer motion can end up
+		 * being recognised as hold and motion. */
+		tp->gesture.state = GESTURE_STATE_POINTER_MOTION;
+		break;
+	case GESTURE_EVENT_SCROLL:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp_gesture_set_scroll_buildup(tp);
+		tp->gesture.state = GESTURE_STATE_SCROLL;
+		break;
+	case GESTURE_EVENT_SWIPE:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp->gesture.state = GESTURE_STATE_SWIPE;
+		break;
+	case GESTURE_EVENT_PINCH:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp_gesture_init_pinch(tp);
+		tp->gesture.state = GESTURE_STATE_PINCH;
+		break;
+	case GESTURE_EVENT_HOLD_AND_MOTION:
+	case GESTURE_EVENT_FINGER_DETECTED:
+		log_gesture_bug(tp, event);
+		break;
+	}
 }
 
-static inline int
-tp_gesture_same_directions(int dir1, int dir2)
-{
-	/*
-	 * In some cases (semi-mt touchpads) we may seen one finger move
-	 * e.g. N/NE and the other W/NW so we not only check for overlapping
-	 * directions, but also for neighboring bits being set.
-	 * The ((dira & 0x80) && (dirb & 0x01)) checks are to check for bit 0
-	 * and 7 being set as they also represent neighboring directions.
-	 */
-	return ((dir1 | (dir1 >> 1)) & dir2) ||
-		((dir2 | (dir2 >> 1)) & dir1) ||
-		((dir1 & 0x80) && (dir2 & 0x01)) ||
-		((dir2 & 0x80) && (dir1 & 0x01));
+static void
+tp_gesture_hold_handle_event(struct tp_dispatch *tp,
+			     enum gesture_event event,
+			     uint64_t time)
+{
+	switch(event) {
+	case GESTURE_EVENT_RESET:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp->gesture.state = GESTURE_STATE_NONE;
+		break;
+	case GESTURE_EVENT_HOLD_AND_MOTION:
+		tp->gesture.state = GESTURE_STATE_HOLD_AND_MOTION;
+		break;
+	case GESTURE_EVENT_POINTER_MOTION:
+		tp_gesture_cancel(tp, time);
+		tp->gesture.state = GESTURE_STATE_POINTER_MOTION;
+		break;
+	case GESTURE_EVENT_SCROLL:
+		tp_gesture_set_scroll_buildup(tp);
+		tp_gesture_cancel(tp, time);
+		tp->gesture.state = GESTURE_STATE_SCROLL;
+		break;
+	case GESTURE_EVENT_SWIPE:
+		tp_gesture_cancel(tp, time);
+		tp->gesture.state = GESTURE_STATE_SWIPE;
+		break;
+	case GESTURE_EVENT_PINCH:
+		tp_gesture_init_pinch(tp);
+		tp_gesture_cancel(tp, time);
+		tp->gesture.state = GESTURE_STATE_PINCH;
+		break;
+	case GESTURE_EVENT_HOLD_TIMEOUT:
+	case GESTURE_EVENT_FINGER_DETECTED:
+		log_gesture_bug(tp, event);
+		break;
+	}
 }
 
-static inline void
-tp_gesture_init_pinch(struct tp_dispatch *tp)
+static void
+tp_gesture_hold_and_motion_handle_event(struct tp_dispatch *tp,
+					enum gesture_event event,
+					uint64_t time)
+{
+	switch(event) {
+	case GESTURE_EVENT_RESET:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp->gesture.state = GESTURE_STATE_NONE;
+		break;
+	case GESTURE_EVENT_POINTER_MOTION:
+		tp_gesture_cancel(tp, time);
+		tp->gesture.state = GESTURE_STATE_POINTER_MOTION;
+		break;
+	case GESTURE_EVENT_HOLD_AND_MOTION:
+	case GESTURE_EVENT_FINGER_DETECTED:
+	case GESTURE_EVENT_HOLD_TIMEOUT:
+	case GESTURE_EVENT_SCROLL:
+	case GESTURE_EVENT_SWIPE:
+	case GESTURE_EVENT_PINCH:
+		log_gesture_bug(tp, event);
+		break;
+	}
+}
+
+static void
+tp_gesture_pointer_motion_handle_event(struct tp_dispatch *tp,
+				       enum gesture_event event,
+				       uint64_t time)
+{
+	struct tp_touch *first;
+	struct phys_coords first_moved;
+	double first_mm;
+
+	switch(event) {
+	case GESTURE_EVENT_RESET:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp->gesture.state = GESTURE_STATE_NONE;
+		break;
+	case GESTURE_EVENT_HOLD_TIMEOUT:
+		if (tp->gesture.finger_count != 1)
+			break;
+
+		first = tp->gesture.touches[0];
+		first_moved = tp_gesture_mm_moved(tp, first);
+		first_mm = hypot(first_moved.x, first_moved.y);
+
+		if (first_mm < HOLD_AND_MOTION_THRESHOLD) {
+			tp->gesture.state = GESTURE_STATE_HOLD_AND_MOTION;
+			tp_gesture_start(tp, time);
+		}
+		break;
+	case GESTURE_EVENT_HOLD_AND_MOTION:
+	case GESTURE_EVENT_FINGER_DETECTED:
+	case GESTURE_EVENT_POINTER_MOTION:
+	case GESTURE_EVENT_SCROLL:
+	case GESTURE_EVENT_SWIPE:
+	case GESTURE_EVENT_PINCH:
+		log_gesture_bug(tp, event);
+		break;
+	}
+}
+
+static void
+tp_gesture_scroll_handle_event(struct tp_dispatch *tp,
+			       enum gesture_event event,
+			       uint64_t time)
+{
+	switch(event) {
+	case GESTURE_EVENT_RESET:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp->gesture.state = GESTURE_STATE_NONE;
+		break;
+	case GESTURE_EVENT_HOLD_AND_MOTION:
+	case GESTURE_EVENT_FINGER_DETECTED:
+	case GESTURE_EVENT_HOLD_TIMEOUT:
+	case GESTURE_EVENT_POINTER_MOTION:
+	case GESTURE_EVENT_SCROLL:
+	case GESTURE_EVENT_SWIPE:
+	case GESTURE_EVENT_PINCH:
+		log_gesture_bug(tp, event);
+		break;
+	}
+}
+
+static void
+tp_gesture_pinch_handle_event(struct tp_dispatch *tp,
+			      enum gesture_event event,
+			      uint64_t time)
+{
+	switch(event) {
+	case GESTURE_EVENT_RESET:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp->gesture.state = GESTURE_STATE_NONE;
+		break;
+	case GESTURE_EVENT_HOLD_AND_MOTION:
+	case GESTURE_EVENT_FINGER_DETECTED:
+	case GESTURE_EVENT_HOLD_TIMEOUT:
+	case GESTURE_EVENT_POINTER_MOTION:
+	case GESTURE_EVENT_SCROLL:
+	case GESTURE_EVENT_SWIPE:
+	case GESTURE_EVENT_PINCH:
+		log_gesture_bug(tp, event);
+		break;
+	}
+}
+
+static void
+tp_gesture_swipe_handle_event(struct tp_dispatch *tp,
+			      enum gesture_event event,
+			      uint64_t time)
+{
+	switch(event) {
+	case GESTURE_EVENT_RESET:
+		libinput_timer_cancel(&tp->gesture.hold_timer);
+		tp->gesture.state = GESTURE_STATE_NONE;
+		break;
+	case GESTURE_EVENT_HOLD_AND_MOTION:
+	case GESTURE_EVENT_FINGER_DETECTED:
+	case GESTURE_EVENT_HOLD_TIMEOUT:
+	case GESTURE_EVENT_POINTER_MOTION:
+	case GESTURE_EVENT_SCROLL:
+	case GESTURE_EVENT_SWIPE:
+	case GESTURE_EVENT_PINCH:
+		log_gesture_bug(tp, event);
+		break;
+	}
+}
+
+static void
+tp_gesture_handle_event(struct tp_dispatch *tp,
+			enum gesture_event event,
+			uint64_t time)
 {
-	tp_gesture_get_pinch_info(tp,
-				  &tp->gesture.initial_distance,
-				  &tp->gesture.angle,
-				  &tp->gesture.center);
-	tp->gesture.prev_scale = 1.0;
+	enum tp_gesture_state oldstate;
+
+	oldstate = tp->gesture.state;
+
+	switch(tp->gesture.state) {
+	case GESTURE_STATE_NONE:
+		tp_gesture_none_handle_event(tp, event, time);
+		break;
+	case GESTURE_STATE_UNKNOWN:
+		tp_gesture_unknown_handle_event(tp, event, time);
+		break;
+	case GESTURE_STATE_HOLD:
+		tp_gesture_hold_handle_event(tp, event, time);
+		break;
+	case GESTURE_STATE_HOLD_AND_MOTION:
+		tp_gesture_hold_and_motion_handle_event(tp, event, time);
+		break;
+	case GESTURE_STATE_POINTER_MOTION:
+		tp_gesture_pointer_motion_handle_event(tp, event, time);
+		break;
+	case GESTURE_STATE_SCROLL:
+		tp_gesture_scroll_handle_event(tp, event, time);
+		break;
+	case GESTURE_STATE_PINCH:
+		tp_gesture_pinch_handle_event(tp, event, time);
+		break;
+	case GESTURE_STATE_SWIPE:
+		tp_gesture_swipe_handle_event(tp, event, time);
+		break;
+	}
+
+	if (oldstate != tp->gesture.state) {
+		evdev_log_debug(tp->device,
+				"gesture state %s → %s → %s\n",
+				gesture_state_to_str(oldstate),
+				gesture_event_to_str(event),
+				gesture_state_to_str(tp->gesture.state));
+	}
 }
 
-static struct phys_coords
-tp_gesture_mm_moved(struct tp_dispatch *tp, struct tp_touch *t)
+static void
+tp_gesture_hold_timeout(uint64_t now, void *data)
 {
-	struct device_coords delta;
+	struct tp_dispatch *tp = data;
 
-	delta.x = abs(t->point.x - t->gesture.initial.x);
-	delta.y = abs(t->point.y - t->gesture.initial.y);
+	if (tp_tap_dragging_or_double_tapping(tp) || tp_tap_dragging(tp))
+		return;
 
-	return evdev_device_unit_delta_to_mm(tp->device, &delta);
+	tp_gesture_handle_event(tp, GESTURE_EVENT_HOLD_TIMEOUT, now);
 }
 
-static enum tp_gesture_state
-tp_gesture_handle_state_unknown(struct tp_dispatch *tp, uint64_t time)
+void
+tp_gesture_tap_timeout(struct tp_dispatch *tp, uint64_t time)
+{
+	if (!tp->gesture.hold_enabled)
+		return;
+
+	if (!tp_gesture_is_quick_hold(tp))
+		tp_gesture_handle_event(tp, GESTURE_EVENT_HOLD_TIMEOUT, time);
+}
+
+static void
+tp_gesture_detect_motion_gestures(struct tp_dispatch *tp, uint64_t time)
 {
 	struct tp_touch *first = tp->gesture.touches[0],
 			*second = tp->gesture.touches[1],
@@ -481,20 +869,47 @@
 	double thumb_mm, finger_mm;
 	double min_move = 1.5; /* min movement threshold in mm - count this touch */
 	double max_move = 4.0; /* max movement threshold in mm - ignore other touch */
+	bool is_hold_and_motion;
+
+	first_moved = tp_gesture_mm_moved(tp, first);
+	first_mm = hypot(first_moved.x, first_moved.y);
+
+	if (tp->gesture.finger_count == 1) {
+		if (!tp_has_pending_pointer_motion(tp, time))
+			return;
+
+		is_hold_and_motion = (first_mm < HOLD_AND_MOTION_THRESHOLD);
+
+		if (tp->gesture.state == GESTURE_STATE_HOLD &&
+		    is_hold_and_motion) {
+			tp_gesture_handle_event(tp,
+						GESTURE_EVENT_HOLD_AND_MOTION,
+						time);
+			return;
+		}
+
+		if (tp->gesture.state == GESTURE_STATE_HOLD_AND_MOTION &&
+		    is_hold_and_motion)
+			return;
+
+		tp_gesture_handle_event(tp,
+					GESTURE_EVENT_POINTER_MOTION,
+					time);
+		return;
+	}
 
 	/* If we have more fingers than slots, we don't know where the
 	 * fingers are. Default to swipe */
 	if (tp->gesture.enabled && tp->gesture.finger_count > 2 &&
-	    tp->gesture.finger_count > tp->num_slots)
-		return GESTURE_STATE_SWIPE;
+	    tp->gesture.finger_count > tp->num_slots) {
+		tp_gesture_handle_event(tp, GESTURE_EVENT_SWIPE, time);
+		return;
+	}
 
 	/* Need more margin for error when there are more fingers */
 	max_move += 2.0 * (tp->gesture.finger_count - 2);
 	min_move += 0.5 * (tp->gesture.finger_count - 2);
 
-	first_moved = tp_gesture_mm_moved(tp, first);
-	first_mm = hypot(first_moved.x, first_moved.y);
-
 	second_moved = tp_gesture_mm_moved(tp, second);
 	second_mm = hypot(second_moved.x, second_moved.y);
 
@@ -504,7 +919,7 @@
 
 	/* If both touches moved less than a mm, we cannot decide yet */
 	if (first_mm < 1 && second_mm < 1)
-		return GESTURE_STATE_UNKNOWN;
+		return;
 
 	/* Pick the thumb as the lowest point on the touchpad */
 	if (first->point.y > second->point.y) {
@@ -522,12 +937,12 @@
 	if ((!tp->gesture.enabled ||
 	     (distance_mm.x < 40.0 && distance_mm.y < 7.0)) &&
 	    time > (tp->gesture.initial_time + DEFAULT_GESTURE_SWIPE_TIMEOUT)) {
-		if (tp->gesture.finger_count == 2) {
-			tp_gesture_set_scroll_buildup(tp);
-			return GESTURE_STATE_SCROLL;
-		} else {
-			return GESTURE_STATE_SWIPE;
-		}
+		if (tp->gesture.finger_count == 2)
+			tp_gesture_handle_event(tp, GESTURE_EVENT_SCROLL, time);
+		else
+			tp_gesture_handle_event(tp, GESTURE_EVENT_SWIPE, time);
+
+		return;
 	}
 
 	/* If one touch exceeds the max_move threshold while the other has not
@@ -543,7 +958,8 @@
 		 */
 		if (tp->thumb.detect_thumbs && thumb_mm < min_move) {
 			tp_thumb_suppress(tp, thumb);
-			return GESTURE_STATE_NONE;
+			tp_gesture_cancel(tp, time);
+			return;
 		}
 
 		/* If gestures detection is disabled, or if finger is still
@@ -552,8 +968,8 @@
 		 */
 		if ((!tp->gesture.enabled || finger_mm < min_move) &&
 		    tp->gesture.finger_count == 2) {
-			tp_gesture_set_scroll_buildup(tp);
-			return GESTURE_STATE_SCROLL;
+			tp_gesture_handle_event(tp, GESTURE_EVENT_SCROLL, time);
+			return;
 		}
 
 		/* If more than 2 fingers are involved, and the thumb moves
@@ -563,8 +979,8 @@
 		    tp->gesture.finger_count > 2 &&
 		    tp->gesture.enabled &&
 		    tp->thumb.pinch_eligible) {
-			tp_gesture_init_pinch(tp);
-			return GESTURE_STATE_PINCH;
+			tp_gesture_handle_event(tp, GESTURE_EVENT_PINCH, time);
+			return;
 		}
 	}
 
@@ -572,7 +988,7 @@
 	 * tell what kind of gesture this is.
 	 */
 	if ((first_mm < min_move) || (second_mm < min_move))
-		return GESTURE_STATE_UNKNOWN;
+		return;
 
 	/* Both touches have exceeded the min_move threshold, so we have a
 	 * valid gesture. Update gesture initial time and get directions so
@@ -587,26 +1003,173 @@
 	if (tp->gesture.finger_count > tp->num_slots ||
 	    tp_gesture_same_directions(dir1, dir2)) {
 		if (tp->gesture.finger_count == 2) {
-			tp_gesture_set_scroll_buildup(tp);
-			return GESTURE_STATE_SCROLL;
-		} else if (tp->gesture.enabled) {
-			return GESTURE_STATE_SWIPE;
+			tp_gesture_handle_event(tp, GESTURE_EVENT_SCROLL, time);
+			return;
+		}
+
+		if (tp->gesture.enabled) {
+			tp_gesture_handle_event(tp, GESTURE_EVENT_SWIPE, time);
+			return;
 		}
 	}
 
 	/* If the touches are moving away from each other, this is a pinch */
-	tp_gesture_init_pinch(tp);
-	return GESTURE_STATE_PINCH;
+	tp_gesture_handle_event(tp, GESTURE_EVENT_PINCH, time);
 }
 
-static enum tp_gesture_state
+static bool
+tp_gesture_is_pinch(struct tp_dispatch *tp)
+{
+	struct tp_touch *first = tp->gesture.touches[0],
+			*second = tp->gesture.touches[1];
+	uint32_t dir1, dir2;
+	struct phys_coords first_moved, second_moved;
+	double first_mm, second_mm;
+
+	dir1 = tp_gesture_get_direction(tp, first);
+	dir2 = tp_gesture_get_direction(tp, second);
+	if (tp_gesture_same_directions(dir1, dir2))
+		return false;
+
+	first_moved = tp_gesture_mm_moved(tp, first);
+	first_mm = hypot(first_moved.x, first_moved.y);
+	if (first_mm < PINCH_DISAMBIGUATION_MOVE_THRESHOLD)
+		return false;
+
+	second_moved = tp_gesture_mm_moved(tp, second);
+	second_mm = hypot(second_moved.x, second_moved.y);
+	if (second_mm < PINCH_DISAMBIGUATION_MOVE_THRESHOLD)
+		return false;
+
+	return true;
+}
+
+static void
+tp_gesture_handle_state_none(struct tp_dispatch *tp, uint64_t time)
+{
+	struct tp_touch *first, *second;
+	struct tp_touch *touches[4];
+	unsigned int ntouches;
+	unsigned int i;
+
+	ntouches = tp_gesture_get_active_touches(tp, touches, 4);
+
+	first = touches[0];
+	second = touches[1];
+
+	if (ntouches == 0)
+		return;
+
+	if (ntouches == 1) {
+		first->gesture.initial = first->point;
+		tp->gesture.touches[0] = first;
+
+		tp_gesture_handle_event(tp,
+					GESTURE_EVENT_FINGER_DETECTED,
+					time);
+		return;
+	}
+
+	if (!tp->gesture.enabled) {
+		if (ntouches == 2)
+			tp_gesture_handle_event(tp, GESTURE_EVENT_SCROLL, time);
+
+		return;
+	}
+
+	/* For 3+ finger gestures, we only really need to track two touches.
+	 * The human hand's finger arrangement means that for a pinch, the
+	 * bottom-most touch will always be the thumb, and the top-most touch
+	 * will always be one of the fingers.
+	 *
+	 * For 3+ finger swipes, the fingers will likely (but not necessarily)
+	 * be in a horizontal line. They all move together, regardless, so it
+	 * doesn't really matter which two of those touches we track.
+	 *
+	 * Tracking top and bottom is a change from previous versions, where
+	 * we tracked leftmost and rightmost. This change enables:
+	 *
+	 * - More accurate pinch detection if thumb is near the center
+	 * - Better resting-thumb detection while two-finger scrolling
+	 * - On capable hardware, allow 3- or 4-finger swipes with resting
+	 *   thumb or held-down clickpad
+	 */
+	if (ntouches > 2) {
+		second = touches[0];
+
+		for (i = 1; i < ntouches && i < tp->num_slots; i++) {
+			if (touches[i]->point.y < first->point.y)
+				first = touches[i];
+			else if (touches[i]->point.y >= second->point.y)
+				second = touches[i];
+		}
+
+		if (first == second)
+			return;
+
+	}
+
+	tp->gesture.initial_time = time;
+	first->gesture.initial = first->point;
+	second->gesture.initial = second->point;
+	tp->gesture.touches[0] = first;
+	tp->gesture.touches[1] = second;
+
+	tp_gesture_handle_event(tp, GESTURE_EVENT_FINGER_DETECTED, time);
+}
+
+static void
+tp_gesture_handle_state_unknown(struct tp_dispatch *tp, uint64_t time,
+				bool ignore_motion)
+{
+	if (!ignore_motion)
+		tp_gesture_detect_motion_gestures(tp, time);
+}
+
+static void
+tp_gesture_handle_state_hold(struct tp_dispatch *tp, uint64_t time,
+			     bool ignore_motion)
+{
+	tp_gesture_start(tp, time);
+
+	if (!ignore_motion)
+		tp_gesture_detect_motion_gestures(tp, time);
+}
+
+static void
+tp_gesture_handle_state_hold_and_pointer_motion(struct tp_dispatch *tp, uint64_t time)
+{
+	if (tp->queued & TOUCHPAD_EVENT_MOTION)
+		tp_gesture_post_pointer_motion(tp, time);
+
+	tp_gesture_detect_motion_gestures(tp, time);
+}
+
+static void
+tp_gesture_handle_state_pointer_motion(struct tp_dispatch *tp, uint64_t time)
+{
+	if (tp->queued & TOUCHPAD_EVENT_MOTION)
+		tp_gesture_post_pointer_motion(tp, time);
+}
+
+static void
 tp_gesture_handle_state_scroll(struct tp_dispatch *tp, uint64_t time)
 {
 	struct device_float_coords raw;
 	struct normalized_coords delta;
 
 	if (tp->scroll.method != LIBINPUT_CONFIG_SCROLL_2FG)
-		return GESTURE_STATE_SCROLL;
+		return;
+
+	/* We may confuse a pinch for a scroll initially,
+	 * allow ourselves to correct our guess.
+	 */
+	if (time < (tp->gesture.initial_time + DEFAULT_GESTURE_PINCH_TIMEOUT) &&
+	    tp_gesture_is_pinch(tp)) {
+		tp_gesture_cancel(tp, time);
+		tp_gesture_handle_event(tp, GESTURE_EVENT_PINCH, time);
+		return;
+	}
 
 	raw = tp_get_average_touches_delta(tp);
 
@@ -614,7 +1177,7 @@
 	delta = tp_filter_motion_unaccelerated(tp, &raw, time);
 
 	if (normalized_is_zero(delta))
-		return GESTURE_STATE_SCROLL;
+		return;
 
 	tp_gesture_start(tp, time);
 	tp_gesture_apply_scroll_constraints(tp, &raw, &delta, time);
@@ -622,11 +1185,9 @@
 			  time,
 			  LIBINPUT_POINTER_AXIS_SOURCE_FINGER,
 			  &delta);
-
-	return GESTURE_STATE_SCROLL;
 }
 
-static enum tp_gesture_state
+static void
 tp_gesture_handle_state_swipe(struct tp_dispatch *tp, uint64_t time)
 {
 	struct device_float_coords raw;
@@ -636,18 +1197,16 @@
 	delta = tp_filter_motion(tp, &raw, time);
 
 	if (!normalized_is_zero(delta) || !device_float_is_zero(raw)) {
-		unaccel = tp_normalize_delta(tp, raw);
+		unaccel = tp_filter_motion_unaccelerated(tp, &raw, time);
 		tp_gesture_start(tp, time);
 		gesture_notify_swipe(&tp->device->base, time,
 				     LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
 				     tp->gesture.finger_count,
 				     &delta, &unaccel);
 	}
-
-	return GESTURE_STATE_SWIPE;
 }
 
-static enum tp_gesture_state
+static void
 tp_gesture_handle_state_pinch(struct tp_dispatch *tp, uint64_t time)
 {
 	double angle, angle_delta, distance, scale;
@@ -672,9 +1231,9 @@
 
 	if (normalized_is_zero(delta) && device_float_is_zero(fdelta) &&
 	    scale == tp->gesture.prev_scale && angle_delta == 0.0)
-		return GESTURE_STATE_PINCH;
+		return;
 
-	unaccel = tp_normalize_delta(tp, fdelta);
+	unaccel = tp_filter_motion_unaccelerated(tp, &fdelta, time);
 	tp_gesture_start(tp, time);
 	gesture_notify_pinch(&tp->device->base, time,
 			     LIBINPUT_EVENT_GESTURE_PINCH_UPDATE,
@@ -682,44 +1241,56 @@
 			     &delta, &unaccel, scale, angle_delta);
 
 	tp->gesture.prev_scale = scale;
-
-	return GESTURE_STATE_PINCH;
 }
 
 static void
-tp_gesture_post_gesture(struct tp_dispatch *tp, uint64_t time)
+tp_gesture_post_gesture(struct tp_dispatch *tp, uint64_t time,
+			bool ignore_motion)
 {
-	enum tp_gesture_state oldstate = tp->gesture.state;
-
 	if (tp->gesture.state == GESTURE_STATE_NONE)
-		tp->gesture.state =
-			tp_gesture_handle_state_none(tp, time);
+		tp_gesture_handle_state_none(tp, time);
 
 	if (tp->gesture.state == GESTURE_STATE_UNKNOWN)
-		tp->gesture.state =
-			tp_gesture_handle_state_unknown(tp, time);
+		tp_gesture_handle_state_unknown(tp, time, ignore_motion);
+
+	if (tp->gesture.state == GESTURE_STATE_HOLD)
+		tp_gesture_handle_state_hold(tp, time, ignore_motion);
+
+	if (tp->gesture.state == GESTURE_STATE_POINTER_MOTION)
+		tp_gesture_handle_state_pointer_motion(tp, time);
+
+	if (tp->gesture.state == GESTURE_STATE_HOLD_AND_MOTION)
+		tp_gesture_handle_state_hold_and_pointer_motion(tp, time);
 
 	if (tp->gesture.state == GESTURE_STATE_SCROLL)
-		tp->gesture.state =
-			tp_gesture_handle_state_scroll(tp, time);
+		tp_gesture_handle_state_scroll(tp, time);
 
 	if (tp->gesture.state == GESTURE_STATE_SWIPE)
-		tp->gesture.state =
-			tp_gesture_handle_state_swipe(tp, time);
+		tp_gesture_handle_state_swipe(tp, time);
 
 	if (tp->gesture.state == GESTURE_STATE_PINCH)
-		tp->gesture.state =
-			tp_gesture_handle_state_pinch(tp, time);
+		tp_gesture_handle_state_pinch(tp, time);
+}
 
-	if (oldstate != tp->gesture.state)
-		evdev_log_debug(tp->device,
-				"gesture state: %s → %s\n",
-				gesture_state_to_str(oldstate),
-				gesture_state_to_str(tp->gesture.state));
+static bool
+tp_gesture_thumb_moved(struct tp_dispatch *tp)
+{
+	struct tp_touch *thumb;
+	struct phys_coords thumb_moved;
+	double thumb_mm;
+
+	thumb = tp_thumb_get_touch(tp);
+	if (!thumb)
+		return false;
+
+	thumb_moved = tp_gesture_mm_moved(tp, thumb);
+	thumb_mm = hypot(thumb_moved.x, thumb_moved.y);
+	return thumb_mm >= PINCH_DISAMBIGUATION_MOVE_THRESHOLD;
 }
 
 void
-tp_gesture_post_events(struct tp_dispatch *tp, uint64_t time)
+tp_gesture_post_events(struct tp_dispatch *tp, uint64_t time,
+		       bool ignore_motion)
 {
 	if (tp->gesture.finger_count == 0)
 		return;
@@ -731,7 +1302,12 @@
 	if (tp_tap_dragging(tp) ||
 	    (tp->buttons.is_clickpad && tp->buttons.state &&
 	     tp->thumb.state == THUMB_STATE_FINGER)) {
-		tp_gesture_cancel(tp, time);
+		if (tp->gesture.state != GESTURE_STATE_POINTER_MOTION) {
+			tp_gesture_cancel(tp, time);
+			tp_gesture_handle_event(tp,
+						GESTURE_EVENT_POINTER_MOTION,
+						time);
+		}
 		tp->gesture.finger_count = 1;
 		tp->gesture.finger_count_pending = 0;
 	}
@@ -740,17 +1316,15 @@
 	if (tp->gesture.finger_count_pending)
 		return;
 
-	switch (tp->gesture.finger_count) {
-	case 1:
-		if (tp->queued & TOUCHPAD_EVENT_MOTION)
-			tp_gesture_post_pointer_motion(tp, time);
-		break;
-	case 2:
-	case 3:
-	case 4:
-		tp_gesture_post_gesture(tp, time);
-		break;
-	}
+	/* When pinching, the thumb tends to move slower than the finger,
+	 * so we may suppress it too early. Give it some time to move.
+	 */
+	if (time < (tp->gesture.initial_time + DEFAULT_GESTURE_PINCH_TIMEOUT) &&
+	    tp_gesture_thumb_moved(tp))
+		tp_thumb_reset(tp);
+
+	if (tp->gesture.finger_count <= 4)
+		tp_gesture_post_gesture(tp, time, ignore_motion);
 }
 
 void
@@ -769,10 +1343,10 @@
 {
 	enum tp_gesture_state state = tp->gesture.state;
 
-	tp->gesture.state = GESTURE_STATE_NONE;
-
-	if (!tp->gesture.started)
+	if (!tp->gesture.started) {
+		tp_gesture_handle_event(tp, GESTURE_EVENT_RESET, time);
 		return;
+	}
 
 	switch (state) {
 	case GESTURE_STATE_NONE:
@@ -781,6 +1355,11 @@
 				       "%s in unknown gesture mode\n",
 				       __func__);
 		break;
+	case GESTURE_STATE_HOLD:
+	case GESTURE_STATE_HOLD_AND_MOTION:
+		gesture_notify_hold_end(&tp->device->base, time,
+					tp->gesture.finger_count, cancelled);
+		break;
 	case GESTURE_STATE_SCROLL:
 		tp_gesture_stop_twofinger_scroll(tp, time);
 		break;
@@ -796,9 +1375,12 @@
 					 tp->gesture.finger_count,
 					 cancelled);
 		break;
+	case GESTURE_STATE_POINTER_MOTION:
+		break;
 	}
 
 	tp->gesture.started = false;
+	tp_gesture_handle_event(tp, GESTURE_EVENT_RESET, time);
 }
 
 void
@@ -808,6 +1390,13 @@
 }
 
 void
+tp_gesture_cancel_motion_gestures(struct tp_dispatch *tp, uint64_t time)
+{
+	if (tp->gesture.started && tp->gesture.state != GESTURE_STATE_HOLD)
+		tp_gesture_end(tp, time, true);
+}
+
+void
 tp_gesture_stop(struct tp_dispatch *tp, uint64_t time)
 {
 	tp_gesture_end(tp, time, false);
@@ -847,10 +1436,15 @@
 		} else if (!tp->gesture.started) {
 			tp->gesture.finger_count = active_touches;
 			tp->gesture.finger_count_pending = 0;
-			/* If in UNKNOWN state, go back to NONE to
-			 * re-evaluate leftmost and rightmost touches
+			/* If in UNKNOWN or POINTER_MOTION state, go back to
+			 * NONE to re-evaluate leftmost and rightmost touches
 			 */
-			tp->gesture.state = GESTURE_STATE_NONE;
+			if (tp->gesture.state == GESTURE_STATE_UNKNOWN ||
+			    tp->gesture.state == GESTURE_STATE_POINTER_MOTION) {
+				tp_gesture_handle_event(tp,
+							GESTURE_EVENT_RESET,
+							time);
+			}
 		/* Else debounce finger changes */
 		} else if (active_touches != tp->gesture.finger_count_pending) {
 			tp->gesture.finger_count_pending = active_touches;
@@ -862,17 +1456,65 @@
 	}
 }
 
+static bool
+tp_gesture_are_gestures_enabled(struct tp_dispatch *tp)
+{
+	return (!tp->semi_mt && tp->num_slots > 1);
+}
+
+static enum libinput_config_status
+tp_gesture_set_hold_enabled(struct libinput_device *device,
+			    enum libinput_config_hold_state enabled)
+{
+	struct evdev_dispatch *dispatch = evdev_device(device)->dispatch;
+	struct tp_dispatch *tp = tp_dispatch(dispatch);
+
+	if (!tp_gesture_are_gestures_enabled(tp))
+		return LIBINPUT_CONFIG_STATUS_UNSUPPORTED;
+
+	tp->gesture.hold_enabled = (enabled == LIBINPUT_CONFIG_HOLD_ENABLED);
+
+	return LIBINPUT_CONFIG_STATUS_SUCCESS;
+}
+
+static enum libinput_config_hold_state
+tp_gesture_is_hold_enabled(struct libinput_device *device)
+{
+	struct evdev_dispatch *dispatch = evdev_device(device)->dispatch;
+	struct tp_dispatch *tp = tp_dispatch(dispatch);
+
+	return tp->gesture.hold_enabled ? LIBINPUT_CONFIG_HOLD_ENABLED :
+					  LIBINPUT_CONFIG_HOLD_DISABLED;
+}
+
+static enum libinput_config_hold_state
+tp_gesture_get_hold_default(struct libinput_device *device)
+{
+	struct evdev_dispatch *dispatch = evdev_device(device)->dispatch;
+	struct tp_dispatch *tp = tp_dispatch(dispatch);
+
+	return tp_gesture_are_gestures_enabled(tp) ?
+	       LIBINPUT_CONFIG_HOLD_ENABLED :
+	       LIBINPUT_CONFIG_HOLD_DISABLED;
+}
+
 void
 tp_init_gesture(struct tp_dispatch *tp)
 {
 	char timer_name[64];
 
+	tp->gesture.config.set_hold_enabled = tp_gesture_set_hold_enabled;
+	tp->gesture.config.get_hold_enabled = tp_gesture_is_hold_enabled;
+	tp->gesture.config.get_hold_default = tp_gesture_get_hold_default;
+	tp->device->base.config.gesture = &tp->gesture.config;
+
 	/* two-finger scrolling is always enabled, this flag just
 	 * decides whether we detect pinch. semi-mt devices are too
 	 * unreliable to do pinch gestures. */
-	tp->gesture.enabled = !tp->semi_mt && tp->num_slots > 1;
+	tp->gesture.enabled = tp_gesture_are_gestures_enabled(tp);
 
 	tp->gesture.state = GESTURE_STATE_NONE;
+	tp->gesture.hold_enabled = tp_gesture_are_gestures_enabled(tp);
 
 	snprintf(timer_name,
 		 sizeof(timer_name),
@@ -882,10 +1524,20 @@
 			    tp_libinput_context(tp),
 			    timer_name,
 			    tp_gesture_finger_count_switch_timeout, tp);
+
+	snprintf(timer_name,
+		 sizeof(timer_name),
+		 "%s hold",
+		 evdev_device_get_sysname(tp->device));
+	libinput_timer_init(&tp->gesture.hold_timer,
+			    tp_libinput_context(tp),
+			    timer_name,
+			    tp_gesture_hold_timeout, tp);
 }
 
 void
 tp_remove_gesture(struct tp_dispatch *tp)
 {
 	libinput_timer_cancel(&tp->gesture.finger_count_switch_timer);
+	libinput_timer_cancel(&tp->gesture.hold_timer);
 }
diff -Naur third_party_libinput_bak/src/evdev-mt-touchpad-tap.c third_party_libinput_new/src/evdev-mt-touchpad-tap.c
--- third_party_libinput_bak/src/evdev-mt-touchpad-tap.c	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-mt-touchpad-tap.c	2023-03-29 17:16:28.110713900 +0800
@@ -30,7 +30,9 @@
 #include "evdev-mt-touchpad.h"
 
 #define DEFAULT_TAP_TIMEOUT_PERIOD ms2us(180)
-#define DEFAULT_DRAG_TIMEOUT_PERIOD ms2us(300)
+#define DEFAULT_DRAG_TIMEOUT_PERIOD_BASE ms2us(160)
+#define DEFAULT_DRAG_TIMEOUT_PERIOD_PERFINGER ms2us(20)
+#define DEFAULT_DRAGLOCK_TIMEOUT_PERIOD ms2us(300)
 #define DEFAULT_TAP_MOVE_THRESHOLD 1.3 /* mm */
 
 enum tap_event {
@@ -48,7 +50,7 @@
  * DO NOT EDIT THIS FILE!
  *
  * Look at the state diagram in doc/touchpad-tap-state-machine.svg
- * (generated with https://draw.io)
+ * (generated with https://www.diagrams.net)
  *
  * Any changes in this file must be represented in the diagram.
  */
@@ -60,17 +62,31 @@
 	CASE_RETURN_STRING(TAP_STATE_IDLE);
 	CASE_RETURN_STRING(TAP_STATE_HOLD);
 	CASE_RETURN_STRING(TAP_STATE_TOUCH);
-	CASE_RETURN_STRING(TAP_STATE_TAPPED);
+	CASE_RETURN_STRING(TAP_STATE_1FGTAP_TAPPED);
+	CASE_RETURN_STRING(TAP_STATE_2FGTAP_TAPPED);
+	CASE_RETURN_STRING(TAP_STATE_3FGTAP_TAPPED);
 	CASE_RETURN_STRING(TAP_STATE_TOUCH_2);
 	CASE_RETURN_STRING(TAP_STATE_TOUCH_2_HOLD);
 	CASE_RETURN_STRING(TAP_STATE_TOUCH_2_RELEASE);
 	CASE_RETURN_STRING(TAP_STATE_TOUCH_3);
 	CASE_RETURN_STRING(TAP_STATE_TOUCH_3_HOLD);
-	CASE_RETURN_STRING(TAP_STATE_DRAGGING);
-	CASE_RETURN_STRING(TAP_STATE_DRAGGING_WAIT);
-	CASE_RETURN_STRING(TAP_STATE_DRAGGING_OR_DOUBLETAP);
-	CASE_RETURN_STRING(TAP_STATE_DRAGGING_OR_TAP);
-	CASE_RETURN_STRING(TAP_STATE_DRAGGING_2);
+	CASE_RETURN_STRING(TAP_STATE_TOUCH_3_RELEASE);
+	CASE_RETURN_STRING(TAP_STATE_TOUCH_3_RELEASE_2);
+	CASE_RETURN_STRING(TAP_STATE_1FGTAP_DRAGGING);
+	CASE_RETURN_STRING(TAP_STATE_2FGTAP_DRAGGING);
+	CASE_RETURN_STRING(TAP_STATE_3FGTAP_DRAGGING);
+	CASE_RETURN_STRING(TAP_STATE_1FGTAP_DRAGGING_WAIT);
+	CASE_RETURN_STRING(TAP_STATE_2FGTAP_DRAGGING_WAIT);
+	CASE_RETURN_STRING(TAP_STATE_3FGTAP_DRAGGING_WAIT);
+	CASE_RETURN_STRING(TAP_STATE_1FGTAP_DRAGGING_OR_DOUBLETAP);
+	CASE_RETURN_STRING(TAP_STATE_2FGTAP_DRAGGING_OR_DOUBLETAP);
+	CASE_RETURN_STRING(TAP_STATE_3FGTAP_DRAGGING_OR_DOUBLETAP);
+	CASE_RETURN_STRING(TAP_STATE_1FGTAP_DRAGGING_OR_TAP);
+	CASE_RETURN_STRING(TAP_STATE_2FGTAP_DRAGGING_OR_TAP);
+	CASE_RETURN_STRING(TAP_STATE_3FGTAP_DRAGGING_OR_TAP);
+	CASE_RETURN_STRING(TAP_STATE_1FGTAP_DRAGGING_2);
+	CASE_RETURN_STRING(TAP_STATE_2FGTAP_DRAGGING_2);
+	CASE_RETURN_STRING(TAP_STATE_3FGTAP_DRAGGING_2);
 	CASE_RETURN_STRING(TAP_STATE_DEAD);
 	}
 	return NULL;
@@ -117,7 +133,7 @@
 
 	assert(tp->tap.map < ARRAY_LENGTH(button_map));
 
-	if (nfingers > 3)
+	if (nfingers < 1 || nfingers > 3)
 		return;
 
 	button = button_map[tp->tap.map][nfingers - 1];
@@ -140,9 +156,20 @@
 }
 
 static void
-tp_tap_set_drag_timer(struct tp_dispatch *tp, uint64_t time)
+tp_tap_set_drag_timer(struct tp_dispatch *tp, uint64_t time,
+		      int nfingers_tapped)
 {
-	libinput_timer_set(&tp->tap.timer, time + DEFAULT_DRAG_TIMEOUT_PERIOD);
+	libinput_timer_set(&tp->tap.timer,
+			   time + DEFAULT_DRAG_TIMEOUT_PERIOD_BASE +
+			   (nfingers_tapped *
+			    DEFAULT_DRAG_TIMEOUT_PERIOD_PERFINGER));
+}
+
+static void
+tp_tap_set_draglock_timer(struct tp_dispatch *tp, uint64_t time)
+{
+	libinput_timer_set(&tp->tap.timer,
+			   time + DEFAULT_DRAGLOCK_TIMEOUT_PERIOD);
 }
 
 static void
@@ -209,9 +236,9 @@
 			      1,
 			      LIBINPUT_BUTTON_STATE_PRESSED);
 		if (tp->tap.drag_enabled) {
-			tp->tap.state = TAP_STATE_TAPPED;
+			tp->tap.state = TAP_STATE_1FGTAP_TAPPED;
 			tp->tap.saved_release_time = time;
-			tp_tap_set_timer(tp, time);
+			tp_tap_set_drag_timer(tp, time, 1);
 		} else {
 			tp_tap_notify(tp,
 				      time,
@@ -226,6 +253,7 @@
 	case TAP_EVENT_TIMEOUT:
 		tp->tap.state = TAP_STATE_HOLD;
 		tp_tap_clear_timer(tp);
+		tp_gesture_tap_timeout(tp, time);
 		break;
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
@@ -286,36 +314,46 @@
 static void
 tp_tap_tapped_handle_event(struct tp_dispatch *tp,
 			   struct tp_touch *t,
-			   enum tap_event event, uint64_t time)
+			   enum tap_event event, uint64_t time,
+			   int nfingers_tapped)
 {
 	switch (event) {
 	case TAP_EVENT_MOTION:
 	case TAP_EVENT_RELEASE:
 		log_tap_bug(tp, t, event);
 		break;
-	case TAP_EVENT_TOUCH:
-		tp->tap.state = TAP_STATE_DRAGGING_OR_DOUBLETAP;
+	case TAP_EVENT_TOUCH: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_DRAGGING_OR_DOUBLETAP,
+			TAP_STATE_2FGTAP_DRAGGING_OR_DOUBLETAP,
+			TAP_STATE_3FGTAP_DRAGGING_OR_DOUBLETAP,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		tp->tap.saved_press_time = time;
 		tp_tap_set_timer(tp, time);
 		break;
+	}
 	case TAP_EVENT_TIMEOUT:
 		tp->tap.state = TAP_STATE_IDLE;
 		tp_tap_notify(tp,
 			      tp->tap.saved_release_time,
-			      1,
+			      nfingers_tapped,
 			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
 		tp_tap_notify(tp,
 			      tp->tap.saved_release_time,
-			      1,
+			      nfingers_tapped,
 			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_THUMB:
 		log_tap_bug(tp, t, event);
 		break;
 	case TAP_EVENT_PALM:
+		log_tap_bug(tp, t, event);
+		break;
 	case TAP_EVENT_PALM_UP:
 		break;
 	}
@@ -343,6 +381,7 @@
 		break;
 	case TAP_EVENT_TIMEOUT:
 		tp->tap.state = TAP_STATE_TOUCH_2_HOLD;
+		tp_gesture_tap_timeout(tp, time);
 		break;
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
@@ -351,7 +390,6 @@
 		break;
 	case TAP_EVENT_PALM:
 		tp->tap.state = TAP_STATE_TOUCH;
-		tp_tap_set_timer(tp, time); /* overwrite timer */
 		break;
 	case TAP_EVENT_PALM_UP:
 		break;
@@ -409,11 +447,16 @@
 			      tp->tap.saved_press_time,
 			      2,
 			      LIBINPUT_BUTTON_STATE_PRESSED);
-		tp_tap_notify(tp,
-			      tp->tap.saved_release_time,
-			      2,
-			      LIBINPUT_BUTTON_STATE_RELEASED);
-		tp->tap.state = TAP_STATE_IDLE;
+		if (tp->tap.drag_enabled) {
+			tp->tap.state = TAP_STATE_2FGTAP_TAPPED;
+			tp_tap_set_drag_timer(tp, time, 2);
+		} else {
+			tp_tap_notify(tp,
+				      tp->tap.saved_release_time,
+				      2,
+				      LIBINPUT_BUTTON_STATE_RELEASED);
+			tp->tap.state = TAP_STATE_IDLE;
+		}
 		break;
 	case TAP_EVENT_MOTION:
 		tp_tap_move_to_dead(tp, t);
@@ -438,12 +481,13 @@
 			      1,
 			      LIBINPUT_BUTTON_STATE_PRESSED);
 		if (tp->tap.drag_enabled) {
-			tp->tap.state = TAP_STATE_TAPPED;
-			tp->tap.saved_release_time = time;
-			tp_tap_set_timer(tp, time);
+			/* For a single-finger tap the timer delay is the same
+			 * as for the release of the finger that became a palm,
+			 * no reset necessary */
+			tp->tap.state = TAP_STATE_1FGTAP_TAPPED;
 		} else {
 			tp_tap_notify(tp,
-				      time,
+				      tp->tap.saved_release_time,
 				      1,
 				      LIBINPUT_BUTTON_STATE_RELEASED);
 			tp->tap.state = TAP_STATE_IDLE;
@@ -471,16 +515,12 @@
 	case TAP_EVENT_TIMEOUT:
 		tp->tap.state = TAP_STATE_TOUCH_3_HOLD;
 		tp_tap_clear_timer(tp);
+		tp_gesture_tap_timeout(tp, time);
 		break;
 	case TAP_EVENT_RELEASE:
-		tp->tap.state = TAP_STATE_TOUCH_2_HOLD;
-		if (t->tap.state == TAP_TOUCH_STATE_TOUCH) {
-			tp_tap_notify(tp,
-				      tp->tap.saved_press_time,
-				      3,
-				      LIBINPUT_BUTTON_STATE_PRESSED);
-			tp_tap_notify(tp, time, 3, LIBINPUT_BUTTON_STATE_RELEASED);
-		}
+		tp->tap.state = TAP_STATE_TOUCH_3_RELEASE;
+		tp->tap.saved_release_time = time;
+		tp_tap_set_timer(tp, time);
 		break;
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
@@ -528,19 +568,191 @@
 }
 
 static void
+tp_tap_touch3_release_handle_event(struct tp_dispatch *tp,
+				   struct tp_touch *t,
+				   enum tap_event event, uint64_t time)
+{
+
+	switch (event) {
+	case TAP_EVENT_TOUCH:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp->tap.state = TAP_STATE_TOUCH_3;
+		tp->tap.saved_press_time = time;
+		tp_tap_set_timer(tp, time);
+		break;
+	case TAP_EVENT_RELEASE:
+		tp->tap.state = TAP_STATE_TOUCH_3_RELEASE_2;
+		tp_tap_set_timer(tp, time);
+		break;
+	case TAP_EVENT_MOTION:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_move_to_dead(tp, t);
+		break;
+	case TAP_EVENT_TIMEOUT:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp->tap.state = TAP_STATE_TOUCH_2_HOLD;
+		break;
+	case TAP_EVENT_BUTTON:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp->tap.state = TAP_STATE_DEAD;
+		break;
+	case TAP_EVENT_THUMB:
+		break;
+	case TAP_EVENT_PALM:
+		tp->tap.state = TAP_STATE_TOUCH_2_RELEASE;
+		break;
+	case TAP_EVENT_PALM_UP:
+		break;
+	}
+}
+
+static void
+tp_tap_touch3_release2_handle_event(struct tp_dispatch *tp,
+				    struct tp_touch *t,
+				    enum tap_event event, uint64_t time)
+{
+
+	switch (event) {
+	case TAP_EVENT_TOUCH:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp->tap.state = TAP_STATE_TOUCH_2;
+		tp->tap.saved_press_time = time;
+		tp_tap_set_timer(tp, time);
+		break;
+	case TAP_EVENT_RELEASE:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		if (tp->tap.drag_enabled) {
+			tp->tap.state = TAP_STATE_3FGTAP_TAPPED;
+			tp_tap_set_drag_timer(tp, time, 3);
+		} else {
+			tp_tap_notify(tp,
+				      tp->tap.saved_release_time,
+				      3,
+				      LIBINPUT_BUTTON_STATE_RELEASED);
+			tp->tap.state = TAP_STATE_IDLE;
+		}
+		break;
+	case TAP_EVENT_MOTION:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_move_to_dead(tp, t);
+		break;
+	case TAP_EVENT_TIMEOUT:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp->tap.state = TAP_STATE_HOLD;
+		break;
+	case TAP_EVENT_BUTTON:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      3,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp->tap.state = TAP_STATE_DEAD;
+		break;
+	case TAP_EVENT_THUMB:
+		break;
+	case TAP_EVENT_PALM:
+		tp_tap_notify(tp,
+			      tp->tap.saved_press_time,
+			      2,
+			      LIBINPUT_BUTTON_STATE_PRESSED);
+		if (tp->tap.drag_enabled) {
+			/* Resetting the timer to the appropriate delay
+			 * for a two-finger tap would be ideal, but the
+			 * timestamp of the last real finger release is lost,
+			 * so the in-progress similar delay for release
+			 * of the finger which became a palm instead
+			 * will have to do */
+			tp->tap.state = TAP_STATE_2FGTAP_TAPPED;
+		} else {
+			tp_tap_notify(tp,
+				      tp->tap.saved_release_time,
+				      2,
+				      LIBINPUT_BUTTON_STATE_RELEASED);
+			tp->tap.state = TAP_STATE_IDLE;
+		}
+		break;
+	case TAP_EVENT_PALM_UP:
+		break;
+	}
+}
+
+static void
 tp_tap_dragging_or_doubletap_handle_event(struct tp_dispatch *tp,
 					  struct tp_touch *t,
-					  enum tap_event event, uint64_t time)
+					  enum tap_event event, uint64_t time,
+					  int nfingers_tapped)
 {
 	switch (event) {
-	case TAP_EVENT_TOUCH:
-		tp->tap.state = TAP_STATE_DRAGGING_2;
+	case TAP_EVENT_TOUCH: {
+		tp_tap_notify(tp,
+			      tp->tap.saved_release_time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
+		tp->tap.state = TAP_STATE_TOUCH_2;
+		tp->tap.saved_press_time = time;
+		tp_tap_set_timer(tp, time);
 		break;
+	}
 	case TAP_EVENT_RELEASE:
-		tp->tap.state = TAP_STATE_TAPPED;
+		tp->tap.state = TAP_STATE_1FGTAP_TAPPED;
 		tp_tap_notify(tp,
 			      tp->tap.saved_release_time,
-			      1,
+			      nfingers_tapped,
 			      LIBINPUT_BUTTON_STATE_RELEASED);
 		tp_tap_notify(tp,
 			      tp->tap.saved_press_time,
@@ -550,21 +762,35 @@
 		tp_tap_set_timer(tp, time);
 		break;
 	case TAP_EVENT_MOTION:
-	case TAP_EVENT_TIMEOUT:
-		tp->tap.state = TAP_STATE_DRAGGING;
+	case TAP_EVENT_TIMEOUT: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_DRAGGING,
+			TAP_STATE_2FGTAP_DRAGGING,
+			TAP_STATE_3FGTAP_DRAGGING,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		break;
+	}
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
 		tp_tap_notify(tp,
 			      tp->tap.saved_release_time,
-			      1,
+			      nfingers_tapped,
 			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_THUMB:
 		break;
-	case TAP_EVENT_PALM:
-		tp->tap.state = TAP_STATE_TAPPED;
+	case TAP_EVENT_PALM: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_TAPPED,
+			TAP_STATE_2FGTAP_TAPPED,
+			TAP_STATE_3FGTAP_TAPPED,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		break;
+	}
 	case TAP_EVENT_PALM_UP:
 		break;
 	}
@@ -573,21 +799,35 @@
 static void
 tp_tap_dragging_handle_event(struct tp_dispatch *tp,
 			     struct tp_touch *t,
-			     enum tap_event event, uint64_t time)
+			     enum tap_event event, uint64_t time,
+			     int nfingers_tapped)
 {
 
 	switch (event) {
-	case TAP_EVENT_TOUCH:
-		tp->tap.state = TAP_STATE_DRAGGING_2;
+	case TAP_EVENT_TOUCH: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_DRAGGING_2,
+			TAP_STATE_2FGTAP_DRAGGING_2,
+			TAP_STATE_3FGTAP_DRAGGING_2,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		break;
+	}
 	case TAP_EVENT_RELEASE:
 		if (tp->tap.drag_lock_enabled) {
-			tp->tap.state = TAP_STATE_DRAGGING_WAIT;
-			tp_tap_set_drag_timer(tp, time);
+			enum tp_tap_state dest[3] = {
+				TAP_STATE_1FGTAP_DRAGGING_WAIT,
+				TAP_STATE_2FGTAP_DRAGGING_WAIT,
+				TAP_STATE_3FGTAP_DRAGGING_WAIT,
+			};
+			assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+			tp->tap.state = dest[nfingers_tapped - 1];
+			tp_tap_set_draglock_timer(tp, time);
 		} else {
 			tp_tap_notify(tp,
 				      time,
-				      1,
+				      nfingers_tapped,
 				      LIBINPUT_BUTTON_STATE_RELEASED);
 			tp->tap.state = TAP_STATE_IDLE;
 		}
@@ -598,14 +838,17 @@
 		break;
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
-		tp_tap_notify(tp, time, 1, LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_notify(tp,
+			      time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_THUMB:
 		break;
 	case TAP_EVENT_PALM:
 		tp_tap_notify(tp,
 			      tp->tap.saved_release_time,
-			      1,
+			      nfingers_tapped,
 			      LIBINPUT_BUTTON_STATE_RELEASED);
 		tp->tap.state = TAP_STATE_IDLE;
 		break;
@@ -617,27 +860,43 @@
 static void
 tp_tap_dragging_wait_handle_event(struct tp_dispatch *tp,
 				  struct tp_touch *t,
-				  enum tap_event event, uint64_t time)
+				  enum tap_event event, uint64_t time,
+				  int nfingers_tapped)
 {
 
 	switch (event) {
-	case TAP_EVENT_TOUCH:
-		tp->tap.state = TAP_STATE_DRAGGING_OR_TAP;
+	case TAP_EVENT_TOUCH: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_DRAGGING_OR_TAP,
+			TAP_STATE_2FGTAP_DRAGGING_OR_TAP,
+			TAP_STATE_3FGTAP_DRAGGING_OR_TAP,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		tp_tap_set_timer(tp, time);
 		break;
+	}
 	case TAP_EVENT_RELEASE:
 	case TAP_EVENT_MOTION:
+		log_tap_bug(tp, t, event);
 		break;
 	case TAP_EVENT_TIMEOUT:
 		tp->tap.state = TAP_STATE_IDLE;
-		tp_tap_notify(tp, time, 1, LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_notify(tp,
+			      time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
-		tp_tap_notify(tp, time, 1, LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_notify(tp,
+			      time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_THUMB:
 	case TAP_EVENT_PALM:
+		log_tap_bug(tp, t, event);
 		break;
 	case TAP_EVENT_PALM_UP:
 		break;
@@ -646,36 +905,58 @@
 
 static void
 tp_tap_dragging_tap_handle_event(struct tp_dispatch *tp,
-				  struct tp_touch *t,
-				  enum tap_event event, uint64_t time)
+				 struct tp_touch *t,
+				 enum tap_event event, uint64_t time,
+				 int nfingers_tapped)
 {
 
 	switch (event) {
-	case TAP_EVENT_TOUCH:
-		tp->tap.state = TAP_STATE_DRAGGING_2;
+	case TAP_EVENT_TOUCH: {
+		tp_tap_notify(tp,
+			      time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
 		tp_tap_clear_timer(tp);
+		tp_tap_move_to_dead(tp, t);
 		break;
+	}
 	case TAP_EVENT_RELEASE:
 		tp->tap.state = TAP_STATE_IDLE;
-		tp_tap_notify(tp, time, 1, LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_notify(tp,
+			      time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_MOTION:
-	case TAP_EVENT_TIMEOUT:
-		tp->tap.state = TAP_STATE_DRAGGING;
+	case TAP_EVENT_TIMEOUT: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_DRAGGING,
+			TAP_STATE_2FGTAP_DRAGGING,
+			TAP_STATE_3FGTAP_DRAGGING,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		break;
+	}
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
-		tp_tap_notify(tp, time, 1, LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_notify(tp,
+			      time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_THUMB:
 		break;
-	case TAP_EVENT_PALM:
-		tp_tap_notify(tp,
-			      tp->tap.saved_release_time,
-			      1,
-			      LIBINPUT_BUTTON_STATE_RELEASED);
-		tp->tap.state = TAP_STATE_IDLE;
+	case TAP_EVENT_PALM: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_DRAGGING_WAIT,
+			TAP_STATE_2FGTAP_DRAGGING_WAIT,
+			TAP_STATE_3FGTAP_DRAGGING_WAIT,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		break;
+	}
 	case TAP_EVENT_PALM_UP:
 		break;
 	}
@@ -684,16 +965,27 @@
 static void
 tp_tap_dragging2_handle_event(struct tp_dispatch *tp,
 			      struct tp_touch *t,
-			      enum tap_event event, uint64_t time)
+			      enum tap_event event, uint64_t time,
+			      int nfingers_tapped)
 {
 
 	switch (event) {
-	case TAP_EVENT_RELEASE:
-		tp->tap.state = TAP_STATE_DRAGGING;
+	case TAP_EVENT_RELEASE: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_DRAGGING,
+			TAP_STATE_2FGTAP_DRAGGING,
+			TAP_STATE_3FGTAP_DRAGGING,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		break;
+	}
 	case TAP_EVENT_TOUCH:
 		tp->tap.state = TAP_STATE_DEAD;
-		tp_tap_notify(tp, time, 1, LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_notify(tp,
+			      time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_MOTION:
 	case TAP_EVENT_TIMEOUT:
@@ -701,13 +993,23 @@
 		break;
 	case TAP_EVENT_BUTTON:
 		tp->tap.state = TAP_STATE_DEAD;
-		tp_tap_notify(tp, time, 1, LIBINPUT_BUTTON_STATE_RELEASED);
+		tp_tap_notify(tp,
+			      time,
+			      nfingers_tapped,
+			      LIBINPUT_BUTTON_STATE_RELEASED);
 		break;
 	case TAP_EVENT_THUMB:
 		break;
-	case TAP_EVENT_PALM:
-		tp->tap.state = TAP_STATE_DRAGGING_OR_DOUBLETAP;
+	case TAP_EVENT_PALM: {
+		enum tp_tap_state dest[3] = {
+			TAP_STATE_1FGTAP_DRAGGING,
+			TAP_STATE_2FGTAP_DRAGGING,
+			TAP_STATE_3FGTAP_DRAGGING,
+		};
+		assert(nfingers_tapped >= 1 && nfingers_tapped <= 3);
+		tp->tap.state = dest[nfingers_tapped - 1];
 		break;
+	}
 	case TAP_EVENT_PALM_UP:
 		break;
 	}
@@ -760,8 +1062,14 @@
 	case TAP_STATE_HOLD:
 		tp_tap_hold_handle_event(tp, t, event, time);
 		break;
-	case TAP_STATE_TAPPED:
-		tp_tap_tapped_handle_event(tp, t, event, time);
+	case TAP_STATE_1FGTAP_TAPPED:
+		tp_tap_tapped_handle_event(tp, t, event, time, 1);
+		break;
+	case TAP_STATE_2FGTAP_TAPPED:
+		tp_tap_tapped_handle_event(tp, t, event, time, 2);
+		break;
+	case TAP_STATE_3FGTAP_TAPPED:
+		tp_tap_tapped_handle_event(tp, t, event, time, 3);
 		break;
 	case TAP_STATE_TOUCH_2:
 		tp_tap_touch2_handle_event(tp, t, event, time);
@@ -778,20 +1086,59 @@
 	case TAP_STATE_TOUCH_3_HOLD:
 		tp_tap_touch3_hold_handle_event(tp, t, event, time);
 		break;
-	case TAP_STATE_DRAGGING_OR_DOUBLETAP:
-		tp_tap_dragging_or_doubletap_handle_event(tp, t, event, time);
+	case TAP_STATE_TOUCH_3_RELEASE:
+		tp_tap_touch3_release_handle_event(tp, t, event, time);
+		break;
+	case TAP_STATE_TOUCH_3_RELEASE_2:
+		tp_tap_touch3_release2_handle_event(tp, t, event, time);
+		break;
+	case TAP_STATE_1FGTAP_DRAGGING_OR_DOUBLETAP:
+		tp_tap_dragging_or_doubletap_handle_event(tp, t, event, time,
+							  1);
+		break;
+	case TAP_STATE_2FGTAP_DRAGGING_OR_DOUBLETAP:
+		tp_tap_dragging_or_doubletap_handle_event(tp, t, event, time,
+							  2);
+		break;
+	case TAP_STATE_3FGTAP_DRAGGING_OR_DOUBLETAP:
+		tp_tap_dragging_or_doubletap_handle_event(tp, t, event, time,
+							  3);
+		break;
+	case TAP_STATE_1FGTAP_DRAGGING:
+		tp_tap_dragging_handle_event(tp, t, event, time, 1);
+		break;
+	case TAP_STATE_2FGTAP_DRAGGING:
+		tp_tap_dragging_handle_event(tp, t, event, time, 2);
+		break;
+	case TAP_STATE_3FGTAP_DRAGGING:
+		tp_tap_dragging_handle_event(tp, t, event, time, 3);
 		break;
-	case TAP_STATE_DRAGGING:
-		tp_tap_dragging_handle_event(tp, t, event, time);
+	case TAP_STATE_1FGTAP_DRAGGING_WAIT:
+		tp_tap_dragging_wait_handle_event(tp, t, event, time, 1);
 		break;
-	case TAP_STATE_DRAGGING_WAIT:
-		tp_tap_dragging_wait_handle_event(tp, t, event, time);
+	case TAP_STATE_2FGTAP_DRAGGING_WAIT:
+		tp_tap_dragging_wait_handle_event(tp, t, event, time, 2);
 		break;
-	case TAP_STATE_DRAGGING_OR_TAP:
-		tp_tap_dragging_tap_handle_event(tp, t, event, time);
+	case TAP_STATE_3FGTAP_DRAGGING_WAIT:
+		tp_tap_dragging_wait_handle_event(tp, t, event, time, 3);
 		break;
-	case TAP_STATE_DRAGGING_2:
-		tp_tap_dragging2_handle_event(tp, t, event, time);
+	case TAP_STATE_1FGTAP_DRAGGING_OR_TAP:
+		tp_tap_dragging_tap_handle_event(tp, t, event, time, 1);
+		break;
+	case TAP_STATE_2FGTAP_DRAGGING_OR_TAP:
+		tp_tap_dragging_tap_handle_event(tp, t, event, time, 2);
+		break;
+	case TAP_STATE_3FGTAP_DRAGGING_OR_TAP:
+		tp_tap_dragging_tap_handle_event(tp, t, event, time, 3);
+		break;
+	case TAP_STATE_1FGTAP_DRAGGING_2:
+		tp_tap_dragging2_handle_event(tp, t, event, time, 1);
+		break;
+	case TAP_STATE_2FGTAP_DRAGGING_2:
+		tp_tap_dragging2_handle_event(tp, t, event, time, 2);
+		break;
+	case TAP_STATE_3FGTAP_DRAGGING_2:
+		tp_tap_dragging2_handle_event(tp, t, event, time, 3);
 		break;
 	case TAP_STATE_DEAD:
 		tp_tap_dead_handle_event(tp, t, event, time);
@@ -876,7 +1223,7 @@
 		if (t->tap.is_thumb)
 			continue;
 
-		/* A palm tap needs to be properly relased because we might
+		/* A palm tap needs to be properly released because we might
 		 * be who-knows-where in the state machine. Otherwise, we
 		 * ignore any event from it.
 		 */
@@ -955,9 +1302,15 @@
 	 */
 	switch (tp->tap.state) {
 	case TAP_STATE_TOUCH:
-	case TAP_STATE_TAPPED:
-	case TAP_STATE_DRAGGING_OR_DOUBLETAP:
-	case TAP_STATE_DRAGGING_OR_TAP:
+	case TAP_STATE_1FGTAP_TAPPED:
+	case TAP_STATE_2FGTAP_TAPPED:
+	case TAP_STATE_3FGTAP_TAPPED:
+	case TAP_STATE_1FGTAP_DRAGGING_OR_DOUBLETAP:
+	case TAP_STATE_2FGTAP_DRAGGING_OR_DOUBLETAP:
+	case TAP_STATE_3FGTAP_DRAGGING_OR_DOUBLETAP:
+	case TAP_STATE_1FGTAP_DRAGGING_OR_TAP:
+	case TAP_STATE_2FGTAP_DRAGGING_OR_TAP:
+	case TAP_STATE_3FGTAP_DRAGGING_OR_TAP:
 	case TAP_STATE_TOUCH_2:
 	case TAP_STATE_TOUCH_3:
 		filter_motion = 1;
@@ -1286,10 +1639,31 @@
 tp_tap_dragging(const struct tp_dispatch *tp)
 {
 	switch (tp->tap.state) {
-	case TAP_STATE_DRAGGING:
-	case TAP_STATE_DRAGGING_2:
-	case TAP_STATE_DRAGGING_WAIT:
-	case TAP_STATE_DRAGGING_OR_TAP:
+	case TAP_STATE_1FGTAP_DRAGGING:
+	case TAP_STATE_2FGTAP_DRAGGING:
+	case TAP_STATE_3FGTAP_DRAGGING:
+	case TAP_STATE_1FGTAP_DRAGGING_2:
+	case TAP_STATE_2FGTAP_DRAGGING_2:
+	case TAP_STATE_3FGTAP_DRAGGING_2:
+	case TAP_STATE_1FGTAP_DRAGGING_WAIT:
+	case TAP_STATE_2FGTAP_DRAGGING_WAIT:
+	case TAP_STATE_3FGTAP_DRAGGING_WAIT:
+	case TAP_STATE_1FGTAP_DRAGGING_OR_TAP:
+	case TAP_STATE_2FGTAP_DRAGGING_OR_TAP:
+	case TAP_STATE_3FGTAP_DRAGGING_OR_TAP:
+		return true;
+	default:
+		return false;
+	}
+}
+
+bool
+tp_tap_dragging_or_double_tapping(const struct tp_dispatch *tp)
+{
+	switch (tp->tap.state) {
+	case TAP_STATE_1FGTAP_DRAGGING_OR_DOUBLETAP:
+	case TAP_STATE_2FGTAP_DRAGGING_OR_DOUBLETAP:
+	case TAP_STATE_3FGTAP_DRAGGING_OR_DOUBLETAP:
 		return true;
 	default:
 		return false;
diff -Naur third_party_libinput_bak/src/evdev-mt-touchpad-thumb.c third_party_libinput_new/src/evdev-mt-touchpad-thumb.c
--- third_party_libinput_bak/src/evdev-mt-touchpad-thumb.c	2023-03-28 10:49:58.384608500 +0800
+++ third_party_libinput_new/src/evdev-mt-touchpad-thumb.c	2023-03-29 17:30:11.151333800 +0800
@@ -447,3 +447,19 @@
 			tp->thumb.use_pressure ? ", pressure" : "",
 			tp->thumb.use_size ? ", size" : "");
 }
+
+struct tp_touch*
+tp_thumb_get_touch(struct tp_dispatch *tp)
+{
+	struct tp_touch *thumb;
+
+	if (tp->thumb.index == UINT_MAX)
+		return NULL;
+
+	tp_for_each_touch(tp, thumb) {
+		if (thumb->index == tp->thumb.index)
+			return thumb;
+	}
+
+	return NULL;
+}
diff -Naur third_party_libinput_bak/src/evdev-mt-touchpad.c third_party_libinput_new/src/evdev-mt-touchpad.c
--- third_party_libinput_bak/src/evdev-mt-touchpad.c	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev-mt-touchpad.c	2023-03-29 17:01:46.584642100 +0800
@@ -94,7 +94,9 @@
 }
 
 static inline void
-tp_calculate_motion_speed(struct tp_dispatch *tp, struct tp_touch *t)
+tp_calculate_motion_speed(struct tp_dispatch *tp,
+			  struct tp_touch *t,
+			  uint64_t time)
 {
 	const struct tp_history_point *last;
 	struct device_coords delta;
@@ -129,14 +131,14 @@
 	mm = evdev_device_unit_delta_to_mm(tp->device, &delta);
 
 	distance = length_in_mm(mm);
-	speed = distance/(t->time - last->time); /* mm/us */
+	speed = distance/(time - last->time); /* mm/us */
 	speed *= 1000000; /* mm/s */
 
 	t->speed.last_speed = speed;
 }
 
 static inline void
-tp_motion_history_push(struct tp_touch *t)
+tp_motion_history_push(struct tp_touch *t, uint64_t time)
 {
 	int motion_index = (t->history.index + 1) % TOUCHPAD_HISTORY_LENGTH;
 
@@ -144,7 +146,7 @@
 		t->history.count++;
 
 	t->history.samples[motion_index].point = t->point;
-	t->history.samples[motion_index].time = t->time;
+	t->history.samples[motion_index].time = time;
 	t->history.index = motion_index;
 }
 
@@ -153,7 +155,7 @@
  * human can move like that within thresholds.
  *
  * We encode left moves as zeroes, and right as ones. We also drop
- * the array to all zeroes when contraints are not satisfied. Then we
+ * the array to all zeroes when constraints are not satisfied. Then we
  * search for the pattern {1,0,1}. It can't match {Left, Right, Left},
  * but it does match {Left, Right, Left, Right}, so it's okay.
  *
@@ -201,7 +203,7 @@
 			tp->hysteresis.enabled = true;
 			evdev_log_debug(tp->device,
 					"hysteresis enabled. "
-					"See %stouchpad-jitter.html for details\n",
+					"See %s/touchpad-jitter.html for details\n",
 					HTTP_DOC_LINK);
 		}
 	}
@@ -256,8 +258,9 @@
 
 	if (tp->fake_touches & FAKE_FINGER_OVERFLOW)
 		return FAKE_FINGER_OVERFLOW;
-	else /* don't count BTN_TOUCH */
-		return ffs(tp->fake_touches >> 1);
+
+	/* don't count BTN_TOUCH */
+	return ffs(tp->fake_touches >> 1);
 }
 
 static inline bool
@@ -337,7 +340,6 @@
 	t->palm.state = PALM_NONE;
 	t->state = TOUCH_HOVERING;
 	t->pinned.is_pinned = false;
-	t->time = time;
 	t->speed.last_speed = 0;
 	t->speed.exceeded_count = 0;
 	t->hysteresis.x_motion_history = 0;
@@ -349,7 +351,6 @@
 {
 	t->dirty = true;
 	t->state = TOUCH_BEGIN;
-	t->time = time;
 	t->initial_time = time;
 	t->was_down = true;
 	tp->nfingers_down++;
@@ -432,7 +433,6 @@
 	t->palm.state = PALM_NONE;
 	t->state = TOUCH_END;
 	t->pinned.is_pinned = false;
-	t->time = time;
 	t->palm.time = 0;
 	t->speed.exceeded_count = 0;
 	tp->queued |= TOUCHPAD_EVENT_MOTION;
@@ -509,7 +509,6 @@
 						  e->code,
 						  e->value);
 		t->point.x = rotated(tp, e->code, e->value);
-		t->time = time;
 		t->dirty = true;
 		tp->queued |= TOUCHPAD_EVENT_MOTION;
 		break;
@@ -518,7 +517,6 @@
 						  e->code,
 						  e->value);
 		t->point.y = rotated(tp, e->code, e->value);
-		t->time = time;
 		t->dirty = true;
 		tp->queued |= TOUCHPAD_EVENT_MOTION;
 		break;
@@ -537,13 +535,11 @@
 		break;
 	case ABS_MT_PRESSURE:
 		t->pressure = e->value;
-		t->time = time;
 		t->dirty = true;
 		tp->queued |= TOUCHPAD_EVENT_OTHERAXIS;
 		break;
 	case ABS_MT_TOOL_TYPE:
 		t->is_tool_palm = e->value == MT_TOOL_PALM;
-		t->time = time;
 		t->dirty = true;
 		tp->queued |= TOUCHPAD_EVENT_OTHERAXIS;
 		break;
@@ -573,7 +569,6 @@
 						  e->code,
 						  e->value);
 		t->point.x = rotated(tp, e->code, e->value);
-		t->time = time;
 		t->dirty = true;
 		tp->queued |= TOUCHPAD_EVENT_MOTION;
 		break;
@@ -582,13 +577,11 @@
 						  e->code,
 						  e->value);
 		t->point.y = rotated(tp, e->code, e->value);
-		t->time = time;
 		t->dirty = true;
 		tp->queued |= TOUCHPAD_EVENT_MOTION;
 		break;
 	case ABS_PRESSURE:
 		t->pressure = e->value;
-		t->time = time;
 		t->dirty = true;
 		tp->queued |= TOUCHPAD_EVENT_OTHERAXIS;
 		break;
@@ -610,7 +603,7 @@
 	    (tp->nfingers_down == tp->num_slots && nfake_touches == tp->num_slots))
 		return;
 
-	/* Synaptics devices may end touch 2 on transition to/fro
+	/* Synaptics devices may end touch 2 on transition to/from
 	 * BTN_TOOL_TRIPLETAP and start it again on the next frame with
 	 * different coordinates (bz#91352, gitlab#434). We search the
 	 * touches we have, if there is one that has just ended despite us
@@ -898,7 +891,9 @@
 		t->palm.state = PALM_TYPING;
 		t->palm.first = t->point;
 		return true;
-	} else if (!tp->dwt.keyboard_active &&
+	}
+
+	if (!tp->dwt.keyboard_active &&
 		   t->state == TOUCH_UPDATE &&
 		   t->palm.state == PALM_TYPING) {
 		/* If a touch has started before the first or after the last
@@ -932,7 +927,9 @@
 	    tp->palm.trackpoint_active) {
 		t->palm.state = PALM_TRACKPOINT;
 		return true;
-	} else if (t->palm.state == PALM_TRACKPOINT &&
+	}
+
+	if (t->palm.state == PALM_TRACKPOINT &&
 		   t->state == TOUCH_UPDATE &&
 		   !tp->palm.trackpoint_active) {
 
@@ -1074,7 +1071,9 @@
 				  t->index);
 		}
 		return false;
-	} else if (tp_palm_detect_multifinger(tp, t, time)) {
+	}
+
+	if (tp_palm_detect_multifinger(tp, t, time)) {
 		return false;
 	}
 
@@ -1527,10 +1526,10 @@
 	if (tp->device->model_flags & EVDEV_MODEL_TEST_DEVICE)
 		reference_interval = tdelta;
 
-	/* If the last frame is more than 25ms ago, we have irregular
+	/* If the last frame is more than 30ms ago, we have irregular
 	 * frames, who knows what's a pointer jump here and what's
 	 * legitimate movement.... */
-	if (tdelta > 2 * reference_interval || tdelta == 0)
+	if (tdelta > 2.5 * reference_interval || tdelta == 0)
 		return false;
 
 	/* We historically expected ~12ms frame intervals, so the numbers
@@ -1632,7 +1631,7 @@
 		   SYN_REPORT +8ms
 
 	   Our approach is to detect the 0 timestamp, check the interval on
-	   the next event and then calculate the movement for one fictious
+	   the next event and then calculate the movement for one fictitious
 	   event instead, swallowing all other movements. So if the time
 	   delta is equivalent to 10 events and the movement is x, we
 	   instead pretend there was movement of x/10.
@@ -1739,6 +1738,12 @@
 
 			speed_exceeded_count = max(speed_exceeded_count,
 						   t->speed.exceeded_count);
+
+			/* A touch that hasn't moved must be in the same
+			 * position, so let's add this to the motion
+			 * history.
+			 */
+			tp_motion_history_push(t, time);
 			continue;
 		}
 
@@ -1747,7 +1752,7 @@
 				evdev_log_bug_kernel_ratelimit(tp->device,
 						&tp->jump.warning,
 					        "Touch jump detected and discarded.\n"
-					        "See %stouchpad-jumping-cursors.html for details\n",
+					        "See %s/touchpad-jumping-cursors.html for details\n",
 					        HTTP_DOC_LINK);
 			tp_motion_history_reset(t);
 		}
@@ -1756,7 +1761,7 @@
 		tp_palm_detect(tp, t, time);
 		tp_detect_wobbling(tp, t, time);
 		tp_motion_hysteresis(tp, t);
-		tp_motion_history_push(t);
+		tp_motion_history_push(t, time);
 
 		/* Touch speed handling: if we'are above the threshold,
 		 * count each event that we're over the threshold up to 10
@@ -1780,7 +1785,7 @@
 		speed_exceeded_count = max(speed_exceeded_count,
 					   t->speed.exceeded_count);
 
-		tp_calculate_motion_speed(tp, t);
+		tp_calculate_motion_speed(tp, t, time);
 
 		tp_unpin_finger(tp, t);
 
@@ -1850,7 +1855,7 @@
 static void
 tp_post_events(struct tp_dispatch *tp, uint64_t time)
 {
-	int filter_motion = 0;
+	bool ignore_motion = false;
 
 	/* Only post (top) button events while suspended */
 	if (tp->device->is_suspended) {
@@ -1858,21 +1863,26 @@
 		return;
 	}
 
-	filter_motion |= tp_tap_handle_state(tp, time);
-	filter_motion |= tp_post_button_events(tp, time);
+	ignore_motion |= tp_tap_handle_state(tp, time);
+	ignore_motion |= tp_post_button_events(tp, time);
 
-	if (filter_motion ||
-	    tp->palm.trackpoint_active ||
-	    tp->dwt.keyboard_active) {
+	if (tp->palm.trackpoint_active || tp->dwt.keyboard_active) {
 		tp_edge_scroll_stop_events(tp, time);
 		tp_gesture_cancel(tp, time);
 		return;
 	}
 
+	if (ignore_motion) {
+		tp_edge_scroll_stop_events(tp, time);
+		tp_gesture_cancel_motion_gestures(tp, time);
+		tp_gesture_post_events(tp, time, true);
+		return;
+	}
+
 	if (tp_edge_scroll_post_events(tp, time) != 0)
 		return;
 
-	tp_gesture_post_events(tp, time);
+	tp_gesture_post_events(tp, time, false);
 }
 
 static void
@@ -1989,9 +1999,15 @@
 tp_interface_remove(struct evdev_dispatch *dispatch)
 {
 	struct tp_dispatch *tp = tp_dispatch(dispatch);
+	struct evdev_paired_keyboard *kbd;
 
 	libinput_timer_cancel(&tp->arbitration.arbitration_timer);
 
+	list_for_each_safe(kbd, &tp->dwt.paired_keyboard_list, link) {
+		evdev_paired_keyboard_destroy(kbd);
+	}
+	tp->dwt.keyboard_active = false;
+
 	tp_remove_tap(tp);
 	tp_remove_buttons(tp);
 	tp_remove_sendevents(tp);
@@ -2009,6 +2025,7 @@
 	libinput_timer_destroy(&tp->dwt.keyboard_timer);
 	libinput_timer_destroy(&tp->tap.timer);
 	libinput_timer_destroy(&tp->gesture.finger_count_switch_timer);
+	libinput_timer_destroy(&tp->gesture.hold_timer);
 	free(tp->touches);
 	free(tp);
 }
@@ -2340,7 +2357,8 @@
 	   considered a happy couple */
 	if (touchpad->tags & EVDEV_TAG_EXTERNAL_TOUCHPAD)
 		return vendor_tp == vendor_kbd && product_tp == product_kbd;
-	else if (keyboard->tags & EVDEV_TAG_INTERNAL_KEYBOARD)
+
+	if (keyboard->tags & EVDEV_TAG_INTERNAL_KEYBOARD)
 		return true;
 
 	/* keyboard is not tagged as internal keyboard and it's not part of
@@ -2388,14 +2406,13 @@
 			struct evdev_device *trackpoint)
 {
 	struct tp_dispatch *tp = (struct tp_dispatch*)touchpad->dispatch;
-	unsigned int bus_tp = libevdev_get_id_bustype(touchpad->evdev),
-		     bus_trp = libevdev_get_id_bustype(trackpoint->evdev);
+	unsigned int bus_trp = libevdev_get_id_bustype(trackpoint->evdev);
 	bool tp_is_internal, trp_is_internal;
 
 	if ((trackpoint->tags & EVDEV_TAG_TRACKPOINT) == 0)
 		return;
 
-	tp_is_internal = bus_tp != BUS_USB && bus_tp != BUS_BLUETOOTH;
+	tp_is_internal = !!(touchpad->tags & EVDEV_TAG_INTERNAL_TOUCHPAD);
 	trp_is_internal = bus_trp != BUS_USB && bus_trp != BUS_BLUETOOTH;
 
 	if (tp->buttons.trackpoint == NULL &&
@@ -2606,7 +2623,7 @@
 			    struct evdev_device *removed_device)
 {
 	struct tp_dispatch *tp = (struct tp_dispatch*)device->dispatch;
-	struct evdev_paired_keyboard *kbd, *tmp;
+	struct evdev_paired_keyboard *kbd;
 
 	if (removed_device == tp->buttons.trackpoint) {
 		/* Clear any pending releases for the trackpoint */
@@ -2620,7 +2637,7 @@
 		tp->buttons.trackpoint = NULL;
 	}
 
-	list_for_each_safe(kbd, tmp, &tp->dwt.paired_keyboard_list, link) {
+	list_for_each_safe(kbd, &tp->dwt.paired_keyboard_list, link) {
 		if (kbd->device == removed_device) {
 			evdev_paired_keyboard_destroy(kbd);
 			tp->dwt.keyboard_active = false;
@@ -2697,35 +2714,30 @@
 		if (streq(prop, "internal")) {
 			evdev_tag_touchpad_internal(device);
 			return;
-		} else if (streq(prop, "external")) {
+		}
+
+		if (streq(prop, "external")) {
 			evdev_tag_touchpad_external(device);
 			return;
-		} else {
-			evdev_log_info(device,
-				       "tagged with unknown value %s\n",
-				       prop);
 		}
+
+		evdev_log_info(device,
+			       "tagged with unknown value %s\n",
+			       prop);
 	}
 
 	/* The hwdb is the authority on integration, these heuristics are
 	 * the fallback only (they precede the hwdb too).
 	 *
-	 * Simple approach: USB is unknown, with the exception
-	 * of Apple where internal touchpads are connected over USB and it
-	 * doesn't have external USB touchpads anyway.
-	 *
+	 * Simple approach:
 	 * Bluetooth touchpads are considered external, anything else is
-	 * internal.
+	 * internal. Except the ones from some vendors that only make external
+	 * touchpads.
 	 */
 	bustype = libevdev_get_id_bustype(device->evdev);
 	vendor = libevdev_get_id_vendor(device->evdev);
 
 	switch (bustype) {
-	case BUS_USB:
-		if (evdev_device_has_model_quirk(device,
-						 QUIRK_MODEL_APPLE_TOUCHPAD))
-			 evdev_tag_touchpad_internal(device);
-		break;
 	case BUS_BLUETOOTH:
 		evdev_tag_touchpad_external(device);
 		break;
@@ -2963,7 +2975,7 @@
 	 * Normalize motion events to the default mouse DPI as base
 	 * (unaccelerated) speed. This also evens out any differences in x
 	 * and y resolution, so that a circle on the
-	 * touchpad does not turn into an elipse on the screen.
+	 * touchpad does not turn into an ellipse on the screen.
 	 */
 	tp->accel.x_scale_coeff = (DEFAULT_MOUSE_DPI/25.4) / res_x;
 	tp->accel.y_scale_coeff = (DEFAULT_MOUSE_DPI/25.4) / res_y;
@@ -3231,8 +3243,6 @@
 	tp->dwt.config.get_default_enabled = tp_dwt_config_get_default;
 	tp->dwt.dwt_enabled = tp_dwt_default_enabled(tp);
 	device->base.config.dwt = &tp->dwt.config;
-
-	return;
 }
 
 static inline void
@@ -3486,7 +3496,7 @@
 	if (tp->hysteresis.enabled)
 		evdev_log_debug(tp->device,
 				"hysteresis enabled. "
-				"See %stouchpad-jitter.html for details\n",
+				"See %s/touchpad-jitter.html for details\n",
 				HTTP_DOC_LINK);
 }
 
@@ -3602,6 +3612,26 @@
 	return rc;
 }
 
+static void
+tp_init_pressurepad(struct tp_dispatch *tp,
+		    struct evdev_device *device)
+{
+	/* On traditional touchpads, the pressure value equals contact
+	 * size. On PressurePads, pressure is a real physical axis for the
+	 * force down. So we disable it here because we don't do anything
+	 * with it anyway and using it for touch size messes things up.
+	 *
+	 * The kernel/udev set the resolution to non-zero on those devices
+	 * to indicate that the value is in a known axis space.
+	 *
+	 * See also #562
+	 */
+	if (libevdev_get_abs_resolution(device->evdev, ABS_MT_PRESSURE) != 0) {
+		libevdev_disable_event_code(device->evdev, EV_ABS, ABS_MT_PRESSURE);
+		libevdev_disable_event_code(device->evdev, EV_ABS, ABS_PRESSURE);
+	}
+}
+
 static int
 tp_init(struct tp_dispatch *tp,
 	struct evdev_device *device)
@@ -3617,18 +3647,20 @@
 		return false;
 
 	tp_init_default_resolution(tp, device);
+	tp_init_pressurepad(tp, device);
 
 	if (!tp_init_slots(tp, device))
 		return false;
 
+
 	evdev_device_init_abs_range_warnings(device);
 	use_touch_size = tp_init_touch_size(tp, device);
 
 	if (!use_touch_size)
 		tp_init_pressure(tp, device);
 
-	/* 5 warnings per 2 hours should be enough */
-	ratelimit_init(&tp->jump.warning, s2us(2 * 60 * 60), 5);
+	/* 5 warnings per 24 hours should be enough */
+	ratelimit_init(&tp->jump.warning, h2us(24), 5);
 
 	/* Set the dpi to that of the x axis, because that's what we normalize
 	   to when needed*/
diff -Naur third_party_libinput_bak/src/evdev-mt-touchpad.h third_party_libinput_new/src/evdev-mt-touchpad.h
--- third_party_libinput_bak/src/evdev-mt-touchpad.h	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev-mt-touchpad.h	2023-03-29 17:02:37.597339400 +0800
@@ -106,17 +106,31 @@
 	TAP_STATE_IDLE = 4,
 	TAP_STATE_TOUCH,
 	TAP_STATE_HOLD,
-	TAP_STATE_TAPPED,
+	TAP_STATE_1FGTAP_TAPPED,
+	TAP_STATE_2FGTAP_TAPPED,
+	TAP_STATE_3FGTAP_TAPPED,
 	TAP_STATE_TOUCH_2,
 	TAP_STATE_TOUCH_2_HOLD,
 	TAP_STATE_TOUCH_2_RELEASE,
 	TAP_STATE_TOUCH_3,
 	TAP_STATE_TOUCH_3_HOLD,
-	TAP_STATE_DRAGGING_OR_DOUBLETAP,
-	TAP_STATE_DRAGGING_OR_TAP,
-	TAP_STATE_DRAGGING,
-	TAP_STATE_DRAGGING_WAIT,
-	TAP_STATE_DRAGGING_2,
+	TAP_STATE_TOUCH_3_RELEASE,
+	TAP_STATE_TOUCH_3_RELEASE_2,
+	TAP_STATE_1FGTAP_DRAGGING_OR_DOUBLETAP,
+	TAP_STATE_2FGTAP_DRAGGING_OR_DOUBLETAP,
+	TAP_STATE_3FGTAP_DRAGGING_OR_DOUBLETAP,
+	TAP_STATE_1FGTAP_DRAGGING_OR_TAP,
+	TAP_STATE_2FGTAP_DRAGGING_OR_TAP,
+	TAP_STATE_3FGTAP_DRAGGING_OR_TAP,
+	TAP_STATE_1FGTAP_DRAGGING,
+	TAP_STATE_2FGTAP_DRAGGING,
+	TAP_STATE_3FGTAP_DRAGGING,
+	TAP_STATE_1FGTAP_DRAGGING_WAIT,
+	TAP_STATE_2FGTAP_DRAGGING_WAIT,
+	TAP_STATE_3FGTAP_DRAGGING_WAIT,
+	TAP_STATE_1FGTAP_DRAGGING_2,
+	TAP_STATE_2FGTAP_DRAGGING_2,
+	TAP_STATE_3FGTAP_DRAGGING_2,
 	TAP_STATE_DEAD, /**< finger count exceeded */
 };
 
@@ -143,6 +157,9 @@
 enum tp_gesture_state {
 	GESTURE_STATE_NONE,
 	GESTURE_STATE_UNKNOWN,
+	GESTURE_STATE_HOLD,
+	GESTURE_STATE_HOLD_AND_MOTION,
+	GESTURE_STATE_POINTER_MOTION,
 	GESTURE_STATE_SCROLL,
 	GESTURE_STATE_PINCH,
 	GESTURE_STATE_SWIPE,
@@ -171,7 +188,6 @@
 	bool has_ended;				/* TRACKING_ID == -1 */
 	bool dirty;
 	struct device_coords point;
-	uint64_t time;
 	uint64_t initial_time;
 	int pressure;
 	bool is_tool_palm; /* MT_TOOL_PALM */
@@ -332,6 +348,7 @@
 	} accel;
 
 	struct {
+		struct libinput_device_config_gesture config;
 		bool enabled;
 		bool started;
 		unsigned int finger_count;
@@ -344,6 +361,8 @@
 		double prev_scale;
 		double angle;
 		struct device_float_coords center;
+		struct libinput_timer hold_timer;
+		bool hold_enabled;
 	} gesture;
 
 	struct {
@@ -640,7 +659,7 @@
 
 void
 tp_release_all_taps(struct tp_dispatch *tp,
-		    uint64_t time);
+		    uint64_t now);
 
 void
 tp_tap_suspend(struct tp_dispatch *tp, uint64_t time);
@@ -651,6 +670,9 @@
 bool
 tp_tap_dragging(const struct tp_dispatch *tp);
 
+bool
+tp_tap_dragging_or_double_tapping(const struct tp_dispatch *tp);
+
 void
 tp_edge_scroll_init(struct tp_dispatch *tp, struct evdev_device *device);
 
@@ -686,14 +708,21 @@
 tp_gesture_cancel(struct tp_dispatch *tp, uint64_t time);
 
 void
+tp_gesture_cancel_motion_gestures(struct tp_dispatch *tp, uint64_t time);
+
+void
 tp_gesture_handle_state(struct tp_dispatch *tp, uint64_t time);
 
 void
-tp_gesture_post_events(struct tp_dispatch *tp, uint64_t time);
+tp_gesture_post_events(struct tp_dispatch *tp, uint64_t time,
+		       bool ignore_motion);
 
 void
 tp_gesture_stop_twofinger_scroll(struct tp_dispatch *tp, uint64_t time);
 
+void
+tp_gesture_tap_timeout(struct tp_dispatch *tp, uint64_t time);
+
 bool
 tp_palm_tap_is_palm(const struct tp_dispatch *tp, const struct tp_touch *t);
 
@@ -730,4 +759,7 @@
 void
 tp_init_thumb(struct tp_dispatch *tp);
 
+struct tp_touch*
+tp_thumb_get_touch(struct tp_dispatch *tp);
+
 #endif
diff -Naur third_party_libinput_bak/src/evdev-tablet-pad-leds.c third_party_libinput_new/src/evdev-tablet-pad-leds.c
--- third_party_libinput_bak/src/evdev-tablet-pad-leds.c	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev-tablet-pad-leds.c	2023-03-29 18:07:03.869966400 +0800
@@ -132,7 +132,7 @@
 	if (rc == -1)
 		goto error;
 
-	fd = open_restricted(libinput, path, O_RDONLY);
+	fd = open_restricted(libinput, path, O_RDONLY | O_NONBLOCK | O_CLOEXEC);
 	if (fd < 0) {
 		errno = -fd;
 		goto error;
@@ -151,13 +151,13 @@
 pad_led_group_destroy(struct libinput_tablet_pad_mode_group *g)
 {
 	struct pad_led_group *group = (struct pad_led_group *)g;
-	struct pad_mode_toggle_button *button, *tmp;
-	struct pad_mode_led *led, *tmpled;
+	struct pad_mode_toggle_button *button;
+	struct pad_mode_led *led;
 
-	list_for_each_safe(button, tmp, &group->toggle_button_list, link)
+	list_for_each_safe(button, &group->toggle_button_list, link)
 		pad_mode_toggle_button_destroy(button);
 
-	list_for_each_safe(led, tmpled, &group->led_list, link)
+	list_for_each_safe(led, &group->led_list, link)
 		pad_led_destroy(g->device->seat->libinput, led);
 
 	free(group);
@@ -577,9 +577,9 @@
 void
 pad_destroy_leds(struct pad_dispatch *pad)
 {
-	struct libinput_tablet_pad_mode_group *group, *tmpgrp;
+	struct libinput_tablet_pad_mode_group *group;
 
-	list_for_each_safe(group, tmpgrp, &pad->modes.mode_group_list, link)
+	list_for_each_safe(group, &pad->modes.mode_group_list, link)
 		libinput_tablet_pad_mode_group_unref(group);
 }
 
diff -Naur third_party_libinput_bak/src/evdev-tablet-pad.c third_party_libinput_new/src/evdev-tablet-pad.c
--- third_party_libinput_bak/src/evdev-tablet-pad.c	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev-tablet-pad.c	2023-03-29 17:35:55.992605500 +0800
@@ -550,7 +550,7 @@
 			       struct evdev_device *device)
 {
 	bool rc = false;
-#if HAVE_LIBWACOM_GET_BUTTON_EVDEV_CODE
+#if HAVE_LIBWACOM
 	struct libinput *li = pad_libinput_context(pad);
 	WacomDeviceDatabase *db = NULL;
 	WacomDevice *tablet = NULL;
diff -Naur third_party_libinput_bak/src/evdev-tablet-pad.h third_party_libinput_new/src/evdev-tablet-pad.h
--- third_party_libinput_bak/src/evdev-tablet-pad.h	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev-tablet-pad.h	2023-03-29 17:37:05.019709500 +0800
@@ -103,6 +103,6 @@
 pad_destroy_leds(struct pad_dispatch *pad);
 void
 pad_button_update_mode(struct libinput_tablet_pad_mode_group *g,
-		       unsigned int pressed_button,
+		       unsigned int button_index,
 		       enum libinput_button_state state);
 #endif
diff -Naur third_party_libinput_bak/src/evdev-tablet.c third_party_libinput_new/src/evdev-tablet.c
--- third_party_libinput_bak/src/evdev-tablet.c	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev-tablet.c	2023-03-29 17:30:37.291007300 +0800
@@ -89,7 +89,7 @@
 static inline size_t
 tablet_history_size(const struct tablet_dispatch *tablet)
 {
-	return ARRAY_LENGTH(tablet->history.samples);
+	return tablet->history.size;
 }
 
 static inline void
@@ -365,16 +365,16 @@
 	 *
 	 * This means that there is a small range (lower-upper) where
 	 * different physical pressure (default: 1-5%) result in the same
-	 * logical pressure. This is, hopefully, not noticable.
+	 * logical pressure. This is, hopefully, not noticeable.
 	 *
 	 * Note that that lower-upper range gives us a negative pressure, so
 	 * we have to clip to 0 for those.
 	 */
 
-	if (tool->has_pressure_offset)
-		offset = tool->pressure_offset;
+	if (tool->pressure.has_offset)
+		offset = tool->pressure.offset;
 	else
-		offset = tool->pressure_threshold.upper;
+		offset = tool->pressure.threshold.upper;
 	range = absinfo->maximum - offset;
 	value = (absinfo->value - offset) / range;
 
@@ -1081,8 +1081,8 @@
 	struct quirk_range r;
 	int lo = 0, hi = 1;
 
-	tool->pressure_offset = 0;
-	tool->has_pressure_offset = false;
+	tool->pressure.offset = 0;
+	tool->pressure.has_offset = false;
 
 	pressure = libevdev_get_abs_info(device->evdev, ABS_PRESSURE);
 	if (!pressure)
@@ -1091,7 +1091,7 @@
 	quirks = evdev_libinput_context(device)->quirks;
 	q = quirks_fetch_for_device(quirks, device->udev_device);
 
-	tool->pressure_offset = pressure->minimum;
+	tool->pressure.offset = pressure->minimum;
 
 	/* 5 and 1% of the pressure range */
 	hi = axis_range_percentage(pressure, 5);
@@ -1107,8 +1107,8 @@
 		}
 	}
 out:
-	tool->pressure_threshold.upper = hi;
-	tool->pressure_threshold.lower = lo;
+	tool->pressure.threshold.upper = hi;
+	tool->pressure.threshold.lower = lo;
 
 	quirks_unref(q);
 }
@@ -1194,8 +1194,10 @@
 	size_t nbits = 8 * sizeof(buttons->bits);
 	enum libinput_tablet_tool_tip_state tip_state;
 
-	tip_state = tablet_has_status(tablet, TABLET_TOOL_IN_CONTACT) ?
-			LIBINPUT_TABLET_TOOL_TIP_DOWN : LIBINPUT_TABLET_TOOL_TIP_UP;
+	if (tablet_has_status(tablet, TABLET_TOOL_IN_CONTACT))
+		tip_state = LIBINPUT_TABLET_TOOL_TIP_DOWN;
+	else
+		tip_state = LIBINPUT_TABLET_TOOL_TIP_UP;
 
 	for (i = 0; i < nbits; i++) {
 		if (!bit_is_set(buttons->bits, i))
@@ -1251,7 +1253,7 @@
 	    !bit_is_set(tablet->changed_axes, LIBINPUT_TABLET_TOOL_AXIS_PRESSURE))
 		return;
 
-	tool_in_contact = (pressure->value > tool->pressure_offset);
+	tool_in_contact = (pressure->value > tool->pressure.offset);
 
 	/* Keep distance and pressure mutually exclusive */
 	if (distance &&
@@ -1324,9 +1326,9 @@
 	 * higher-than-needed pressure offset and then we'd be tied into a
 	 * high pressure offset for the rest of the session.
 	 */
-	if (tool->has_pressure_offset) {
-		if (offset < tool->pressure_offset)
-			tool->pressure_offset = offset;
+	if (tool->pressure.has_offset) {
+		if (offset < tool->pressure.offset)
+			tool->pressure.offset = offset;
 		return;
 	}
 
@@ -1345,7 +1347,7 @@
 	if (offset > axis_range_percentage(pressure, 20)) {
 		evdev_log_error(device,
 			 "Ignoring pressure offset greater than 20%% detected on tool %s (serial %#x). "
-			 "See %stablet-support.html\n",
+			 "See %s/tablet-support.html\n",
 			 tablet_tool_type_to_string(tool->type),
 			 tool->serial,
 			 HTTP_DOC_LINK);
@@ -1354,13 +1356,13 @@
 
 	evdev_log_info(device,
 		 "Pressure offset detected on tool %s (serial %#x).  "
-		 "See %stablet-support.html\n",
+		 "See %s/tablet-support.html\n",
 		 tablet_tool_type_to_string(tool->type),
 		 tool->serial,
 		 HTTP_DOC_LINK);
-	tool->pressure_offset = offset;
-	tool->has_pressure_offset = true;
-	tool->pressure_threshold.lower = pressure->minimum;
+	tool->pressure.offset = offset;
+	tool->pressure.has_offset = true;
+	tool->pressure.threshold.lower = pressure->minimum;
 }
 
 static void
@@ -1391,13 +1393,13 @@
 	}
 	pressure = p->value;
 
-	if (tool->has_pressure_offset)
-		pressure -= (tool->pressure_offset - p->minimum);
+	if (tool->pressure.has_offset)
+		pressure -= (tool->pressure.offset - p->minimum);
 
-	if (pressure <= tool->pressure_threshold.lower &&
+	if (pressure <= tool->pressure.threshold.lower &&
 	    tablet_has_status(tablet, TABLET_TOOL_IN_CONTACT)) {
 		tablet_set_status(tablet, TABLET_TOOL_LEAVING_CONTACT);
-	} else if (pressure >= tool->pressure_threshold.upper &&
+	} else if (pressure >= tool->pressure.threshold.upper &&
 		   !tablet_has_status(tablet, TABLET_TOOL_IN_CONTACT)) {
 		tablet_set_status(tablet, TABLET_TOOL_ENTERING_CONTACT);
 	}
@@ -1705,7 +1707,7 @@
 		 */
 		axes = tablet->axes;
 
-		/* Dont' send an axis event, but we may have a tip event
+		/* Don't send an axis event, but we may have a tip event
 		 * update */
 		tablet_unset_status(tablet, TABLET_AXES_UPDATED);
 	} else {
@@ -2096,13 +2098,13 @@
 tablet_destroy(struct evdev_dispatch *dispatch)
 {
 	struct tablet_dispatch *tablet = tablet_dispatch(dispatch);
-	struct libinput_tablet_tool *tool, *tmp;
+	struct libinput_tablet_tool *tool;
 	struct libinput *li = tablet_libinput_context(tablet);
 
 	libinput_timer_cancel(&tablet->quirks.prox_out_timer);
 	libinput_timer_destroy(&tablet->quirks.prox_out_timer);
 
-	list_for_each_safe(tool, tmp, &tablet->tool_list, link) {
+	list_for_each_safe(tool, &tablet->tool_list, link) {
 		libinput_tablet_tool_unref(tool);
 	}
 
@@ -2343,6 +2345,78 @@
 }
 
 static bool
+tablet_is_aes(struct evdev_device *device,
+	      struct tablet_dispatch *tablet)
+{
+	bool is_aes = false;
+#if HAVE_LIBWACOM
+	const char *devnode;
+	WacomDeviceDatabase *db;
+	WacomDevice *libwacom_device = NULL;
+	const int *stylus_ids;
+	int nstyli;
+	int vid = evdev_device_get_id_vendor(device);
+
+	/* Wacom-specific check for whether smoothing is required:
+	 * libwacom keeps all the AES pens in a single group, so any device
+	 * that supports AES pens will list all AES pens. 0x11 is one of the
+	 * lenovo pens so we use that as the flag of whether the tablet
+	 * is an AES tablet
+	 */
+	if (vid != VENDOR_ID_WACOM)
+		goto out;
+
+	db = tablet_libinput_context(tablet)->libwacom.db;
+	if (!db)
+		goto out;
+
+	devnode = udev_device_get_devnode(device->udev_device);
+	libwacom_device = libwacom_new_from_path(db, devnode, WFALLBACK_NONE, NULL);
+	if (!libwacom_device)
+		goto out;
+
+	stylus_ids = libwacom_get_supported_styli(libwacom_device, &nstyli);
+	for (int i = 0; i < nstyli; i++) {
+		if (stylus_ids[i] == 0x11) {
+			is_aes = true;
+			break;
+		}
+	}
+
+	libwacom_destroy(libwacom_device);
+
+out:
+#endif
+	return is_aes;
+}
+
+static void
+tablet_init_smoothing(struct evdev_device *device,
+		      struct tablet_dispatch *tablet)
+{
+	size_t history_size = ARRAY_LENGTH(tablet->history.samples);
+	struct quirks_context *quirks = NULL;
+	struct quirks *q = NULL;
+	bool use_smoothing = true;
+
+	quirks = evdev_libinput_context(device)->quirks;
+	q = quirks_fetch_for_device(quirks, device->udev_device);
+
+	/* By default, always enable smoothing except on AES devices.
+	 * AttrTabletSmoothing can override this, if necessary.
+	 */
+	if (!q || !quirks_get_bool(q, QUIRK_ATTR_TABLET_SMOOTHING, &use_smoothing))
+		use_smoothing = !tablet_is_aes(device, tablet);
+
+	/* Setting the history size to 1 means we never do any actual smoothing. */
+	if (!use_smoothing)
+		history_size = 1;
+
+	quirks_unref(q);
+	tablet->history.size = history_size;
+}
+
+static bool
 tablet_reject_device(struct evdev_device *device)
 {
 	struct libevdev *evdev = device->evdev;
@@ -2406,6 +2480,7 @@
 
 	evdev_init_sendevents(device, &tablet->base);
 	tablet_init_left_handed(device);
+	tablet_init_smoothing(device, tablet);
 
 	for (axis = LIBINPUT_TABLET_TOOL_AXIS_X;
 	     axis <= LIBINPUT_TABLET_TOOL_AXIS_MAX;
diff -Naur third_party_libinput_bak/src/evdev-tablet.h third_party_libinput_new/src/evdev-tablet.h
--- third_party_libinput_bak/src/evdev-tablet.h	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev-tablet.h	2023-03-29 17:30:45.922909900 +0800
@@ -64,6 +64,7 @@
 		unsigned int index;
 		unsigned int count;
 		struct tablet_axes samples[TABLET_HISTORY_LENGTH];
+		size_t size;
 	} history;
 
 	unsigned char axis_caps[NCHARS(LIBINPUT_TABLET_TOOL_AXIS_MAX + 1)];
diff -Naur third_party_libinput_bak/src/evdev-totem.c third_party_libinput_new/src/evdev-totem.c
--- third_party_libinput_bak/src/evdev-totem.c	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev-totem.c	2023-03-30 08:59:48.544591300 +0800
@@ -88,10 +88,10 @@
 		.refcount = 1,
 	};
 
-	tool->pressure_offset = 0;
-	tool->has_pressure_offset = false;
-	tool->pressure_threshold.lower = 0;
-	tool->pressure_threshold.upper = 1;
+	tool->pressure.offset = 0;
+	tool->pressure.has_offset = false;
+	tool->pressure.threshold.lower = 0;
+	tool->pressure.threshold.upper = 1;
 
 	set_bit(tool->axis_caps, LIBINPUT_TABLET_TOOL_AXIS_X);
 	set_bit(tool->axis_caps, LIBINPUT_TABLET_TOOL_AXIS_Y);
@@ -705,8 +705,8 @@
 	.destroy = totem_interface_destroy,
 	.device_added = totem_interface_device_added,
 	.device_removed = totem_interface_device_removed,
-	.device_suspended = totem_interface_device_added, /* treat as remove */
-	.device_resumed = totem_interface_device_removed, /* treat as add */
+	.device_suspended = totem_interface_device_removed, /* treat as remove */
+	.device_resumed = totem_interface_device_added, /* treat as add */
 	.post_added = totem_interface_initial_proximity,
 	.touch_arbitration_toggle = NULL,
 	.touch_arbitration_update_rect = NULL,
@@ -717,7 +717,7 @@
 totem_reject_device(struct evdev_device *device)
 {
 	struct libevdev *evdev = device->evdev;
-	bool has_xy, has_slot, has_tool_dial, has_size;
+	bool has_xy, has_slot, has_tool_dial, has_size, has_touch_size;
 	double w, h;
 
 	has_xy = libevdev_has_event_code(evdev, EV_ABS, ABS_MT_POSITION_X) &&
@@ -726,19 +726,21 @@
 	has_tool_dial = libevdev_has_event_code(evdev, EV_ABS, ABS_MT_TOOL_TYPE) &&
 			libevdev_get_abs_maximum(evdev, ABS_MT_TOOL_TYPE) >= MT_TOOL_DIAL;
 	has_size = evdev_device_get_size(device, &w, &h) == 0;
-	has_size |= libevdev_get_abs_resolution(device->evdev, ABS_MT_TOUCH_MAJOR) > 0;
-	has_size |= libevdev_get_abs_resolution(device->evdev, ABS_MT_TOUCH_MINOR) > 0;
+	has_touch_size =
+		libevdev_get_abs_resolution(device->evdev, ABS_MT_TOUCH_MAJOR) > 0 ||
+		libevdev_get_abs_resolution(device->evdev, ABS_MT_TOUCH_MINOR) > 0;
 
-	if (has_xy && has_slot && has_tool_dial && has_size)
+	if (has_xy && has_slot && has_tool_dial && has_size && has_touch_size)
 		return false;
 
 	evdev_log_bug_libinput(device,
-			       "missing totem capabilities:%s%s%s%s. "
+			       "missing totem capabilities:%s%s%s%s%s. "
 			       "Ignoring this device.\n",
 			       has_xy ? "" : " xy",
 			       has_slot ? "" : " slot",
 			       has_tool_dial ? "" : " dial",
-			       has_size ? "" : " resolutions");
+			       has_size ? "" : " resolutions",
+			       has_touch_size ? "" : " touch-size");
 	return true;
 }
 
diff -Naur third_party_libinput_bak/src/evdev.c third_party_libinput_new/src/evdev.c
--- third_party_libinput_bak/src/evdev.c	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev.c	2023-03-29 16:52:01.318979000 +0800
@@ -37,7 +37,6 @@
 #include <mtdev-plumbing.h>
 #include <assert.h>
 #include <math.h>
-#include <stdint.h>
 
 #include "libinput.h"
 #include "evdev.h"
@@ -52,7 +51,6 @@
 
 #define DEFAULT_WHEEL_CLICK_ANGLE 15
 #define DEFAULT_BUTTON_SCROLL_TIMEOUT ms2us(200)
-#define MAX_RETRY_OPEN_DEVICE_COUNT 10
 
 enum evdev_device_udev_tags {
         EVDEV_UDEV_TAG_INPUT		= bit(0),
@@ -96,19 +94,21 @@
 		const char *property)
 {
 	const char *val;
+	bool b;
 
 	val = udev_device_get_property_value(udev_device, property);
 	if (!val)
 		return false;
 
-	if (streq(val, "1"))
-		return true;
-	if (!streq(val, "0"))
+	if (!parse_boolean_property(val, &b)) {
 		evdev_log_error(device,
 				"property %s has invalid value '%s'\n",
 				property,
 				val);
-	return false;
+		return false;
+	}
+
+	return b;
 }
 
 int
@@ -230,26 +230,35 @@
 	}
 
 	if (is_press) {
-		enum timer_flags flags = TIMER_FLAG_NONE;
-
-		device->scroll.button_scroll_state = BUTTONSCROLL_BUTTON_DOWN;
+		if (device->scroll.button < BTN_MOUSE + 5) {
+			/* For mouse buttons 1-5 (0x110 to 0x114) we apply a timeout before scrolling
+			 * since the button could also be used for regular clicking. */
+			enum timer_flags flags = TIMER_FLAG_NONE;
+
+			device->scroll.button_scroll_state = BUTTONSCROLL_BUTTON_DOWN;
+
+			/* Special case: if middle button emulation is enabled and
+			 * our scroll button is the left or right button, we only
+			 * get here *after* the middle button timeout has expired
+			 * for that button press. The time passed is the button-down
+			 * time though (which is in the past), so we have to allow
+			 * for a negative timer to be set.
+			 */
+			if (device->middlebutton.enabled &&
+				(device->scroll.button == BTN_LEFT ||
+				device->scroll.button == BTN_RIGHT)) {
+				flags = TIMER_FLAG_ALLOW_NEGATIVE;
+			}
 
-		/* Special case: if middle button emulation is enabled and
-		 * our scroll button is the left or right button, we only
-		 * get here *after* the middle button timeout has expired
-		 * for that button press. The time passed is the button-down
-		 * time though (which is in the past), so we have to allow
-		 * for a negative timer to be set.
-		 */
-		if (device->middlebutton.enabled &&
-		    (device->scroll.button == BTN_LEFT ||
-		     device->scroll.button == BTN_RIGHT)) {
-			flags = TIMER_FLAG_ALLOW_NEGATIVE;
+			libinput_timer_set_flags(&device->scroll.timer,
+						time + DEFAULT_BUTTON_SCROLL_TIMEOUT,
+						flags);
+		} else {
+			/* For extra mouse buttons numbered 6 or more (0x115+) we assume it is
+			 * dedicated exclusively to scrolling, so we don't apply the timeout
+			 * in order to provide immediate scrolling responsiveness. */
+			device->scroll.button_scroll_state = BUTTONSCROLL_READY;
 		}
-
-		libinput_timer_set_flags(&device->scroll.timer,
-					 time + DEFAULT_BUTTON_SCROLL_TIMEOUT,
-					 flags);
 		device->scroll.button_down_time = time;
 		evdev_log_debug(device, "btnscroll: down\n");
 	} else {
@@ -377,12 +386,11 @@
 }
 
 void
-evdev_notify_axis(struct evdev_device *device,
-		  uint64_t time,
-		  uint32_t axes,
-		  enum libinput_pointer_axis_source source,
-		  const struct normalized_coords *delta_in,
-		  const struct discrete_coords *discrete_in)
+evdev_notify_axis_legacy_wheel(struct evdev_device *device,
+			       uint64_t time,
+			       uint32_t axes,
+			       const struct normalized_coords *delta_in,
+			       const struct discrete_coords *discrete_in)
 {
 	struct normalized_coords delta = *delta_in;
 	struct discrete_coords discrete = *discrete_in;
@@ -399,12 +407,78 @@
 		discrete.y *= -1;
 	}
 
-	pointer_notify_axis(&device->base,
-			    time,
-			    axes,
-			    source,
-			    &delta,
-			    &discrete);
+	pointer_notify_axis_legacy_wheel(&device->base,
+					 time,
+					 axes,
+					 &delta,
+					 &discrete);
+}
+
+void
+evdev_notify_axis_wheel(struct evdev_device *device,
+			uint64_t time,
+			uint32_t axes,
+			const struct normalized_coords *delta_in,
+			const struct wheel_v120 *v120_in)
+{
+	struct normalized_coords delta = *delta_in;
+	struct wheel_v120 v120 = *v120_in;
+
+	if (device->scroll.invert_horizontal_scrolling) {
+		delta.x *= -1;
+		v120.x *= -1;
+	}
+
+	if (device->scroll.natural_scrolling_enabled) {
+		delta.x *= -1;
+		delta.y *= -1;
+		v120.x *= -1;
+		v120.y *= -1;
+	}
+
+	pointer_notify_axis_wheel(&device->base,
+				  time,
+				  axes,
+				  &delta,
+				  &v120);
+}
+
+void
+evdev_notify_axis_finger(struct evdev_device *device,
+			uint64_t time,
+			uint32_t axes,
+			const struct normalized_coords *delta_in)
+{
+	struct normalized_coords delta = *delta_in;
+
+	if (device->scroll.natural_scrolling_enabled) {
+		delta.x *= -1;
+		delta.y *= -1;
+	}
+
+	pointer_notify_axis_finger(&device->base,
+				  time,
+				  axes,
+				  &delta);
+}
+
+void
+evdev_notify_axis_continous(struct evdev_device *device,
+			    uint64_t time,
+			    uint32_t axes,
+			    const struct normalized_coords *delta_in)
+{
+	struct normalized_coords delta = *delta_in;
+
+	if (device->scroll.natural_scrolling_enabled) {
+		delta.x *= -1;
+		delta.y *= -1;
+	}
+
+	pointer_notify_axis_continuous(&device->base,
+				       time,
+				       axes,
+				       &delta);
 }
 
 static void
@@ -765,8 +839,8 @@
 
 	if (evdev->scroll.lock_state == BUTTONSCROLL_LOCK_DISABLED)
 		return LIBINPUT_CONFIG_SCROLL_BUTTON_LOCK_DISABLED;
-	else
-		return LIBINPUT_CONFIG_SCROLL_BUTTON_LOCK_ENABLED;
+
+	return LIBINPUT_CONFIG_SCROLL_BUTTON_LOCK_ENABLED;
 }
 
 static enum libinput_config_scroll_button_lock_state
@@ -1026,6 +1100,7 @@
 {
 	struct libinput *libinput = evdev_libinput_context(device);
 	uint32_t tdelta;
+	uint64_t eventtime = input_event_time(ev);
 
 	/* if we have a current libinput_dispatch() snapshot, compare our
 	 * event time with the one from the snapshot. If we have more than
@@ -1033,10 +1108,11 @@
 	 * where there is no steady event flow and thus SYN_DROPPED may not
 	 * get hit by the kernel despite us being too slow.
 	 */
-	if (libinput->dispatch_time == 0)
+	if (libinput->dispatch_time == 0 ||
+	    eventtime > libinput->dispatch_time)
 		return;
 
-	tdelta = us2ms(libinput->dispatch_time - input_event_time(ev));
+	tdelta = us2ms(libinput->dispatch_time - eventtime);
 	if (tdelta > 10) {
 		evdev_log_bug_client_ratelimit(device,
 					       &device->delay_warning_limit,
@@ -1080,6 +1156,9 @@
 				once = true;
 			}
 			evdev_device_dispatch_one(device, &ev);
+		} else if (rc == -ENODEV) {
+			evdev_device_remove(device);
+			return;
 		}
 	} while (rc == LIBEVDEV_READ_STATUS_SUCCESS);
 
@@ -1808,7 +1887,9 @@
 		evdev_log_info(device,
 			 "device is an accelerometer, ignoring\n");
 		return NULL;
-	} else if (udev_tags & EVDEV_UDEV_TAG_ACCELEROMETER) {
+	}
+
+	if (udev_tags & EVDEV_UDEV_TAG_ACCELEROMETER) {
 		evdev_disable_accelerometer_axes(device);
 	}
 
@@ -1855,7 +1936,9 @@
 		evdev_log_info(device, "device is a tablet pad\n");
 		return dispatch;
 
-	} else if ((udev_tags & tablet_tags) == EVDEV_UDEV_TAG_TABLET) {
+	}
+
+	if ((udev_tags & tablet_tags) == EVDEV_UDEV_TAG_TABLET) {
 		dispatch = evdev_tablet_create(device);
 		device->seat_caps |= EVDEV_DEVICE_TABLET;
 		evdev_log_info(device, "device is a tablet\n");
@@ -2052,23 +2135,10 @@
 	struct quirks_context *quirks;
 	struct quirks *q;
 	const struct quirk_tuples *t;
+	const uint32_t *props = NULL;
+	size_t nprops = 0;
 	char *prop;
 
-	/* Touchpad is a clickpad but INPUT_PROP_BUTTONPAD is not set, see
-	 * fdo bug 97147. Remove when RMI4 is commonplace */
-	if (evdev_device_has_model_quirk(device, QUIRK_MODEL_HP_STREAM11_TOUCHPAD))
-		libevdev_enable_property(device->evdev,
-					 INPUT_PROP_BUTTONPAD);
-
-	/* Touchpad is a clickpad but INPUT_PROP_BUTTONPAD is not set, see
-	 * https://gitlab.freedesktop.org/libinput/libinput/issues/177 and
-	 * https://gitlab.freedesktop.org/libinput/libinput/issues/234 */
-	if (evdev_device_has_model_quirk(device, QUIRK_MODEL_LENOVO_T480S_TOUCHPAD) ||
-	    evdev_device_has_model_quirk(device, QUIRK_MODEL_LENOVO_T490S_TOUCHPAD) ||
-	    evdev_device_has_model_quirk(device, QUIRK_MODEL_LENOVO_L380_TOUCHPAD))
-		libevdev_enable_property(device->evdev,
-					 INPUT_PROP_BUTTONPAD);
-
 	/* Touchpad claims to have 4 slots but only ever sends 2
 	 * https://bugs.freedesktop.org/show_bug.cgi?id=98100 */
 	if (evdev_device_has_model_quirk(device, QUIRK_MODEL_HP_ZBOOK_STUDIO_G3))
@@ -2085,12 +2155,36 @@
 		libevdev_disable_event_code(device->evdev, EV_MSC, MSC_TIMESTAMP);
 	}
 
-	if (q && quirks_get_tuples(q, QUIRK_ATTR_EVENT_CODE_DISABLE, &t)) {
-		int type, code;
+	if (quirks_get_tuples(q, QUIRK_ATTR_EVENT_CODE_ENABLE, &t)) {
+		for (size_t i = 0; i < t->ntuples; i++) {
+			const struct input_absinfo absinfo = {
+				.minimum = 0,
+				.maximum = 1,
+			};
+
+			int type = t->tuples[i].first;
+			int code = t->tuples[i].second;
+
+			if (code == EVENT_CODE_UNDEFINED)
+				libevdev_enable_event_type(device->evdev, type);
+			else
+				libevdev_enable_event_code(device->evdev,
+							    type,
+							    code,
+							    type == EV_ABS ?  &absinfo : NULL);
+			evdev_log_debug(device,
+					"quirks: enabling %s %s (%#x %#x)\n",
+					libevdev_event_type_get_name(type),
+					libevdev_event_code_get_name(type, code),
+					type,
+					code);
+		}
+	}
 
+	if (quirks_get_tuples(q, QUIRK_ATTR_EVENT_CODE_DISABLE, &t)) {
 		for (size_t i = 0; i < t->ntuples; i++) {
-			type = t->tuples[i].first;
-			code = t->tuples[i].second;
+			int type = t->tuples[i].first;
+			int code = t->tuples[i].second;
 
 			if (code == EVENT_CODE_UNDEFINED)
 				libevdev_disable_event_type(device->evdev,
@@ -2108,8 +2202,40 @@
 		}
 	}
 
-	quirks_unref(q);
+	if (quirks_get_uint32_array(q,
+				    QUIRK_ATTR_INPUT_PROP_ENABLE,
+				    &props,
+				    &nprops)) {
+		for (size_t idx = 0; idx < nprops; idx++) {
+			unsigned int p = props[idx];
+			libevdev_enable_property(device->evdev, p);
+			evdev_log_debug(device,
+					"quirks: enabling %s (%#x)\n",
+					libevdev_property_get_name(p),
+					p);
+		}
+	}
+
+	if (quirks_get_uint32_array(q,
+					 QUIRK_ATTR_INPUT_PROP_DISABLE,
+					 &props,
+					 &nprops)) {
+#if HAVE_LIBEVDEV_DISABLE_PROPERTY
+		for (size_t idx = 0; idx < nprops; idx++) {
+			unsigned int p = props[idx];
+			libevdev_disable_property(device->evdev, p);
+			evdev_log_debug(device,
+					"quirks: disabling %s (%#x)\n",
+					libevdev_property_get_name(p),
+					p);
+		}
+#else
+		evdev_log_error(device,
+				"quirks: a quirk for this device requires newer libevdev than installed\n");
+#endif
+	}
 
+	quirks_unref(q);
 }
 
 static void
@@ -2141,7 +2267,10 @@
 
 	snprintf(fmt, sizeof(fmt), "%s%s", prefix, format);
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-nonliteral"
 	log_msg_va(libinput, pri, fmt, args);
+#pragma GCC diagnostic pop
 }
 
 static bool
@@ -2162,46 +2291,41 @@
 	struct libinput *libinput = seat->libinput;
 	struct evdev_device *device = NULL;
 	int rc;
-	int fd;
+	int fd = -1;
 	int unhandled_device = 0;
 	const char *devnode = udev_device_get_devnode(udev_device);
-	const char *sysname = udev_device_get_sysname(udev_device);
+	char *sysname = str_sanitize(udev_device_get_sysname(udev_device));
 
 	if (!devnode) {
 		log_info(libinput, "%s: no device node associated\n", sysname);
-		return NULL;
+		goto err;
 	}
 
 	if (udev_device_should_be_ignored(udev_device)) {
 		log_debug(libinput, "%s: device is ignored\n", sysname);
-		return NULL;
+		goto err;
 	}
 
-	int loop_count = 0;
-	loop_open_restricted:
 	/* Use non-blocking mode so that we can loop on read on
 	 * evdev_device_data() until all events on the fd are
 	 * read.  mtdev_get() also expects this. */
 	fd = open_restricted(libinput, devnode,
 			     O_RDWR | O_NONBLOCK | O_CLOEXEC);
-	loop_count++;
 	if (fd < 0) {
 		log_info(libinput,
 			 "%s: opening input device '%s' failed (%s).\n",
 			 sysname,
 			 devnode,
 			 strerror(-fd));
-		if (loop_count < MAX_RETRY_OPEN_DEVICE_COUNT) {
-			usleep(1 * 1000);
-			goto loop_open_restricted;
-		}
-		return NULL;
+		goto err;
 	}
 
 	if (!evdev_device_have_same_syspath(udev_device, fd))
 		goto err;
 
 	device = zalloc(sizeof *device);
+	device->sysname = sysname;
+	sysname = NULL;
 
 	libinput_device_init(&device->base, seat);
 	libinput_seat_ref(seat);
@@ -2224,6 +2348,9 @@
 	device->dispatch = NULL;
 	device->fd = fd;
 	device->devname = libevdev_get_name(device->evdev);
+	/* the log_prefix_name is used as part of a printf format string and
+	 * must not contain % directives, see evdev_log_msg */
+	device->log_prefix_name = str_sanitize(device->devname);
 	device->scroll.threshold = 5.0; /* Default may be overridden */
 	device->scroll.direction_lock_threshold = 5.0; /* Default may be overridden */
 	device->scroll.direction = 0;
@@ -2264,12 +2391,16 @@
 	return device;
 
 err:
-	close_restricted(libinput, fd);
-	if (device) {
-		unhandled_device = device->seat_caps == 0;
-		evdev_device_destroy(device);
+	if (fd >= 0) {
+		close_restricted(libinput, fd);
+		if (device) {
+			unhandled_device = device->seat_caps == 0;
+			evdev_device_destroy(device);
+		}
 	}
 
+	free(sysname);
+
 	return unhandled_device ? EVDEV_UNHANDLED_DEVICE :  NULL;
 }
 
@@ -2282,7 +2413,7 @@
 const char *
 evdev_device_get_sysname(struct evdev_device *device)
 {
-	return udev_device_get_sysname(device->udev_device);
+	return device->sysname;
 }
 
 const char *
@@ -2642,7 +2773,6 @@
 		event.x = 0.0;
 
 	if (!normalized_is_zero(event)) {
-		const struct discrete_coords zero_discrete = { 0.0, 0.0 };
 		uint32_t axes = device->scroll.direction;
 
 		if (event.y == 0.0)
@@ -2650,12 +2780,19 @@
 		if (event.x == 0.0)
 			axes &= ~bit(LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL);
 
-		evdev_notify_axis(device,
-				  time,
-				  axes,
-				  source,
-				  &event,
-				  &zero_discrete);
+		switch (source) {
+		case LIBINPUT_POINTER_AXIS_SOURCE_FINGER:
+			evdev_notify_axis_finger(device, time, axes, &event);
+			break;
+		case LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS:
+			evdev_notify_axis_continous(device, time, axes, &event);
+			break;
+		default:
+			evdev_log_bug_libinput(device,
+					       "Posting invalid scroll source %d\n",
+					       source);
+			break;
+		}
 	}
 }
 
@@ -2665,16 +2802,29 @@
 		  enum libinput_pointer_axis_source source)
 {
 	const struct normalized_coords zero = { 0.0, 0.0 };
-	const struct discrete_coords zero_discrete = { 0.0, 0.0 };
 
 	/* terminate scrolling with a zero scroll event */
-	if (device->scroll.direction != 0)
-		pointer_notify_axis(&device->base,
-				    time,
-				    device->scroll.direction,
-				    source,
-				    &zero,
-				    &zero_discrete);
+	if (device->scroll.direction != 0) {
+		switch (source) {
+		case LIBINPUT_POINTER_AXIS_SOURCE_FINGER:
+			pointer_notify_axis_finger(&device->base,
+						   time,
+						   device->scroll.direction,
+						   &zero);
+			break;
+		case LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS:
+			pointer_notify_axis_continuous(&device->base,
+						       time,
+						       device->scroll.direction,
+						       &zero);
+			break;
+		default:
+			evdev_log_bug_libinput(device,
+					       "Stopping invalid scroll source %d\n",
+					       source);
+			break;
+		}
+	}
 
 	device->scroll.buildup.x = 0;
 	device->scroll.buildup.y = 0;
@@ -2860,6 +3010,8 @@
 	if (device->base.group)
 		libinput_device_group_unref(device->base.group);
 
+	free(device->log_prefix_name);
+	free(device->sysname);
 	free(device->output_name);
 	filter_destroy(device->pointer.filter);
 	libinput_timer_destroy(&device->scroll.timer);
diff -Naur third_party_libinput_bak/src/evdev.h third_party_libinput_new/src/evdev.h
--- third_party_libinput_bak/src/evdev.h	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/evdev.h	2023-03-29 16:52:17.233511600 +0800
@@ -169,6 +169,8 @@
 	struct udev_device *udev_device;
 	char *output_name;
 	const char *devname;
+	char *log_prefix_name;
+	char *sysname;
 	bool was_removed;
 	int fd;
 	enum evdev_device_seat_capability seat_caps;
@@ -583,12 +585,28 @@
 			    int pressed);
 
 void
-evdev_notify_axis(struct evdev_device *device,
-		  uint64_t time,
-		  uint32_t axes,
-		  enum libinput_pointer_axis_source source,
-		  const struct normalized_coords *delta_in,
-		  const struct discrete_coords *discrete_in);
+evdev_notify_axis_legacy_wheel(struct evdev_device *device,
+			       uint64_t time,
+			       uint32_t axes,
+			       const struct normalized_coords *delta_in,
+			       const struct discrete_coords *discrete_in);
+void
+evdev_notify_axis_wheel(struct evdev_device *device,
+			uint64_t time,
+			uint32_t axes,
+			const struct normalized_coords *delta_in,
+			const struct wheel_v120 *v120_in);
+void
+evdev_notify_axis_finger(struct evdev_device *device,
+			uint64_t time,
+			uint32_t axes,
+			const struct normalized_coords *delta_in);
+void
+evdev_notify_axis_continous(struct evdev_device *device,
+			    uint64_t time,
+			    uint32_t axes,
+			    const struct normalized_coords *delta_in);
+
 void
 evdev_post_scroll(struct evdev_device *device,
 		  uint64_t time,
@@ -770,12 +788,15 @@
 		 sizeof(buf),
 		 "%-7s - %s%s%s",
 		 evdev_device_get_sysname(device),
-		 (priority > LIBINPUT_LOG_PRIORITY_DEBUG) ?  device->devname : "",
+		 (priority > LIBINPUT_LOG_PRIORITY_DEBUG) ?  device->log_prefix_name : "",
 		 (priority > LIBINPUT_LOG_PRIORITY_DEBUG) ?  ": " : "",
 		 format);
 
 	va_start(args, format);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-nonliteral"
 	log_msg_va(evdev_libinput_context(device), priority, buf, args);
+#pragma GCC diagnostic pop
 	va_end(args);
 
 }
@@ -805,12 +826,15 @@
 		 sizeof(buf),
 		 "%-7s - %s%s%s",
 		 evdev_device_get_sysname(device),
-		 (priority > LIBINPUT_LOG_PRIORITY_DEBUG) ?  device->devname : "",
+		 (priority > LIBINPUT_LOG_PRIORITY_DEBUG) ?  device->log_prefix_name : "",
 		 (priority > LIBINPUT_LOG_PRIORITY_DEBUG) ?  ": " : "",
 		 format);
 
 	va_start(args, format);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-nonliteral"
 	log_msg_va(evdev_libinput_context(device), priority, buf, args);
+#pragma GCC diagnostic pop
 	va_end(args);
 
 	if (state == RATELIMIT_THRESHOLD) {
@@ -1003,7 +1027,7 @@
 		log_info_ratelimit(evdev_libinput_context(device),
 				   &device->abs.warning_range.range_warn_limit,
 				   "Axis %#x value %d is outside expected range [%d, %d]\n"
-				   "See %sabsolute_coordinate_ranges.html for details\n",
+				   "See %s/absolute_coordinate_ranges.html for details\n",
 				   code, value, min, max,
 				   HTTP_DOC_LINK);
 	}
diff -Naur third_party_libinput_bak/src/filter-mouse.c third_party_libinput_new/src/filter-mouse.c
--- third_party_libinput_bak/src/filter-mouse.c	2023-03-28 10:49:59.316626600 +0800
+++ third_party_libinput_new/src/filter-mouse.c	2023-03-30 09:00:58.995947900 +0800
@@ -38,8 +38,8 @@
  * Default parameters for pointer acceleration profiles.
  */
 
-#define DEFAULT_THRESHOLD v_ms2us(0.4)		/* in units/us */
-#define MINIMUM_THRESHOLD v_ms2us(0.2)		/* in units/us */
+#define DEFAULT_THRESHOLD v_ms2us(0.4)		/* in 1000dpi units/us */
+#define MINIMUM_THRESHOLD v_ms2us(0.2)		/* in 1000dpi units/us */
 #define DEFAULT_ACCELERATION 2.0		/* unitless factor */
 #define DEFAULT_INCLINE 1.1			/* unitless factor */
 
@@ -53,7 +53,7 @@
 
 	struct pointer_trackers trackers;
 
-	double threshold;	/* units/us */
+	double threshold;	/* 1000dpi units/us */
 	double accel;		/* unitless factor */
 	double incline;		/* incline of the function */
 
@@ -231,7 +231,7 @@
 	struct pointer_accelerator *accel_filter =
 		(struct pointer_accelerator *)filter;
 	const double max_accel = accel_filter->accel; /* unitless factor */
-	const double threshold = accel_filter->threshold; /* units/us */
+	const double threshold = accel_filter->threshold; /* 1000dpi units/us */
 	const double incline = accel_filter->incline;
 	double factor; /* unitless */
 
diff -Naur third_party_libinput_bak/src/filter-touchpad-x230.c third_party_libinput_new/src/filter-touchpad-x230.c
--- third_party_libinput_bak/src/filter-touchpad-x230.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/filter-touchpad-x230.c	2023-03-30 09:02:14.585301100 +0800
@@ -112,7 +112,7 @@
 {
 	double factor;
 
-	/* Use Simpson's rule to calculate the avarage acceleration between
+	/* Use Simpson's rule to calculate the average acceleration between
 	 * the previous motion and the most recent. */
 	factor = acceleration_profile(accel, data, velocity, time);
 	factor += acceleration_profile(accel, data, last_velocity, time);
diff -Naur third_party_libinput_bak/src/filter-touchpad.c third_party_libinput_new/src/filter-touchpad.c
--- third_party_libinput_bak/src/filter-touchpad.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/filter-touchpad.c	2023-03-30 09:02:02.813869000 +0800
@@ -50,7 +50,7 @@
 
 	struct pointer_trackers trackers;
 
-	double threshold;	/* units/us */
+	double threshold;	/* mm/s */
 	double accel;		/* unitless factor */
 
 	int dpi;
@@ -233,7 +233,7 @@
 {
 	struct touchpad_accelerator *accel_filter =
 		(struct touchpad_accelerator *)filter;
-	const double threshold = accel_filter->threshold; /* units/us */
+	const double threshold = accel_filter->threshold; /* mm/s */
 	const double baseline = 0.9;
 	double factor; /* unitless */
 
diff -Naur third_party_libinput_bak/src/filter.c third_party_libinput_new/src/filter.c
--- third_party_libinput_bak/src/filter.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/filter.c	2023-03-30 08:59:59.793374200 +0800
@@ -285,7 +285,7 @@
 {
 	double factor;
 
-	/* Use Simpson's rule to calculate the avarage acceleration between
+	/* Use Simpson's rule to calculate the average acceleration between
 	 * the previous motion and the most recent. */
 	factor = profile(filter, data, velocity, time);
 	factor += profile(filter, data, last_velocity, time);
diff -Naur third_party_libinput_bak/src/filter.h third_party_libinput_new/src/filter.h
--- third_party_libinput_bak/src/filter.h	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/filter.h	2023-03-30 09:00:09.318327100 +0800
@@ -50,7 +50,7 @@
  * @param time The time of the delta
  *
  * @return A set of normalized coordinates that can be used for pixel
- * movement. The normalized coordiantes are scaled to the default dpi range,
+ * movement. The normalized coordinates are scaled to the default dpi range,
  * i.e. regardless of the resolution of the underlying device, the returned
  * values always reflect a 1000dpi mouse.
  *
@@ -158,6 +158,6 @@
 double
 trackpoint_accel_profile(struct motion_filter *filter,
 			 void *data,
-			 double delta,
+			 double velocity,
 			 uint64_t time);
 #endif /* FILTER_H */
diff -Naur third_party_libinput_bak/src/libinput-private-config.c third_party_libinput_new/src/libinput-private-config.c
--- third_party_libinput_bak/src/libinput-private-config.c	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/src/libinput-private-config.c	2023-03-30 09:14:19.739486900 +0800
@@ -0,0 +1,75 @@
+/*
+ * Copyright © 2021 Red Hat, Inc.
+ * Copyright © 2021 José Expósito
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "config.h"
+
+#include "libinput-private-config.h"
+#include "libinput-private.h"
+
+int
+libinput_device_config_gesture_hold_is_available(struct libinput_device *device)
+{
+	if (!libinput_device_has_capability(device,
+					    LIBINPUT_DEVICE_CAP_GESTURE))
+		return 0;
+
+	if (!device->config.gesture->get_hold_default(device))
+		return 0;
+
+	return 1;
+}
+
+enum libinput_config_status
+libinput_device_config_gesture_set_hold_enabled(struct libinput_device *device,
+						enum libinput_config_hold_state enable)
+{
+	if (enable != LIBINPUT_CONFIG_HOLD_ENABLED &&
+	    enable != LIBINPUT_CONFIG_HOLD_DISABLED)
+		return LIBINPUT_CONFIG_STATUS_INVALID;
+
+	if (!libinput_device_config_gesture_hold_is_available(device)) {
+		return enable ? LIBINPUT_CONFIG_STATUS_UNSUPPORTED :
+				LIBINPUT_CONFIG_STATUS_SUCCESS;
+	}
+
+	return device->config.gesture->set_hold_enabled(device, enable);
+}
+
+enum libinput_config_hold_state
+libinput_device_config_gesture_get_hold_enabled(struct libinput_device *device)
+{
+	if (!libinput_device_config_gesture_hold_is_available(device))
+		return LIBINPUT_CONFIG_HOLD_DISABLED;
+
+	return device->config.gesture->get_hold_enabled(device);
+}
+
+enum libinput_config_hold_state
+libinput_device_config_gesture_get_hold_default_enabled(struct libinput_device *device)
+{
+	if (!libinput_device_config_gesture_hold_is_available(device))
+		return LIBINPUT_CONFIG_HOLD_DISABLED;
+
+	return device->config.gesture->get_hold_default(device);
+}
diff -Naur third_party_libinput_bak/src/libinput-private-config.h third_party_libinput_new/src/libinput-private-config.h
--- third_party_libinput_bak/src/libinput-private-config.h	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/src/libinput-private-config.h	2023-03-30 09:14:42.597216800 +0800
@@ -0,0 +1,111 @@
+/*
+ * Copyright © 2021 Red Hat, Inc.
+ * Copyright © 2021 José Expósito
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef LIBINPUT_PRIVATE_CONFIG_H
+#define LIBINPUT_PRIVATE_CONFIG_H
+
+#include "config.h"
+
+#include "libinput.h"
+
+enum libinput_config_hold_state {
+	/** Hold gestures are to be disabled, or are currently disabled */
+	LIBINPUT_CONFIG_HOLD_DISABLED,
+	/** Hold gestures are to be enabled, or are currently disabled */
+	LIBINPUT_CONFIG_HOLD_ENABLED,
+};
+
+/**
+ * @ingroup config
+ *
+ * Check whether a device can perform hold gestures.
+ *
+ * @param device The device to configure
+ * @return Non-zero if a device can perform hold gestures, zero otherwise.
+ *
+ * @see libinput_device_config_gesture_set_hold_enabled
+ * @see libinput_device_config_gesture_get_hold_enabled
+ * @see libinput_device_config_gesture_get_hold_default_enabled
+ */
+int
+libinput_device_config_gesture_hold_is_available(struct libinput_device *device);
+
+/**
+ * @ingroup config
+ *
+ * Enable or disable hold gestures on this device.
+ *
+ * @param device The device to configure
+ * @param enable @ref LIBINPUT_CONFIG_HOLD_ENABLED to enable hold gestures or
+ * @ref LIBINPUT_CONFIG_HOLD_DISABLED to disable them
+ *
+ * @return A config status code. Disabling hold gestures on a device that does
+ * not support them always succeeds.
+ *
+ * @see libinput_device_config_gesture_hold_is_available
+ * @see libinput_device_config_gesture_get_hold_enabled
+ * @see libinput_device_config_gesture_get_hold_default_enabled
+ */
+enum libinput_config_status
+libinput_device_config_gesture_set_hold_enabled(struct libinput_device *device,
+						enum libinput_config_hold_state enable);
+
+/**
+ * @ingroup config
+ *
+ * Check if hold gestures are enabled on this device. If the device does not
+ * support hold gestures, this function always returns @ref
+ * LIBINPUT_CONFIG_HOLD_DISABLED.
+ *
+ * @param device The device to configure
+ *
+ * @retval LIBINPUT_CONFIG_HOLD_ENABLED If hold gestures are currently enabled
+ * @retval LIBINPUT_CONFIG_HOLD_DISABLED If hold gestures are currently disabled
+ *
+ * @see libinput_device_config_gesture_hold_is_available
+ * @see libinput_device_config_gesture_set_hold_enabled
+ * @see libinput_device_config_gesture_get_hold_default_enabled
+ */
+enum libinput_config_hold_state
+libinput_device_config_gesture_get_hold_enabled(struct libinput_device *device);
+
+/**
+ * @ingroup config
+ *
+ * Return the default setting for whether hold gestures are enabled on this
+ * device.
+ *
+ * @param device The device to configure
+ * @retval LIBINPUT_CONFIG_HOLD_ENABLED If hold gestures are enabled by default
+ * @retval LIBINPUT_CONFIG_HOLD_DISABLED If hold gestures are disabled by
+ * default
+ *
+ * @see libinput_device_config_gesture_hold_is_available
+ * @see libinput_device_config_gesture_set_hold_enabled
+ * @see libinput_device_config_gesture_get_hold_enabled
+ */
+enum libinput_config_hold_state
+libinput_device_config_gesture_get_hold_default_enabled(struct libinput_device *device);
+
+#endif /* LIBINPUT_PRIVATE_CONFIG_H */
diff -Naur third_party_libinput_bak/src/libinput-private.h third_party_libinput_new/src/libinput-private.h
--- third_party_libinput_bak/src/libinput-private.h	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/libinput-private.h	2023-03-30 09:13:55.834286400 +0800
@@ -38,6 +38,7 @@
 #include "linux/input.h"
 
 #include "libinput.h"
+#include "libinput-private-config.h"
 #include "libinput-util.h"
 #include "libinput-version.h"
 
@@ -76,6 +77,11 @@
 	double x, y;
 };
 
+/* A pair of wheel click data for the 120-normalized range */
+struct wheel_v120 {
+	int x, y;
+};
+
 /* A pair of angles in degrees */
 struct tilt_degrees {
 	double x, y;
@@ -307,6 +313,13 @@
 	unsigned int (*get_default_angle)(struct libinput_device *device);
 };
 
+struct libinput_device_config_gesture {
+	enum libinput_config_status (*set_hold_enabled)(struct libinput_device *device,
+			 enum libinput_config_hold_state enabled);
+	enum libinput_config_hold_state (*get_hold_enabled)(struct libinput_device *device);
+	enum libinput_config_hold_state (*get_hold_default)(struct libinput_device *device);
+};
+
 struct libinput_device_config {
 	struct libinput_device_config_tap *tap;
 	struct libinput_device_config_calibration *calibration;
@@ -319,6 +332,7 @@
 	struct libinput_device_config_middle_emulation *middle_emulation;
 	struct libinput_device_config_dwt *dwt;
 	struct libinput_device_config_rotation *rotation;
+	struct libinput_device_config_gesture *gesture;
 };
 
 struct libinput_device_group {
@@ -378,11 +392,13 @@
 	int refcount;
 	void *user_data;
 
-	/* The pressure threshold assumes a pressure_offset of 0 */
-	struct threshold pressure_threshold;
-	/* pressure_offset includes axis->minimum */
-	int pressure_offset;
-	bool has_pressure_offset;
+	struct {
+		/* The pressure threshold assumes a pressure_offset of 0 */
+		struct threshold threshold;
+		/* pressure_offset includes axis->minimum */
+		int offset;
+		bool has_offset;
+	} pressure;
 };
 
 struct libinput_tablet_pad_mode_group {
@@ -557,12 +573,29 @@
 		      enum libinput_button_state state);
 
 void
-pointer_notify_axis(struct libinput_device *device,
-		    uint64_t time,
-		    uint32_t axes,
-		    enum libinput_pointer_axis_source source,
-		    const struct normalized_coords *delta,
-		    const struct discrete_coords *discrete);
+pointer_notify_axis_finger(struct libinput_device *device,
+			   uint64_t time,
+			   uint32_t axes,
+			   const struct normalized_coords *delta);
+void
+pointer_notify_axis_continuous(struct libinput_device *device,
+			       uint64_t time,
+			       uint32_t axes,
+			       const struct normalized_coords *delta);
+
+void
+pointer_notify_axis_legacy_wheel(struct libinput_device *device,
+				 uint64_t time,
+				 uint32_t axes,
+				 const struct normalized_coords *delta,
+				 const struct discrete_coords *discrete);
+
+void
+pointer_notify_axis_wheel(struct libinput_device *device,
+			  uint64_t time,
+			  uint32_t axes,
+			  const struct normalized_coords *delta,
+			  const struct wheel_v120 *v120);
 
 void
 touch_notify_touch_down(struct libinput_device *device,
@@ -606,7 +639,7 @@
 gesture_notify_swipe_end(struct libinput_device *device,
 			 uint64_t time,
 			 int finger_count,
-			 int cancelled);
+			 bool cancelled);
 
 void
 gesture_notify_pinch(struct libinput_device *device,
@@ -623,7 +656,18 @@
 			 uint64_t time,
 			 int finger_count,
 			 double scale,
-			 int cancelled);
+			 bool cancelled);
+
+void
+gesture_notify_hold(struct libinput_device *device,
+		    uint64_t time,
+		    int finger_count);
+
+void
+gesture_notify_hold_end(struct libinput_device *device,
+			uint64_t time,
+			int finger_count,
+			bool cancelled);
 
 void
 tablet_notify_axis(struct libinput_device *device,
diff -Naur third_party_libinput_bak/src/libinput-versionsort.h third_party_libinput_new/src/libinput-versionsort.h
--- third_party_libinput_bak/src/libinput-versionsort.h	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/libinput-versionsort.h	2023-03-30 09:20:22.142810800 +0800
@@ -29,7 +29,7 @@
 #include <dirent.h>
 
 #if !defined(HAVE_VERSIONSORT) || defined(TEST_VERSIONSORT)
-static int
+static inline int
 libinput_strverscmp(const char *l0, const char *r0)
 {
 	const unsigned char *l = (const void *)l0;
@@ -65,13 +65,13 @@
 /* Defined with libinput_ names for testing from platforms with native functions. */
 
 #ifndef HAVE_VERSIONSORT
-static int
+static inline int
 strverscmp(const char *l0, const char *r0)
 {
 	return libinput_strverscmp(l0, r0);
 }
 
-static int
+static inline int
 versionsort(const struct dirent **a, const struct dirent **b)
 {
 	return libinput_strverscmp((*a)->d_name, (*b)->d_name);
diff -Naur third_party_libinput_bak/src/libinput.c third_party_libinput_new/src/libinput.c
--- third_party_libinput_bak/src/libinput.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/libinput.c	2023-03-30 09:03:44.114896000 +0800
@@ -76,37 +76,6 @@
 ASSERT_INT_SIZE(enum libinput_config_scroll_method);
 ASSERT_INT_SIZE(enum libinput_config_dwt_state);
 
-static inline bool
-check_event_type(struct libinput *libinput,
-		 const char *function_name,
-		 unsigned int type_in,
-		 ...)
-{
-	bool rc = false;
-	va_list args;
-	unsigned int type_permitted;
-
-	va_start(args, type_in);
-	type_permitted = va_arg(args, unsigned int);
-
-	while (type_permitted != (unsigned int)-1) {
-		if (type_permitted == type_in) {
-			rc = true;
-			break;
-		}
-		type_permitted = va_arg(args, unsigned int);
-	}
-
-	va_end(args);
-
-	if (!rc)
-		log_bug_client(libinput,
-			       "Invalid event type %d passed to %s()\n",
-			       type_in, function_name);
-
-	return rc;
-}
-
 static inline const char *
 event_type_to_str(enum libinput_event_type type)
 {
@@ -118,6 +87,9 @@
 	CASE_RETURN_STRING(LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE);
 	CASE_RETURN_STRING(LIBINPUT_EVENT_POINTER_BUTTON);
 	CASE_RETURN_STRING(LIBINPUT_EVENT_POINTER_AXIS);
+	CASE_RETURN_STRING(LIBINPUT_EVENT_POINTER_SCROLL_WHEEL);
+	CASE_RETURN_STRING(LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
+	CASE_RETURN_STRING(LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
 	CASE_RETURN_STRING(LIBINPUT_EVENT_TOUCH_DOWN);
 	CASE_RETURN_STRING(LIBINPUT_EVENT_TOUCH_UP);
 	CASE_RETURN_STRING(LIBINPUT_EVENT_TOUCH_MOTION);
@@ -137,6 +109,8 @@
 	CASE_RETURN_STRING(LIBINPUT_EVENT_GESTURE_PINCH_BEGIN);
 	CASE_RETURN_STRING(LIBINPUT_EVENT_GESTURE_PINCH_UPDATE);
 	CASE_RETURN_STRING(LIBINPUT_EVENT_GESTURE_PINCH_END);
+	CASE_RETURN_STRING(LIBINPUT_EVENT_GESTURE_HOLD_BEGIN);
+	CASE_RETURN_STRING(LIBINPUT_EVENT_GESTURE_HOLD_END);
 	CASE_RETURN_STRING(LIBINPUT_EVENT_SWITCH_TOGGLE);
 	case LIBINPUT_EVENT_NONE:
 		abort();
@@ -145,6 +119,39 @@
 	return NULL;
 }
 
+static inline bool
+check_event_type(struct libinput *libinput,
+		 const char *function_name,
+		 unsigned int type_in,
+		 ...)
+{
+	bool rc = false;
+	va_list args;
+	unsigned int type_permitted;
+
+	va_start(args, type_in);
+	type_permitted = va_arg(args, unsigned int);
+
+	while (type_permitted != (unsigned int)-1) {
+		if (type_permitted == type_in) {
+			rc = true;
+			break;
+		}
+		type_permitted = va_arg(args, unsigned int);
+	}
+
+	va_end(args);
+
+	if (!rc) {
+		const char *name = event_type_to_str(type_in);
+		log_bug_client(libinput,
+			       "Invalid event type %s (%d) passed to %s()\n",
+			       name, type_in, function_name);
+	}
+
+	return rc;
+}
+
 struct libinput_source {
 	libinput_source_dispatch_t dispatch;
 	void *user_data;
@@ -171,6 +178,7 @@
 	struct device_float_coords delta_raw;
 	struct device_coords absolute;
 	struct discrete_coords discrete;
+	struct wheel_v120 v120;
 	uint32_t button;
 	uint32_t seat_button_count;
 	enum libinput_button_state state;
@@ -362,6 +370,9 @@
 			   LIBINPUT_EVENT_POINTER_MOTION,
 			   LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE,
 			   LIBINPUT_EVENT_POINTER_BUTTON,
+			   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+			   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			   LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
 			   LIBINPUT_EVENT_POINTER_AXIS);
 
 	return (struct libinput_event_pointer *) event;
@@ -403,7 +414,9 @@
 			   LIBINPUT_EVENT_GESTURE_SWIPE_END,
 			   LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,
 			   LIBINPUT_EVENT_GESTURE_PINCH_UPDATE,
-			   LIBINPUT_EVENT_GESTURE_PINCH_END);
+			   LIBINPUT_EVENT_GESTURE_PINCH_END,
+			   LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+			   LIBINPUT_EVENT_GESTURE_HOLD_END);
 
 	return (struct libinput_event_gesture *) event;
 }
@@ -524,6 +537,9 @@
 			   LIBINPUT_EVENT_POINTER_MOTION,
 			   LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE,
 			   LIBINPUT_EVENT_POINTER_BUTTON,
+			   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+			   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			   LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
 			   LIBINPUT_EVENT_POINTER_AXIS);
 
 	return us2ms(event->time);
@@ -538,6 +554,9 @@
 			   LIBINPUT_EVENT_POINTER_MOTION,
 			   LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE,
 			   LIBINPUT_EVENT_POINTER_BUTTON,
+			   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+			   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			   LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
 			   LIBINPUT_EVENT_POINTER_AXIS);
 
 	return event->time;
@@ -686,6 +705,9 @@
 	require_event_type(libinput_event_get_context(&event->base),
 			   event->base.type,
 			   0,
+			   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+			   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			   LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
 			   LIBINPUT_EVENT_POINTER_AXIS);
 
 	switch (axis) {
@@ -752,6 +774,62 @@
 	return value;
 }
 
+LIBINPUT_EXPORT double
+libinput_event_pointer_get_scroll_value(struct libinput_event_pointer *event,
+					enum libinput_pointer_axis axis)
+{
+	struct libinput *libinput = event->base.device->seat->libinput;
+	double value = 0;
+
+	require_event_type(libinput_event_get_context(&event->base),
+			   event->base.type,
+			   0.0,
+			   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+			   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			   LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
+
+	if (!libinput_event_pointer_has_axis(event, axis)) {
+		log_bug_client(libinput, "value requested for unset axis\n");
+	} else {
+		switch (axis) {
+		case LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL:
+			value = event->delta.x;
+			break;
+		case LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL:
+			value = event->delta.y;
+			break;
+		}
+	}
+	return value;
+}
+
+LIBINPUT_EXPORT double
+libinput_event_pointer_get_scroll_value_v120(struct libinput_event_pointer *event,
+					     enum libinput_pointer_axis axis)
+{
+	struct libinput *libinput = event->base.device->seat->libinput;
+	double value = 0;
+
+	require_event_type(libinput_event_get_context(&event->base),
+			   event->base.type,
+			   0.0,
+			   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL);
+
+	if (!libinput_event_pointer_has_axis(event, axis)) {
+		log_bug_client(libinput, "value requested for unset axis\n");
+	} else {
+		switch (axis) {
+		case LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL:
+			value = event->v120.x;
+			break;
+		case LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL:
+			value = event->v120.y;
+			break;
+		}
+	}
+	return value;
+}
+
 LIBINPUT_EXPORT enum libinput_pointer_axis_source
 libinput_event_pointer_get_axis_source(struct libinput_event_pointer *event)
 {
@@ -890,7 +968,9 @@
 			   LIBINPUT_EVENT_GESTURE_PINCH_END,
 			   LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
 			   LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
-			   LIBINPUT_EVENT_GESTURE_SWIPE_END);
+			   LIBINPUT_EVENT_GESTURE_SWIPE_END,
+			   LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+			   LIBINPUT_EVENT_GESTURE_HOLD_END);
 
 	return us2ms(event->time);
 }
@@ -906,7 +986,9 @@
 			   LIBINPUT_EVENT_GESTURE_PINCH_END,
 			   LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
 			   LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
-			   LIBINPUT_EVENT_GESTURE_SWIPE_END);
+			   LIBINPUT_EVENT_GESTURE_SWIPE_END,
+			   LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+			   LIBINPUT_EVENT_GESTURE_HOLD_END);
 
 	return event->time;
 }
@@ -922,7 +1004,9 @@
 			   LIBINPUT_EVENT_GESTURE_PINCH_END,
 			   LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
 			   LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
-			   LIBINPUT_EVENT_GESTURE_SWIPE_END);
+			   LIBINPUT_EVENT_GESTURE_SWIPE_END,
+			   LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+			   LIBINPUT_EVENT_GESTURE_HOLD_END);
 
 	return event->finger_count;
 }
@@ -934,7 +1018,8 @@
 			   event->base.type,
 			   0,
 			   LIBINPUT_EVENT_GESTURE_PINCH_END,
-			   LIBINPUT_EVENT_GESTURE_SWIPE_END);
+			   LIBINPUT_EVENT_GESTURE_SWIPE_END,
+			   LIBINPUT_EVENT_GESTURE_HOLD_END);
 
 	return event->cancelled;
 }
@@ -1821,7 +1906,7 @@
 		log_error(libinput,
 			  "Failed to load the device quirks from %s%s%s. "
 			  "This will negatively affect device behavior. "
-			  "See %sdevice-quirks.html for details.\n",
+			  "See %s/device-quirks.html for details.\n",
 			  data_path,
 			  override_file ? " and " : "",
 			  override_file ? override_file : "",
@@ -1842,9 +1927,9 @@
 static void
 libinput_drop_destroyed_sources(struct libinput *libinput)
 {
-	struct libinput_source *source, *next;
+	struct libinput_source *source;
 
-	list_for_each_safe(source, next, &libinput->source_destroy_list, link)
+	list_for_each_safe(source, &libinput->source_destroy_list, link)
 		free(source);
 	list_init(&libinput->source_destroy_list);
 }
@@ -1860,10 +1945,10 @@
 libinput_unref(struct libinput *libinput)
 {
 	struct libinput_event *event;
-	struct libinput_device *device, *next_device;
-	struct libinput_seat *seat, *next_seat;
-	struct libinput_tablet_tool *tool, *next_tool;
-	struct libinput_device_group *group, *next_group;
+	struct libinput_device *device;
+	struct libinput_seat *seat;
+	struct libinput_tablet_tool *tool;
+	struct libinput_device_group *group;
 
 	if (libinput == NULL)
 		return NULL;
@@ -1882,8 +1967,8 @@
 
 	free(libinput->events);
 
-	list_for_each_safe(seat, next_seat, &libinput->seat_list, link) {
-		list_for_each_safe(device, next_device,
+	list_for_each_safe(seat, &libinput->seat_list, link) {
+		list_for_each_safe(device,
 				   &seat->devices_list,
 				   link)
 			libinput_device_destroy(device);
@@ -1892,13 +1977,12 @@
 	}
 
 	list_for_each_safe(group,
-			   next_group,
 			   &libinput->device_group_list,
 			   link) {
 		libinput_device_group_destroy(group);
 	}
 
-	list_for_each_safe(tool, next_tool, &libinput->tool_list, link) {
+	list_for_each_safe(tool, &libinput->tool_list, link) {
 		libinput_tablet_tool_unref(tool);
 	}
 
@@ -2020,9 +2104,9 @@
 	if (seat->refcount == 0) {
 		libinput_seat_destroy(seat);
 		return NULL;
-	} else {
-		return seat;
 	}
+
+	return seat;
 }
 
 LIBINPUT_EXPORT void
@@ -2086,9 +2170,9 @@
 	if (device->refcount == 0) {
 		libinput_device_destroy(device);
 		return NULL;
-	} else {
-		return device;
 	}
+
+	return device;
 }
 
 LIBINPUT_EXPORT int
@@ -2223,7 +2307,7 @@
 		  enum libinput_event_type type,
 		  struct libinput_event *event)
 {
-	struct libinput_event_listener *listener, *tmp;
+	struct libinput_event_listener *listener;
 #if 0
 	struct libinput *libinput = device->seat->libinput;
 
@@ -2238,7 +2322,7 @@
 
 	init_event_base(event, device, type);
 
-	list_for_each_safe(listener, tmp, &device->event_listeners, link)
+	list_for_each_safe(listener, &device->event_listeners, link)
 		listener->notify_func(time, event, listener->notify_func_data);
 
 	libinput_post_event(device->seat->libinput, event);
@@ -2426,14 +2510,82 @@
 }
 
 void
-pointer_notify_axis(struct libinput_device *device,
-		    uint64_t time,
-		    uint32_t axes,
-		    enum libinput_pointer_axis_source source,
-		    const struct normalized_coords *delta,
-		    const struct discrete_coords *discrete)
+pointer_notify_axis_finger(struct libinput_device *device,
+			  uint64_t time,
+			  uint32_t axes,
+			  const struct normalized_coords *delta)
+{
+	struct libinput_event_pointer *axis_event, *axis_event_legacy;
+	const struct discrete_coords zero_discrete = {0};
+	const struct wheel_v120 zero_v120 = {0};
+
+	if (!device_has_cap(device, LIBINPUT_DEVICE_CAP_POINTER))
+		return;
+
+	axis_event = zalloc(sizeof *axis_event);
+	axis_event_legacy = zalloc(sizeof *axis_event_legacy);
+
+	*axis_event = (struct libinput_event_pointer) {
+		.time = time,
+		.delta = *delta,
+		.source = LIBINPUT_POINTER_AXIS_SOURCE_FINGER,
+		.axes = axes,
+		.discrete = zero_discrete,
+		.v120 = zero_v120,
+	};
+	*axis_event_legacy = *axis_event;
+
+	post_device_event(device, time,
+			  LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			  &axis_event->base);
+	post_device_event(device, time,
+			  LIBINPUT_EVENT_POINTER_AXIS,
+			  &axis_event_legacy->base);
+}
+
+void
+pointer_notify_axis_continuous(struct libinput_device *device,
+			       uint64_t time,
+			       uint32_t axes,
+			       const struct normalized_coords *delta)
+{
+	struct libinput_event_pointer *axis_event, *axis_event_legacy;
+	const struct discrete_coords zero_discrete = {0};
+	const struct wheel_v120 zero_v120 = {0};
+
+	if (!device_has_cap(device, LIBINPUT_DEVICE_CAP_POINTER))
+		return;
+
+	axis_event = zalloc(sizeof *axis_event);
+	axis_event_legacy = zalloc(sizeof *axis_event_legacy);
+
+	*axis_event = (struct libinput_event_pointer) {
+		.time = time,
+		.delta = *delta,
+		.source = LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS,
+		.axes = axes,
+		.discrete = zero_discrete,
+		.v120 = zero_v120,
+	};
+	*axis_event_legacy = *axis_event;
+
+	post_device_event(device, time,
+			  LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			  &axis_event->base);
+	post_device_event(device, time,
+			  LIBINPUT_EVENT_POINTER_AXIS,
+			  &axis_event_legacy->base);
+}
+
+void
+pointer_notify_axis_legacy_wheel(struct libinput_device *device,
+				 uint64_t time,
+				 uint32_t axes,
+				 const struct normalized_coords *delta,
+				 const struct discrete_coords *discrete)
 {
 	struct libinput_event_pointer *axis_event;
+	const struct wheel_v120 zero_v120 = {0};
 
 	if (!device_has_cap(device, LIBINPUT_DEVICE_CAP_POINTER))
 		return;
@@ -2443,9 +2595,10 @@
 	*axis_event = (struct libinput_event_pointer) {
 		.time = time,
 		.delta = *delta,
-		.source = source,
+		.source = LIBINPUT_POINTER_AXIS_SOURCE_WHEEL,
 		.axes = axes,
 		.discrete = *discrete,
+		.v120 = zero_v120,
 	};
 
 	post_device_event(device, time,
@@ -2454,6 +2607,37 @@
 }
 
 void
+pointer_notify_axis_wheel(struct libinput_device *device,
+			  uint64_t time,
+			  uint32_t axes,
+			  const struct normalized_coords *delta,
+			  const struct wheel_v120 *v120)
+{
+	struct libinput_event_pointer *axis_event;
+
+	if (!device_has_cap(device, LIBINPUT_DEVICE_CAP_POINTER))
+		return;
+
+	axis_event = zalloc(sizeof *axis_event);
+
+	*axis_event = (struct libinput_event_pointer) {
+		.time = time,
+		.delta = *delta,
+		.source = LIBINPUT_POINTER_AXIS_SOURCE_WHEEL,
+		.axes = axes,
+		.discrete.x = 0,
+		.discrete.y = 0,
+		.v120 = *v120,
+	};
+
+	post_device_event(device, time,
+			  LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+			  &axis_event->base);
+
+	/* legacy wheel events are sent separately */
+}
+
+void
 touch_notify_touch_down(struct libinput_device *device,
 			uint64_t time,
 			int32_t slot,
@@ -2811,7 +2995,7 @@
 	       uint64_t time,
 	       enum libinput_event_type type,
 	       int finger_count,
-	       int cancelled,
+	       bool cancelled,
 	       const struct normalized_coords *delta,
 	       const struct normalized_coords *unaccel,
 	       double scale,
@@ -2854,7 +3038,7 @@
 gesture_notify_swipe_end(struct libinput_device *device,
 			 uint64_t time,
 			 int finger_count,
-			 int cancelled)
+			 bool cancelled)
 {
 	const struct normalized_coords zero = { 0.0, 0.0 };
 
@@ -2881,7 +3065,7 @@
 			 uint64_t time,
 			 int finger_count,
 			 double scale,
-			 int cancelled)
+			 bool cancelled)
 {
 	const struct normalized_coords zero = { 0.0, 0.0 };
 
@@ -2890,6 +3074,29 @@
 }
 
 void
+gesture_notify_hold(struct libinput_device *device,
+		    uint64_t time,
+		    int finger_count)
+{
+	const struct normalized_coords zero = { 0.0, 0.0 };
+
+	gesture_notify(device, time, LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+		       finger_count, 0, &zero, &zero, 0.0, 0.0);
+}
+
+void
+gesture_notify_hold_end(struct libinput_device *device,
+			uint64_t time,
+			int finger_count,
+			bool cancelled)
+{
+	const struct normalized_coords zero = { 0.0, 0.0 };
+
+	gesture_notify(device, time, LIBINPUT_EVENT_GESTURE_HOLD_END,
+		       finger_count, cancelled, &zero, &zero, 0, 0.0);
+}
+
+void
 switch_notify_toggle(struct libinput_device *device,
 		     uint64_t time,
 		     enum libinput_switch sw,
@@ -3326,6 +3533,9 @@
 			   LIBINPUT_EVENT_POINTER_MOTION,
 			   LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE,
 			   LIBINPUT_EVENT_POINTER_BUTTON,
+			   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+			   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			   LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
 			   LIBINPUT_EVENT_POINTER_AXIS);
 
 	return &event->base;
@@ -3357,7 +3567,9 @@
 			   LIBINPUT_EVENT_GESTURE_SWIPE_END,
 			   LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,
 			   LIBINPUT_EVENT_GESTURE_PINCH_UPDATE,
-			   LIBINPUT_EVENT_GESTURE_PINCH_END);
+			   LIBINPUT_EVENT_GESTURE_PINCH_END,
+			   LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+			   LIBINPUT_EVENT_GESTURE_HOLD_END);
 
 	return &event->base;
 }
@@ -3617,9 +3829,9 @@
 	if (group->refcount == 0) {
 		libinput_device_group_destroy(group);
 		return NULL;
-	} else {
-		return group;
 	}
+
+	return group;
 }
 
 LIBINPUT_EXPORT void
@@ -3854,8 +4066,9 @@
 
 	if (device->config.sendevents)
 		return device->config.sendevents->set_mode(device, mode);
-	else /* mode must be _ENABLED to get here */
-		return LIBINPUT_CONFIG_STATUS_SUCCESS;
+
+	/* mode must be _ENABLED to get here */
+	return LIBINPUT_CONFIG_STATUS_SUCCESS;
 }
 
 LIBINPUT_EXPORT uint32_t
@@ -3863,8 +4076,8 @@
 {
 	if (device->config.sendevents)
 		return device->config.sendevents->get_mode(device);
-	else
-		return LIBINPUT_CONFIG_SEND_EVENTS_ENABLED;
+
+	return LIBINPUT_CONFIG_SEND_EVENTS_ENABLED;
 }
 
 LIBINPUT_EXPORT uint32_t
@@ -4036,8 +4249,8 @@
 {
 	if (device->config.click_method)
 		return device->config.click_method->get_methods(device);
-	else
-		return 0;
+
+	return 0;
 }
 
 LIBINPUT_EXPORT enum libinput_config_status
@@ -4059,8 +4272,9 @@
 
 	if (device->config.click_method)
 		return device->config.click_method->set_method(device, method);
-	else /* method must be _NONE to get here */
-		return LIBINPUT_CONFIG_STATUS_SUCCESS;
+
+	/* method must be _NONE to get here */
+	return LIBINPUT_CONFIG_STATUS_SUCCESS;
 }
 
 LIBINPUT_EXPORT enum libinput_config_click_method
@@ -4068,8 +4282,8 @@
 {
 	if (device->config.click_method)
 		return device->config.click_method->get_method(device);
-	else
-		return LIBINPUT_CONFIG_CLICK_METHOD_NONE;
+
+	return LIBINPUT_CONFIG_CLICK_METHOD_NONE;
 }
 
 LIBINPUT_EXPORT enum libinput_config_click_method
@@ -4077,8 +4291,8 @@
 {
 	if (device->config.click_method)
 		return device->config.click_method->get_default_method(device);
-	else
-		return LIBINPUT_CONFIG_CLICK_METHOD_NONE;
+
+	return LIBINPUT_CONFIG_CLICK_METHOD_NONE;
 }
 
 LIBINPUT_EXPORT int
@@ -4087,8 +4301,8 @@
 {
 	if (device->config.middle_emulation)
 		return device->config.middle_emulation->available(device);
-	else
-		return LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED;
+
+	return LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED;
 }
 
 LIBINPUT_EXPORT enum libinput_config_status
@@ -4140,8 +4354,8 @@
 {
 	if (device->config.scroll_method)
 		return device->config.scroll_method->get_methods(device);
-	else
-		return 0;
+
+	return 0;
 }
 
 LIBINPUT_EXPORT enum libinput_config_status
@@ -4164,8 +4378,9 @@
 
 	if (device->config.scroll_method)
 		return device->config.scroll_method->set_method(device, method);
-	else /* method must be _NO_SCROLL to get here */
-		return LIBINPUT_CONFIG_STATUS_SUCCESS;
+
+	/* method must be _NO_SCROLL to get here */
+	return LIBINPUT_CONFIG_STATUS_SUCCESS;
 }
 
 LIBINPUT_EXPORT enum libinput_config_scroll_method
@@ -4173,8 +4388,8 @@
 {
 	if (device->config.scroll_method)
 		return device->config.scroll_method->get_method(device);
-	else
-		return LIBINPUT_CONFIG_SCROLL_NO_SCROLL;
+
+	return LIBINPUT_CONFIG_SCROLL_NO_SCROLL;
 }
 
 LIBINPUT_EXPORT enum libinput_config_scroll_method
@@ -4182,8 +4397,8 @@
 {
 	if (device->config.scroll_method)
 		return device->config.scroll_method->get_default_method(device);
-	else
-		return LIBINPUT_CONFIG_SCROLL_NO_SCROLL;
+
+	return LIBINPUT_CONFIG_SCROLL_NO_SCROLL;
 }
 
 LIBINPUT_EXPORT enum libinput_config_status
diff -Naur third_party_libinput_bak/src/libinput.h third_party_libinput_new/src/libinput.h
--- third_party_libinput_bak/src/libinput.h	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/libinput.h	2023-03-30 09:05:57.160446000 +0800
@@ -253,6 +253,12 @@
  *
  * The source for a libinput_pointer_axis event. See
  * libinput_event_pointer_get_axis_source() for details.
+ *
+ * @note Pointer axis sources are deprecated, the source is now encoded in
+ * the event types
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
  */
 enum libinput_pointer_axis_source {
 	/**
@@ -742,8 +748,80 @@
 	LIBINPUT_EVENT_POINTER_MOTION = 400,
 	LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE,
 	LIBINPUT_EVENT_POINTER_BUTTON,
+	/**
+	 * A scroll event from various sources.
+	 *
+	 * This event is deprecated as of libinput 1.19. Use
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS instead.
+	 *
+	 * Use libinput_event_pointer_get_axis_source() to determine the
+	 * source of a scroll event. For libinput versions 1.19 and later,
+	 * the source is encoded in the event type.
+	 *
+	 * This event is sent **in addition** to events of type
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
+	 * Do not mix and match, either use the old event or the new events.
+	 * libinput makes no guarantee about the relation between
+	 * @ref LIBINPUT_EVENT_POINTER_AXIS and the new event types
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS. You may receive
+	 * multiple zero, one or more new events per legacy event.
+	 *
+	 * @warning Ignore this event if you are processing
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, and
+	 * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
+	 */
 	LIBINPUT_EVENT_POINTER_AXIS,
 
+	/**
+	 * A scroll event from a wheel. This event is sent is sent **in
+	 * addition** to the @ref LIBINPUT_EVENT_POINTER_AXIS
+	 * event for all events with a
+	 * libinput_event_pointer_get_axis_source() of @ref
+	 * LIBINPUT_POINTER_AXIS_SOURCE_WHEEL. Ignore @ref
+	 * LIBINPUT_EVENT_POINTER_AXIS if you are processing this event.
+	 *
+	 * See the libinput documentation for details.
+	 *
+	 * @since 1.19
+	 */
+	LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+
+	/**
+	 * A scroll event caused by the movement of one or more fingers on a
+	 * device. This event is sent is sent **in addition** to the @ref
+	 * LIBINPUT_EVENT_POINTER_AXIS event for all events with a
+	 * libinput_event_pointer_get_axis_source() of @ref
+	 * LIBINPUT_POINTER_AXIS_SOURCE_FINGER. Ignore @ref
+	 * LIBINPUT_EVENT_POINTER_AXIS if you are processing this event.
+	 *
+	 * See the libinput documentation for details.
+	 *
+	 * @since 1.19
+	 */
+	LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+
+	/**
+	 * A scroll event from a continuous scroll source, e.g. button
+	 * scrolling. This event is sent is sent **in
+	 * addition** to the @ref LIBINPUT_EVENT_POINTER_AXIS
+	 * event for all events with a
+	 * libinput_event_pointer_get_axis_source() of @ref
+	 * LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS. Ignore @ref
+	 * LIBINPUT_EVENT_POINTER_AXIS if you are processing this event.
+	 *
+	 * See the libinput documentation for details.
+	 *
+	 * @since 1.19
+	 */
+	LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+
 	LIBINPUT_EVENT_TOUCH_DOWN = 500,
 	LIBINPUT_EVENT_TOUCH_UP,
 	LIBINPUT_EVENT_TOUCH_MOTION,
@@ -896,6 +974,11 @@
 	LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,
 	LIBINPUT_EVENT_GESTURE_PINCH_UPDATE,
 	LIBINPUT_EVENT_GESTURE_PINCH_END,
+	/**
+	 * @since 1.19
+	 */
+	LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+	LIBINPUT_EVENT_GESTURE_HOLD_END,
 
 	/**
 	 * @since 1.7
@@ -1410,10 +1493,15 @@
  * is a scroll stop event.
  *
  * For pointer events that are not of type @ref LIBINPUT_EVENT_POINTER_AXIS,
- * this function returns 0.
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL, @ref
+ * LIBINPUT_EVENT_POINTER_SCROLL_FINGER, or @ref
+ * LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS this function returns 0.
  *
  * @note It is an application bug to call this function for events other than
- * @ref LIBINPUT_EVENT_POINTER_AXIS.
+ * @ref LIBINPUT_EVENT_POINTER_AXIS,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, or
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
  *
  * @return Non-zero if this event contains a value for this axis
  */
@@ -1469,10 +1557,12 @@
  * Scrolling is in discrete steps, the value is the angle the wheel moved
  * in degrees. The default is 15 degrees per wheel click, but some mice may
  * have differently grained wheels. It is up to the caller how to interpret
- * such different step sizes.
+ * such different step sizes. Callers should use
+ * libinput_event_pointer_get_scroll_value_v120() for a simpler API of
+ * handling scroll wheel events of different step sizes.
  *
- * If the source is @ref LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS, no
- * terminating event is guaranteed (though it may happen).
+ * If the source is @ref LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS, libinput
+ * guarantees that a scroll sequence is terminated with a scroll value of 0.
  * The coordinate system is identical to the cursor movement, i.e. a
  * scroll value of 1 represents the equivalent relative motion of 1.
  *
@@ -1485,6 +1575,12 @@
  * @note It is an application bug to call this function for events other than
  * @ref LIBINPUT_EVENT_POINTER_AXIS.
  *
+ * @note This function is superfluous as of libinput 1.19. The event
+ * codes for @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL, @ref
+ * LIBINPUT_EVENT_POINTER_SCROLL_FINGER and @ref
+ * LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS have the axis source encoded in
+ * the event type.
+ *
  * @return The source for this axis event
  */
 enum libinput_pointer_axis_source
@@ -1496,6 +1592,14 @@
  * Return the axis value in discrete steps for a given axis event. How a
  * value translates into a discrete step depends on the source.
  *
+ * @note This function does not support high-resolution mouse wheels and
+ * should be considered deprecated as of libinput 1.19. Callers should use
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL and
+ * libinput_event_pointer_get_scroll_value_v120() instead.
+ *
+ * If the event is not of type @ref LIBINPUT_EVENT_POINTER_AXIS, this
+ * function returns 0.
+ *
  * If the source is @ref LIBINPUT_POINTER_AXIS_SOURCE_WHEEL, the discrete
  * value correspond to the number of physical mouse wheel clicks.
  *
@@ -1505,6 +1609,7 @@
  * @return The discrete value for the given event.
  *
  * @see libinput_event_pointer_get_axis_value
+ * @see libinput_event_pointer_get_scroll_value_v120
  */
 double
 libinput_event_pointer_get_axis_value_discrete(struct libinput_event_pointer *event,
@@ -1513,6 +1618,98 @@
 /**
  * @ingroup event_pointer
  *
+ * Return the axis value of the given axis. The interpretation of the value
+ * depends on the axis. For the two scrolling axes
+ * @ref LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL and
+ * @ref LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, the value of the event is in
+ * relative scroll units, with the positive direction being down or right,
+ * respectively. If libinput_event_pointer_has_axis() returns 0 for an axis,
+ * this function returns 0 for that axis.
+ *
+ * If the event is @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, libinput
+ * guarantees that a scroll sequence is terminated with a scroll value of 0.
+ * A caller may use this information to decide on whether kinetic scrolling
+ * should be triggered on this scroll sequence.
+ * The coordinate system is identical to the cursor movement, i.e. a
+ * scroll value of 1 represents the equivalent relative motion of 1.
+ *
+ * If the event is @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL, no terminating
+ * event is guaranteed (though it may happen).
+ * Scrolling is in discrete steps, the value is the angle the wheel moved
+ * in degrees. The default is 15 degrees per wheel click, but some mice may
+ * have differently grained wheels. It is up to the caller how to interpret
+ * such different step sizes. Callers should use
+ * libinput_event_pointer_get_scroll_value_v120() for a simpler API of
+ * handling scroll wheel events of different step sizes.
+ *
+ * If the event is @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS, libinput
+ * guarantees that a scroll sequence is terminated with a scroll value of 0.
+ * The coordinate system is identical to the cursor movement, i.e. a
+ * scroll value of 1 represents the equivalent relative motion of 1.
+ *
+ * For pointer events that are not of type
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, or
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS, this function returns zero.
+ *
+ * @note It is an application bug to call this function for events other than
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_FINGER, or
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS.
+ *
+ * @return The axis value of this event
+ *
+ * @see libinput_event_pointer_get_scroll_value_v120
+ *
+ * @since 1.19
+ */
+double
+libinput_event_pointer_get_scroll_value(struct libinput_event_pointer *event,
+					enum libinput_pointer_axis axis);
+
+/**
+ * @ingroup event_pointer
+ *
+ * For events of type @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL
+ * the v120-normalized value represents the movement in logical mouse wheel
+ * clicks, normalized to the -120..+120 range.
+ *
+ * A value that is a fraction of ±120 indicates a wheel movement less than
+ * one logical click, a caller should either scroll by the respective
+ * fraction of the normal scroll distance or accumulate that value until a
+ * multiple of 120 is reached.
+ *
+ * For most callers, this is the preferred way of handling high-resolution
+ * scroll events.
+ *
+ * The normalized v120 value does not take device-specific physical angles
+ * or distances into account, i.e. a wheel with a click angle of 20 degrees
+ * produces only 18 logical clicks per 360 degree rotation, a wheel with a
+ * click angle of 15 degrees produces 24 logical clicks per 360 degree
+ * rotation. Where the physical angle matters, use
+ * libinput_event_pointer_get_axis_value() instead.
+ *
+ * The magic number 120 originates from the <a
+ * href="http://download.microsoft.com/download/b/d/1/bd1f7ef4-7d72-419e-bc5c-9f79ad7bb66e/wheel.docx">
+ * Windows Vista Mouse Wheel design document</a>.
+ *
+ * @note It is an application bug to call this function for events other than
+ * @ref LIBINPUT_EVENT_POINTER_SCROLL_WHEEL.
+ *
+ * @return A value normalized to the 0-±120 range
+ *
+ * @see libinput_event_pointer_get_axis_value
+ * @see libinput_event_pointer_get_axis_value_discrete
+ *
+ * @since 1.19
+ */
+double
+libinput_event_pointer_get_scroll_value_v120(struct libinput_event_pointer *event,
+					     enum libinput_pointer_axis axis);
+
+/**
+ * @ingroup event_pointer
+ *
  * @return The generic libinput_event of this event
  */
 struct libinput_event *
@@ -4560,10 +4757,9 @@
  * @ingroup config
  *
  * Enable or disable tap-and-drag on this device. When enabled, a
- * single-finger tap immediately followed by a finger down results in a
- * button down event, subsequent finger motion thus triggers a drag. The
- * button is released on finger up. See the libinput documentation for more
- * details.
+ * tap immediately followed by a finger down results in a button down event,
+ * subsequent finger motion thus triggers a drag. The button is released
+ * on finger up. See the libinput documentation for more details.
  *
  * @param device The device to configure
  * @param enable @ref LIBINPUT_CONFIG_DRAG_ENABLED to enable, @ref
@@ -5053,7 +5249,7 @@
  * mode.
  *
  * @param device The device to configure
- * @param mode The mode to set the device to.
+ * @param profile The profile to set the device to.
  *
  * @return A config status code
  *
@@ -5061,7 +5257,7 @@
  */
 enum libinput_config_status
 libinput_device_config_accel_set_profile(struct libinput_device *device,
-					 enum libinput_config_accel_profile mode);
+					 enum libinput_config_accel_profile profile);
 
 /**
  * @ingroup config
diff -Naur third_party_libinput_bak/src/libinput.sym third_party_libinput_new/src/libinput.sym
--- third_party_libinput_bak/src/libinput.sym	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/libinput.sym	2023-03-30 09:13:28.009841600 +0800
@@ -314,3 +314,8 @@
 	libinput_event_tablet_pad_get_key;
 	libinput_event_tablet_pad_get_key_state;
 } LIBINPUT_1.14;
+
+LIBINPUT_1.19 {
+	libinput_event_pointer_get_scroll_value_v120;
+	libinput_event_pointer_get_scroll_value;
+} LIBINPUT_1.15;
diff -Naur third_party_libinput_bak/src/path-seat.c third_party_libinput_new/src/path-seat.c
--- third_party_libinput_bak/src/path-seat.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/path-seat.c	2023-03-30 09:20:43.314697500 +0800
@@ -49,13 +49,12 @@
 static const char default_seat_name[] = "default";
 
 static void
-path_disable_device(struct libinput *libinput,
-		    struct evdev_device *device)
+path_disable_device(struct evdev_device *device)
 {
 	struct libinput_seat *seat = device->base.seat;
-	struct evdev_device *dev, *next;
+	struct evdev_device *dev;
 
-	list_for_each_safe(dev, next,
+	list_for_each_safe(dev,
 			   &seat->devices_list, base.link) {
 		if (dev != device)
 			continue;
@@ -69,14 +68,14 @@
 path_input_disable(struct libinput *libinput)
 {
 	struct path_input *input = (struct path_input*)libinput;
-	struct path_seat *seat, *tmp;
-	struct evdev_device *device, *next;
+	struct path_seat *seat;
+	struct evdev_device *device;
 
-	list_for_each_safe(seat, tmp, &input->base.seat_list, base.link) {
+	list_for_each_safe(seat, &input->base.seat_list, base.link) {
 		libinput_seat_ref(&seat->base);
-		list_for_each_safe(device, next,
+		list_for_each_safe(device,
 				   &seat->base.devices_list, base.link)
-			path_disable_device(libinput, device);
+			path_disable_device(device);
 		libinput_seat_unref(&seat->base);
 	}
 }
@@ -140,7 +139,7 @@
 		seat_logical_name = safe_strdup(seat_logical_name_override);
 	} else {
 		seat_prop = udev_device_get_property_value(udev_device, "WL_SEAT");
-		seat_logical_name = strdup(seat_prop ? seat_prop : default_seat_name);
+		seat_logical_name = safe_strdup(seat_prop ? seat_prop : default_seat_name);
 	}
 
 	if (!seat_logical_name) {
@@ -242,11 +241,11 @@
 path_input_destroy(struct libinput *input)
 {
 	struct path_input *path_input = (struct path_input*)input;
-	struct path_device *dev, *tmp;
+	struct path_device *dev;
 
 	udev_unref(path_input->udev);
 
-	list_for_each_safe(dev, tmp, &path_input->path_list, link)
+	list_for_each_safe(dev, &path_input->path_list, link)
 		path_device_destroy(dev);
 
 }
@@ -415,7 +414,7 @@
 		return;
 	}
 
-	list_for_each(dev, &input->path_list, link) {
+	list_for_each_safe(dev, &input->path_list, link) {
 		if (dev->udev_device == evdev->udev_device) {
 			path_device_destroy(dev);
 			break;
@@ -424,6 +423,6 @@
 
 	seat = device->seat;
 	libinput_seat_ref(seat);
-	path_disable_device(libinput, evdev);
+	path_disable_device(evdev);
 	libinput_seat_unref(seat);
 }
diff -Naur third_party_libinput_bak/src/quirks.c third_party_libinput_new/src/quirks.c
--- third_party_libinput_bak/src/quirks.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/quirks.c	2023-03-30 09:21:19.200950700 +0800
@@ -35,6 +35,9 @@
 #include <dirent.h>
 #include <fnmatch.h>
 #include <libgen.h>
+#ifdef __FreeBSD__
+#include <kenv.h>
+#endif
 
 #include "libinput-versionsort.h"
 #include "libinput-util.h"
@@ -57,6 +60,14 @@
 	PT_RANGE,
 	PT_DOUBLE,
 	PT_TUPLES,
+	PT_UINT_ARRAY,
+};
+
+struct quirk_array {
+	union {
+		uint32_t u[32];
+	} data;
+	size_t nelements;
 };
 
 /**
@@ -79,6 +90,7 @@
 		struct quirk_dimensions dim;
 		struct quirk_range range;
 		struct quirk_tuples tuples;
+		struct quirk_array array;
 	} value;
 };
 
@@ -102,6 +114,7 @@
 	BT_PS2,
 	BT_RMI,
 	BT_I2C,
+	BT_SPI,
 };
 
 enum udev_type {
@@ -239,11 +252,9 @@
 	case QUIRK_MODEL_HP_STREAM11_TOUCHPAD:		return "ModelHPStream11Touchpad";
 	case QUIRK_MODEL_HP_ZBOOK_STUDIO_G3:		return "ModelHPZBookStudioG3";
 	case QUIRK_MODEL_INVERT_HORIZONTAL_SCROLLING:	return "ModelInvertHorizontalScrolling";
-	case QUIRK_MODEL_LENOVO_L380_TOUCHPAD:		return "ModelLenovoL380Touchpad";
 	case QUIRK_MODEL_LENOVO_SCROLLPOINT:		return "ModelLenovoScrollPoint";
 	case QUIRK_MODEL_LENOVO_T450_TOUCHPAD:		return "ModelLenovoT450Touchpad";
-	case QUIRK_MODEL_LENOVO_T480S_TOUCHPAD:		return "ModelLenovoT480sTouchpad";
-	case QUIRK_MODEL_LENOVO_T490S_TOUCHPAD:		return "ModelLenovoT490sTouchpad";
+	case QUIRK_MODEL_LENOVO_TRACKPOINT_KEYBOARD_2:  return "ModelLenovoTrackpointKeyboard2";
 	case QUIRK_MODEL_LENOVO_X1GEN6_TOUCHPAD:	return "ModelLenovoX1Gen6Touchpad";
 	case QUIRK_MODEL_LENOVO_X230:			return "ModelLenovoX230";
 	case QUIRK_MODEL_SYNAPTICS_SERIAL_TOUCHPAD:	return "ModelSynapticsSerialTouchpad";
@@ -270,9 +281,13 @@
 	case QUIRK_ATTR_TRACKPOINT_MULTIPLIER:		return "AttrTrackpointMultiplier";
 	case QUIRK_ATTR_THUMB_PRESSURE_THRESHOLD:	return "AttrThumbPressureThreshold";
 	case QUIRK_ATTR_USE_VELOCITY_AVERAGING:		return "AttrUseVelocityAveraging";
+	case QUIRK_ATTR_TABLET_SMOOTHING:               return "AttrTabletSmoothing";
 	case QUIRK_ATTR_THUMB_SIZE_THRESHOLD:		return "AttrThumbSizeThreshold";
 	case QUIRK_ATTR_MSC_TIMESTAMP:			return "AttrMscTimestamp";
 	case QUIRK_ATTR_EVENT_CODE_DISABLE:		return "AttrEventCodeDisable";
+	case QUIRK_ATTR_EVENT_CODE_ENABLE:		return "AttrEventCodeEnable";
+	case QUIRK_ATTR_INPUT_PROP_DISABLE:		return "AttrInputPropDisable";
+	case QUIRK_ATTR_INPUT_PROP_ENABLE:		return "AttrInputPropEnable";
 	default:
 		abort();
 	}
@@ -343,10 +358,11 @@
 }
 
 /**
- * Return the dmi modalias from the udev device.
+ * Return the system DMI info in modalias format.
  */
+#ifdef __linux__
 static inline char *
-init_dmi(void)
+init_dmi_linux(void)
 {
 	struct udev *udev;
 	struct udev_device *udev_device;
@@ -354,9 +370,6 @@
 	char *copy = NULL;
 	const char *syspath = "/sys/devices/virtual/dmi/id";
 
-	if (getenv("LIBINPUT_RUNNING_TEST_SUITE"))
-		return safe_strdup("dmi:");
-
 	udev = udev_new();
 	if (!udev)
 		return NULL;
@@ -379,6 +392,73 @@
 
 	return copy;
 }
+#endif
+
+#ifdef __FreeBSD__
+static inline char *
+init_dmi_freebsd(void)
+{
+#define LEN (KENV_MVALLEN + 1)
+	char *modalias;
+	char bios_vendor[LEN], bios_version[LEN], bios_date[LEN];
+	char sys_vendor[LEN], product_name[LEN], product_version[LEN];
+	char board_vendor[LEN], board_name[LEN], board_version[LEN];
+	char chassis_vendor[LEN], chassis_type[LEN], chassis_version[LEN];
+	int chassis_type_num = 0x2;
+
+	kenv(KENV_GET, "smbios.bios.vendor", bios_vendor, LEN);
+	kenv(KENV_GET, "smbios.bios.version", bios_version, LEN);
+	kenv(KENV_GET, "smbios.bios.reldate", bios_date, LEN);
+	kenv(KENV_GET, "smbios.system.maker", sys_vendor, LEN);
+	kenv(KENV_GET, "smbios.system.product", product_name, LEN);
+	kenv(KENV_GET, "smbios.system.version", product_version, LEN);
+	kenv(KENV_GET, "smbios.planar.maker", board_vendor, LEN);
+	kenv(KENV_GET, "smbios.planar.product", board_name, LEN);
+	kenv(KENV_GET, "smbios.planar.version", board_version, LEN);
+	kenv(KENV_GET, "smbios.chassis.vendor", chassis_vendor, LEN);
+	kenv(KENV_GET, "smbios.chassis.type", chassis_type, LEN);
+	kenv(KENV_GET, "smbios.chassis.version", chassis_version, LEN);
+#undef LEN
+
+	if (strcmp(chassis_type, "Desktop") == 0)
+		chassis_type_num = 0x3;
+	else if (strcmp(chassis_type, "Portable") == 0)
+		chassis_type_num = 0x8;
+	else if (strcmp(chassis_type, "Laptop") == 0)
+		chassis_type_num = 0x9;
+	else if (strcmp(chassis_type, "Notebook") == 0)
+		chassis_type_num = 0xA;
+	else if (strcmp(chassis_type, "Tablet") == 0)
+		chassis_type_num = 0x1E;
+	else if (strcmp(chassis_type, "Convertible") == 0)
+		chassis_type_num = 0x1F;
+	else if (strcmp(chassis_type, "Detachable") == 0)
+		chassis_type_num = 0x20;
+
+	xasprintf(&modalias,
+		"dmi:bvn%s:bvr%s:bd%s:svn%s:pn%s:pvr%s:rvn%s:rn%s:rvr%s:cvn%s:ct%d:cvr%s:",
+		bios_vendor, bios_version, bios_date, sys_vendor, product_name,
+		product_version, board_vendor, board_name, board_version, chassis_vendor,
+		chassis_type_num, chassis_version);
+
+	return modalias;
+}
+#endif
+
+static inline char *
+init_dmi(void)
+{
+	if (getenv("LIBINPUT_RUNNING_TEST_SUITE"))
+		return safe_strdup("dmi:");
+
+#if defined(__linux__)
+	return init_dmi_linux();
+#elif defined(__FreeBSD__)
+	return init_dmi_freebsd();
+#else
+	return NULL;
+#endif
+}
 
 /**
  * Return the dt compatible string
@@ -426,14 +506,14 @@
 static inline void
 section_destroy(struct section *s)
 {
-	struct property *p, *tmp;
+	struct property *p;
 
 	free(s->name);
 	free(s->match.name);
 	free(s->match.dmi);
 	free(s->match.dt);
 
-	list_for_each_safe(p, tmp, &s->properties, link)
+	list_for_each_safe(p, &s->properties, link)
 		property_cleanup(p);
 
 	assert(list_empty(&s->properties));
@@ -490,6 +570,8 @@
 			s->match.bus = BT_RMI;
 		else if (streq(value, "i2c"))
 			s->match.bus = BT_I2C;
+		else if (streq(value, "spi"))
+			s->match.bus = BT_SPI;
 		else
 			goto out;
 	} else if (streq(key, "MatchVendor")) {
@@ -578,11 +660,7 @@
 
 	assert(strneq(key, "Model", 5));
 
-	if (streq(value, "1"))
-		b = true;
-	else if (streq(value, "0"))
-		b = false;
-	else
+	if (!parse_boolean_property(value, &b))
 		return false;
 
 	do {
@@ -707,11 +785,14 @@
 		rc = true;
 	} else if (streq(key, quirk_get_name(QUIRK_ATTR_USE_VELOCITY_AVERAGING))) {
 		p->id = QUIRK_ATTR_USE_VELOCITY_AVERAGING;
-		if (streq(value, "1"))
-			b = true;
-		else if (streq(value, "0"))
-			b = false;
-		else
+		if (!parse_boolean_property(value, &b))
+			goto out;
+		p->type = PT_BOOL;
+		p->value.b = b;
+		rc = true;
+	} else if (streq(key, quirk_get_name(QUIRK_ATTR_TABLET_SMOOTHING))) {
+		p->id = QUIRK_ATTR_TABLET_SMOOTHING;
+		if (!parse_boolean_property(value, &b))
 			goto out;
 		p->type = PT_BOOL;
 		p->value.b = b;
@@ -737,10 +818,15 @@
 		p->type = PT_STRING;
 		p->value.s = safe_strdup(value);
 		rc = true;
-	} else if (streq(key, quirk_get_name(QUIRK_ATTR_EVENT_CODE_DISABLE))) {
+	} else if (streq(key, quirk_get_name(QUIRK_ATTR_EVENT_CODE_DISABLE)) ||
+		   streq(key, quirk_get_name(QUIRK_ATTR_EVENT_CODE_ENABLE))) {
 		struct input_event events[32];
 		size_t nevents = ARRAY_LENGTH(events);
-		p->id = QUIRK_ATTR_EVENT_CODE_DISABLE;
+		if (streq(key, quirk_get_name(QUIRK_ATTR_EVENT_CODE_DISABLE)))
+		    p->id = QUIRK_ATTR_EVENT_CODE_DISABLE;
+		else
+		    p->id = QUIRK_ATTR_EVENT_CODE_ENABLE;
+
 		if (!parse_evcode_property(value, events, &nevents) ||
 		    nevents == 0)
 			goto out;
@@ -753,6 +839,24 @@
 		p->type = PT_TUPLES;
 
 		rc = true;
+	} else if (streq(key, quirk_get_name(QUIRK_ATTR_INPUT_PROP_DISABLE)) ||
+		   streq(key, quirk_get_name(QUIRK_ATTR_INPUT_PROP_ENABLE))) {
+		unsigned int props[INPUT_PROP_CNT];
+		size_t nprops = ARRAY_LENGTH(props);
+		if (streq(key, quirk_get_name(QUIRK_ATTR_INPUT_PROP_DISABLE)))
+			p->id = QUIRK_ATTR_INPUT_PROP_DISABLE;
+		else
+			p->id = QUIRK_ATTR_INPUT_PROP_ENABLE;
+
+		if (!parse_input_prop_property(value, props, &nprops) ||
+		    nprops == 0)
+			goto out;
+
+		memcpy(p->value.array.data.u, props, nprops * sizeof(unsigned int));
+		p->value.array.nelements = nprops;
+		p->type = PT_UINT_ARRAY;
+
+		rc = true;
 	} else {
 		qlog_error(ctx, "Unknown key %s in %s\n", key, s->name);
 	}
@@ -916,7 +1020,7 @@
 			break;
 		default:
 			/* entries must start with A-Z */
-			if (line[0] < 'A' && line[0] > 'Z') {
+			if (line[0] < 'A' || line[0] > 'Z') {
 				qlog_parser(ctx, "%s:%d: Unexpected line %s\n",
 						 path, lineno, line);
 				goto out;
@@ -1067,7 +1171,7 @@
 struct quirks_context *
 quirks_context_unref(struct quirks_context *ctx)
 {
-	struct section *s, *tmp;
+	struct section *s;
 
 	if (!ctx)
 		return NULL;
@@ -1081,7 +1185,7 @@
 	/* Caller needs to clean up before calling this */
 	assert(list_empty(&ctx->quirks));
 
-	list_for_each_safe(s, tmp, &ctx->sections, link) {
+	list_for_each_safe(s, &ctx->sections, link) {
 		section_destroy(s);
 	}
 
@@ -1209,6 +1313,10 @@
 		m->bus = BT_I2C;
 		m->bits |= M_BUS;
 		break;
+	case BUS_SPI:
+		m->bus = BT_SPI;
+		m->bits |= M_BUS;
+		break;
 	default:
 		break;
 	}
@@ -1583,3 +1691,25 @@
 
 	return true;
 }
+
+bool
+quirks_get_uint32_array(struct quirks *q,
+			enum quirk which,
+			const uint32_t **array,
+			size_t *nelements)
+{
+	struct property *p;
+
+	if (!q)
+		return false;
+
+	p = quirk_find_prop(q, which);
+	if (!p)
+		return false;
+
+	assert(p->type == PT_UINT_ARRAY);
+	*array = p->value.array.data.u;
+	*nelements = p->value.array.nelements;
+
+	return true;
+}
diff -Naur third_party_libinput_bak/src/quirks.h third_party_libinput_new/src/quirks.h
--- third_party_libinput_bak/src/quirks.h	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/quirks.h	2023-03-30 09:21:32.602395600 +0800
@@ -72,11 +72,9 @@
 	QUIRK_MODEL_HP_STREAM11_TOUCHPAD,
 	QUIRK_MODEL_HP_ZBOOK_STUDIO_G3,
 	QUIRK_MODEL_INVERT_HORIZONTAL_SCROLLING,
-	QUIRK_MODEL_LENOVO_L380_TOUCHPAD,
 	QUIRK_MODEL_LENOVO_SCROLLPOINT,
 	QUIRK_MODEL_LENOVO_T450_TOUCHPAD,
-	QUIRK_MODEL_LENOVO_T480S_TOUCHPAD,
-	QUIRK_MODEL_LENOVO_T490S_TOUCHPAD,
+	QUIRK_MODEL_LENOVO_TRACKPOINT_KEYBOARD_2,
 	QUIRK_MODEL_LENOVO_X1GEN6_TOUCHPAD,
 	QUIRK_MODEL_LENOVO_X230,
 	QUIRK_MODEL_SYNAPTICS_SERIAL_TOUCHPAD,
@@ -106,9 +104,13 @@
 	QUIRK_ATTR_TRACKPOINT_MULTIPLIER,
 	QUIRK_ATTR_THUMB_PRESSURE_THRESHOLD,
 	QUIRK_ATTR_USE_VELOCITY_AVERAGING,
+	QUIRK_ATTR_TABLET_SMOOTHING,
 	QUIRK_ATTR_THUMB_SIZE_THRESHOLD,
 	QUIRK_ATTR_MSC_TIMESTAMP,
 	QUIRK_ATTR_EVENT_CODE_DISABLE,
+	QUIRK_ATTR_EVENT_CODE_ENABLE,
+	QUIRK_ATTR_INPUT_PROP_DISABLE,
+	QUIRK_ATTR_INPUT_PROP_ENABLE,
 
 	_QUIRK_LAST_ATTR_QUIRK_, /* Guard: do not modify */
 };
@@ -118,7 +120,7 @@
  * tools, not user consumption. Do not display this in a GUI.
  */
 const char*
-quirk_get_name(enum quirk which);
+quirk_get_name(enum quirk q);
 
 /**
  * Log priorities used if custom logging is enabled.
@@ -312,3 +314,17 @@
 quirks_get_tuples(struct quirks *q,
 		  enum quirk which,
 		  const struct quirk_tuples **tuples);
+
+/**
+ * Get the uint32 array of the given quirk.
+ * This function will assert if the quirk type does not match the
+ * requested type. If the quirk is not set for this device, tuples is
+ * unchanged.
+ *
+ * @return true if the quirk value is valid, false otherwise.
+ */
+bool
+quirks_get_uint32_array(struct quirks *q,
+			enum quirk which,
+			const uint32_t **array,
+			size_t *nelements);
diff -Naur third_party_libinput_bak/src/timer.c third_party_libinput_new/src/timer.c
--- third_party_libinput_bak/src/timer.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/timer.c	2023-03-30 09:21:41.798391400 +0800
@@ -48,7 +48,7 @@
 void
 libinput_timer_destroy(struct libinput_timer *timer)
 {
-	if (timer->link.prev != NULL && timer->link.prev != NULL &&
+	if (timer->link.prev != NULL && timer->link.next != NULL &&
 	    !list_empty(&timer->link)) {
 		log_bug_libinput(timer->libinput,
 				 "timer: %s has not been cancelled\n",
@@ -136,7 +136,7 @@
 	struct libinput_timer *timer;
 
 restart:
-	list_for_each(timer, &libinput->timer.list, link) {
+	list_for_each_safe(timer, &libinput->timer.list, link) {
 		if (timer->expire == 0)
 			continue;
 
diff -Naur third_party_libinput_bak/src/udev-seat.c third_party_libinput_new/src/udev-seat.c
--- third_party_libinput_bak/src/udev-seat.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/udev-seat.c	2023-03-30 09:22:02.177517000 +0800
@@ -128,7 +128,9 @@
 			 sysname,
 			 devnode);
 		return 0;
-	} else if (device == NULL) {
+	}
+
+	if (device == NULL) {
 		log_info(&input->base,
 			 "%-7s - failed to create input device '%s'\n",
 			 sysname,
@@ -147,13 +149,13 @@
 static void
 device_removed(struct udev_device *udev_device, struct udev_input *input)
 {
-	struct evdev_device *device, *next;
+	struct evdev_device *device;
 	struct udev_seat *seat;
 	const char *syspath;
 
 	syspath = udev_device_get_syspath(udev_device);
 	list_for_each(seat, &input->base.seat_list, base.link) {
-		list_for_each_safe(device, next,
+		list_for_each_safe(device,
 				   &seat->base.devices_list, base.link) {
 			if (streq(syspath,
 				  udev_device_get_syspath(device->udev_device))) {
@@ -182,7 +184,7 @@
 			continue;
 
 		sysname = udev_device_get_sysname(device);
-		if (strncmp("event", sysname, 5) != 0) {
+		if (!strneq("event", sysname, 5)) {
 			udev_device_unref(device);
 			continue;
 		}
@@ -226,7 +228,7 @@
 	if (!action)
 		goto out;
 
-	if (strncmp("event", udev_device_get_sysname(udev_device), 5) != 0)
+	if (!strneq("event", udev_device_get_sysname(udev_device), 5))
 		goto out;
 
 	if (streq(action, "add"))
@@ -241,12 +243,12 @@
 static void
 udev_input_remove_devices(struct udev_input *input)
 {
-	struct evdev_device *device, *next;
-	struct udev_seat *seat, *tmp;
+	struct evdev_device *device;
+	struct udev_seat *seat;
 
-	list_for_each_safe(seat, tmp, &input->base.seat_list, base.link) {
+	list_for_each_safe(seat, &input->base.seat_list, base.link) {
 		libinput_seat_ref(&seat->base);
-		list_for_each_safe(device, next,
+		list_for_each_safe(device,
 				   &seat->base.devices_list, base.link) {
 			evdev_device_remove(device);
 		}
@@ -287,8 +289,11 @@
 		return -1;
 	}
 
-	udev_monitor_filter_add_match_subsystem_devtype(input->udev_monitor,
-			"input", NULL);
+	if (udev_monitor_filter_add_match_subsystem_devtype(
+				input->udev_monitor, "input", NULL)) {
+		log_info(libinput, "udev: failed to set up filter\n");
+		return -1;
+	}
 
 	if (udev_monitor_enable_receiving(input->udev_monitor)) {
 		log_info(libinput, "udev: failed to bind the udev monitor\n");
diff -Naur third_party_libinput_bak/src/util-list.h third_party_libinput_new/src/util-list.h
--- third_party_libinput_bak/src/util-list.h	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/util-list.h	2023-03-30 09:22:59.413102900 +0800
@@ -35,33 +35,164 @@
  * Wayland project; except that wl_ prefix has been removed.
  */
 
+
+/**
+ * Doubly linked list implementation. This struct is used for both the list
+ * nodes and the list head. Use like this:
+ *
+ * @code
+ *
+ *	struct foo {
+ *	   struct list list_of_bars; // the list head
+ *	};
+ *
+ *	struct bar {
+ *	   struct list link; // links between the bars
+ *	};
+ *
+ *      struct foo *f = zalloc(sizeof *f);
+ *      struct bar *b = make_some_bar();
+ *
+ *	list_init(&f->list_of_bars);
+ *	list_append(&f->list_of_bars, &b->link);
+ *	list_remove(&b->link);
+ * @endcode
+ */
 struct list {
 	struct list *prev;
 	struct list *next;
 };
 
+/**
+ * Initialize a list head. This function *must* be called once for each list
+ * head. This function *must not* be called for a node to be added to a
+ * list.
+ */
 void list_init(struct list *list);
+
+/**
+ * Insert an element at the front of the list
+ */
 void list_insert(struct list *list, struct list *elm);
+/**
+ * Append an element to the  back of the list
+ */
 void list_append(struct list *list, struct list *elm);
+
+/**
+ * Remove an element from list.
+ *
+ * Removing a list element is only possible once, the caller must track
+ * whether the list node has already been removed.
+ *
+ */
 void list_remove(struct list *elm);
+/**
+ * Returns true if the given list head is an empty list.
+ */
 bool list_empty(const struct list *list);
 
+/**
+ * Return the 'type' parent container struct of 'ptr' of which
+ * 'member' is our 'ptr' field. For example:
+ *
+ * @code
+ *     struct foo {			// the parent container struct
+ *         uint32_t a;
+ *         struct bar bar_member;	// the member field
+ *     };
+ *
+ *     struct foo *f = zalloc(sizeof *f);
+ *     struct bar *b = &f->bar_member;
+ *     struct foo *f2 = container_of(b, struct foo, bar_member);
+ *
+ *     assert(f == f2);
+ * @endcode
+ */
 #define container_of(ptr, type, member)					\
 	(__typeof__(type) *)((char *)(ptr) -				\
 		 offsetof(__typeof__(type), member))
 
-#define list_first_entry(head, pos, member)				\
-	container_of((head)->next, __typeof__(*pos), member)
+/**
+ * Given a list 'head', return the first entry of type 'pos' that has a
+ * member 'link'.
+ *
+ * The 'pos' argument is solely used to determine the type be returned and
+ * not modified otherwise. It is common to use the same pointer that the
+ * return value of list_first_entry() is assigned to, for example:
+ *
+ * @code
+ *     struct foo {
+ *        struct list list_of_bars;
+ *     };
+ *
+ *     struct bar {
+ *         struct list link;
+ *     }
+ *
+ *     struct foo *f = get_a_foo();
+ *     struct bar *b = 0;  // initialize to avoid static analysis errors
+ *     b = list_first_entry(&f->list_of_bars, b, link);
+ * @endcode
+ */
+#define list_first_entry(head, pointer_of_type, member)				\
+	container_of((head)->next, __typeof__(*pointer_of_type), member)
 
+/**
+ * Given a list 'head', return the first entry of type 'container_type' that
+ * has a member 'link'.
+ *
+ * @code
+ *     struct foo {
+ *        struct list list_of_bars;
+ *     };
+ *
+ *     struct bar {
+ *         struct list link;
+ *     }
+ *
+ *     struct foo *f = get_a_foo();
+ *     struct bar *b = list_first_entry(&f->list_of_bars, struct bar, link);
+ * @endcode
+ */
+#define list_first_entry_by_type(head, container_type, member)		\
+	container_of((head)->next, container_type, member)
+
+/**
+ * Iterate through the list.
+ *
+ * @code
+ *     struct foo *f =  get_a_foo();
+ *     struct bar *element;
+ *     list_for_each(element, &f->list_of_bars, link) {
+ *     }
+ * @endcode
+ *
+ * If a list node needs to be removed during iteration, use
+ * list_for_each_safe().
+ */
 #define list_for_each(pos, head, member)				\
-	for (pos = 0, pos = list_first_entry(head, pos, member);	\
+	for (pos = list_first_entry_by_type(head, __typeof__(*pos), member); \
 	     &pos->member != (head);					\
-	     pos = list_first_entry(&pos->member, pos, member))
+	     pos = list_first_entry_by_type(&pos->member, __typeof__(*pos), member))
 
-#define list_for_each_safe(pos, tmp, head, member)			\
-	for (pos = 0, tmp = 0,						\
-	     pos = list_first_entry(head, pos, member),			\
-	     tmp = list_first_entry(&pos->member, tmp, member);		\
+/**
+ * Iterate through the list. Equivalent to list_for_each() but allows
+ * calling list_remove() on the element.
+ *
+ * @code
+ *     struct foo *f =  get_a_foo();
+ *     struct bar *element;
+ *     list_for_each(element, tmp, &f->list_of_bars, link) {
+ *          list_remove(&element->link);
+ *     }
+ * @endcode
+ */
+#define list_for_each_safe(pos, head, member)				\
+	for (__typeof__(pos) _tmp = ({ \
+				     pos = list_first_entry_by_type(head, __typeof__(*pos), member);	\
+				     list_first_entry_by_type(&pos->member, __typeof__(*_tmp), member); \
+				     }); \
 	     &pos->member != (head);					\
-	     pos = tmp,							\
-	     tmp = list_first_entry(&pos->member, tmp, member))
+	     pos = _tmp,						\
+	     _tmp = list_first_entry_by_type(&pos->member, __typeof__(*_tmp), member))
diff -Naur third_party_libinput_bak/src/util-macros.h third_party_libinput_new/src/util-macros.h
--- third_party_libinput_bak/src/util-macros.h	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/util-macros.h	2023-03-30 09:23:17.012112100 +0800
@@ -57,3 +57,5 @@
 
 
 #define CASE_RETURN_STRING(a) case a: return #a
+
+#define _fallthrough_ __attribute__((fallthrough))
diff -Naur third_party_libinput_bak/src/util-prop-parsers.c third_party_libinput_new/src/util-prop-parsers.c
--- third_party_libinput_bak/src/util-prop-parsers.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/util-prop-parsers.c	2023-03-30 09:23:50.272328200 +0800
@@ -249,7 +249,7 @@
 
 /**
  * Parses a string of the format "a:b" where both a and b must be integer
- * numbers and a > b. Also allowed is the special string vaule "none" which
+ * numbers and a > b. Also allowed is the special string value "none" which
  * amounts to unsetting the property.
  *
  * @param prop The value of the property
@@ -283,6 +283,22 @@
 	return true;
 }
 
+bool
+parse_boolean_property(const char *prop, bool *b)
+{
+	if (!prop)
+		return false;
+
+	if (streq(prop, "1"))
+		*b = true;
+	else if (streq(prop, "0"))
+		*b = false;
+	else
+		return false;
+
+	return true;
+}
+
 static bool
 parse_evcode_string(const char *s, int *type_out, int *code_out)
 {
@@ -403,6 +419,63 @@
 }
 
 /**
+ * Parses a string of the format "INPUT_PROP_BUTTONPAD;INPUT_PROP_POINTER;0x123;"
+ * where each element must be a named input prop OR a hexcode in the form
+ * 0x1234
+ *
+ * props must point to an existing array of size nprops.
+ * nprops specifies the size of the array in props and returns the number
+ * of elements, elements exceeding nprops are simply ignored, just make sure
+ * props is large enough for your use-case.
+ *
+ * On success, props contains nprops elements.
+ */
+bool
+parse_input_prop_property(const char *prop, unsigned int *props_out, size_t *nprops)
+{
+	char **strv = NULL;
+	bool rc = false;
+	size_t count = 0;
+	size_t idx;
+	unsigned int props[INPUT_PROP_CNT]; /* doubling up on quirks is a bug */
+
+	strv = strv_from_string(prop, ";");
+	if (!strv)
+		goto out;
+
+	for (idx = 0; strv[idx]; idx++)
+		count++;
+
+	if (count == 0 || count > ARRAY_LENGTH(props))
+		goto out;
+
+	count = min(*nprops, count);
+	for (idx = 0; strv[idx]; idx++) {
+		char *s = strv[idx];
+		unsigned int prop;
+
+		if (safe_atou_base(s, &prop, 16)) {
+			if (prop > INPUT_PROP_MAX)
+				goto out;
+		} else {
+			int val = libevdev_property_from_name(s);
+			if (val == -1)
+				goto out;
+			prop = (unsigned int)val;
+		}
+		props[idx] = prop;
+	}
+
+	memcpy(props_out, props, count * sizeof *props);
+	*nprops = count;
+	rc = true;
+
+out:
+	strv_free(strv);
+	return rc;
+}
+
+/**
  * Parse the property value for the EVDEV_ABS_00 properties. Spec is
  *  EVDEV_ABS_00=min:max:res:fuzz:flat
  * where any element may be empty and subsequent elements may not be
@@ -417,7 +490,7 @@
 uint32_t
 parse_evdev_abs_prop(const char *prop, struct input_absinfo *abs)
 {
-	char *str = strdup(prop);
+	char *str = safe_strdup(prop);
 	char *current, *next;
 	uint32_t mask = 0;
 	int bit = ABS_MASK_MIN;
diff -Naur third_party_libinput_bak/src/util-prop-parsers.h third_party_libinput_new/src/util-prop-parsers.h
--- third_party_libinput_bak/src/util-prop-parsers.h	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/util-prop-parsers.h	2023-03-30 09:24:20.647699700 +0800
@@ -36,8 +36,10 @@
 bool parse_dimension_property(const char *prop, size_t *width, size_t *height);
 bool parse_calibration_property(const char *prop, float calibration[6]);
 bool parse_range_property(const char *prop, int *hi, int *lo);
+bool parse_boolean_property(const char *prop, bool *b);
 #define EVENT_CODE_UNDEFINED 0xffff
 bool parse_evcode_property(const char *prop, struct input_event *events, size_t *nevents);
+bool parse_input_prop_property(const char *prop, unsigned int *props_out, size_t *nprops);
 
 enum tpkbcombo_layout {
 	TPKBCOMBO_LAYOUT_UNKNOWN,
diff -Naur third_party_libinput_bak/src/util-ratelimit.c third_party_libinput_new/src/util-ratelimit.c
--- third_party_libinput_bak/src/util-ratelimit.c	2023-03-28 10:49:59.320626600 +0800
+++ third_party_libinput_new/src/util-ratelimit.c	2023-03-30 09:24:28.728886500 +0800
@@ -69,7 +69,9 @@
 		r->begin = utime;
 		r->num = 1;
 		return RATELIMIT_PASS;
-	} else if (r->num < r->burst) {
+	}
+
+	if (r->num < r->burst) {
 		/* continue burst */
 		return (++r->num == r->burst) ? RATELIMIT_THRESHOLD
 					      : RATELIMIT_PASS;
diff -Naur third_party_libinput_bak/src/util-ratelimit.h third_party_libinput_new/src/util-ratelimit.h
--- third_party_libinput_bak/src/util-ratelimit.h	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/src/util-ratelimit.h	2023-03-30 09:24:42.639741600 +0800
@@ -41,5 +41,5 @@
 	unsigned int num;
 };
 
-void ratelimit_init(struct ratelimit *r, uint64_t ival_ms, unsigned int burst);
+void ratelimit_init(struct ratelimit *r, uint64_t ival_us, unsigned int burst);
 enum ratelimit_state ratelimit_test(struct ratelimit *r);
diff -Naur third_party_libinput_bak/src/util-strings.c third_party_libinput_new/src/util-strings.c
--- third_party_libinput_bak/src/util-strings.c	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/src/util-strings.c	2023-03-30 09:24:59.377291300 +0800
@@ -59,6 +59,36 @@
 }
 
 /**
+ * Return a null-terminated string array with the contents of argv
+ * duplicated.
+ *
+ * Use strv_free() to free the array.
+ *
+ * @return A null-terminated string array or NULL on errors
+ */
+char**
+strv_from_argv(int argc, char **argv)
+{
+	char **strv = NULL;
+
+	assert(argc >= 0);
+
+	if (argc == 0)
+		return NULL;
+
+	strv = zalloc((argc + 1) * sizeof *strv);
+	for (int i = 0; i < argc; i++) {
+		char *copy = safe_strdup(argv[i]);
+		if (!copy) {
+			strv_free(strv);
+			return NULL;
+		}
+		strv[i] = copy;
+	}
+	return strv;
+}
+
+/**
  * Return a null-terminated string array with the tokens in the input
  * string, e.g. "one two\tthree" with a separator list of " \t" will return
  * an array [ "one", "two", "three", NULL ].
@@ -115,7 +145,7 @@
  * An empty strv ([NULL]) returns NULL, same for passing NULL as either
  * argument.
  *
- * @param strv Input string arrray
+ * @param strv Input string array
  * @param joiner Joiner between the elements in the final string
  *
  * @return A null-terminated string joining all elements
@@ -155,3 +185,54 @@
 
 	return str;
 }
+
+/**
+ * Return a pointer to the basename within filename.
+ * If the filename the empty string or a directory (i.e. the last char of
+ * filename is '/') NULL is returned.
+ */
+const char *
+safe_basename(const char *filename)
+{
+	const char *basename;
+
+	if (*filename == '\0')
+		return NULL;
+
+	basename = strrchr(filename, '/');
+	if (basename == NULL)
+		return filename;
+
+	if (*(basename + 1) == '\0')
+		return NULL;
+
+	return basename + 1;
+}
+
+
+/**
+ * Similar to basename() but returns the trunk only without the (last)
+ * trailing suffix, so that:
+ *
+ * - foo.c returns foo
+ * - foo.a.b returns foo.a
+ * - foo returns foo
+ * - foo/ returns ""
+ *
+ * @return an allocated string representing the trunk name of the file
+ */
+char *
+trunkname(const char *filename)
+{
+	const char *base = safe_basename(filename);
+	char *suffix;
+
+	if (base == NULL)
+		return safe_strdup("");
+
+	suffix = rindex(base, '.');
+	if (suffix == NULL)
+		return safe_strdup(base);
+	else
+		return strndup(base, suffix-base);
+}
diff -Naur third_party_libinput_bak/src/util-strings.h third_party_libinput_new/src/util-strings.h
--- third_party_libinput_bak/src/util-strings.h	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/src/util-strings.h	2023-03-30 09:25:14.100988600 +0800
@@ -43,8 +43,25 @@
 #include <xlocale.h>
 #endif
 
-#define streq(s1, s2) (strcmp((s1), (s2)) == 0)
-#define strneq(s1, s2, n) (strncmp((s1), (s2), (n)) == 0)
+#include "util-macros.h"
+
+static inline bool
+streq(const char *str1, const char *str2)
+{
+	/* one NULL, one not NULL is always false */
+	if (str1 && str2)
+		return strcmp(str1, str2) == 0;
+	return str1 == str2;
+}
+
+static inline bool
+strneq(const char *str1, const char *str2, int n)
+{
+	/* one NULL, one not NULL is always false */
+	if (str1 && str2)
+		return strncmp(str1, str2, n) == 0;
+	return str1 == str2;
+}
 
 static inline void *
 zalloc(size_t size)
@@ -111,6 +128,18 @@
 	return rc;
 }
 
+__attribute__ ((format (printf, 2, 0)))
+static inline int
+xvasprintf(char **strp, const char *fmt, va_list args)
+{
+	int rc = 0;
+	rc = vasprintf(strp, fmt, args);
+	if ((rc == -1) && strp)
+		*strp = NULL;
+
+	return rc;
+}
+
 static inline bool
 safe_atoi_base(const char *str, int *val, int base)
 {
@@ -225,8 +254,9 @@
 	return true;
 }
 
-char **strv_from_string(const char *string, const char *separator);
-char *strv_join(char **strv, const char *separator);
+char **strv_from_argv(int argc, char **argv);
+char **strv_from_string(const char *in, const char *separator);
+char *strv_join(char **strv, const char *joiner);
 
 static inline void
 strv_free(char **strv) {
@@ -364,3 +394,37 @@
 
 	return prefixlen > 0 ? strneq(str, prefix, strlen(prefix)) : false;
 }
+
+const char *
+safe_basename(const char *filename);
+
+char *
+trunkname(const char *filename);
+
+/**
+ * Return a copy of str with all % converted to %% to make the string
+ * acceptable as printf format.
+ */
+static inline char *
+str_sanitize(const char *str)
+{
+	if (!str)
+		return NULL;
+
+	if (!strchr(str, '%'))
+		return strdup(str);
+
+	size_t slen = min(strlen(str), 512);
+	char *sanitized = zalloc(2 * slen + 1);
+	const char *src = str;
+	char *dst = sanitized;
+
+	for (size_t i = 0; i < slen; i++) {
+		if (*src == '%')
+			*dst++ = '%';
+		*dst++ = *src++;
+	}
+	*dst = '\0';
+
+	return sanitized;
+}
diff -Naur third_party_libinput_bak/src/util-time.h third_party_libinput_new/src/util-time.h
--- third_party_libinput_bak/src/util-time.h	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/src/util-time.h	2023-03-30 09:25:22.628546300 +0800
@@ -63,6 +63,12 @@
 	return ms2us(s * 1000);
 }
 
+static inline uint64_t
+h2us(uint64_t h)
+{
+	return s2us(h * 3600);
+}
+
 static inline uint32_t
 us2ms(uint64_t us)
 {
diff -Naur third_party_libinput_bak/test/build-cxx.cc third_party_libinput_new/test/build-cxx.cc
--- third_party_libinput_bak/test/build-cxx.cc	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/test/build-cxx.cc	2023-03-30 09:25:37.607521400 +0800
@@ -5,7 +5,7 @@
 using namespace std;
 
 int
-main(int argc, char **argv)
+main(void)
 {
 	return 0;
 }
diff -Naur third_party_libinput_bak/test/libinput-test-suite.man third_party_libinput_new/test/libinput-test-suite.man
--- third_party_libinput_bak/test/libinput-test-suite.man	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/test/libinput-test-suite.man	2023-03-30 09:26:18.112491000 +0800
@@ -0,0 +1,95 @@
+.TH libinput-test-suite "1" "" "libinput @LIBINPUT_VERSION@" "libinput Manual"
+.SH NAME
+libinput\-test\-suite \- run the libinput test suite
+.SH SYNOPSIS
+.B libinput test\-suite [OPTIONS]
+.PP
+.SH DESCRIPTION
+.PP
+The
+.B "libinput test\-suite"
+command runs the libinput test suite.
+Its primary purpose is to verify distribution composes after package updates. Test
+suite failures usually indicate missing patches and/or incompatible lower
+system layers.
+.PP
+.B The test suite should not be run by users. Data loss is possible.
+.PP
+The test suite must be run as root. The test suite installs several files
+on the host system (see section \fBFILES\fR), runs system commands and
+creates virtual kernel devices via uinput. These devices will interfere with
+any active session and may cause data loss.
+.PP
+It is recommended that the test suite is run in a virtual machine and/or on
+a system not otherwise in use. A graphical environment is not required to
+run the test suite.
+
+.SH OPTIONS
+Note that the options may change in future releases of libinput. Test names,
+test device names and test group names may change at any time.
+.TP 8
+.B \-\-filter\-test \fI"testname"\fB
+A glob limiting the tests to run. Specifying a filter sets the
+\fB\-\-jobs\fR default to 1.
+.TP 8
+.B \-\-filter\-device \fI"devicename"\fB
+A glob limiting the devices to run tests for. Specifying a filter sets the
+\fB\-\-jobs\fR default to 1.
+.TP 8
+.B \-\-filter\-group \fI"groupname"\fB
+A glob limiting the tests to (arbitrarily named) groups. Specifying a filter sets the
+\fB\-\-jobs\fR default to 1.
+.TP 8
+.B \-\-filter\-deviceless
+\fBFOR INTERNAL USE ONLY\fR
+.TP 8
+.B \-h, \-\-help
+Print help
+.TP 8
+.B \-j, \-\-jobs 8
+Number of parallel processes to run. Default: 8.
+.TP 8
+.B \-\-list
+List all test cases and the devices they are run for. Test names, test device
+names and test group names may change at any time.
+.TP 8
+.B \-\-verbose
+Enable verbose output, including libinput debug messages.
+.SH FILES
+The following directories are modified:
+
+.TP 8
+.B @LIBINPUT_DATA_DIR@
+Test device-specific quirks are installed in this directory with a custom
+prefix. Files in this directory are untouched but new files are installed
+and removed on exit. Existing files (e.g. from a previous aborted run) with
+the same name will be silently overwritten and removed.
+.TP 8
+.B /run/udev/rules.d
+Test-specific udev rules are installed in this directory and removed on
+exit.
+.PP
+.SH SYSTEM SETUP
+The \fBxorg.conf.d(5)\fR snippet below ensures the X server ignores the test
+devices created by this test suite:
+.PP
+.RS 4
+.nf
+.B "Section ""InputClass""
+.B "        Identifier ""Ignore libinput test suite devices""
+.B "        MatchProduct ""litest""
+.B "        Option ""Ignore"" ""on""
+.B "EndSection"
+.fi
+.RE
+.PP
+No configuration is required for Wayland compositors. libinput's default
+mode will ignore test devices from this test suite.
+.SH BUGS
+Some tests are sensitive to timing. Where a system is under heavy load,
+a test may fail. Re-running the test with \fB\-\-filter-test\fR can help
+verify whether a test case failure was a true failure.
+.SH LIBINPUT
+Part of the
+.B libinput(1)
+suite
diff -Naur third_party_libinput_bak/test/litest-device-elan-tablet.c third_party_libinput_new/test/litest-device-elan-tablet.c
--- third_party_libinput_bak/test/litest-device-elan-tablet.c	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/test/litest-device-elan-tablet.c	2023-03-30 09:32:39.479295500 +0800
@@ -26,22 +26,22 @@
 #include "litest.h"
 #include "litest-int.h"
 
-static struct input_event proximity_in[] = {
+static struct input_event proximity_in_events[] = {
 	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
 
-static struct input_event proximity_out[] = {
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+static struct input_event proximity_out_events[] = {
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
 
-static struct input_event motion[] = {
+static struct input_event motion_events[] = {
 	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
@@ -49,6 +49,42 @@
 	{ .type = -1, .code = -1 },
 };
 
+static bool
+proximity_in(struct litest_device *d,
+	     unsigned int tool_type,
+	     double x, double y,
+	     struct axis_replacement *axes)
+{
+	/* nothing special needed for the pen tool, so let litest handle
+	 * this */
+	if (tool_type == BTN_TOOL_PEN)
+		return false;
+
+	/* a non-pen tool requires the pen to be in proximity as well.  */
+	x = litest_scale(d, ABS_X, x);
+	y = litest_scale(d, ABS_Y, y);
+	litest_event(d, EV_ABS, ABS_X, x);
+	litest_event(d, EV_ABS, ABS_X, y);
+	litest_event(d, EV_KEY, BTN_TOOL_PEN, 1);
+	litest_event(d, EV_SYN, SYN_REPORT, 0);
+
+	/* litest will append the proximity_in_events if we return false,
+	 * including the right tool event */
+	return false;
+}
+
+static bool
+proximity_out(struct litest_device *d, unsigned int tool_type)
+{
+	/* a non-pen tool requires the pen to go out of proximity as well.
+	 * litest will append the proximity_out_events if we return false
+	 */
+	if (tool_type != BTN_TOOL_PEN)
+		litest_event(d, EV_KEY, BTN_TOOL_PEN, 0);
+
+	return false;
+}
+
 static int
 get_axis_default(struct litest_device *d, unsigned int evcode, int32_t *value)
 {
@@ -61,9 +97,11 @@
 }
 
 static struct litest_device_interface interface = {
-	.tablet_proximity_in_events = proximity_in,
-	.tablet_proximity_out_events = proximity_out,
-	.tablet_motion_events = motion,
+	.tablet_proximity_in_events = proximity_in_events,
+	.tablet_proximity_out_events = proximity_out_events,
+	.tablet_motion_events = motion_events,
+	.tablet_proximity_in = proximity_in,
+	.tablet_proximity_out = proximity_out,
 
 	.get_axis_default = get_axis_default,
 };
@@ -82,6 +120,11 @@
 	.version = 0x100,
 };
 
+/* Note: this tablet is one that sets both BTN_TOOL_PEN and BTN_TOOL_RUBBER,
+ * see https://gitlab.freedesktop.org/libinput/libinput/-/issues/259
+ * The one in the issue isn't the exact same model, but only the pid and x/y
+ * axis max differs differs.
+ */
 static int events[] = {
 	EV_KEY, BTN_TOOL_PEN,
 	EV_KEY, BTN_TOOL_RUBBER,
diff -Naur third_party_libinput_bak/test/litest-device-format-string.c third_party_libinput_new/test/litest-device-format-string.c
--- third_party_libinput_bak/test/litest-device-format-string.c	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/test/litest-device-format-string.c	2023-03-30 09:37:21.643018800 +0800
@@ -0,0 +1,56 @@
+
+/*
+ * Copyright © 2013 Red Hat, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "config.h"
+
+#include "litest.h"
+#include "litest-int.h"
+
+static struct input_id input_id = {
+	.bustype = 0x3,
+	.vendor = 0x0123,
+	.product = 0x0456,
+};
+
+static int events[] = {
+	EV_KEY, BTN_LEFT,
+	EV_KEY, BTN_RIGHT,
+	EV_KEY, BTN_MIDDLE,
+	EV_REL, REL_X,
+	EV_REL, REL_Y,
+	EV_REL, REL_WHEEL,
+	EV_REL, REL_WHEEL_HI_RES,
+	-1 , -1,
+};
+
+TEST_DEVICE("mouse-format-string",
+	.type = LITEST_MOUSE_FORMAT_STRING,
+	.features = LITEST_RELATIVE | LITEST_BUTTON | LITEST_WHEEL,
+	.interface = NULL,
+
+	.name = "Evil %s %d %x Mouse %p %",
+	.id = &input_id,
+	.absinfo = NULL,
+	.events = events,
+)
diff -Naur third_party_libinput_bak/test/litest-device-generic-pressurepad.c third_party_libinput_new/test/litest-device-generic-pressurepad.c
--- third_party_libinput_bak/test/litest-device-generic-pressurepad.c	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/test/litest-device-generic-pressurepad.c	2023-03-30 09:37:39.869063400 +0800
@@ -0,0 +1,125 @@
+/*
+ * Copyright © 2021 Red Hat, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "config.h"
+
+#include "litest.h"
+#include "litest-int.h"
+
+/* This is the same device as the one from
+   https://gitlab.freedesktop.org/libinput/libinput/-/issues/562
+
+   Except this one has a different input_id and sets the pressure
+   resolution to test the generic pressure handling.
+ */
+
+static struct input_event down[] = {
+	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN  },
+	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_SLOT, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_TRACKING_ID, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_POSITION_X, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_POSITION_Y, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
+	{ .type = -1, .code = -1 },
+};
+
+static struct input_event move[] = {
+	{ .type = EV_ABS, .code = ABS_MT_SLOT, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN  },
+	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_POSITION_X, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_POSITION_Y, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
+	{ .type = -1, .code = -1 },
+};
+
+
+static int
+get_axis_default(struct litest_device *d, unsigned int evcode, int32_t *value)
+{
+	switch (evcode) {
+	/* Always set pressure to zero. The real device sends pressure
+	 * values > 30 when the device is clicked but until this is a)
+	 * handled by libinput and b) integrated into this test suite
+	 * a zero value does the job.
+	 */
+	case ABS_PRESSURE:
+	case ABS_MT_PRESSURE:
+		*value = 0;
+		return 0;
+	}
+	return 1;
+}
+
+static struct litest_device_interface interface = {
+	.touch_down_events = down,
+	.touch_move_events = move,
+
+	.get_axis_default = get_axis_default,
+};
+
+static struct input_id input_id = {
+	.bustype = 0x18,
+	.vendor = 0x123,
+	.product = 0x4567,
+};
+
+static int events[] = {
+	EV_KEY, BTN_LEFT,
+	EV_KEY, BTN_TOOL_FINGER,
+	EV_KEY, BTN_TOUCH,
+	EV_KEY, BTN_TOOL_DOUBLETAP,
+	EV_KEY, BTN_TOOL_TRIPLETAP,
+	EV_KEY, BTN_TOOL_QUADTAP,
+	EV_KEY, BTN_TOOL_QUINTTAP,
+	INPUT_PROP_MAX, INPUT_PROP_POINTER,
+	INPUT_PROP_MAX, INPUT_PROP_BUTTONPAD,
+	-1, -1,
+};
+
+static struct input_absinfo absinfo[] = {
+	{ ABS_X, 0, 1224, 0, 0, 12 },
+	{ ABS_Y, 0, 756, 0, 0, 12 },
+	{ ABS_PRESSURE, 0, 255, 0, 0, 40 }, /* some random resolution */
+	{ ABS_MT_SLOT, 0, 4, 0, 0, 0 },
+	{ ABS_MT_POSITION_X, 0, 1224, 0, 0, 12 },
+	{ ABS_MT_POSITION_Y, 0, 756, 0, 0, 12 },
+	{ ABS_MT_TRACKING_ID, 0, 65535, 0, 0, 0 },
+	{ ABS_MT_PRESSURE, 0, 255, 0, 0, 40 }, /* some random resolution */
+	{ ABS_MT_TOOL_TYPE, 0, 2, 0, 0, 0 },
+	{ .value = -1 }
+};
+
+TEST_DEVICE("generic-pressurepad",
+	.type = LITEST_GENERIC_PRESSUREPAD,
+	.features = LITEST_TOUCHPAD | LITEST_CLICKPAD | LITEST_BUTTON,
+	.interface = &interface,
+
+	.name = "Some Generic Pressurepad Touchpad",
+	.id = &input_id,
+	.events = events,
+	.absinfo = absinfo,
+)
diff -Naur third_party_libinput_bak/test/litest-device-huion-pentablet.c third_party_libinput_new/test/litest-device-huion-pentablet.c
--- third_party_libinput_bak/test/litest-device-huion-pentablet.c	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/test/litest-device-huion-pentablet.c	2023-03-30 09:38:04.847324100 +0800
@@ -30,7 +30,7 @@
 	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-keyboard-quirked.c third_party_libinput_new/test/litest-device-keyboard-quirked.c
--- third_party_libinput_bak/test/litest-device-keyboard-quirked.c	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/test/litest-device-keyboard-quirked.c	2023-03-30 09:39:33.140550700 +0800
@@ -0,0 +1,231 @@
+/*
+ * Copyright © 2013 Red Hat, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "config.h"
+
+#include "litest.h"
+#include "litest-int.h"
+
+static struct input_id input_id = {
+	.bustype = 0x11,
+	.vendor = 0x1,
+	.product = 0x1,
+};
+
+static int events[] = {
+	EV_REL, REL_X,
+	EV_REL, REL_Y,
+
+	EV_KEY, KEY_ESC,
+	EV_KEY, KEY_1,
+	EV_KEY, KEY_2,
+	EV_KEY, KEY_3,
+	EV_KEY, KEY_4,
+	EV_KEY, KEY_5,
+	EV_KEY, KEY_6,
+	EV_KEY, KEY_7,
+	EV_KEY, KEY_8,
+	EV_KEY, KEY_9,
+	EV_KEY, KEY_0,
+	EV_KEY, KEY_MINUS,
+	EV_KEY, KEY_EQUAL,
+	EV_KEY, KEY_BACKSPACE,
+	EV_KEY, KEY_TAB,
+	EV_KEY, KEY_Q,
+	EV_KEY, KEY_W,
+	EV_KEY, KEY_E,
+	EV_KEY, KEY_R,
+	EV_KEY, KEY_T,
+	EV_KEY, KEY_Y,
+	EV_KEY, KEY_U,
+	EV_KEY, KEY_I,
+	EV_KEY, KEY_O,
+	EV_KEY, KEY_P,
+	EV_KEY, KEY_LEFTBRACE,
+	EV_KEY, KEY_RIGHTBRACE,
+	EV_KEY, KEY_ENTER,
+	EV_KEY, KEY_LEFTCTRL,
+	EV_KEY, KEY_A,
+	EV_KEY, KEY_S,
+	EV_KEY, KEY_D,
+	EV_KEY, KEY_F,
+	EV_KEY, KEY_G,
+	EV_KEY, KEY_H,
+	EV_KEY, KEY_J,
+	EV_KEY, KEY_K,
+	EV_KEY, KEY_L,
+	EV_KEY, KEY_SEMICOLON,
+	EV_KEY, KEY_APOSTROPHE,
+	EV_KEY, KEY_GRAVE,
+	EV_KEY, KEY_LEFTSHIFT,
+	EV_KEY, KEY_BACKSLASH,
+	EV_KEY, KEY_Z,
+	EV_KEY, KEY_X,
+	EV_KEY, KEY_C,
+	EV_KEY, KEY_V,
+	EV_KEY, KEY_B,
+	EV_KEY, KEY_N,
+	EV_KEY, KEY_M,
+	EV_KEY, KEY_COMMA,
+	EV_KEY, KEY_DOT,
+	EV_KEY, KEY_SLASH,
+	EV_KEY, KEY_RIGHTSHIFT,
+	EV_KEY, KEY_KPASTERISK,
+	EV_KEY, KEY_LEFTALT,
+	EV_KEY, KEY_SPACE,
+	EV_KEY, KEY_CAPSLOCK,
+	EV_KEY, KEY_F1,
+	EV_KEY, KEY_F2,
+	EV_KEY, KEY_F3,
+	EV_KEY, KEY_F4,
+	EV_KEY, KEY_F5,
+	EV_KEY, KEY_F6,
+	EV_KEY, KEY_F7,
+	EV_KEY, KEY_F8,
+	EV_KEY, KEY_F9,
+	EV_KEY, KEY_F10,
+	EV_KEY, KEY_NUMLOCK,
+	EV_KEY, KEY_SCROLLLOCK,
+	EV_KEY, KEY_KP7,
+	EV_KEY, KEY_KP8,
+	EV_KEY, KEY_KP9,
+	EV_KEY, KEY_KPMINUS,
+	EV_KEY, KEY_KP4,
+	EV_KEY, KEY_KP5,
+	EV_KEY, KEY_KP6,
+	EV_KEY, KEY_KPPLUS,
+	EV_KEY, KEY_KP1,
+	EV_KEY, KEY_KP2,
+	EV_KEY, KEY_KP3,
+	EV_KEY, KEY_KP0,
+	EV_KEY, KEY_KPDOT,
+	EV_KEY, KEY_ZENKAKUHANKAKU,
+	EV_KEY, KEY_102ND,
+	EV_KEY, KEY_F11,
+	EV_KEY, KEY_F12,
+	EV_KEY, KEY_RO,
+	EV_KEY, KEY_KATAKANA,
+	EV_KEY, KEY_HIRAGANA,
+	EV_KEY, KEY_HENKAN,
+	EV_KEY, KEY_KATAKANAHIRAGANA,
+	EV_KEY, KEY_MUHENKAN,
+	EV_KEY, KEY_KPJPCOMMA,
+	EV_KEY, KEY_KPENTER,
+	EV_KEY, KEY_RIGHTCTRL,
+	EV_KEY, KEY_KPSLASH,
+	EV_KEY, KEY_SYSRQ,
+	EV_KEY, KEY_RIGHTALT,
+	EV_KEY, KEY_LINEFEED,
+	EV_KEY, KEY_HOME,
+	EV_KEY, KEY_UP,
+	EV_KEY, KEY_PAGEUP,
+	EV_KEY, KEY_LEFT,
+	EV_KEY, KEY_RIGHT,
+	EV_KEY, KEY_END,
+	EV_KEY, KEY_DOWN,
+	EV_KEY, KEY_PAGEDOWN,
+	EV_KEY, KEY_INSERT,
+	EV_KEY, KEY_DELETE,
+	EV_KEY, KEY_MACRO,
+	EV_KEY, KEY_MUTE,
+	EV_KEY, KEY_VOLUMEDOWN,
+	EV_KEY, KEY_VOLUMEUP,
+	EV_KEY, KEY_POWER,
+	EV_KEY, KEY_KPEQUAL,
+	EV_KEY, KEY_KPPLUSMINUS,
+	EV_KEY, KEY_PAUSE,
+	/* EV_KEY,  KEY_SCALE, */
+	EV_KEY, KEY_KPCOMMA,
+	EV_KEY, KEY_HANGEUL,
+	EV_KEY, KEY_HANJA,
+	EV_KEY, KEY_YEN,
+	EV_KEY, KEY_LEFTMETA,
+	EV_KEY, KEY_RIGHTMETA,
+	EV_KEY, KEY_COMPOSE,
+	EV_KEY, KEY_STOP,
+
+	EV_KEY, KEY_MENU,
+	EV_KEY, KEY_CALC,
+	EV_KEY, KEY_SETUP,
+	EV_KEY, KEY_SLEEP,
+	EV_KEY, KEY_WAKEUP,
+	EV_KEY, KEY_SCREENLOCK,
+	EV_KEY, KEY_DIRECTION,
+	EV_KEY, KEY_CYCLEWINDOWS,
+	EV_KEY, KEY_MAIL,
+	EV_KEY, KEY_BOOKMARKS,
+	EV_KEY, KEY_COMPUTER,
+	EV_KEY, KEY_BACK,
+	EV_KEY, KEY_FORWARD,
+	EV_KEY, KEY_NEXTSONG,
+	EV_KEY, KEY_PLAYPAUSE,
+	EV_KEY, KEY_PREVIOUSSONG,
+	EV_KEY, KEY_STOPCD,
+	EV_KEY, KEY_HOMEPAGE,
+	EV_KEY, KEY_REFRESH,
+	EV_KEY, KEY_F14,
+	EV_KEY, KEY_F15,
+	EV_KEY, KEY_SEARCH,
+	EV_KEY, KEY_MEDIA,
+	EV_KEY, KEY_FN,
+	EV_LED, LED_NUML,
+	EV_LED, LED_CAPSL,
+	EV_LED, LED_SCROLLL,
+
+	/* gets disabled */
+	INPUT_PROP_MAX, INPUT_PROP_POINTING_STICK,
+
+	-1, -1,
+};
+
+static const char quirk_file[] =
+"[litest Quirked Keyboard enable rel]\n"
+"MatchName=litest Quirked Keyboard\n"
+"AttrEventCodeEnable=BTN_RIGHT;EV_KEY:0x110\n" /* BTN_LEFT */
+"\n"
+"[litest Quirked keyboard disable F1-F3]\n"
+"MatchName=litest Quirked Keyboard\n"
+"AttrEventCodeDisable=KEY_F1;EV_KEY:0x3c;KEY_F3\n"
+#if HAVE_LIBEVDEV_DISABLE_PROPERTY
+"\n"
+"[litest Quirked keyboard enable buttonpad]\n"
+"MatchName=litest Quirked Keyboard\n"
+"AttrInputPropEnable=INPUT_PROP_BUTTONPAD\n"
+"\n"
+"[litest Quirked keyboard disable pointingstick]\n"
+"MatchName=litest Quirked Keyboard\n"
+"AttrInputPropDisable=INPUT_PROP_POINTING_STICK\n"
+#endif
+;
+
+TEST_DEVICE("keyboard-quirked",
+	.type = LITEST_KEYBOARD_QUIRKED,
+	.features = LITEST_KEYS | LITEST_IGNORED, /* Only use this keyboard in specific tests */
+	.interface = NULL,
+
+	.name = "Quirked Keyboard",
+	.id = &input_id,
+	.events = events,
+	.absinfo = NULL,
+	.quirk_file = quirk_file,
+)
diff -Naur third_party_libinput_bak/test/litest-device-mouse-low-dpi.c third_party_libinput_new/test/litest-device-mouse-low-dpi.c
--- third_party_libinput_bak/test/litest-device-mouse-low-dpi.c	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/test/litest-device-mouse-low-dpi.c	2023-03-30 09:41:36.180321700 +0800
@@ -39,6 +39,9 @@
 	EV_REL, REL_X,
 	EV_REL, REL_Y,
 	EV_REL, REL_WHEEL,
+	EV_REL, REL_WHEEL_HI_RES,
+	EV_REL, REL_HWHEEL,
+	EV_REL, REL_HWHEEL_HI_RES,
 	-1 , -1,
 };
 
diff -Naur third_party_libinput_bak/test/litest-device-mouse.c third_party_libinput_new/test/litest-device-mouse.c
--- third_party_libinput_bak/test/litest-device-mouse.c	2023-03-28 10:49:59.324626700 +0800
+++ third_party_libinput_new/test/litest-device-mouse.c	2023-03-30 09:41:27.574451400 +0800
@@ -39,6 +39,7 @@
 	EV_REL, REL_X,
 	EV_REL, REL_Y,
 	EV_REL, REL_WHEEL,
+	EV_REL, REL_WHEEL_HI_RES,
 	-1 , -1,
 };
 
diff -Naur third_party_libinput_bak/test/litest-device-synaptics-pressurepad.c third_party_libinput_new/test/litest-device-synaptics-pressurepad.c
--- third_party_libinput_bak/test/litest-device-synaptics-pressurepad.c	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/test/litest-device-synaptics-pressurepad.c	2023-03-30 09:42:45.395042100 +0800
@@ -0,0 +1,125 @@
+/*
+ * Copyright © 2021 Red Hat, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "config.h"
+
+#include "litest.h"
+#include "litest-int.h"
+
+/*
+ * Device from https://gitlab.freedesktop.org/libinput/libinput/-/issues/562
+ *
+ * This device relies on a quirk to disable the pressure axis, resolution is
+ * not set on ABS_PRESSURE.
+ */
+
+static struct input_event down[] = {
+	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN  },
+	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_SLOT, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_TRACKING_ID, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_POSITION_X, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_POSITION_Y, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
+	{ .type = -1, .code = -1 },
+};
+
+static struct input_event move[] = {
+	{ .type = EV_ABS, .code = ABS_MT_SLOT, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN  },
+	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_POSITION_X, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_ABS, .code = ABS_MT_POSITION_Y, .value = LITEST_AUTO_ASSIGN },
+	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
+	{ .type = -1, .code = -1 },
+};
+
+
+static int
+get_axis_default(struct litest_device *d, unsigned int evcode, int32_t *value)
+{
+	switch (evcode) {
+	/* Always set pressure to zero. The real device sends pressure
+	 * values > 30 when the device is clicked but until this is a)
+	 * handled by libinput and b) integrated into this test suite
+	 * a zero value does the job.
+	 */
+	case ABS_PRESSURE:
+	case ABS_MT_PRESSURE:
+		*value = 0;
+		return 0;
+	}
+	return 1;
+}
+
+static struct litest_device_interface interface = {
+	.touch_down_events = down,
+	.touch_move_events = move,
+
+	.get_axis_default = get_axis_default,
+};
+
+static struct input_id input_id = {
+	.bustype = 0x18,
+	.vendor = 0x6cb,
+	.product = 0xce37,
+};
+
+static int events[] = {
+	EV_KEY, BTN_LEFT,
+	EV_KEY, BTN_TOOL_FINGER,
+	EV_KEY, BTN_TOUCH,
+	EV_KEY, BTN_TOOL_DOUBLETAP,
+	EV_KEY, BTN_TOOL_TRIPLETAP,
+	EV_KEY, BTN_TOOL_QUADTAP,
+	EV_KEY, BTN_TOOL_QUINTTAP,
+	INPUT_PROP_MAX, INPUT_PROP_POINTER,
+	INPUT_PROP_MAX, INPUT_PROP_BUTTONPAD,
+	-1, -1,
+};
+
+static struct input_absinfo absinfo[] = {
+	{ ABS_X, 0, 1224, 0, 0, 12 },
+	{ ABS_Y, 0, 756, 0, 0, 12 },
+	{ ABS_PRESSURE, 0, 255, 0, 0, 0 }, /* note: resolution zero */
+	{ ABS_MT_SLOT, 0, 4, 0, 0, 0 },
+	{ ABS_MT_POSITION_X, 0, 1224, 0, 0, 12 },
+	{ ABS_MT_POSITION_Y, 0, 756, 0, 0, 12 },
+	{ ABS_MT_TRACKING_ID, 0, 65535, 0, 0, 0 },
+	{ ABS_MT_PRESSURE, 0, 255, 0, 0, 0 }, /* note: resolution zero */
+	{ ABS_MT_TOOL_TYPE, 0, 2, 0, 0, 0 },
+	{ .value = -1 }
+};
+
+TEST_DEVICE("synaptics-pressurepad",
+	.type = LITEST_SYNAPTICS_PRESSUREPAD,
+	.features = LITEST_TOUCHPAD | LITEST_CLICKPAD | LITEST_BUTTON,
+	.interface = &interface,
+
+	.name = "SYNA2B31:00 06CB:CE37 Touchpad",
+	.id = &input_id,
+	.events = events,
+	.absinfo = absinfo,
+)
diff -Naur third_party_libinput_bak/test/litest-device-wacom-bamboo-16fg-pen.c third_party_libinput_new/test/litest-device-wacom-bamboo-16fg-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-bamboo-16fg-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-bamboo-16fg-pen.c	2023-03-30 09:45:04.609467400 +0800
@@ -31,7 +31,7 @@
 	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_DISTANCE, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
@@ -40,7 +40,7 @@
 	{ .type = EV_ABS, .code = ABS_X, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_Y, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_DISTANCE, .value = 0 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-bamboo-2fg-pen.c third_party_libinput_new/test/litest-device-wacom-bamboo-2fg-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-bamboo-2fg-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-bamboo-2fg-pen.c	2023-03-30 09:44:54.978832100 +0800
@@ -31,7 +31,7 @@
 	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_DISTANCE, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
@@ -40,7 +40,7 @@
 	{ .type = EV_ABS, .code = ABS_X, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_Y, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_DISTANCE, .value = 0 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-cintiq-12wx-pen.c third_party_libinput_new/test/litest-device-wacom-cintiq-12wx-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-cintiq-12wx-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-cintiq-12wx-pen.c	2023-03-30 09:51:45.355424200 +0800
@@ -35,7 +35,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 2083 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
@@ -48,7 +48,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 0 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-cintiq-13hdt-pen.c third_party_libinput_new/test/litest-device-wacom-cintiq-13hdt-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-cintiq-13hdt-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-cintiq-13hdt-pen.c	2023-03-30 09:52:00.142918600 +0800
@@ -35,7 +35,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 2083 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
@@ -48,7 +48,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 0 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-cintiq-24hd-pen.c third_party_libinput_new/test/litest-device-wacom-cintiq-24hd-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-cintiq-24hd-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-cintiq-24hd-pen.c	2023-03-30 09:52:07.178742900 +0800
@@ -35,7 +35,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 2083 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
@@ -48,7 +48,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 0 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-cintiq-pro-16-pen.c third_party_libinput_new/test/litest-device-wacom-cintiq-pro-16-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-cintiq-pro-16-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-cintiq-pro-16-pen.c	2023-03-30 09:53:08.664111300 +0800
@@ -37,7 +37,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 2083 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
@@ -52,7 +52,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 0 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-hid4800-pen.c third_party_libinput_new/test/litest-device-wacom-hid4800-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-hid4800-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-hid4800-pen.c	2023-03-30 09:53:28.244607300 +0800
@@ -30,7 +30,7 @@
 	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
@@ -40,7 +40,7 @@
 	{ .type = EV_ABS, .code = ABS_X, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_Y, .value = 0 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 297797542 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-intuos5-pen.c third_party_libinput_new/test/litest-device-wacom-intuos5-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-intuos5-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-intuos5-pen.c	2023-03-30 09:53:45.935892700 +0800
@@ -35,7 +35,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 1050626 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 578837976 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
@@ -48,7 +48,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_MISC, .value = 0 },
 	{ .type = EV_MSC, .code = MSC_SERIAL, .value = 578837976 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-isdv4-4200-pen.c third_party_libinput_new/test/litest-device-wacom-isdv4-4200-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-isdv4-4200-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-isdv4-4200-pen.c	2023-03-30 09:54:00.426787400 +0800
@@ -30,13 +30,13 @@
 	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
 
 static struct input_event proximity_out[] = {
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-wacom-isdv4-e6-pen.c third_party_libinput_new/test/litest-device-wacom-isdv4-e6-pen.c
--- third_party_libinput_bak/test/litest-device-wacom-isdv4-e6-pen.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-wacom-isdv4-e6-pen.c	2023-03-30 09:54:10.769200100 +0800
@@ -30,13 +30,13 @@
 	{ .type = EV_ABS, .code = ABS_X, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
 
 static struct input_event proximity_out[] = {
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-device-waltop-tablet.c third_party_libinput_new/test/litest-device-waltop-tablet.c
--- third_party_libinput_bak/test/litest-device-waltop-tablet.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-device-waltop-tablet.c	2023-03-30 09:58:43.193766300 +0800
@@ -32,7 +32,7 @@
 	{ .type = EV_ABS, .code = ABS_TILT_X, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = LITEST_AUTO_ASSIGN },
 	{ .type = EV_ABS, .code = ABS_PRESSURE, .value = LITEST_AUTO_ASSIGN },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 1 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 1 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
@@ -42,7 +42,7 @@
 	{ .type = EV_ABS, .code = ABS_Y, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_TILT_X, .value = 0 },
 	{ .type = EV_ABS, .code = ABS_TILT_Y, .value = 0 },
-	{ .type = EV_KEY, .code = BTN_TOOL_PEN, .value = 0 },
+	{ .type = EV_KEY, .code = LITEST_BTN_TOOL_AUTO, .value = 0 },
 	{ .type = EV_SYN, .code = SYN_REPORT, .value = 0 },
 	{ .type = -1, .code = -1 },
 };
diff -Naur third_party_libinput_bak/test/litest-int.h third_party_libinput_new/test/litest-int.h
--- third_party_libinput_bak/test/litest-int.h	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest-int.h	2023-03-30 10:06:41.436968100 +0800
@@ -31,6 +31,9 @@
 /* Use as designater for litest to change the value */
 #define LITEST_AUTO_ASSIGN INT_MIN
 
+/* Special event code to auto-assign the BTN_TOOL_PEN and friends */
+#define LITEST_BTN_TOOL_AUTO (KEY_MAX << 1)
+
 struct litest_test_device {
 	struct list node; /* global test device list */
 
@@ -111,6 +114,12 @@
 	struct input_event *tablet_proximity_out_events;
 	struct input_event *tablet_motion_events;
 
+	bool (*tablet_proximity_in)(struct litest_device *d,
+				    unsigned int tool_type,
+				    double x, double y,
+				    struct axis_replacement *axes);
+	bool (*tablet_proximity_out)(struct litest_device *d, unsigned int tool_type);
+
 	/**
 	 * Pad events, LITEST_AUTO_ASSIGN is allowed on event values
 	 * for ABS_WHEEL
@@ -129,6 +138,8 @@
 
 	int min[2]; /* x/y axis minimum */
 	int max[2]; /* x/y axis maximum */
+
+	unsigned int tool_type;
 };
 
 struct path {
@@ -138,6 +149,7 @@
 };
 
 struct litest_context {
+	struct litest_user_data *user_data;
 	struct list paths;
 };
 
diff -Naur third_party_libinput_bak/test/litest.c third_party_libinput_new/test/litest.c
--- third_party_libinput_bak/test/litest.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest.c	2023-03-30 09:28:30.850102400 +0800
@@ -65,6 +65,8 @@
 
 #include <linux/kd.h>
 
+#define evbit(t, c) ((t) << 16U | (c & 0xffff))
+
 #define UDEV_RULES_D "/run/udev/rules.d"
 #define UDEV_FUZZ_OVERRIDE_RULE_FILE UDEV_RULES_D \
 	"/91-litest-fuzz-override-REMOVEME-XXXXXX.rules"
@@ -427,25 +429,6 @@
 get_suite(const char *name)
 {
 	struct suite *s;
-	/* this is the list meson calls, ensure we don't miss out on tests */
-	const char * allowed_suites[] = {
-		"config:", "context:", "device:", "events:", "gestures:",
-		"keyboard:", "lid:", "log:", "misc:", "pad:", "path:",
-		"pointer:", "quirks:", "switch:", "tablet:", "tablet-mode:",
-		"tap:", "timer:", "totem:", "touch:", "touchpad:",
-		"trackball:", "trackpoint:", "udev:",
-	};
-	const char **allowed;
-	bool found = false;
-
-	ARRAY_FOR_EACH(allowed_suites, allowed) {
-		if (strstartswith(name, *allowed)) {
-			found = true;
-			break;
-		}
-	}
-	if (!found)
-		litest_abort_msg("Suite name '%s' is not allowed\n", name);
 
 	list_for_each(s, &all_tests, node) {
 		if (streq(s->name, name))
@@ -462,13 +445,28 @@
 }
 
 static void
-litest_add_tcase(const char *suite_name,
+create_suite_name(const char *filename, char suitename[64])
+{
+	char *trunk = trunkname(filename);
+	char *p = trunk;
+
+	/* strip the test- prefix */
+	if (strstartswith(trunk, "test-"))
+		p += 5;
+
+	snprintf(suitename, 64, "%s", p);
+	free(trunk);
+}
+
+static void
+litest_add_tcase(const char *filename,
 		 const char *funcname,
 		 const void *func,
 		 int64_t required,
 		 int64_t excluded,
 		 const struct range *range)
 {
+	char suite_name[65];
 	struct suite *suite;
 	bool added = false;
 
@@ -480,9 +478,9 @@
 	    fnmatch(filter_test, funcname, 0) != 0)
 		return;
 
-	if (filter_group &&
-	    strstr(suite_name, filter_group) == NULL &&
-	    fnmatch(filter_group, suite_name, 0) != 0)
+	create_suite_name(filename, suite_name);
+
+	if (filter_group && fnmatch(filter_group, suite_name, 0) != 0)
 		return;
 
 	suite = get_suite(suite_name);
@@ -616,7 +614,7 @@
 }
 
 void
-_litest_add_ranged_for_device(const char *name,
+_litest_add_ranged_for_device(const char *filename,
 			      const char *funcname,
 			      const void *func,
 			      enum litest_device_type type,
@@ -625,6 +623,7 @@
 	struct suite *s;
 	struct litest_test_device *dev;
 	bool device_filtered = false;
+	char suite_name[64];
 
 	litest_assert(type < LITEST_NO_DEVICE);
 
@@ -633,12 +632,11 @@
 	    fnmatch(filter_test, funcname, 0) != 0)
 		return;
 
-	if (filter_group &&
-	    strstr(name, filter_group) == NULL &&
-	    fnmatch(filter_group, name, 0) != 0)
+	create_suite_name(filename, suite_name);
+	if (filter_group && fnmatch(filter_group, suite_name, 0) != 0)
 		return;
 
-	s = get_suite(name);
+	s = get_suite(suite_name);
 	list_for_each(dev, &devices, node) {
 		if (filter_device &&
 		    strstr(dev->shortname, filter_device) == NULL &&
@@ -843,9 +841,9 @@
 close_restricted(int fd, void *userdata)
 {
 	struct litest_context *ctx = userdata;
-	struct path *p, *tmp;
+	struct path *p;
 
-	list_for_each_safe(p, tmp, &ctx->paths, link) {
+	list_for_each_safe(p, &ctx->paths, link) {
 		if (p->fd != fd)
 			continue;
 		list_remove(&p->link);
@@ -864,9 +862,9 @@
 static void
 litest_signal(int sig)
 {
-	struct created_file *f, *tmp;
+	struct created_file *f;
 
-	list_for_each_safe(f, tmp, &created_files_list, link) {
+	list_for_each_safe(f, &created_files_list, link) {
 		list_remove(&f->link);
 		unlink(f->path);
 		rmdir(f->path);
@@ -899,12 +897,12 @@
 static void
 litest_free_test_list(struct list *tests)
 {
-	struct suite *s, *snext;
+	struct suite *s;
 
-	list_for_each_safe(s, snext, tests, node) {
-		struct test *t, *tnext;
+	list_for_each_safe(s, tests, node) {
+		struct test *t;
 
-		list_for_each_safe(t, tnext, &s->tests, node) {
+		list_for_each_safe(t, &s->tests, node) {
 			free(t->name);
 			free(t->devname);
 			list_remove(&t->node);
@@ -1004,7 +1002,7 @@
 		struct list node;
 		char *name;
 	};
-	struct name *n, *tmp;
+	struct name *n;
 	struct list testnames;
 	const char *data_path;
 
@@ -1120,7 +1118,7 @@
 	}
 	srunner_free(sr);
 out:
-	list_for_each_safe(n, tmp, &testnames, node) {
+	list_for_each_safe(n, &testnames, node) {
 		free(n->name);
 		free(n);
 	}
@@ -1424,7 +1422,7 @@
 				false);
 	list_insert(created_files_list, &file->link);
 
-	/* Ony install the litest device rule when we're running as system
+	/* Only install the litest device rule when we're running as system
 	 * test suite, we expect the others to be in place already */
 	if (use_system_rules_quirks)
 		return;
@@ -1568,7 +1566,7 @@
 	if (streq(dir, "/"))
 		return;
 
-	path = strdup(dir);
+	path = safe_strdup(dir);
 	parent = dirname(path);
 
 	mkdir_p(parent);
@@ -1596,12 +1594,12 @@
 static inline void
 litest_remove_udev_rules(struct list *created_files_list)
 {
-	struct created_file *f, *tmp;
+	struct created_file *f;
 	bool reload_udev;
 
 	reload_udev = !list_empty(created_files_list);
 
-	list_for_each_safe(f, tmp, created_files_list, link) {
+	list_for_each_safe(f, created_files_list, link) {
 		list_remove(&f->link);
 		unlink(f->path);
 		rmdir(f->path);
@@ -1716,7 +1714,7 @@
 void
 litest_destroy_context(struct libinput *li)
 {
-	struct path *p, *tmp;
+	struct path *p;
 	struct litest_context *ctx;
 
 
@@ -1724,7 +1722,7 @@
 	litest_assert_ptr_notnull(ctx);
 	libinput_unref(li);
 
-	list_for_each_safe(p, tmp, &ctx->paths, link) {
+	list_for_each_safe(p, &ctx->paths, link) {
 		litest_abort_msg("Device paths should be removed by now");
 	}
 	free(ctx);
@@ -1752,7 +1750,8 @@
 		       va_list args)
 {
 	if (strstr(format, "client bug: ") ||
-	    strstr(format, "libinput bug: "))
+	    strstr(format, "libinput bug: ") ||
+	    strstr(format, "kernel bug: "))
 		return;
 
 	litest_abort_msg("Expected bug statement in log msg, aborting.\n");
@@ -1812,6 +1811,7 @@
 			d->interface->min[ABS_Y] = libevdev_get_abs_minimum(d->evdev, code);
 			d->interface->max[ABS_Y] = libevdev_get_abs_maximum(d->evdev, code);
 		}
+		d->interface->tool_type = BTN_TOOL_PEN;
 	}
 	return d;
 }
@@ -1892,7 +1892,7 @@
 		udev_device = udev_monitor_receive_device(udev_monitor);
 		litest_assert_notnull(udev_device);
 		udev_action = udev_device_get_action(udev_device);
-		if (!streq(udev_action, udev_event)) {
+		if (!udev_action || !streq(udev_action, udev_event)) {
 			udev_device_unref(udev_device);
 			continue;
 		}
@@ -2444,15 +2444,56 @@
 }
 
 void
+litest_tablet_set_tool_type(struct litest_device *d, unsigned int code)
+{
+	switch (code) {
+	case BTN_TOOL_PEN:
+	case BTN_TOOL_RUBBER:
+	case BTN_TOOL_BRUSH:
+	case BTN_TOOL_PENCIL:
+	case BTN_TOOL_AIRBRUSH:
+	case BTN_TOOL_MOUSE:
+	case BTN_TOOL_LENS:
+		break;
+	default:
+		abort();
+	}
+
+	d->interface->tool_type = code;
+}
+
+static void
+litest_tool_event(struct litest_device *d, int value)
+{
+	unsigned int tool = d->interface->tool_type;
+
+	litest_event(d, EV_KEY, tool, value);
+}
+
+void
 litest_tablet_proximity_in(struct litest_device *d, int x, int y, struct axis_replacement *axes)
 {
 	struct input_event *ev;
 
+	/* If the test device overrides proximity_in and says it didn't
+	 * handle the event, let's continue normally */
+	if (d->interface->tablet_proximity_in &&
+	    d->interface->tablet_proximity_in(d, d->interface->tool_type, x, y, axes))
+		return;
+
 	ev = d->interface->tablet_proximity_in_events;
 	while (ev && (int16_t)ev->type != -1 && (int16_t)ev->code != -1) {
-		int value = auto_assign_tablet_value(d, ev, x, y, axes);
-		if (!tablet_ignore_event(ev, value))
-			litest_event(d, ev->type, ev->code, value);
+		int value;
+
+		switch (evbit(ev->type, ev->code)) {
+		case evbit(EV_KEY, LITEST_BTN_TOOL_AUTO):
+			litest_tool_event(d, ev->value);
+			break;
+		default:
+			value = auto_assign_tablet_value(d, ev, x, y, axes);
+			if (!tablet_ignore_event(ev, value))
+				litest_event(d, ev->type, ev->code, value);
+		}
 		ev++;
 	}
 }
@@ -2462,11 +2503,26 @@
 {
 	struct input_event *ev;
 
+	/* If the test device overrides proximity_out and says it didn't
+	 * handle the event, let's continue normally */
+	if (d->interface->tablet_proximity_out &&
+	    d->interface->tablet_proximity_out(d, d->interface->tool_type))
+		return;
+
 	ev = d->interface->tablet_proximity_out_events;
 	while (ev && (int16_t)ev->type != -1 && (int16_t)ev->code != -1) {
-		int value = auto_assign_tablet_value(d, ev, -1, -1, NULL);
-		if (!tablet_ignore_event(ev, value))
-			litest_event(d, ev->type, ev->code, value);
+		int value;
+
+		switch (evbit(ev->type, ev->code)) {
+		case evbit(EV_KEY, LITEST_BTN_TOOL_AUTO):
+			litest_tool_event(d, ev->value);
+			break;
+		default:
+			value = auto_assign_tablet_value(d, ev, -1, -1, NULL);
+			if (!tablet_ignore_event(ev, value))
+				litest_event(d, ev->type, ev->code, value);
+			break;
+		}
 		ev++;
 	}
 }
@@ -2521,21 +2577,20 @@
 {
 	int sleep_ms = 10;
 
-	for (int i = 0; i < steps - 1; i++) {
-		litest_touch_move(d, 0, x0 + dx / steps * i,
-					y0 + dy / steps * i);
-		litest_touch_move(d, 1, x1 + dx / steps * i,
-					y1 + dy / steps * i);
-		litest_touch_move(d, 2, x2 + dx / steps * i,
-					y2 + dy / steps * i);
+	for (int i = 1; i <= steps; i++) {
+		double step_x = dx / steps * i;
+		double step_y = dy / steps * i;
+
+		litest_push_event_frame(d);
+		litest_touch_move(d, 0, x0 + step_x, y0 + step_y);
+		litest_touch_move(d, 1, x1 + step_x, y1 + step_y);
+		litest_touch_move(d, 2, x2 + step_x, y2 + step_y);
+		litest_pop_event_frame(d);
 
 		libinput_dispatch(d->libinput);
 		msleep(sleep_ms);
-		libinput_dispatch(d->libinput);
 	}
-	litest_touch_move(d, 0, x0 + dx, y0 + dy);
-	litest_touch_move(d, 1, x1 + dx, y1 + dy);
-	litest_touch_move(d, 2, x2 + dx, y2 + dy);
+	libinput_dispatch(d->libinput);
 }
 
 void
@@ -3043,6 +3098,15 @@
 	case LIBINPUT_EVENT_POINTER_AXIS:
 		str = "AXIS";
 		break;
+	case LIBINPUT_EVENT_POINTER_SCROLL_WHEEL:
+		str = "SCROLL_WHEEL";
+		break;
+	case LIBINPUT_EVENT_POINTER_SCROLL_FINGER:
+		str = "SCROLL_FINGER";
+		break;
+	case LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS:
+		str = "SCROLL_CONTINUOUS";
+		break;
 	case LIBINPUT_EVENT_TOUCH_DOWN:
 		str = "TOUCH DOWN";
 		break;
@@ -3059,7 +3123,7 @@
 		str = "TOUCH FRAME";
 		break;
 	case LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN:
-		str = "GESTURE SWIPE START";
+		str = "GESTURE SWIPE BEGIN";
 		break;
 	case LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE:
 		str = "GESTURE SWIPE UPDATE";
@@ -3068,7 +3132,7 @@
 		str = "GESTURE SWIPE END";
 		break;
 	case LIBINPUT_EVENT_GESTURE_PINCH_BEGIN:
-		str = "GESTURE PINCH START";
+		str = "GESTURE PINCH BEGIN";
 		break;
 	case LIBINPUT_EVENT_GESTURE_PINCH_UPDATE:
 		str = "GESTURE PINCH UPDATE";
@@ -3076,6 +3140,12 @@
 	case LIBINPUT_EVENT_GESTURE_PINCH_END:
 		str = "GESTURE PINCH END";
 		break;
+	case LIBINPUT_EVENT_GESTURE_HOLD_BEGIN:
+		str = "GESTURE HOLD BEGIN";
+		break;
+	case LIBINPUT_EVENT_GESTURE_HOLD_END:
+		str = "GESTURE HOLD END";
+		break;
 	case LIBINPUT_EVENT_TABLET_TOOL_AXIS:
 		str = "TABLET TOOL AXIS";
 		break;
@@ -3208,27 +3278,61 @@
 	fprintf(stderr, "\n");
 }
 
-void
-litest_assert_event_type(struct libinput_event *event,
-			 enum libinput_event_type want)
+#define litest_assert_event_type_is_one_of(...) \
+    _litest_assert_event_type_is_one_of(__VA_ARGS__, -1)
+
+static void
+_litest_assert_event_type_is_one_of(struct libinput_event *event, ...)
 {
-	if (libinput_event_get_type(event) == want)
+	va_list args;
+	enum libinput_event_type expected_type;
+	enum libinput_event_type actual_type = libinput_event_get_type(event);
+	bool match = false;
+
+	va_start(args, event);
+	expected_type = va_arg(args, int);
+	while ((int)expected_type != -1 && !match) {
+		match = (actual_type == expected_type);
+		expected_type = va_arg(args, int);
+	}
+	va_end(args);
+
+	if (match)
 		return;
 
 	fprintf(stderr,
-		"FAILED EVENT TYPE: %s: have %s (%d) but want %s (%d)\n",
+		"FAILED EVENT TYPE: %s: have %s (%d) but want ",
 		libinput_device_get_name(libinput_event_get_device(event)),
 		litest_event_get_type_str(event),
-		libinput_event_get_type(event),
-		litest_event_type_str(want),
-		want);
-	fprintf(stderr, "Wrong event is: ");
+		libinput_event_get_type(event));
+
+	va_start(args, event);
+	expected_type = va_arg(args, int);
+	while ((int)expected_type != -1) {
+		fprintf(stderr,
+			"%s (%d)",
+			litest_event_type_str(expected_type),
+			expected_type);
+		expected_type = va_arg(args, int);
+
+		if ((int)expected_type != -1)
+			fprintf(stderr, " || ");
+	}
+
+	fprintf(stderr, "\nWrong event is: ");
 	litest_print_event(event);
 	litest_backtrace();
 	abort();
 }
 
 void
+litest_assert_event_type(struct libinput_event *event,
+			 enum libinput_event_type want)
+{
+	litest_assert_event_type_is_one_of(event, want);
+}
+
+void
 litest_assert_empty_queue(struct libinput *li)
 {
 	bool empty_queue = true;
@@ -3455,24 +3559,42 @@
 
 struct libinput_event_pointer *
 litest_is_axis_event(struct libinput_event *event,
+		     enum libinput_event_type axis_type,
 		     enum libinput_pointer_axis axis,
 		     enum libinput_pointer_axis_source source)
 {
 	struct libinput_event_pointer *ptrev;
-	enum libinput_event_type type = LIBINPUT_EVENT_POINTER_AXIS;
+
+	litest_assert(axis_type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL ||
+		      axis_type == LIBINPUT_EVENT_POINTER_SCROLL_FINGER ||
+		      axis_type == LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
 
 	litest_assert_ptr_notnull(event);
-	litest_assert_event_type(event, type);
+	litest_assert_event_type_is_one_of(event,
+					   LIBINPUT_EVENT_POINTER_AXIS,
+					   axis_type);
 	ptrev = libinput_event_get_pointer_event(event);
 	litest_assert(libinput_event_pointer_has_axis(ptrev, axis));
 
 	if (source != 0)
-		litest_assert_int_eq(libinput_event_pointer_get_axis_source(ptrev),
+		litest_assert_int_eq(litest_event_pointer_get_axis_source(ptrev),
 				     source);
 
 	return ptrev;
 }
 
+bool
+litest_is_high_res_axis_event(struct libinput_event *event)
+{
+	litest_assert_event_type_is_one_of(event,
+					   LIBINPUT_EVENT_POINTER_AXIS,
+					   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+					   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					   LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
+
+	return (libinput_event_get_type(event) != LIBINPUT_EVENT_POINTER_AXIS);
+}
+
 struct libinput_event_pointer *
 litest_is_motion_event(struct libinput_event *event)
 {
@@ -3591,6 +3713,20 @@
 	return gevent;
 }
 
+void
+litest_assert_gesture_event(struct libinput *li,
+			    enum libinput_event_type type,
+			    int nfingers)
+{
+	struct libinput_event *event;
+
+	litest_wait_for_event(li);
+	event = libinput_get_event(li);
+
+	litest_is_gesture_event(event, type, nfingers);
+	libinput_event_destroy(event);
+}
+
 struct libinput_event_tablet_tool *
 litest_is_tablet_event(struct libinput_event *event,
 		       enum libinput_event_type type)
@@ -3643,6 +3779,53 @@
 	return tev;
 }
 
+double
+litest_event_pointer_get_value(struct libinput_event_pointer *ptrev,
+			       enum libinput_pointer_axis axis)
+{
+	struct libinput_event *event;
+	enum libinput_event_type type;
+
+	event = libinput_event_pointer_get_base_event(ptrev);
+	type = libinput_event_get_type(event);
+
+	switch (type) {
+	case LIBINPUT_EVENT_POINTER_AXIS:
+		return libinput_event_pointer_get_axis_value(ptrev, axis);
+	case LIBINPUT_EVENT_POINTER_SCROLL_WHEEL:
+		return libinput_event_pointer_get_scroll_value_v120(ptrev, axis);
+	case LIBINPUT_EVENT_POINTER_SCROLL_FINGER:
+	case LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS:
+		return libinput_event_pointer_get_scroll_value(ptrev, axis);
+	default:
+		abort();
+	}
+}
+
+enum libinput_pointer_axis_source
+litest_event_pointer_get_axis_source(struct libinput_event_pointer *ptrev)
+{
+	struct libinput_event *event;
+	enum libinput_event_type type;
+
+	event = libinput_event_pointer_get_base_event(ptrev);
+	type = libinput_event_get_type(event);
+
+	if (type == LIBINPUT_EVENT_POINTER_AXIS)
+		return libinput_event_pointer_get_axis_source(ptrev);
+
+	switch (type) {
+	case LIBINPUT_EVENT_POINTER_SCROLL_WHEEL:
+		return LIBINPUT_POINTER_AXIS_SOURCE_WHEEL;
+	case LIBINPUT_EVENT_POINTER_SCROLL_FINGER:
+		return LIBINPUT_POINTER_AXIS_SOURCE_FINGER;
+	case LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS:
+		return LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS;
+	default:
+		abort();
+	}
+}
+
 void litest_assert_tablet_proximity_event(struct libinput *li,
 					  enum libinput_tablet_tool_proximity_state state)
 {
@@ -3780,13 +3963,12 @@
 			       enum libinput_button_state state)
 {
 	struct libinput_event *event;
-	struct libinput_event_tablet_pad *pev;
 
 	litest_wait_for_event(li);
 	event = libinput_get_event(li);
 
-	pev = litest_is_pad_button_event(event, button, state);
-	libinput_event_destroy(libinput_event_tablet_pad_get_base_event(pev));
+	litest_is_pad_button_event(event, button, state);
+	libinput_event_destroy(event);
 }
 
 void
@@ -3795,61 +3977,119 @@
 			    enum libinput_key_state state)
 {
 	struct libinput_event *event;
-	struct libinput_event_tablet_pad *pev;
 
 	litest_wait_for_event(li);
 	event = libinput_get_event(li);
 
-	pev = litest_is_pad_key_event(event, key, state);
-	libinput_event_destroy(libinput_event_tablet_pad_get_base_event(pev));
+	litest_is_pad_key_event(event, key, state);
+	libinput_event_destroy(event);
 }
 
 void
 litest_assert_scroll(struct libinput *li,
+		     enum libinput_event_type axis_type,
 		     enum libinput_pointer_axis axis,
 		     int minimum_movement)
 {
-	struct libinput_event *event, *next_event;
+	struct libinput_event *event;
 	struct libinput_event_pointer *ptrev;
+	bool last_hi_res_event_found, last_low_res_event_found;
 	int value;
 	int nevents = 0;
 
+	litest_assert(axis_type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL ||
+		      axis_type == LIBINPUT_EVENT_POINTER_SCROLL_FINGER ||
+		      axis_type == LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
+
+	last_hi_res_event_found = false;
+	last_low_res_event_found = false;
 	event = libinput_get_event(li);
-	next_event = libinput_get_event(li);
-	litest_assert_ptr_notnull(next_event); /* At least 1 scroll + stop scroll */
+	litest_assert_ptr_notnull(event);
 
 	while (event) {
-		ptrev = litest_is_axis_event(event, axis, 0);
+		int min = minimum_movement;
+
+		ptrev = litest_is_axis_event(event, axis_type, axis, 0);
 		nevents++;
 
-		if (next_event) {
-			int min = minimum_movement;
+		/* Due to how the hysteresis works on touchpad
+		 * events, the first event is reduced by the
+		 * hysteresis margin that can cause the first event
+		 * go under the minimum we expect for all other
+		 * events */
+		if (nevents == 1)
+			min = minimum_movement/2;
+
+		value = litest_event_pointer_get_value(ptrev, axis);
+		if (litest_is_high_res_axis_event(event)) {
+			litest_assert(!last_hi_res_event_found);
 
-			value = libinput_event_pointer_get_axis_value(ptrev,
-								      axis);
-			/* Due to how the hysteresis works on touchpad
-			 * events, the first event is reduced by the
-			 * hysteresis margin that can cause the first event
-			 * go under the minimum we expect for all other
-			 * events */
-			if (nevents == 1)
-				min = minimum_movement/2;
+			if (axis_type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL)
+				min *= 120;
 
-			/* Normal scroll event, check dir */
+			if (value == 0)
+				last_hi_res_event_found = true;
+		} else {
+			litest_assert(!last_low_res_event_found);
+
+			if (value == 0)
+				last_low_res_event_found = true;
+		}
+
+		if (value != 0) {
 			if (minimum_movement > 0)
 				litest_assert_int_ge(value, min);
 			else
 				litest_assert_int_le(value, min);
+		}
+
+		libinput_event_destroy(event);
+		event = libinput_get_event(li);
+	}
+
+	litest_assert(last_low_res_event_found);
+	litest_assert(last_hi_res_event_found);
+}
+
+void
+litest_assert_axis_end_sequence(struct libinput *li,
+				enum libinput_event_type axis_type,
+				enum libinput_pointer_axis axis,
+				enum libinput_pointer_axis_source source)
+{
+	struct libinput_event *event;
+	struct libinput_event_pointer *ptrev;
+	bool last_hi_res_event_found, last_low_res_event_found;
+	double val;
+	int i;
+
+	litest_assert(axis_type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL ||
+		      axis_type == LIBINPUT_EVENT_POINTER_SCROLL_FINGER ||
+		      axis_type == LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
+
+	last_hi_res_event_found = false;
+	last_low_res_event_found = false;
+
+	/* both high and low scroll end events must be sent */
+	for (i = 0; i < 2; i++) {
+		event = libinput_get_event(li);
+		ptrev = litest_is_axis_event(event, axis_type, axis, source);
+		val = litest_event_pointer_get_value(ptrev, axis);
+		ck_assert(val == 0.0);
+
+		if (litest_is_high_res_axis_event(event)) {
+			litest_assert(!last_hi_res_event_found);
+			last_hi_res_event_found = true;
 		} else {
-			/* Last scroll event, must be 0 */
-			ck_assert_double_eq(
-				libinput_event_pointer_get_axis_value(ptrev, axis),
-				0.0);
+			litest_assert(!last_low_res_event_found);
+			last_low_res_event_found = true;
 		}
+
 		libinput_event_destroy(event);
-		event = next_event;
-		next_event = libinput_get_event(li);
 	}
+
+	litest_assert(last_low_res_event_found);
+	litest_assert(last_hi_res_event_found);
 }
 
 void
@@ -3865,8 +4105,31 @@
 	litest_assert_notnull(event);
 
 	while (event) {
-		litest_assert_int_eq(libinput_event_get_type(event),
-                                     type);
+		litest_assert_event_type(event, type);
+		libinput_event_destroy(event);
+		libinput_dispatch(li);
+		event = libinput_get_event(li);
+	}
+}
+
+void
+litest_assert_only_axis_events(struct libinput *li,
+			       enum libinput_event_type axis_type)
+{
+	struct libinput_event *event;
+
+	litest_assert(axis_type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL ||
+		      axis_type == LIBINPUT_EVENT_POINTER_SCROLL_FINGER ||
+		      axis_type == LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
+
+	libinput_dispatch(li);
+	event = libinput_get_event(li);
+	litest_assert_notnull(event);
+
+	while (event) {
+		litest_assert_event_type_is_one_of(event,
+						   LIBINPUT_EVENT_POINTER_AXIS,
+						   axis_type);
 		libinput_event_destroy(event);
 		libinput_dispatch(li);
 		event = libinput_get_event(li);
@@ -4003,7 +4266,7 @@
 void
 litest_timeout_tap(void)
 {
-	msleep(200);
+	msleep(300);
 }
 
 void
@@ -4073,6 +4336,18 @@
 }
 
 void
+litest_timeout_gesture_hold(void)
+{
+	msleep(300);
+}
+
+void
+litest_timeout_gesture_quick_hold(void)
+{
+	msleep(60);
+}
+
+void
 litest_timeout_trackpoint(void)
 {
 	msleep(320);
@@ -4544,36 +4819,37 @@
 	int tty_mode = -1;
 	int failed_tests;
 	int rc;
+	const char *meson_testthreads;
 
 	in_debugger = is_debugger_attached();
 	if (in_debugger || RUNNING_ON_VALGRIND)
 		setenv("CK_FORK", "no", 0);
 
-	jobs = get_nprocs();
-	if (!RUNNING_ON_VALGRIND)
-		jobs *= 2;
+	if ((meson_testthreads = getenv("MESON_TESTTHREADS")) == NULL ||
+	     !safe_atoi(meson_testthreads, &jobs)) {
+		jobs = get_nprocs();
+		if (!RUNNING_ON_VALGRIND)
+			jobs *= 2;
+	}
 
 	mode = litest_parse_argv(argc, argv);
 	if (mode == LITEST_MODE_ERROR)
 		return EXIT_FAILURE;
 
-	if (!run_deviceless && (rc = check_device_access()) != 0)
-			return rc;
-
 	litest_init_test_devices();
-
 	list_init(&all_tests);
-
-	setenv("CK_DEFAULT_TIMEOUT", "30", 0);
-	setenv("LIBINPUT_RUNNING_TEST_SUITE", "1", 1);
-
 	setup_tests();
-
 	if (mode == LITEST_MODE_LIST) {
 		litest_list_tests(&all_tests);
 		return EXIT_SUCCESS;
 	}
 
+	if (!run_deviceless && (rc = check_device_access()) != 0)
+		return rc;
+
+	setenv("CK_DEFAULT_TIMEOUT", "30", 0);
+	setenv("LIBINPUT_RUNNING_TEST_SUITE", "1", 1);
+
 	if (setrlimit(RLIMIT_CORE, &corelimit) != 0)
 		perror("WARNING: Core dumps not disabled");
 
diff -Naur third_party_libinput_bak/test/litest.h third_party_libinput_new/test/litest.h
--- third_party_libinput_bak/test/litest.h	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/litest.h	2023-03-30 09:29:25.568302500 +0800
@@ -37,6 +37,7 @@
 
 #include "check-double-macros.h"
 
+#include "libinput-private-config.h"
 #include "libinput-util.h"
 #include "quirks.h"
 
@@ -78,6 +79,16 @@
 	}; \
 	static void (name##_setup)(void)
 
+
+/**
+ * litest itself needs the user_data to store some test-suite-specific
+ * information. Tests must not override this pointer, any data they need
+ * they can hang off the private pointer in this struct.
+ */
+struct litest_user_data {
+	void *private;
+};
+
 void
 litest_fail_condition(const char *file,
 		      int line,
@@ -306,6 +317,10 @@
 	LITEST_TABLET_MODE_UNRELIABLE,
 	LITEST_KEYBOARD_LOGITECH_MEDIA_KEYBOARD_ELITE,
 	LITEST_SONY_VAIO_KEYS,
+	LITEST_KEYBOARD_QUIRKED,
+	LITEST_SYNAPTICS_PRESSUREPAD,
+	LITEST_GENERIC_PRESSUREPAD,
+	LITEST_MOUSE_FORMAT_STRING,
 };
 
 #define LITEST_DEVICELESS	-2
@@ -427,20 +442,20 @@
 void litest_restore_log_handler(struct libinput *libinput);
 void litest_set_log_handler_bug(struct libinput *libinput);
 
-#define litest_add(name_, func_, ...) \
-	_litest_add(name_, #func_, func_, __VA_ARGS__)
-#define litest_add_ranged(name_, func_, ...) \
-	_litest_add_ranged(name_, #func_, func_, __VA_ARGS__)
-#define litest_add_for_device(name_, func_, ...) \
-	_litest_add_for_device(name_, #func_, func_, __VA_ARGS__)
-#define litest_add_ranged_for_device(name_, func_, ...) \
-	_litest_add_ranged_for_device(name_, #func_, func_, __VA_ARGS__)
-#define litest_add_no_device(name_, func_) \
-	_litest_add_no_device(name_, #func_, func_)
-#define litest_add_ranged_no_device(name_, func_, ...) \
-	_litest_add_ranged_no_device(name_, #func_, func_, __VA_ARGS__)
-#define litest_add_deviceless(name_, func_) \
-	_litest_add_deviceless(name_, #func_, func_)
+#define litest_add(func_, ...) \
+	_litest_add(__FILE__, #func_, func_, __VA_ARGS__)
+#define litest_add_ranged(func_, ...) \
+	_litest_add_ranged(__FILE__, #func_, func_, __VA_ARGS__)
+#define litest_add_for_device(func_, ...) \
+	_litest_add_for_device(__FILE__, #func_, func_, __VA_ARGS__)
+#define litest_add_ranged_for_device(func_, ...) \
+	_litest_add_ranged_for_device(__FILE__, #func_, func_, __VA_ARGS__)
+#define litest_add_no_device(func_) \
+	_litest_add_no_device(__FILE__, #func_, func_)
+#define litest_add_ranged_no_device(func_, ...) \
+	_litest_add_ranged_no_device(__FILE__, #func_, func_, __VA_ARGS__)
+#define litest_add_deviceless(func_) \
+	_litest_add_deviceless(__FILE__, #func_, func_)
 
 void
 _litest_add(const char *name,
@@ -604,6 +619,10 @@
 				int steps);
 
 void
+litest_tablet_set_tool_type(struct litest_device *d,
+			    unsigned int code);
+
+void
 litest_tablet_proximity_in(struct litest_device *d,
 			   int x, int y,
 			   struct axis_replacement *axes);
@@ -729,9 +748,13 @@
 
 struct libinput_event_pointer *
 litest_is_axis_event(struct libinput_event *event,
+		     enum libinput_event_type axis_type,
 		     enum libinput_pointer_axis axis,
 		     enum libinput_pointer_axis_source source);
 
+bool
+litest_is_high_res_axis_event(struct libinput_event *event);
+
 struct libinput_event_pointer *
 litest_is_motion_event(struct libinput_event *event);
 
@@ -779,6 +802,13 @@
 litest_is_proximity_event(struct libinput_event *event,
 			  enum libinput_tablet_tool_proximity_state state);
 
+double
+litest_event_pointer_get_value(struct libinput_event_pointer *ptrev,
+			       enum libinput_pointer_axis axis);
+
+enum libinput_pointer_axis_source
+litest_event_pointer_get_axis_source(struct libinput_event_pointer *event);
+
 void
 litest_assert_key_event(struct libinput *li, unsigned int key,
 			enum libinput_key_state state);
@@ -790,14 +820,25 @@
 
 void
 litest_assert_scroll(struct libinput *li,
+		     enum libinput_event_type axis_type,
 		     enum libinput_pointer_axis axis,
 		     int minimum_movement);
 
 void
+litest_assert_axis_end_sequence(struct libinput *li,
+				enum libinput_event_type axis_type,
+				enum libinput_pointer_axis axis,
+				enum libinput_pointer_axis_source source);
+
+void
 litest_assert_only_typed_events(struct libinput *li,
 				enum libinput_event_type type);
 
 void
+litest_assert_only_axis_events(struct libinput *li,
+			       enum libinput_event_type axis_type);
+
+void
 litest_assert_no_typed_events(struct libinput *li,
 			      enum libinput_event_type type);
 
@@ -822,6 +863,12 @@
 litest_assert_pad_key_event(struct libinput *li,
 			    unsigned int key,
 			    enum libinput_key_state state);
+
+void
+litest_assert_gesture_event(struct libinput *li,
+			    enum libinput_event_type type,
+			    int nfingers);
+
 struct libevdev_uinput *
 litest_create_uinput_device(const char *name,
 			    struct input_id *id,
@@ -870,6 +917,12 @@
 litest_timeout_gesture_scroll(void);
 
 void
+litest_timeout_gesture_hold(void);
+
+void
+litest_timeout_gesture_quick_hold(void);
+
+void
 litest_timeout_trackpoint(void);
 
 void
@@ -1139,6 +1192,30 @@
 	litest_assert_int_eq(status, expected);
 }
 
+static inline void
+litest_enable_hold_gestures(struct libinput_device *device)
+{
+	enum libinput_config_status status, expected;
+
+	expected = LIBINPUT_CONFIG_STATUS_SUCCESS;
+	status = libinput_device_config_gesture_set_hold_enabled(device,
+								 LIBINPUT_CONFIG_HOLD_ENABLED);
+
+	litest_assert_int_eq(status, expected);
+}
+
+static inline void
+litest_disable_hold_gestures(struct libinput_device *device)
+{
+	enum libinput_config_status status, expected;
+
+	expected = LIBINPUT_CONFIG_STATUS_SUCCESS;
+	status = libinput_device_config_gesture_set_hold_enabled(device,
+								 LIBINPUT_CONFIG_HOLD_DISABLED);
+
+	litest_assert_int_eq(status, expected);
+}
+
 static inline bool
 litest_touchpad_is_external(struct litest_device *dev)
 {
diff -Naur third_party_libinput_bak/test/test-device.c third_party_libinput_new/test/test-device.c
--- third_party_libinput_bak/test/test-device.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-device.c	2023-03-30 10:07:27.687853400 +0800
@@ -164,7 +164,7 @@
 	ck_assert_int_eq(status, LIBINPUT_CONFIG_STATUS_SUCCESS);
 	litest_assert_empty_queue(li);
 
-	/* event from renabled device */
+	/* event from re-enabled device */
 	litest_event(dev, EV_REL, REL_X, 10);
 	litest_event(dev, EV_SYN, SYN_REPORT, 0);
 
@@ -1337,7 +1337,11 @@
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_pointer *pev;
-	int code;
+	bool hi_res_event_found, low_res_event_found;
+	int code, i;
+
+	hi_res_event_found = false;
+	low_res_event_found = false;
 
 	litest_drain_events(li);
 
@@ -1345,11 +1349,27 @@
 	litest_event(dev, EV_SYN, SYN_REPORT, 0);
 	libinput_dispatch(li);
 
-	event = libinput_get_event(li);
-	pev = litest_is_axis_event(event,
-				   LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
-				   LIBINPUT_POINTER_AXIS_SOURCE_WHEEL);
-	libinput_event_destroy(libinput_event_pointer_get_base_event(pev));
+	/* both high and low scroll end events must be sent */
+	for (i = 0; i < 2; i++) {
+		event = libinput_get_event(li);
+		pev = litest_is_axis_event(event,
+					   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+					   LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+					   LIBINPUT_POINTER_AXIS_SOURCE_WHEEL);
+
+		if (litest_is_high_res_axis_event(event)) {
+			litest_assert(!hi_res_event_found);
+			hi_res_event_found = true;
+		} else {
+			litest_assert(!low_res_event_found);
+			low_res_event_found = true;
+		}
+
+		libinput_event_destroy(libinput_event_pointer_get_base_event(pev));
+	}
+
+	litest_assert(low_res_event_found);
+	litest_assert(hi_res_event_found);
 
 	for (code = ABS_MISC + 1; code < ABS_MAX; code++) {
 		litest_event(dev, EV_ABS, code, 1);
@@ -1419,6 +1439,96 @@
 }
 END_TEST
 
+char *debug_messages[64] = { NULL };
+
+LIBINPUT_ATTRIBUTE_PRINTF(3, 0)
+static void
+debug_log_handler(struct libinput *libinput,
+		  enum libinput_log_priority priority,
+		  const char *format,
+		  va_list args)
+{
+	char *message, **dmsg;
+	int n;
+
+	if (priority != LIBINPUT_LOG_PRIORITY_DEBUG)
+		return;
+
+	n = xvasprintf(&message, format, args);
+	litest_assert_int_gt(n, 0);
+
+	ARRAY_FOR_EACH(debug_messages, dmsg) {
+		if (*dmsg == NULL) {
+			*dmsg = message;
+			return;
+		}
+	}
+
+	litest_abort_msg("Out of space for debug messages");
+}
+
+START_TEST(device_quirks)
+{
+	struct libinput *li;
+	struct litest_device *dev;
+	struct libinput_device *device;
+	char **message;
+	bool disable_key_f1 = false,
+	     enable_btn_left = false;
+#if HAVE_LIBEVDEV_DISABLE_PROPERTY
+	bool disable_pointingstick = false,
+	     enable_buttonpad = false;
+#endif
+
+	li = litest_create_context();
+	libinput_log_set_priority(li, LIBINPUT_LOG_PRIORITY_DEBUG);
+	libinput_log_set_handler(li, debug_log_handler);
+	dev = litest_add_device(li, LITEST_KEYBOARD_QUIRKED);
+	device = dev->libinput_device;
+
+	ck_assert(libinput_device_pointer_has_button(device,
+						     BTN_LEFT));
+	ck_assert(libinput_device_pointer_has_button(dev->libinput_device,
+						     BTN_RIGHT));
+	ck_assert(!libinput_device_keyboard_has_key(dev->libinput_device,
+						    KEY_F1));
+	ck_assert(!libinput_device_keyboard_has_key(dev->libinput_device,
+						    KEY_F2));
+	ck_assert(!libinput_device_keyboard_has_key(dev->libinput_device,
+						    KEY_F3));
+
+	/* Scrape the debug messages for confirmation that our quirks are
+	 * triggered, the above checks cannot work non-key codes */
+	message = debug_messages;
+	while (*message) {
+		if (strstr(*message, "disabling EV_KEY KEY_F1"))
+			disable_key_f1 = true;
+		if (strstr(*message, "enabling EV_KEY BTN_LEFT"))
+			enable_btn_left = true;
+#if HAVE_LIBEVDEV_DISABLE_PROPERTY
+		if (strstr(*message, "enabling INPUT_PROP_BUTTONPAD"))
+			enable_buttonpad = true;
+		if (strstr(*message, "disabling INPUT_PROP_POINTING_STICK"))
+			disable_pointingstick = true;
+#endif
+		free(*message);
+		message++;
+	}
+
+	ck_assert(disable_key_f1);
+	ck_assert(enable_btn_left);
+#if HAVE_LIBEVDEV_DISABLE_PROPERTY
+	ck_assert(enable_buttonpad);
+	ck_assert(disable_pointingstick);
+#endif
+
+	litest_disable_log_handler(li);
+
+	litest_delete_device(dev);
+	litest_destroy_context(li);
+}
+END_TEST
+
 START_TEST(device_capability_at_least_one)
 {
 	struct litest_device *dev = litest_current_device();
@@ -1613,78 +1723,79 @@
 	struct range abs_range = { 0, ABS_MISC };
 	struct range abs_mt_range = { ABS_MT_SLOT + 1, ABS_CNT };
 
-	litest_add("device:sendevents", device_sendevents_config, LITEST_ANY, LITEST_TOUCHPAD|LITEST_TABLET);
-	litest_add("device:sendevents", device_sendevents_config_invalid, LITEST_ANY, LITEST_TABLET);
-	litest_add("device:sendevents", device_sendevents_config_touchpad, LITEST_TOUCHPAD, LITEST_TABLET);
-	litest_add("device:sendevents", device_sendevents_config_touchpad_superset, LITEST_TOUCHPAD, LITEST_TABLET);
-	litest_add("device:sendevents", device_sendevents_config_default, LITEST_ANY, LITEST_TABLET);
-	litest_add("device:sendevents", device_disable, LITEST_RELATIVE, LITEST_TABLET);
-	litest_add("device:sendevents", device_disable_tablet, LITEST_TABLET, LITEST_ANY);
-	litest_add("device:sendevents", device_disable_touchpad, LITEST_TOUCHPAD, LITEST_TABLET);
-	litest_add("device:sendevents", device_disable_touch, LITEST_TOUCH, LITEST_ANY);
-	litest_add("device:sendevents", device_disable_touch_during_touch, LITEST_TOUCH, LITEST_ANY);
-	litest_add("device:sendevents", device_disable_touch, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
-	litest_add("device:sendevents", device_disable_touch_during_touch, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
-	litest_add("device:sendevents", device_disable_events_pending, LITEST_RELATIVE, LITEST_TOUCHPAD|LITEST_TABLET);
-	litest_add("device:sendevents", device_double_disable, LITEST_ANY, LITEST_TABLET);
-	litest_add("device:sendevents", device_double_enable, LITEST_ANY, LITEST_TABLET);
-	litest_add_no_device("device:sendevents", device_reenable_syspath_changed);
-	litest_add_no_device("device:sendevents", device_reenable_device_removed);
-	litest_add_for_device("device:sendevents", device_disable_release_buttons, LITEST_MOUSE);
-	litest_add_for_device("device:sendevents", device_disable_release_keys, LITEST_KEYBOARD);
-	litest_add("device:sendevents", device_disable_release_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("device:sendevents", device_disable_release_tap_n_drag, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("device:sendevents", device_disable_release_softbutton, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("device:sendevents", device_disable_topsoftbutton, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("device:id", device_ids, LITEST_ANY, LITEST_ANY);
-	litest_add_for_device("device:context", device_context, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("device:context", device_user_data, LITEST_SYNAPTICS_CLICKPAD_X220);
-
-	litest_add("device:udev", device_get_udev_handle, LITEST_ANY, LITEST_ANY);
-
-	litest_add("device:group", device_group_get, LITEST_ANY, LITEST_ANY);
-	litest_add_no_device("device:group", device_group_ref);
-	litest_add_no_device("device:group", device_group_leak);
-
-	litest_add_no_device("device:invalid devices", abs_device_no_absx);
-	litest_add_no_device("device:invalid devices", abs_device_no_absy);
-	litest_add_no_device("device:invalid devices", abs_mt_device_no_absx);
-	litest_add_no_device("device:invalid devices", abs_mt_device_no_absy);
-	litest_add_ranged_no_device("device:invalid devices", abs_device_no_range, &abs_range);
-	litest_add_ranged_no_device("device:invalid devices", abs_mt_device_no_range, &abs_mt_range);
-	litest_add_no_device("device:invalid devices", abs_device_missing_res);
-	litest_add_no_device("device:invalid devices", abs_mt_device_missing_res);
-	litest_add_no_device("device:invalid devices", ignore_joystick);
-
-	litest_add("device:wheel", device_wheel_only, LITEST_WHEEL, LITEST_RELATIVE|LITEST_ABSOLUTE|LITEST_TABLET);
-	litest_add_no_device("device:accelerometer", device_accelerometer);
-
-	litest_add("device:udev tags", device_udev_tag_wacom_tablet, LITEST_TABLET, LITEST_TOTEM);
-
-	litest_add_no_device("device:invalid rel events", device_nonpointer_rel);
-	litest_add_no_device("device:invalid rel events", device_touchpad_rel);
-	litest_add_no_device("device:invalid rel events", device_touch_rel);
-	litest_add_no_device("device:invalid rel events", device_abs_rel);
-
-	litest_add_for_device("device:quirks", device_quirks_no_abs_mt_y, LITEST_ANKER_MOUSE_KBD);
-	litest_add_for_device("device:quirks", device_quirks_cyborg_rat_mode_button, LITEST_CYBORG_RAT);
-	litest_add_for_device("device:quirks", device_quirks_apple_magicmouse, LITEST_MAGICMOUSE);
-	litest_add_for_device("device:quirks", device_quirks_logitech_marble_mouse, LITEST_LOGITECH_TRACKBALL);
-
-	litest_add("device:capability", device_capability_at_least_one, LITEST_ANY, LITEST_ANY);
-	litest_add("device:capability", device_capability_check_invalid, LITEST_ANY, LITEST_ANY);
-	litest_add_no_device("device:capability", device_capability_nocaps_ignored);
-
-	litest_add("device:size", device_has_size, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("device:size", device_has_size, LITEST_TABLET, LITEST_ANY);
-	litest_add("device:size", device_has_no_size, LITEST_ANY,
+	litest_add(device_sendevents_config, LITEST_ANY, LITEST_TOUCHPAD|LITEST_TABLET);
+	litest_add(device_sendevents_config_invalid, LITEST_ANY, LITEST_TABLET);
+	litest_add(device_sendevents_config_touchpad, LITEST_TOUCHPAD, LITEST_TABLET);
+	litest_add(device_sendevents_config_touchpad_superset, LITEST_TOUCHPAD, LITEST_TABLET);
+	litest_add(device_sendevents_config_default, LITEST_ANY, LITEST_TABLET);
+	litest_add(device_disable, LITEST_RELATIVE, LITEST_TABLET);
+	litest_add(device_disable_tablet, LITEST_TABLET, LITEST_ANY);
+	litest_add(device_disable_touchpad, LITEST_TOUCHPAD, LITEST_TABLET);
+	litest_add(device_disable_touch, LITEST_TOUCH, LITEST_ANY);
+	litest_add(device_disable_touch_during_touch, LITEST_TOUCH, LITEST_ANY);
+	litest_add(device_disable_touch, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
+	litest_add(device_disable_touch_during_touch, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
+	litest_add(device_disable_events_pending, LITEST_RELATIVE, LITEST_TOUCHPAD|LITEST_TABLET);
+	litest_add(device_double_disable, LITEST_ANY, LITEST_TABLET);
+	litest_add(device_double_enable, LITEST_ANY, LITEST_TABLET);
+	litest_add_no_device(device_reenable_syspath_changed);
+	litest_add_no_device(device_reenable_device_removed);
+	litest_add_for_device(device_disable_release_buttons, LITEST_MOUSE);
+	litest_add_for_device(device_disable_release_keys, LITEST_KEYBOARD);
+	litest_add(device_disable_release_tap, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(device_disable_release_tap_n_drag, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(device_disable_release_softbutton, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(device_disable_topsoftbutton, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(device_ids, LITEST_ANY, LITEST_ANY);
+	litest_add_for_device(device_context, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(device_user_data, LITEST_SYNAPTICS_CLICKPAD_X220);
+
+	litest_add(device_get_udev_handle, LITEST_ANY, LITEST_ANY);
+
+	litest_add(device_group_get, LITEST_ANY, LITEST_ANY);
+	litest_add_no_device(device_group_ref);
+	litest_add_no_device(device_group_leak);
+
+	litest_add_no_device(abs_device_no_absx);
+	litest_add_no_device(abs_device_no_absy);
+	litest_add_no_device(abs_mt_device_no_absx);
+	litest_add_no_device(abs_mt_device_no_absy);
+	litest_add_ranged_no_device(abs_device_no_range, &abs_range);
+	litest_add_ranged_no_device(abs_mt_device_no_range, &abs_mt_range);
+	litest_add_no_device(abs_device_missing_res);
+	litest_add_no_device(abs_mt_device_missing_res);
+	litest_add_no_device(ignore_joystick);
+
+	litest_add(device_wheel_only, LITEST_WHEEL, LITEST_RELATIVE|LITEST_ABSOLUTE|LITEST_TABLET);
+	litest_add_no_device(device_accelerometer);
+
+	litest_add(device_udev_tag_wacom_tablet, LITEST_TABLET, LITEST_TOTEM);
+
+	litest_add_no_device(device_nonpointer_rel);
+	litest_add_no_device(device_touchpad_rel);
+	litest_add_no_device(device_touch_rel);
+	litest_add_no_device(device_abs_rel);
+
+	litest_add_for_device(device_quirks_no_abs_mt_y, LITEST_ANKER_MOUSE_KBD);
+	litest_add_for_device(device_quirks_cyborg_rat_mode_button, LITEST_CYBORG_RAT);
+	litest_add_for_device(device_quirks_apple_magicmouse, LITEST_MAGICMOUSE);
+	litest_add_for_device(device_quirks_logitech_marble_mouse, LITEST_LOGITECH_TRACKBALL);
+	litest_add_no_device(device_quirks);
+
+	litest_add(device_capability_at_least_one, LITEST_ANY, LITEST_ANY);
+	litest_add(device_capability_check_invalid, LITEST_ANY, LITEST_ANY);
+	litest_add_no_device(device_capability_nocaps_ignored);
+
+	litest_add(device_has_size, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(device_has_size, LITEST_TABLET, LITEST_ANY);
+	litest_add(device_has_no_size, LITEST_ANY,
 		   LITEST_TOUCHPAD|LITEST_TABLET|LITEST_TOUCH|LITEST_ABSOLUTE|LITEST_SINGLE_TOUCH|LITEST_TOTEM);
 
-	litest_add_for_device("device:output", device_get_output, LITEST_CALIBRATED_TOUCHSCREEN);
-	litest_add("device:output", device_no_output, LITEST_RELATIVE, LITEST_ANY);
-	litest_add("device:output", device_no_output, LITEST_KEYS, LITEST_ANY);
+	litest_add_for_device(device_get_output, LITEST_CALIBRATED_TOUCHSCREEN);
+	litest_add(device_no_output, LITEST_RELATIVE, LITEST_ANY);
+	litest_add(device_no_output, LITEST_KEYS, LITEST_ANY);
 
-	litest_add("device:seat", device_seat_phys_name, LITEST_ANY, LITEST_ANY);
+	litest_add(device_seat_phys_name, LITEST_ANY, LITEST_ANY);
 
-	litest_add("device:button", device_button_down_remove, LITEST_BUTTON, LITEST_ANY);
+	litest_add(device_button_down_remove, LITEST_BUTTON, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-gestures.c third_party_libinput_new/test/test-gestures.c
--- third_party_libinput_bak/test/test-gestures.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-gestures.c	2023-03-30 10:08:23.943222200 +0800
@@ -25,6 +25,7 @@
 
 #include <check.h>
 #include <libinput.h>
+#include <valgrind/valgrind.h>
 
 #include "libinput-util.h"
 #include "litest.h"
@@ -33,38 +34,19 @@
 	N, NE, E, SE, S, SW, W, NW, NCARDINALS
 };
 
-START_TEST(gestures_cap)
-{
-	struct litest_device *dev = litest_current_device();
-	struct libinput_device *device = dev->libinput_device;
-
-	if (libevdev_has_property(dev->evdev, INPUT_PROP_SEMI_MT))
-		ck_assert(!libinput_device_has_capability(device,
-					  LIBINPUT_DEVICE_CAP_GESTURE));
-	else
-		ck_assert(libinput_device_has_capability(device,
-					 LIBINPUT_DEVICE_CAP_GESTURE));
-}
-END_TEST
-
-START_TEST(gestures_nocap)
-{
-	struct litest_device *dev = litest_current_device();
-	struct libinput_device *device = dev->libinput_device;
-
-	ck_assert(!libinput_device_has_capability(device,
-						  LIBINPUT_DEVICE_CAP_GESTURE));
-}
-END_TEST
+enum hold_gesture_behaviour {
+   HOLD_GESTURE_IGNORE,
+   HOLD_GESTURE_REQUIRE,
+};
 
-START_TEST(gestures_swipe_3fg)
+static void
+test_gesture_swipe_3fg(int cardinal, enum hold_gesture_behaviour hold)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_gesture *gevent;
 	double dx, dy;
-	int cardinal = _i; /* ranged test */
 	double dir_x, dir_y;
 	int cardinals[NCARDINALS][2] = {
 		{ 0, 30 },
@@ -89,114 +71,23 @@
 	litest_touch_down(dev, 1, 50, 40);
 	litest_touch_down(dev, 2, 60, 40);
 	libinput_dispatch(li);
+
+	if (hold == HOLD_GESTURE_REQUIRE)
+		litest_timeout_gesture_hold();
+
 	litest_touch_move_three_touches(dev, 40, 40, 50, 40, 60, 40, dir_x,
 					dir_y, 10);
 	libinput_dispatch(li);
 
-	event = libinput_get_event(li);
-	gevent = litest_is_gesture_event(event,
-					 LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
-					 3);
-	dx = libinput_event_gesture_get_dx(gevent);
-	dy = libinput_event_gesture_get_dy(gevent);
-	ck_assert(dx == 0.0);
-	ck_assert(dy == 0.0);
-	libinput_event_destroy(event);
-
-	while ((event = libinput_get_event(li)) != NULL) {
-		gevent = litest_is_gesture_event(event,
-						 LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
-						 3);
-
-		dx = libinput_event_gesture_get_dx(gevent);
-		dy = libinput_event_gesture_get_dy(gevent);
-		if (dir_x == 0.0)
-			ck_assert(dx == 0.0);
-		else if (dir_x < 0.0)
-			ck_assert(dx < 0.0);
-		else if (dir_x > 0.0)
-			ck_assert(dx > 0.0);
-
-		if (dir_y == 0.0)
-			ck_assert(dy == 0.0);
-		else if (dir_y < 0.0)
-			ck_assert(dy < 0.0);
-		else if (dir_y > 0.0)
-			ck_assert(dy > 0.0);
-
-		dx = libinput_event_gesture_get_dx_unaccelerated(gevent);
-		dy = libinput_event_gesture_get_dy_unaccelerated(gevent);
-		if (dir_x == 0.0)
-			ck_assert(dx == 0.0);
-		else if (dir_x < 0.0)
-			ck_assert(dx < 0.0);
-		else if (dir_x > 0.0)
-			ck_assert(dx > 0.0);
-
-		if (dir_y == 0.0)
-			ck_assert(dy == 0.0);
-		else if (dir_y < 0.0)
-			ck_assert(dy < 0.0);
-		else if (dir_y > 0.0)
-			ck_assert(dy > 0.0);
-
-		libinput_event_destroy(event);
+	if (hold == HOLD_GESTURE_REQUIRE) {
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					    3);
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_END,
+					    3);
 	}
 
-	litest_touch_up(dev, 0);
-	litest_touch_up(dev, 1);
-	litest_touch_up(dev, 2);
-	libinput_dispatch(li);
-	event = libinput_get_event(li);
-	gevent = litest_is_gesture_event(event,
-					 LIBINPUT_EVENT_GESTURE_SWIPE_END,
-					 3);
-	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
-	libinput_event_destroy(event);
-}
-END_TEST
-
-START_TEST(gestures_swipe_3fg_btntool)
-{
-	struct litest_device *dev = litest_current_device();
-	struct libinput *li = dev->libinput;
-	struct libinput_event *event;
-	struct libinput_event_gesture *gevent;
-	double dx, dy;
-	int cardinal = _i; /* ranged test */
-	double dir_x, dir_y;
-	int cardinals[NCARDINALS][2] = {
-		{ 0, 30 },
-		{ 30, 30 },
-		{ 30, 0 },
-		{ 30, -30 },
-		{ 0, -30 },
-		{ -30, -30 },
-		{ -30, 0 },
-		{ -30, 30 },
-	};
-
-	if (litest_slot_count(dev) > 2 ||
-	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_TRIPLETAP) ||
-	    !libinput_device_has_capability(dev->libinput_device,
-					    LIBINPUT_DEVICE_CAP_GESTURE))
-		return;
-
-	dir_x = cardinals[cardinal][0];
-	dir_y = cardinals[cardinal][1];
-
-	litest_drain_events(li);
-
-	litest_touch_down(dev, 0, 40, 40);
-	litest_touch_down(dev, 1, 50, 40);
-	litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
-	litest_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, 1);
-	litest_event(dev, EV_SYN, SYN_REPORT, 0);
-
-	libinput_dispatch(li);
-	litest_touch_move_two_touches(dev, 40, 40, 50, 40, dir_x, dir_y, 10);
-	libinput_dispatch(li);
-
 	event = libinput_get_event(li);
 	gevent = litest_is_gesture_event(event,
 					 LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
@@ -249,6 +140,7 @@
 
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
+	litest_touch_up(dev, 2);
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 	gevent = litest_is_gesture_event(event,
@@ -257,66 +149,15 @@
 	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
 	libinput_event_destroy(event);
 }
-END_TEST
-
-START_TEST(gestures_swipe_3fg_btntool_pinch_like)
-{
-	struct litest_device *dev = litest_current_device();
-	struct libinput *li = dev->libinput;
-	struct libinput_event *event;
-	struct libinput_event_gesture *gevent;
-
-	if (litest_slot_count(dev) > 2 ||
-	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_TRIPLETAP) ||
-	    !libinput_device_has_capability(dev->libinput_device,
-					    LIBINPUT_DEVICE_CAP_GESTURE))
-		return;
-
-	litest_drain_events(li);
-
-	/* Technically a pinch position + pinch movement, but expect swipe
-	 * for nfingers > nslots */
-	litest_touch_down(dev, 0, 20, 60);
-	litest_touch_down(dev, 1, 50, 20);
-	litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
-	litest_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, 1);
-	litest_event(dev, EV_SYN, SYN_REPORT, 0);
-
-	libinput_dispatch(li);
-	litest_touch_move_to(dev, 0, 20, 60, 10, 80, 20);
-	libinput_dispatch(li);
-
-	event = libinput_get_event(li);
-	litest_is_gesture_event(event, LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN, 3);
-	libinput_event_destroy(event);
-
-	while ((event = libinput_get_event(li)) != NULL) {
-		litest_is_gesture_event(event,
-					LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
-					3);
-		libinput_event_destroy(event);
-	}
-
-	litest_touch_up(dev, 0);
-	litest_touch_up(dev, 1);
-	libinput_dispatch(li);
-	event = libinput_get_event(li);
-	gevent = litest_is_gesture_event(event,
-					 LIBINPUT_EVENT_GESTURE_SWIPE_END,
-					 3);
-	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
-	libinput_event_destroy(event);
-}
-END_TEST
 
-START_TEST(gestures_swipe_4fg)
+static void
+test_gesture_swipe_4fg(int cardinal, enum hold_gesture_behaviour hold)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_gesture *gevent;
 	double dx, dy;
-	int cardinal = _i; /* ranged test */
 	double dir_x, dir_y;
 	int cardinals[NCARDINALS][2] = {
 		{ 0, 3 },
@@ -344,6 +185,9 @@
 	litest_touch_down(dev, 3, 70, 40);
 	libinput_dispatch(li);
 
+	if (hold == HOLD_GESTURE_REQUIRE)
+		litest_timeout_gesture_hold();
+
 	for (i = 0; i < 8; i++) {
 		litest_push_event_frame(dev);
 
@@ -372,111 +216,15 @@
 
 	libinput_dispatch(li);
 
-	event = libinput_get_event(li);
-	gevent = litest_is_gesture_event(event,
-					 LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
-					 4);
-	dx = libinput_event_gesture_get_dx(gevent);
-	dy = libinput_event_gesture_get_dy(gevent);
-	ck_assert(dx == 0.0);
-	ck_assert(dy == 0.0);
-	libinput_event_destroy(event);
-
-	while ((event = libinput_get_event(li)) != NULL) {
-		gevent = litest_is_gesture_event(event,
-						 LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
-						 4);
-
-		dx = libinput_event_gesture_get_dx(gevent);
-		dy = libinput_event_gesture_get_dy(gevent);
-		if (dir_x == 0.0)
-			ck_assert(dx == 0.0);
-		else if (dir_x < 0.0)
-			ck_assert(dx < 0.0);
-		else if (dir_x > 0.0)
-			ck_assert(dx > 0.0);
-
-		if (dir_y == 0.0)
-			ck_assert(dy == 0.0);
-		else if (dir_y < 0.0)
-			ck_assert(dy < 0.0);
-		else if (dir_y > 0.0)
-			ck_assert(dy > 0.0);
-
-		dx = libinput_event_gesture_get_dx_unaccelerated(gevent);
-		dy = libinput_event_gesture_get_dy_unaccelerated(gevent);
-		if (dir_x == 0.0)
-			ck_assert(dx == 0.0);
-		else if (dir_x < 0.0)
-			ck_assert(dx < 0.0);
-		else if (dir_x > 0.0)
-			ck_assert(dx > 0.0);
-
-		if (dir_y == 0.0)
-			ck_assert(dy == 0.0);
-		else if (dir_y < 0.0)
-			ck_assert(dy < 0.0);
-		else if (dir_y > 0.0)
-			ck_assert(dy > 0.0);
-
-		libinput_event_destroy(event);
+	if (hold == HOLD_GESTURE_REQUIRE) {
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					    4);
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_END,
+					    4);
 	}
 
-	litest_touch_up(dev, 0);
-	litest_touch_up(dev, 1);
-	litest_touch_up(dev, 2);
-	litest_touch_up(dev, 3);
-	libinput_dispatch(li);
-	event = libinput_get_event(li);
-	gevent = litest_is_gesture_event(event,
-					 LIBINPUT_EVENT_GESTURE_SWIPE_END,
-					 4);
-	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
-	libinput_event_destroy(event);
-}
-END_TEST
-
-START_TEST(gestures_swipe_4fg_btntool)
-{
-	struct litest_device *dev = litest_current_device();
-	struct libinput *li = dev->libinput;
-	struct libinput_event *event;
-	struct libinput_event_gesture *gevent;
-	double dx, dy;
-	int cardinal = _i; /* ranged test */
-	double dir_x, dir_y;
-	int cardinals[NCARDINALS][2] = {
-		{ 0, 30 },
-		{ 30, 30 },
-		{ 30, 0 },
-		{ 30, -30 },
-		{ 0, -30 },
-		{ -30, -30 },
-		{ -30, 0 },
-		{ -30, 30 },
-	};
-
-	if (litest_slot_count(dev) > 2 ||
-	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_QUADTAP) ||
-	    !libinput_device_has_capability(dev->libinput_device,
-					    LIBINPUT_DEVICE_CAP_GESTURE))
-		return;
-
-	dir_x = cardinals[cardinal][0];
-	dir_y = cardinals[cardinal][1];
-
-	litest_drain_events(li);
-
-	litest_touch_down(dev, 0, 40, 40);
-	litest_touch_down(dev, 1, 50, 40);
-	litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
-	litest_event(dev, EV_KEY, BTN_TOOL_QUADTAP, 1);
-	litest_event(dev, EV_SYN, SYN_REPORT, 0);
-
-	libinput_dispatch(li);
-	litest_touch_move_two_touches(dev, 40, 40, 50, 40, dir_x, dir_y, 10);
-	libinput_dispatch(li);
-
 	event = libinput_get_event(li);
 	gevent = litest_is_gesture_event(event,
 					 LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
@@ -529,6 +277,8 @@
 
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
+	litest_touch_up(dev, 2);
+	litest_touch_up(dev, 3);
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 	gevent = litest_is_gesture_event(event,
@@ -537,16 +287,15 @@
 	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
 	libinput_event_destroy(event);
 }
-END_TEST
 
-START_TEST(gestures_pinch)
+static void
+test_gesture_pinch_2fg(int cardinal, enum hold_gesture_behaviour hold)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_gesture *gevent;
 	double dx, dy;
-	int cardinal = _i; /* ranged test */
 	double dir_x, dir_y;
 	int i;
 	double scale, oldscale;
@@ -587,6 +336,9 @@
 	litest_touch_down(dev, 1, 50 - dir_x, 50 - dir_y);
 	libinput_dispatch(li);
 
+	if (hold == HOLD_GESTURE_REQUIRE)
+		litest_timeout_gesture_hold();
+
 	for (i = 0; i < 8; i++) {
 		litest_push_event_frame(dev);
 		if (dir_x > 0.0)
@@ -609,6 +361,15 @@
 		libinput_dispatch(li);
 	}
 
+	if (hold == HOLD_GESTURE_REQUIRE) {
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					2);
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_END,
+					2);
+	}
+
 	event = libinput_get_event(li);
 	gevent = litest_is_gesture_event(event,
 					 LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,
@@ -649,16 +410,15 @@
 	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
 	libinput_event_destroy(event);
 }
-END_TEST
 
-START_TEST(gestures_pinch_3fg)
+static void
+test_gesture_pinch_3fg(int cardinal, enum hold_gesture_behaviour hold)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_gesture *gevent;
 	double dx, dy;
-	int cardinal = _i; /* ranged test */
 	double dir_x, dir_y;
 	int i;
 	double scale, oldscale;
@@ -687,6 +447,9 @@
 	litest_touch_down(dev, 2, 51 - dir_x, 51 - dir_y);
 	libinput_dispatch(li);
 
+	if (hold == HOLD_GESTURE_REQUIRE)
+		litest_timeout_gesture_hold();
+
 	for (i = 0; i < 8; i++) {
 		litest_push_event_frame(dev);
 		if (dir_x > 0.0)
@@ -713,6 +476,14 @@
 		libinput_dispatch(li);
 	}
 
+	if (hold == HOLD_GESTURE_REQUIRE) {
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					3);
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_END,
+					3);
+	}
 	event = libinput_get_event(li);
 	gevent = litest_is_gesture_event(event,
 					 LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,
@@ -754,16 +525,15 @@
 	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
 	libinput_event_destroy(event);
 }
-END_TEST
 
-START_TEST(gestures_pinch_4fg)
+static void
+test_gesture_pinch_4fg(int cardinal, enum hold_gesture_behaviour hold)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_gesture *gevent;
 	double dx, dy;
-	int cardinal = _i; /* ranged test */
 	double dir_x, dir_y;
 	int i;
 	double scale, oldscale;
@@ -793,6 +563,9 @@
 	litest_touch_down(dev, 3, 52 - dir_x, 52 - dir_y);
 	libinput_dispatch(li);
 
+	if (hold == HOLD_GESTURE_REQUIRE)
+		litest_timeout_gesture_hold();
+
 	for (i = 0; i < 7; i++) {
 		litest_push_event_frame(dev);
 		if (dir_x > 0.0)
@@ -823,6 +596,15 @@
 		libinput_dispatch(li);
 	}
 
+	if (hold == HOLD_GESTURE_REQUIRE) {
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					4);
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_END,
+					4);
+	}
+
 	event = libinput_get_event(li);
 	gevent = litest_is_gesture_event(event,
 					 LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,
@@ -865,16 +647,15 @@
 	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
 	libinput_event_destroy(event);
 }
-END_TEST
 
-START_TEST(gestures_spread)
+static void
+test_gesture_spread(int cardinal, enum hold_gesture_behaviour hold)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_gesture *gevent;
 	double dx, dy;
-	int cardinal = _i; /* ranged test */
 	double dir_x, dir_y;
 	int i;
 	double scale, oldscale;
@@ -915,6 +696,9 @@
 	litest_touch_down(dev, 1, 50 - dir_x, 50 - dir_y);
 	libinput_dispatch(li);
 
+	if (hold == HOLD_GESTURE_REQUIRE)
+		litest_timeout_gesture_hold();
+
 	for (i = 0; i < 15; i++) {
 		litest_push_event_frame(dev);
 		if (dir_x > 0.0)
@@ -937,6 +721,15 @@
 		libinput_dispatch(li);
 	}
 
+	if (hold == HOLD_GESTURE_REQUIRE) {
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					2);
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_END,
+					2);
+	}
+
 	event = libinput_get_event(li);
 	gevent = litest_is_gesture_event(event,
 					 LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,
@@ -975,6 +768,479 @@
 	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
 	libinput_event_destroy(event);
 }
+
+static void
+test_gesture_3fg_buttonarea_scroll(enum hold_gesture_behaviour hold)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	if (litest_slot_count(dev) < 3)
+		return;
+
+	litest_enable_buttonareas(dev);
+	litest_enable_2fg_scroll(dev);
+	litest_drain_events(li);
+
+	litest_touch_down(dev, 0, 40, 20);
+	litest_touch_down(dev, 1, 30, 20);
+	/* third finger in btnarea */
+	litest_touch_down(dev, 2, 50, 99);
+	libinput_dispatch(li);
+
+	if (hold == HOLD_GESTURE_REQUIRE)
+		litest_timeout_gesture_hold();
+
+	litest_touch_move_two_touches(dev, 40, 20, 30, 20, 0, 40, 10);
+
+	litest_touch_up(dev, 0);
+	litest_touch_up(dev, 1);
+	libinput_dispatch(li);
+
+	if (hold == HOLD_GESTURE_REQUIRE) {
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					2);
+		litest_assert_gesture_event(li,
+					LIBINPUT_EVENT_GESTURE_HOLD_END,
+					2);
+	}
+
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     4);
+}
+
+static void
+test_gesture_hold(int nfingers)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	if (litest_slot_count(dev) < nfingers)
+		return;
+
+	litest_drain_events(li);
+
+	switch (nfingers) {
+	case 4:
+		litest_touch_down(dev, 3, 70, 30);
+		_fallthrough_;
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+
+	libinput_dispatch(li);
+	litest_timeout_gesture_hold();
+
+	if (libinput_device_has_capability(dev->libinput_device,
+					   LIBINPUT_DEVICE_CAP_GESTURE)) {
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					    nfingers);
+	} else {
+		litest_assert_empty_queue(li);
+	}
+
+	switch (nfingers) {
+	case 4:
+		litest_touch_up(dev, 3);
+		_fallthrough_;
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
+
+	libinput_dispatch(li);
+	if (libinput_device_has_capability(dev->libinput_device,
+					   LIBINPUT_DEVICE_CAP_GESTURE)) {
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_END,
+					    nfingers);
+	}
+
+	litest_assert_empty_queue(li);
+}
+
+static void
+test_gesture_hold_cancel(int nfingers)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int last_finger = (nfingers - 1);
+
+	if (litest_slot_count(dev) < nfingers)
+		return;
+
+	litest_drain_events(li);
+
+	switch (nfingers) {
+	case 4:
+		litest_touch_down(dev, 3, 70, 30);
+		_fallthrough_;
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+
+	libinput_dispatch(li);
+	litest_timeout_gesture_hold();
+
+	litest_touch_up(dev, last_finger);
+
+	if (libinput_device_has_capability(dev->libinput_device,
+					   LIBINPUT_DEVICE_CAP_GESTURE)) {
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					    nfingers);
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_END,
+					    nfingers);
+	}
+
+	litest_assert_empty_queue(li);
+}
+
+START_TEST(gestures_cap)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput_device *device = dev->libinput_device;
+
+	if (libevdev_has_property(dev->evdev, INPUT_PROP_SEMI_MT))
+		ck_assert(!libinput_device_has_capability(device,
+					  LIBINPUT_DEVICE_CAP_GESTURE));
+	else
+		ck_assert(libinput_device_has_capability(device,
+					 LIBINPUT_DEVICE_CAP_GESTURE));
+}
+END_TEST
+
+START_TEST(gestures_nocap)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput_device *device = dev->libinput_device;
+
+	ck_assert(!libinput_device_has_capability(device,
+						  LIBINPUT_DEVICE_CAP_GESTURE));
+}
+END_TEST
+
+START_TEST(gestures_swipe_3fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_swipe_3fg(cardinal, HOLD_GESTURE_IGNORE);
+}
+END_TEST
+
+START_TEST(gestures_swipe_3fg_btntool)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	struct libinput_event *event;
+	struct libinput_event_gesture *gevent;
+	double dx, dy;
+	int cardinal = _i; /* ranged test */
+	double dir_x, dir_y;
+	int cardinals[NCARDINALS][2] = {
+		{ 0, 30 },
+		{ 30, 30 },
+		{ 30, 0 },
+		{ 30, -30 },
+		{ 0, -30 },
+		{ -30, -30 },
+		{ -30, 0 },
+		{ -30, 30 },
+	};
+
+	if (litest_slot_count(dev) > 2 ||
+	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_TRIPLETAP) ||
+	    !libinput_device_has_capability(dev->libinput_device,
+					    LIBINPUT_DEVICE_CAP_GESTURE))
+		return;
+
+	dir_x = cardinals[cardinal][0];
+	dir_y = cardinals[cardinal][1];
+
+	litest_drain_events(li);
+
+	litest_touch_down(dev, 0, 40, 40);
+	litest_touch_down(dev, 1, 50, 40);
+	litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
+	litest_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+
+	libinput_dispatch(li);
+	litest_touch_move_two_touches(dev, 40, 40, 50, 40, dir_x, dir_y, 10);
+	libinput_dispatch(li);
+
+	event = libinput_get_event(li);
+	gevent = litest_is_gesture_event(event,
+					 LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
+					 3);
+	dx = libinput_event_gesture_get_dx(gevent);
+	dy = libinput_event_gesture_get_dy(gevent);
+	ck_assert(dx == 0.0);
+	ck_assert(dy == 0.0);
+	libinput_event_destroy(event);
+
+	while ((event = libinput_get_event(li)) != NULL) {
+		gevent = litest_is_gesture_event(event,
+						 LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
+						 3);
+
+		dx = libinput_event_gesture_get_dx(gevent);
+		dy = libinput_event_gesture_get_dy(gevent);
+		if (dir_x == 0.0)
+			ck_assert(dx == 0.0);
+		else if (dir_x < 0.0)
+			ck_assert(dx < 0.0);
+		else if (dir_x > 0.0)
+			ck_assert(dx > 0.0);
+
+		if (dir_y == 0.0)
+			ck_assert(dy == 0.0);
+		else if (dir_y < 0.0)
+			ck_assert(dy < 0.0);
+		else if (dir_y > 0.0)
+			ck_assert(dy > 0.0);
+
+		dx = libinput_event_gesture_get_dx_unaccelerated(gevent);
+		dy = libinput_event_gesture_get_dy_unaccelerated(gevent);
+		if (dir_x == 0.0)
+			ck_assert(dx == 0.0);
+		else if (dir_x < 0.0)
+			ck_assert(dx < 0.0);
+		else if (dir_x > 0.0)
+			ck_assert(dx > 0.0);
+
+		if (dir_y == 0.0)
+			ck_assert(dy == 0.0);
+		else if (dir_y < 0.0)
+			ck_assert(dy < 0.0);
+		else if (dir_y > 0.0)
+			ck_assert(dy > 0.0);
+
+		libinput_event_destroy(event);
+	}
+
+	litest_touch_up(dev, 0);
+	litest_touch_up(dev, 1);
+	libinput_dispatch(li);
+	event = libinput_get_event(li);
+	gevent = litest_is_gesture_event(event,
+					 LIBINPUT_EVENT_GESTURE_SWIPE_END,
+					 3);
+	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
+	libinput_event_destroy(event);
+}
+END_TEST
+
+START_TEST(gestures_swipe_3fg_btntool_pinch_like)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	struct libinput_event *event;
+	struct libinput_event_gesture *gevent;
+
+	if (litest_slot_count(dev) > 2 ||
+	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_TRIPLETAP) ||
+	    !libinput_device_has_capability(dev->libinput_device,
+					    LIBINPUT_DEVICE_CAP_GESTURE))
+		return;
+
+	litest_drain_events(li);
+
+	/* Technically a pinch position + pinch movement, but expect swipe
+	 * for nfingers > nslots */
+	litest_touch_down(dev, 0, 20, 60);
+	litest_touch_down(dev, 1, 50, 20);
+	litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
+	litest_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+
+	libinput_dispatch(li);
+	litest_touch_move_to(dev, 0, 20, 60, 10, 80, 20);
+	libinput_dispatch(li);
+
+	event = libinput_get_event(li);
+	litest_is_gesture_event(event, LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN, 3);
+	libinput_event_destroy(event);
+
+	while ((event = libinput_get_event(li)) != NULL) {
+		litest_is_gesture_event(event,
+					LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
+					3);
+		libinput_event_destroy(event);
+	}
+
+	litest_touch_up(dev, 0);
+	litest_touch_up(dev, 1);
+	libinput_dispatch(li);
+	event = libinput_get_event(li);
+	gevent = litest_is_gesture_event(event,
+					 LIBINPUT_EVENT_GESTURE_SWIPE_END,
+					 3);
+	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
+	libinput_event_destroy(event);
+}
+END_TEST
+
+START_TEST(gestures_swipe_4fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_swipe_4fg(cardinal, HOLD_GESTURE_IGNORE);
+}
+END_TEST
+
+START_TEST(gestures_swipe_4fg_btntool)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	struct libinput_event *event;
+	struct libinput_event_gesture *gevent;
+	double dx, dy;
+	int cardinal = _i; /* ranged test */
+	double dir_x, dir_y;
+	int cardinals[NCARDINALS][2] = {
+		{ 0, 30 },
+		{ 30, 30 },
+		{ 30, 0 },
+		{ 30, -30 },
+		{ 0, -30 },
+		{ -30, -30 },
+		{ -30, 0 },
+		{ -30, 30 },
+	};
+
+	if (litest_slot_count(dev) > 2 ||
+	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_QUADTAP) ||
+	    !libinput_device_has_capability(dev->libinput_device,
+					    LIBINPUT_DEVICE_CAP_GESTURE))
+		return;
+
+	dir_x = cardinals[cardinal][0];
+	dir_y = cardinals[cardinal][1];
+
+	litest_drain_events(li);
+
+	litest_touch_down(dev, 0, 40, 40);
+	litest_touch_down(dev, 1, 50, 40);
+	litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
+	litest_event(dev, EV_KEY, BTN_TOOL_QUADTAP, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+
+	libinput_dispatch(li);
+	litest_touch_move_two_touches(dev, 40, 40, 50, 40, dir_x, dir_y, 10);
+	libinput_dispatch(li);
+
+	event = libinput_get_event(li);
+	gevent = litest_is_gesture_event(event,
+					 LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
+					 4);
+	dx = libinput_event_gesture_get_dx(gevent);
+	dy = libinput_event_gesture_get_dy(gevent);
+	ck_assert(dx == 0.0);
+	ck_assert(dy == 0.0);
+	libinput_event_destroy(event);
+
+	while ((event = libinput_get_event(li)) != NULL) {
+		gevent = litest_is_gesture_event(event,
+						 LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
+						 4);
+
+		dx = libinput_event_gesture_get_dx(gevent);
+		dy = libinput_event_gesture_get_dy(gevent);
+		if (dir_x == 0.0)
+			ck_assert(dx == 0.0);
+		else if (dir_x < 0.0)
+			ck_assert(dx < 0.0);
+		else if (dir_x > 0.0)
+			ck_assert(dx > 0.0);
+
+		if (dir_y == 0.0)
+			ck_assert(dy == 0.0);
+		else if (dir_y < 0.0)
+			ck_assert(dy < 0.0);
+		else if (dir_y > 0.0)
+			ck_assert(dy > 0.0);
+
+		dx = libinput_event_gesture_get_dx_unaccelerated(gevent);
+		dy = libinput_event_gesture_get_dy_unaccelerated(gevent);
+		if (dir_x == 0.0)
+			ck_assert(dx == 0.0);
+		else if (dir_x < 0.0)
+			ck_assert(dx < 0.0);
+		else if (dir_x > 0.0)
+			ck_assert(dx > 0.0);
+
+		if (dir_y == 0.0)
+			ck_assert(dy == 0.0);
+		else if (dir_y < 0.0)
+			ck_assert(dy < 0.0);
+		else if (dir_y > 0.0)
+			ck_assert(dy > 0.0);
+
+		libinput_event_destroy(event);
+	}
+
+	litest_touch_up(dev, 0);
+	litest_touch_up(dev, 1);
+	libinput_dispatch(li);
+	event = libinput_get_event(li);
+	gevent = litest_is_gesture_event(event,
+					 LIBINPUT_EVENT_GESTURE_SWIPE_END,
+					 4);
+	ck_assert(!libinput_event_gesture_get_cancelled(gevent));
+	libinput_event_destroy(event);
+}
+END_TEST
+
+START_TEST(gestures_pinch)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_pinch_2fg(cardinal, HOLD_GESTURE_IGNORE);
+}
+END_TEST
+
+START_TEST(gestures_pinch_3fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_pinch_3fg(cardinal, HOLD_GESTURE_IGNORE);
+}
+END_TEST
+
+START_TEST(gestures_pinch_4fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_pinch_4fg(cardinal, HOLD_GESTURE_IGNORE);
+}
+END_TEST
+
+START_TEST(gestures_spread)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_spread(cardinal, HOLD_GESTURE_IGNORE);
+}
 END_TEST
 
 START_TEST(gestures_time_usec)
@@ -1011,76 +1277,561 @@
 
 START_TEST(gestures_3fg_buttonarea_scroll)
 {
+	test_gesture_3fg_buttonarea_scroll(HOLD_GESTURE_IGNORE);
+}
+END_TEST
+
+START_TEST(gestures_3fg_buttonarea_scroll_btntool)
+{
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 
-	if (litest_slot_count(dev) < 3)
+	if (litest_slot_count(dev) > 2)
 		return;
 
 	litest_enable_buttonareas(dev);
 	litest_enable_2fg_scroll(dev);
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 40, 20);
+	/* first finger in btnarea */
+	litest_touch_down(dev, 0, 20, 99);
 	litest_touch_down(dev, 1, 30, 20);
-	/* third finger in btnarea */
-	litest_touch_down(dev, 2, 50, 99);
+	litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
+	litest_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
 	libinput_dispatch(li);
-	litest_touch_move_two_touches(dev, 40, 20, 30, 20, 0, 40, 10);
+	litest_touch_move_to(dev, 1, 30, 20, 30, 70, 10);
+
+	litest_touch_up(dev, 1);
+	libinput_dispatch(li);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     4);
+}
+END_TEST
+
+START_TEST(gestures_swipe_3fg_unaccel)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	struct libinput_event *event;
+	double reference_ux = 0, reference_uy = 0;
+
+	/**
+	 * This magic number is an artifact of the acceleration code.
+	 * The maximum factor in the touchpad accel profile is 4.8 times the
+	 * speed setting (1.000875 at default setting 0). The factor
+	 * applied to the const acceleration is the 0.9 baseline.
+	 * So our two sets of coordinates are:
+	 * accel = 4.8 * delta * normalize_magic
+	 * unaccel = 0.9 * delta * normalize_magic
+	 *
+	 * Since delta and the normalization magic are the same for both,
+	 * our accelerated deltas can be a maximum of 4.8/0.9 bigger than
+	 * the unaccelerated deltas.
+	 *
+	 * If any of the accel methods numbers change, this will have to
+	 * change here too.
+	 */
+	const double max_factor = 5.34;
+
+	if (litest_slot_count(dev) < 3)
+		return;
+
+	litest_drain_events(li);
+	litest_touch_down(dev, 0, 40, 20);
+	litest_touch_down(dev, 1, 50, 20);
+	litest_touch_down(dev, 2, 60, 20);
+	libinput_dispatch(li);
+	litest_touch_move_three_touches(dev,
+					40, 20,
+					50, 20,
+					60, 20,
+					30, 40,
+					10);
+	libinput_dispatch(li);
+
+	event = libinput_get_event(li);
+	litest_is_gesture_event(event,
+				LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
+				3);
+	libinput_event_destroy(event);
+	event = libinput_get_event(li);
+	do {
+		struct libinput_event_gesture *gevent;
+		double dx, dy;
+		double ux, uy;
+
+		gevent = litest_is_gesture_event(event,
+						 LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,
+						 3);
+		dx = libinput_event_gesture_get_dx(gevent);
+		dy = libinput_event_gesture_get_dy(gevent);
+		ux = libinput_event_gesture_get_dx_unaccelerated(gevent);
+		uy = libinput_event_gesture_get_dy_unaccelerated(gevent);
+
+		ck_assert_double_ne(ux, 0.0);
+		ck_assert_double_ne(uy, 0.0);
+
+		if (!reference_ux)
+			reference_ux = ux;
+		if (!reference_uy)
+			reference_uy = uy;
+
+		/* The unaccelerated delta should be the same for every
+		 * event, but we have rounding errors since we only control
+		 * input data as percentage of the touchpad size.
+		 * so we just eyeball it */
+		ck_assert_double_gt(ux, reference_ux - 2);
+		ck_assert_double_lt(ux, reference_ux + 2);
+		ck_assert_double_gt(uy, reference_uy - 2);
+		ck_assert_double_lt(uy, reference_uy + 2);
+
+		/* All our touchpads are large enough to make this is a fast
+		 * swipe, we don't expect deceleration, unaccel should
+		 * always be less than accel delta */
+		ck_assert_double_lt(ux, dx);
+		ck_assert_double_lt(ux, dx);
+
+		/* Check our accelerated delta is within the expected
+		 * maximum. */
+		ck_assert_double_lt(dx, ux * max_factor);
+		ck_assert_double_lt(dy, uy * max_factor);
+
+		libinput_event_destroy(event);
+	} while ((event = libinput_get_event(li)));
 
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
+	litest_touch_up(dev, 2);
+}
+END_TEST
+
+START_TEST(gestures_hold_config_default_disabled)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput_device *device = dev->libinput_device;
+
+	ck_assert_int_eq(libinput_device_config_gesture_hold_is_available(device),
+			 0);
+	ck_assert_int_eq(libinput_device_config_gesture_get_hold_default_enabled(device),
+			 LIBINPUT_CONFIG_HOLD_DISABLED);
+	ck_assert_int_eq(libinput_device_config_gesture_get_hold_default_enabled(device),
+			 LIBINPUT_CONFIG_HOLD_DISABLED);
+}
+END_TEST
+
+START_TEST(gestures_hold_config_default_enabled)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput_device *device = dev->libinput_device;
+
+	ck_assert_int_eq(libinput_device_config_gesture_hold_is_available(device),
+			 1);
+	ck_assert_int_eq(libinput_device_config_gesture_get_hold_default_enabled(device),
+			 LIBINPUT_CONFIG_HOLD_ENABLED);
+	ck_assert_int_eq(libinput_device_config_gesture_get_hold_enabled(device),
+			 LIBINPUT_CONFIG_HOLD_ENABLED);
+}
+END_TEST
+
+START_TEST(gestures_hold_config_set_invalid)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput_device *device = dev->libinput_device;
+
+	ck_assert_int_eq(libinput_device_config_gesture_set_hold_enabled(device, -1),
+			 LIBINPUT_CONFIG_STATUS_INVALID);
+	ck_assert_int_eq(libinput_device_config_gesture_set_hold_enabled(device, 2),
+			 LIBINPUT_CONFIG_STATUS_INVALID);
+}
+END_TEST
+
+START_TEST(gestures_hold_config_is_available)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput_device *device = dev->libinput_device;
+
+	ck_assert_int_eq(libinput_device_config_gesture_hold_is_available(device),
+			 1);
+	ck_assert_int_eq(libinput_device_config_gesture_get_hold_enabled(device),
+			 LIBINPUT_CONFIG_HOLD_ENABLED);
+	ck_assert_int_eq(libinput_device_config_gesture_set_hold_enabled(device, LIBINPUT_CONFIG_HOLD_DISABLED),
+			 LIBINPUT_CONFIG_STATUS_SUCCESS);
+	ck_assert_int_eq(libinput_device_config_gesture_get_hold_enabled(device),
+			 LIBINPUT_CONFIG_HOLD_DISABLED);
+}
+END_TEST
+
+START_TEST(gestures_hold_config_is_not_available)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput_device *device = dev->libinput_device;
+
+	ck_assert_int_eq(libinput_device_config_gesture_hold_is_available(device),
+			 0);
+	ck_assert_int_eq(libinput_device_config_gesture_get_hold_enabled(device),
+			 LIBINPUT_CONFIG_HOLD_DISABLED);
+	ck_assert_int_eq(libinput_device_config_gesture_set_hold_enabled(device, LIBINPUT_CONFIG_HOLD_ENABLED),
+			 LIBINPUT_CONFIG_STATUS_UNSUPPORTED);
+	ck_assert_int_eq(libinput_device_config_gesture_set_hold_enabled(device, LIBINPUT_CONFIG_HOLD_DISABLED),
+			 LIBINPUT_CONFIG_STATUS_SUCCESS);
+}
+END_TEST
+
+START_TEST(gestures_hold)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+
+	litest_disable_tap(dev->libinput_device);
+	litest_drain_events(li);
+
+	test_gesture_hold(nfingers);
+}
+END_TEST
+
+START_TEST(gestures_hold_tap_enabled)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+
+	litest_enable_tap(dev->libinput_device);
+	litest_drain_events(li);
+
+	test_gesture_hold(nfingers);
+}
+END_TEST
+
+START_TEST(gestures_hold_cancel)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+
+	litest_disable_tap(dev->libinput_device);
+	litest_drain_events(li);
+
+	test_gesture_hold_cancel(nfingers);
+}
+END_TEST
+
+START_TEST(gestures_hold_cancel_tap_enabled)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+
+	litest_enable_tap(dev->libinput_device);
+	litest_drain_events(li);
+
+	test_gesture_hold_cancel(nfingers);
+}
+END_TEST
+
+START_TEST(gestures_hold_then_swipe_3fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_swipe_3fg(cardinal, HOLD_GESTURE_REQUIRE);
+}
+END_TEST
+
+START_TEST(gestures_hold_then_swipe_4fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_swipe_4fg(cardinal, HOLD_GESTURE_REQUIRE);
+}
+END_TEST
+
+START_TEST(gestures_hold_then_pinch_2fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_pinch_2fg(cardinal, HOLD_GESTURE_REQUIRE);
+}
+END_TEST
+
+START_TEST(gestures_hold_then_pinch_3fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_pinch_3fg(cardinal, HOLD_GESTURE_REQUIRE);
+}
+END_TEST
+
+START_TEST(gestures_hold_then_pinch_4fg)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_pinch_4fg(cardinal, HOLD_GESTURE_REQUIRE);
+}
+END_TEST
+
+START_TEST(gestures_hold_then_spread)
+{
+	int cardinal = _i; /* ranged test */
+	test_gesture_spread(cardinal, HOLD_GESTURE_REQUIRE);
+}
+END_TEST
+
+START_TEST(gestures_hold_then_3fg_buttonarea_scroll)
+{
+	test_gesture_3fg_buttonarea_scroll(HOLD_GESTURE_REQUIRE);
+}
+END_TEST
+
+START_TEST(gestures_hold_once_on_double_tap)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	if (!libinput_device_has_capability(dev->libinput_device,
+					    LIBINPUT_DEVICE_CAP_GESTURE))
+		return;
+
+	litest_enable_tap(dev->libinput_device);
+	litest_drain_events(li);
+
+	/* First tap, a hold gesture must be generated */
+	litest_touch_down(dev, 0, 50, 50);
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 4);
+	litest_timeout_gesture_quick_hold();
+	litest_touch_up(dev, 0);
+	libinput_dispatch(li);
+
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+				    1);
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_HOLD_END,
+				    1);
+	litest_assert_button_event(li, BTN_LEFT,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+	litest_assert_button_event(li, BTN_LEFT,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+	litest_assert_empty_queue(li);
+
+	/* Double tap, don't generate an extra hold gesture */
+	litest_touch_down(dev, 0, 50, 50);
+	litest_touch_up(dev, 0);
+	libinput_dispatch(li);
+	litest_timeout_gesture_quick_hold();
+
+	litest_assert_button_event(li, BTN_LEFT,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+	litest_assert_button_event(li, BTN_LEFT,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+
+	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(gestures_3fg_buttonarea_scroll_btntool)
+START_TEST(gestures_hold_once_tap_n_drag)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
 
-	if (litest_slot_count(dev) > 2)
+	if (nfingers > litest_slot_count(dev))
 		return;
 
-	litest_enable_buttonareas(dev);
-	litest_enable_2fg_scroll(dev);
+	if (!libinput_device_has_capability(dev->libinput_device,
+					    LIBINPUT_DEVICE_CAP_GESTURE))
+		return;
+
+	litest_enable_tap(dev->libinput_device);
+	litest_disable_drag_lock(dev->libinput_device);
 	litest_drain_events(li);
 
-	/* first finger in btnarea */
-	litest_touch_down(dev, 0, 20, 99);
-	litest_touch_down(dev, 1, 30, 20);
-	litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
-	litest_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, 1);
-	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
 	libinput_dispatch(li);
-	litest_touch_move_to(dev, 1, 30, 20, 30, 70, 10);
+	litest_timeout_gesture_quick_hold();
 
-	litest_touch_up(dev, 1);
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 4);
+
+	/* "Quick" hold gestures are only generated when using 1 or 2 fingers */
+	if (nfingers == 1 || nfingers == 2) {
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+					    nfingers);
+		litest_assert_gesture_event(li,
+					    LIBINPUT_EVENT_GESTURE_HOLD_END,
+					    nfingers);
+	}
+
+	/* Tap and drag, don't generate an extra hold gesture */
+	litest_touch_down(dev, 0, 50, 50);
+	litest_touch_move_to(dev, 0, 50, 50, 80, 80, 20);
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
+
+	litest_touch_up(dev, 0);
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+	litest_assert_empty_queue(li);
 }
 END_TEST
 
-TEST_COLLECTION(gestures)
+START_TEST(gestures_hold_and_motion_before_timeout)
 {
-	struct range cardinals = { N, N + NCARDINALS };
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	if (!libinput_device_has_capability(dev->libinput_device,
+					    LIBINPUT_DEVICE_CAP_GESTURE))
+		return;
+
+	litest_drain_events(li);
+
+	litest_touch_down(dev, 0, 50, 50);
+	libinput_dispatch(li);
+
+	litest_touch_move_to(dev, 0, 50, 50, 51, 51, 1);
+	litest_touch_move_to(dev, 0, 51, 51, 50, 50, 1);
+	libinput_dispatch(li);
+
+	litest_timeout_gesture_quick_hold();
+
+	litest_drain_events_of_type(li, LIBINPUT_EVENT_POINTER_MOTION, -1);
 
-	litest_add("gestures:cap", gestures_cap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("gestures:cap", gestures_nocap, LITEST_ANY, LITEST_TOUCHPAD);
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+				    1);
 
-	litest_add_ranged("gestures:swipe", gestures_swipe_3fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
-	litest_add_ranged("gestures:swipe", gestures_swipe_3fg_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
-	litest_add("gestures:swipe", gestures_swipe_3fg_btntool_pinch_like, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add_ranged("gestures:swipe", gestures_swipe_4fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
-	litest_add_ranged("gestures:swipe", gestures_swipe_4fg_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
-	litest_add_ranged("gestures:pinch", gestures_pinch, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
-	litest_add_ranged("gestures:pinch", gestures_pinch_3fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
-	litest_add_ranged("gestures:pinch", gestures_pinch_4fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
-	litest_add_ranged("gestures:pinch", gestures_spread, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_touch_up(dev, 0);
+	libinput_dispatch(li);
+
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_HOLD_END,
+				    1);
+	litest_assert_empty_queue(li);
+}
+END_TEST
+
+START_TEST(gestures_hold_and_motion_after_timeout)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	if (!libinput_device_has_capability(dev->libinput_device,
+					    LIBINPUT_DEVICE_CAP_GESTURE))
+		return;
+
+	litest_drain_events(li);
+
+	litest_touch_down(dev, 0, 50, 50);
+	libinput_dispatch(li);
+	litest_timeout_gesture_quick_hold();
+
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+				    1);
+
+	litest_touch_move_to(dev, 0, 50, 50, 51, 51, 1);
+	litest_touch_move_to(dev, 0, 51, 51, 50, 50, 1);
+	libinput_dispatch(li);
+	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
+
+	litest_touch_up(dev, 0);
+	libinput_dispatch(li);
+
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_HOLD_END,
+				    1);
+	litest_assert_empty_queue(li);
+}
+END_TEST
+
+TEST_COLLECTION(gestures)
+{
+	struct range cardinals = { N, N + NCARDINALS };
+	struct range range_hold = { 1, 5 };
+	struct range range_multifinger_tap = {1, 4};
 
-	litest_add("gestures:swipe", gestures_3fg_buttonarea_scroll, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
-	litest_add("gestures:swipe", gestures_3fg_buttonarea_scroll_btntool, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
+	litest_add(gestures_cap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(gestures_nocap, LITEST_ANY, LITEST_TOUCHPAD);
 
-	litest_add("gestures:time", gestures_time_usec, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add_ranged(gestures_swipe_3fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_swipe_3fg_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add(gestures_swipe_3fg_btntool_pinch_like, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add_ranged(gestures_swipe_4fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_swipe_4fg_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_pinch, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_pinch_3fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_pinch_4fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_spread, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+
+	litest_add(gestures_3fg_buttonarea_scroll, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
+	litest_add(gestures_3fg_buttonarea_scroll_btntool, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
+
+	litest_add(gestures_time_usec, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+
+	litest_add(gestures_hold_config_default_disabled, LITEST_TOUCHPAD|LITEST_SEMI_MT, LITEST_ANY);
+	litest_add(gestures_hold_config_default_enabled, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(gestures_hold_config_set_invalid, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(gestures_hold_config_is_available, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(gestures_hold_config_is_not_available, LITEST_TOUCHPAD|LITEST_SEMI_MT, LITEST_ANY);
+
+	litest_add_ranged(gestures_hold, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_hold);
+	litest_add_ranged(gestures_hold_tap_enabled, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_hold);
+	litest_add_ranged(gestures_hold_cancel, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_hold);
+	litest_add_ranged(gestures_hold_cancel_tap_enabled, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_hold);
+	litest_add_ranged(gestures_hold_then_swipe_3fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_hold_then_swipe_4fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_hold_then_pinch_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_hold_then_pinch_3fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_hold_then_pinch_4fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add_ranged(gestures_hold_then_spread, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &cardinals);
+	litest_add(gestures_hold_then_3fg_buttonarea_scroll, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
+
+	litest_add(gestures_hold_once_on_double_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add_ranged(gestures_hold_once_tap_n_drag, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+
+	litest_add(gestures_hold_and_motion_before_timeout, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(gestures_hold_and_motion_after_timeout, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+
+	/* Timing-sensitive test, valgrind is too slow */
+	if (!RUNNING_ON_VALGRIND)
+		litest_add(gestures_swipe_3fg_unaccel, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
 }
diff -Naur third_party_libinput_bak/test/test-keyboard.c third_party_libinput_new/test/test-keyboard.c
--- third_party_libinput_bak/test/test-keyboard.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-keyboard.c	2023-03-30 10:08:35.844160500 +0800
@@ -478,17 +478,17 @@
 
 TEST_COLLECTION(keyboard)
 {
-	litest_add_no_device("keyboard:seat key count", keyboard_seat_key_count);
-	litest_add_no_device("keyboard:key counting", keyboard_ignore_no_pressed_release);
-	litest_add_no_device("keyboard:key counting", keyboard_key_auto_release);
-	litest_add("keyboard:keys", keyboard_has_key, LITEST_KEYS, LITEST_ANY);
-	litest_add("keyboard:keys", keyboard_keys_bad_device, LITEST_ANY, LITEST_ANY);
-	litest_add("keyboard:time", keyboard_time_usec, LITEST_KEYS, LITEST_ANY);
+	litest_add_no_device(keyboard_seat_key_count);
+	litest_add_no_device(keyboard_ignore_no_pressed_release);
+	litest_add_no_device(keyboard_key_auto_release);
+	litest_add(keyboard_has_key, LITEST_KEYS, LITEST_ANY);
+	litest_add(keyboard_keys_bad_device, LITEST_ANY, LITEST_ANY);
+	litest_add(keyboard_time_usec, LITEST_KEYS, LITEST_ANY);
 
-	litest_add("keyboard:events", keyboard_no_buttons, LITEST_KEYS, LITEST_ANY);
-	litest_add("keyboard:events", keyboard_frame_order, LITEST_KEYS, LITEST_ANY);
+	litest_add(keyboard_no_buttons, LITEST_KEYS, LITEST_ANY);
+	litest_add(keyboard_frame_order, LITEST_KEYS, LITEST_ANY);
 
-	litest_add("keyboard:leds", keyboard_leds, LITEST_ANY, LITEST_ANY);
+	litest_add(keyboard_leds, LITEST_ANY, LITEST_ANY);
 
-	litest_add("keyboard:scroll", keyboard_no_scroll, LITEST_KEYS, LITEST_WHEEL);
+	litest_add(keyboard_no_scroll, LITEST_KEYS, LITEST_WHEEL);
 }
diff -Naur third_party_libinput_bak/test/test-log.c third_party_libinput_new/test/test-log.c
--- third_party_libinput_bak/test/test-log.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-log.c	2023-03-30 10:12:59.395173100 +0800
@@ -47,17 +47,34 @@
 	litest_assert_notnull(format);
 }
 
+
+static int open_restricted(const char *path, int flags, void *data)
+{
+       int fd;
+       fd = open(path, flags);
+       return fd < 0 ? -errno : fd;
+}
+static void close_restricted(int fd, void *data)
+{
+       close(fd);
+}
+
+static const struct libinput_interface simple_interface = {
+       .open_restricted = open_restricted,
+       .close_restricted = close_restricted,
+};
+
 START_TEST(log_default_priority)
 {
 	enum libinput_log_priority pri;
 	struct libinput *li;
 
-	li = litest_create_context();
+	li = libinput_path_create_context(&simple_interface, NULL);
 	pri = libinput_log_get_priority(li);
 
 	ck_assert_int_eq(pri, LIBINPUT_LOG_PRIORITY_ERROR);
 
-	litest_destroy_context(li);
+	libinput_unref(li);
 }
 END_TEST
 
@@ -188,12 +205,12 @@
 {
 	struct range axes = { ABS_X, ABS_Y + 1};
 
-	litest_add_deviceless("log:defaults", log_default_priority);
-	litest_add_deviceless("log:logging", log_handler_invoked);
-	litest_add_deviceless("log:logging", log_handler_NULL);
-	litest_add_no_device("log:logging", log_priority);
+	litest_add_deviceless(log_default_priority);
+	litest_add_deviceless(log_handler_invoked);
+	litest_add_deviceless(log_handler_NULL);
+	litest_add_no_device(log_priority);
 
 	/* mtdev clips to axis ranges */
-	litest_add_ranged("log:warnings", log_axisrange_warning, LITEST_TOUCH, LITEST_PROTOCOL_A, &axes);
-	litest_add_ranged("log:warnings", log_axisrange_warning, LITEST_TOUCHPAD, LITEST_ANY, &axes);
+	litest_add_ranged(log_axisrange_warning, LITEST_TOUCH, LITEST_PROTOCOL_A, &axes);
+	litest_add_ranged(log_axisrange_warning, LITEST_TOUCHPAD, LITEST_ANY, &axes);
 }
diff -Naur third_party_libinput_bak/test/test-misc.c third_party_libinput_new/test/test-misc.c
--- third_party_libinput_bak/test/test-misc.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-misc.c	2023-03-30 10:13:26.570663000 +0800
@@ -366,6 +366,9 @@
 
 	litest_touch_down(dev, 0, 70, 30);
 	litest_touch_down(dev, 1, 30, 70);
+	libinput_dispatch(li);
+	litest_timeout_gesture_hold();
+
 	for (i = 0; i < 8; i++) {
 		litest_push_event_frame(dev);
 		litest_touch_move(dev, 0, 70 - i * 5, 30 + i * 5);
@@ -379,7 +382,7 @@
 		type = libinput_event_get_type(event);
 
 		if (type >= LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN &&
-		    type <= LIBINPUT_EVENT_GESTURE_PINCH_END) {
+		    type <= LIBINPUT_EVENT_GESTURE_HOLD_END) {
 			struct libinput_event_gesture *g;
 			struct libinput_event *base;
 			g = libinput_event_get_gesture_event(event);
@@ -657,7 +660,8 @@
 				 const char *format,
 				 va_list args)
 {
-	int *warning_triggered = (int*)libinput_get_user_data(libinput);
+	struct litest_user_data *user_data = libinput_get_user_data(libinput);
+	int *warning_triggered = user_data->private;
 
 	if (priority == LIBINPUT_LOG_PRIORITY_ERROR &&
 	    strstr(format, "scheduled expiry is in the past"))
@@ -669,7 +673,7 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	int warning_triggered = 0;
-	void *old_user_data;
+	struct litest_user_data *user_data = libinput_get_user_data(li);
 
 	litest_enable_tap(dev->libinput_device);
 	litest_drain_events(li);
@@ -679,16 +683,13 @@
 
 	litest_timeout_tap();
 
-	old_user_data = libinput_get_user_data(li);
-	libinput_set_user_data(li, &warning_triggered);
+	user_data->private = &warning_triggered;
 	libinput_log_set_handler(li, timer_offset_warning);
 	libinput_dispatch(li);
 
 	/* triggered for touch down and touch up */
 	ck_assert_int_eq(warning_triggered, 2);
 	litest_restore_log_handler(li);
-
-	libinput_set_user_data(li, old_user_data);
 }
 END_TEST
 
@@ -697,39 +698,35 @@
 				const char *format,
 				va_list args)
 {
-	int *warning_triggered = (int*)libinput_get_user_data(libinput);
+	struct litest_user_data *user_data = libinput_get_user_data(libinput);
+	int *warning_triggered = user_data->private;
 
 	if (priority == LIBINPUT_LOG_PRIORITY_ERROR &&
 	    strstr(format, "event processing lagging behind by"))
 		(*warning_triggered)++;
 }
 
-
 START_TEST(timer_delay_bug_warning)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	int warning_triggered = 0;
-	void *old_user_data;
+	struct litest_user_data *user_data = libinput_get_user_data(li);
 
-	old_user_data = libinput_get_user_data(li);
 	litest_drain_events(li);
 
-	for (int i = 0; i < 10; i++) {
-		litest_button_click(dev, BTN_LEFT, true);
-		libinput_dispatch(li);
-		litest_button_click(dev, BTN_LEFT, false);
-		msleep(11);
+	user_data->private = &warning_triggered;
+	libinput_log_set_handler(li, timer_delay_warning);
 
-		libinput_set_user_data(li, &warning_triggered);
-		libinput_log_set_handler(li, timer_delay_warning);
+	for (int i = 0; i < 20; i++) {
+		litest_event(dev, EV_REL, REL_X, -1);
+		litest_event(dev, EV_SYN, SYN_REPORT, 0);
+		msleep(11);
 		libinput_dispatch(li);
 	}
 
-
 	ck_assert_int_ge(warning_triggered, 1);
 	litest_restore_log_handler(li);
-	libinput_set_user_data(li, old_user_data);
 }
 END_TEST
 
@@ -771,7 +768,7 @@
 	libinput_dispatch(li);
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_KEYBOARD_KEY);
 
-	/* Ingore 'timer offset negative' warnings */
+	/* Ignore 'timer offset negative' warnings */
 	litest_disable_log_handler(li);
 
 	/* now mess with the timing
@@ -886,25 +883,24 @@
 
 TEST_COLLECTION(misc)
 {
-	litest_add_no_device("events:conversion", event_conversion_device_notify);
-	litest_add_for_device("events:conversion", event_conversion_pointer, LITEST_MOUSE);
-	litest_add_for_device("events:conversion", event_conversion_pointer, LITEST_MOUSE);
-	litest_add_for_device("events:conversion", event_conversion_pointer_abs, LITEST_XEN_VIRTUAL_POINTER);
-	litest_add_for_device("events:conversion", event_conversion_key, LITEST_KEYBOARD);
-	litest_add_for_device("events:conversion", event_conversion_touch, LITEST_WACOM_TOUCH);
-	litest_add_for_device("events:conversion", event_conversion_gesture, LITEST_BCM5974);
-	litest_add_for_device("events:conversion", event_conversion_tablet, LITEST_WACOM_CINTIQ);
-	litest_add_for_device("events:conversion", event_conversion_tablet_pad, LITEST_WACOM_INTUOS5_PAD);
-	litest_add_for_device("events:conversion", event_conversion_switch, LITEST_LID_SWITCH);
-
-	litest_add_deviceless("context:refcount", context_ref_counting);
-	litest_add_deviceless("config:status string", config_status_string);
-
-	litest_add_for_device("timer:offset-warning", timer_offset_bug_warning, LITEST_SYNAPTICS_TOUCHPAD);
-	litest_add_for_device("timer:delay-warning", timer_delay_bug_warning, LITEST_MOUSE);
-	litest_add_no_device("timer:flush", timer_flush);
+	litest_add_no_device(event_conversion_device_notify);
+	litest_add_for_device(event_conversion_pointer, LITEST_MOUSE);
+	litest_add_for_device(event_conversion_pointer_abs, LITEST_XEN_VIRTUAL_POINTER);
+	litest_add_for_device(event_conversion_key, LITEST_KEYBOARD);
+	litest_add_for_device(event_conversion_touch, LITEST_WACOM_TOUCH);
+	litest_add_for_device(event_conversion_gesture, LITEST_BCM5974);
+	litest_add_for_device(event_conversion_tablet, LITEST_WACOM_CINTIQ);
+	litest_add_for_device(event_conversion_tablet_pad, LITEST_WACOM_INTUOS5_PAD);
+	litest_add_for_device(event_conversion_switch, LITEST_LID_SWITCH);
+
+	litest_add_deviceless(context_ref_counting);
+	litest_add_deviceless(config_status_string);
+
+	litest_add_for_device(timer_offset_bug_warning, LITEST_SYNAPTICS_TOUCHPAD);
+	litest_add_for_device(timer_delay_bug_warning, LITEST_MOUSE);
+	litest_add_no_device(timer_flush);
 
-	litest_add_no_device("misc:fd", fd_no_event_leak);
+	litest_add_no_device(fd_no_event_leak);
 
-	litest_add_for_device("misc:system", udev_absinfo_override, LITEST_ABSINFO_OVERRIDE);
+	litest_add_for_device(udev_absinfo_override, LITEST_ABSINFO_OVERRIDE);
 }
diff -Naur third_party_libinput_bak/test/test-pad.c third_party_libinput_new/test/test-pad.c
--- third_party_libinput_bak/test/test-pad.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-pad.c	2023-03-30 10:13:42.016610500 +0800
@@ -176,7 +176,7 @@
 
 START_TEST(pad_button_intuos)
 {
-#if !HAVE_LIBWACOM_GET_BUTTON_EVDEV_CODE
+#if !HAVE_LIBWACOM
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	unsigned int code;
@@ -236,7 +236,7 @@
 
 START_TEST(pad_button_bamboo)
 {
-#if !HAVE_LIBWACOM_GET_BUTTON_EVDEV_CODE
+#if !HAVE_LIBWACOM
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	unsigned int code;
@@ -286,7 +286,7 @@
 
 START_TEST(pad_button_libwacom)
 {
-#if HAVE_LIBWACOM_GET_BUTTON_EVDEV_CODE
+#if HAVE_LIBWACOM
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	WacomDeviceDatabase *db = NULL;
@@ -984,38 +984,38 @@
 
 TEST_COLLECTION(tablet_pad)
 {
-	litest_add("pad:cap", pad_cap, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:cap", pad_no_cap, LITEST_ANY, LITEST_TABLET_PAD);
+	litest_add(pad_cap, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_no_cap, LITEST_ANY, LITEST_TABLET_PAD);
 
-	litest_add("pad:time", pad_time, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_time, LITEST_TABLET_PAD, LITEST_ANY);
 
-	litest_add("pad:button", pad_num_buttons, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:button", pad_num_buttons_libwacom, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:button", pad_button_intuos, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:button", pad_button_bamboo, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:button", pad_button_libwacom, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:button", pad_button_mode_groups, LITEST_TABLET_PAD, LITEST_ANY);
-
-	litest_add("pad:ring", pad_has_ring, LITEST_RING, LITEST_ANY);
-	litest_add("pad:ring", pad_ring, LITEST_RING, LITEST_ANY);
-	litest_add("pad:ring", pad_ring_finger_up, LITEST_RING, LITEST_ANY);
-
-	litest_add("pad:strip", pad_has_strip, LITEST_STRIP, LITEST_ANY);
-	litest_add("pad:strip", pad_strip, LITEST_STRIP, LITEST_ANY);
-	litest_add("pad:strip", pad_strip_finger_up, LITEST_STRIP, LITEST_ANY);
-
-	litest_add_for_device("pad:left_handed", pad_left_handed_default, LITEST_WACOM_INTUOS5_PAD);
-	litest_add_for_device("pad:left_handed", pad_no_left_handed, LITEST_WACOM_INTUOS3_PAD);
-	litest_add_for_device("pad:left_handed", pad_left_handed_ring, LITEST_WACOM_INTUOS5_PAD);
+	litest_add(pad_num_buttons, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_num_buttons_libwacom, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_button_intuos, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_button_bamboo, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_button_libwacom, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_button_mode_groups, LITEST_TABLET_PAD, LITEST_ANY);
+
+	litest_add(pad_has_ring, LITEST_RING, LITEST_ANY);
+	litest_add(pad_ring, LITEST_RING, LITEST_ANY);
+	litest_add(pad_ring_finger_up, LITEST_RING, LITEST_ANY);
+
+	litest_add(pad_has_strip, LITEST_STRIP, LITEST_ANY);
+	litest_add(pad_strip, LITEST_STRIP, LITEST_ANY);
+	litest_add(pad_strip_finger_up, LITEST_STRIP, LITEST_ANY);
+
+	litest_add_for_device(pad_left_handed_default, LITEST_WACOM_INTUOS5_PAD);
+	litest_add_for_device(pad_no_left_handed, LITEST_WACOM_INTUOS3_PAD);
+	litest_add_for_device(pad_left_handed_ring, LITEST_WACOM_INTUOS5_PAD);
 	/* None of the current strip tablets are left-handed */
 
-	litest_add("pad:modes", pad_mode_groups, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:modes", pad_mode_groups_userdata, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:modes", pad_mode_groups_ref, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:modes", pad_mode_group_mode, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:modes", pad_mode_group_has, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:modes", pad_mode_group_has_invalid, LITEST_TABLET_PAD, LITEST_ANY);
-	litest_add("pad:modes", pad_mode_group_has_no_toggle, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_mode_groups, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_mode_groups_userdata, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_mode_groups_ref, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_mode_group_mode, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_mode_group_has, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_mode_group_has_invalid, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_mode_group_has_no_toggle, LITEST_TABLET_PAD, LITEST_ANY);
 
-	litest_add("pad:keys", pad_keys, LITEST_TABLET_PAD, LITEST_ANY);
+	litest_add(pad_keys, LITEST_TABLET_PAD, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-path.c third_party_libinput_new/test/test-path.c
--- third_party_libinput_bak/test/test-path.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-path.c	2023-03-30 10:25:36.529741600 +0800
@@ -494,7 +494,7 @@
 	ck_assert_notnull(sysname);
 	ck_assert_int_gt(strlen(sysname), 1);
 	ck_assert(strchr(sysname, '/') == NULL);
-	ck_assert_int_eq(strncmp(sysname, "event", 5), 0);
+	ck_assert(strneq(sysname, "event", 5));
 
 	libinput_event_destroy(ev);
 }
@@ -904,6 +904,42 @@
 }
 END_TEST
 
+START_TEST(path_device_gone)
+{
+	struct libinput *li;
+	struct libinput_device *device;
+	struct libevdev_uinput *uinput;
+	struct libinput_event *event;
+
+	uinput = litest_create_uinput_device("test device", NULL,
+					     EV_KEY, BTN_LEFT,
+					     EV_KEY, BTN_RIGHT,
+					     EV_REL, REL_X,
+					     EV_REL, REL_Y,
+					     -1);
+
+	li = libinput_path_create_context(&simple_interface, NULL);
+	ck_assert_notnull(li);
+
+	device = libinput_path_add_device(li,
+					  libevdev_uinput_get_devnode(uinput));
+	ck_assert_notnull(device);
+
+	litest_drain_events(li);
+
+	libevdev_uinput_destroy(uinput);
+
+	libinput_dispatch(li);
+
+	event = libinput_get_event(li);
+	ck_assert_notnull(event);
+	litest_assert_event_type(event, LIBINPUT_EVENT_DEVICE_REMOVED);
+	libinput_event_destroy(event);
+
+	libinput_unref(li);
+}
+END_TEST
+
 START_TEST(path_seat_recycle)
 {
 	struct libinput *li;
@@ -1014,30 +1050,31 @@
 
 TEST_COLLECTION(path)
 {
-	litest_add_no_device("path:create", path_create_NULL);
-	litest_add_no_device("path:create", path_create_invalid);
-	litest_add_no_device("path:create", path_create_invalid_file);
-	litest_add_no_device("path:create", path_create_invalid_kerneldev);
-	litest_add_no_device("path:create", path_create_pathmax_file);
-	litest_add_no_device("path:create", path_create_destroy);
-	litest_add("path:create", path_force_destroy, LITEST_ANY, LITEST_ANY);
-	litest_add_no_device("path:create", path_set_user_data);
-	litest_add_no_device("path:suspend", path_suspend);
-	litest_add_no_device("path:suspend", path_double_suspend);
-	litest_add_no_device("path:suspend", path_double_resume);
-	litest_add_no_device("path:suspend", path_add_device_suspend_resume);
-	litest_add_no_device("path:suspend", path_add_device_suspend_resume_fail);
-	litest_add_no_device("path:suspend", path_add_device_suspend_resume_remove_device);
-	litest_add_for_device("path:seat", path_added_seat, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("path:seat", path_seat_change, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add("path:device events", path_added_device, LITEST_ANY, LITEST_ANY);
-	litest_add("path:device events", path_device_sysname, LITEST_ANY, LITEST_ANY);
-	litest_add_for_device("path:device events", path_add_device, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_no_device("path:device events", path_add_invalid_path);
-	litest_add_for_device("path:device events", path_remove_device, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("path:device events", path_double_remove_device, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_no_device("path:seat", path_seat_recycle);
-	litest_add_for_device("path:udev", path_udev_assign_seat, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_no_device(path_create_NULL);
+	litest_add_no_device(path_create_invalid);
+	litest_add_no_device(path_create_invalid_file);
+	litest_add_no_device(path_create_invalid_kerneldev);
+	litest_add_no_device(path_create_pathmax_file);
+	litest_add_no_device(path_create_destroy);
+	litest_add(path_force_destroy, LITEST_ANY, LITEST_ANY);
+	litest_add_no_device(path_set_user_data);
+	litest_add_no_device(path_suspend);
+	litest_add_no_device(path_double_suspend);
+	litest_add_no_device(path_double_resume);
+	litest_add_no_device(path_add_device_suspend_resume);
+	litest_add_no_device(path_add_device_suspend_resume_fail);
+	litest_add_no_device(path_add_device_suspend_resume_remove_device);
+	litest_add_for_device(path_added_seat, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(path_seat_change, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add(path_added_device, LITEST_ANY, LITEST_ANY);
+	litest_add(path_device_sysname, LITEST_ANY, LITEST_ANY);
+	litest_add_for_device(path_add_device, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_no_device(path_add_invalid_path);
+	litest_add_for_device(path_remove_device, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(path_double_remove_device, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_no_device(path_device_gone);
+	litest_add_no_device(path_seat_recycle);
+	litest_add_for_device(path_udev_assign_seat, LITEST_SYNAPTICS_CLICKPAD_X220);
 
-	litest_add_no_device("path:ignore", path_ignore_device);
+	litest_add_no_device(path_ignore_device);
 }
diff -Naur third_party_libinput_bak/test/test-pointer.c third_party_libinput_new/test/test-pointer.c
--- third_party_libinput_bak/test/test-pointer.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-pointer.c	2023-03-30 10:26:55.656775600 +0800
@@ -603,7 +603,9 @@
 }
 
 static void
-test_wheel_event(struct litest_device *dev, int which, int amount)
+test_high_and_low_wheel_events_value(struct litest_device *dev,
+				     int which,
+				     int v120_amount)
 {
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
@@ -611,40 +613,64 @@
 	enum libinput_pointer_axis axis;
 	enum libinput_pointer_axis_source source;
 
-	double scroll_step, expected, discrete;
+	double scroll_step, expected, discrete, v120;
 
 	scroll_step = wheel_click_angle(dev, which);
 	source = LIBINPUT_POINTER_AXIS_SOURCE_WHEEL;
-	expected = amount * scroll_step;
-	discrete = amount;
+	expected = scroll_step * (v120_amount/120);
+	discrete = v120_amount/120;
+	v120 = v120_amount;
 
 	if (libinput_device_config_scroll_get_natural_scroll_enabled(dev->libinput_device)) {
 		expected *= -1;
 		discrete *= -1;
+		v120 *= -1;
+	}
+
+	axis = (which == REL_WHEEL || which == REL_WHEEL_HI_RES) ?
+				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL :
+				LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL;
+
+	event = libinput_get_event(li);
+
+	while(event) {
+		ptrev = litest_is_axis_event(event,
+					     LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
+					     axis,
+					     source);
+
+		if (!litest_is_high_res_axis_event(event)) {
+			litest_assert_double_eq(
+					libinput_event_pointer_get_axis_value(ptrev, axis),
+					expected);
+			litest_assert_double_eq(
+					libinput_event_pointer_get_axis_value_discrete(ptrev, axis),
+					discrete);
+		} else {
+			litest_assert_double_eq(
+					libinput_event_pointer_get_scroll_value_v120(ptrev, axis),
+					v120);
+		}
+		libinput_event_destroy(event);
+		event = libinput_get_event(li);
 	}
+}
+
+static void
+test_wheel_event(struct litest_device *dev, int which, int amount)
+{
+	struct libinput *li = dev->libinput;
+	int event_amount = amount;
 
 	/* mouse scroll wheels are 'upside down' */
 	if (which == REL_WHEEL)
-		amount *= -1;
-	litest_event(dev, EV_REL, which, amount);
+		event_amount *= -1;
+	litest_event(dev, EV_REL, which, event_amount);
 	litest_event(dev, EV_SYN, SYN_REPORT, 0);
 
 	libinput_dispatch(li);
 
-	axis = (which == REL_WHEEL) ?
-				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL :
-				LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL;
-
-	event = libinput_get_event(li);
-	ptrev = litest_is_axis_event(event, axis, source);
-
-	litest_assert_double_eq(
-			libinput_event_pointer_get_axis_value(ptrev, axis),
-			expected);
-	litest_assert_double_eq(
-			libinput_event_pointer_get_axis_value_discrete(ptrev, axis),
-			discrete);
-	libinput_event_destroy(event);
+	test_high_and_low_wheel_events_value(dev, which, amount * 120);
 }
 
 START_TEST(pointer_scroll_wheel)
@@ -675,6 +701,172 @@
 }
 END_TEST
 
+START_TEST(pointer_scroll_wheel_pressed_noscroll)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	litest_drain_events(li);
+
+	litest_button_click_debounced(dev, li, BTN_MIDDLE, true);
+	litest_drain_events(li);
+
+	for (int i = 0; i < 10; i++) {
+		litest_event(dev, EV_REL, REL_WHEEL, 1);
+		litest_event(dev, EV_REL, REL_HWHEEL, 1);
+		litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	}
+
+	libinput_dispatch(li);
+
+	litest_assert_empty_queue(li);
+
+	litest_button_click_debounced(dev, li, BTN_MIDDLE, false);
+}
+END_TEST
+
+START_TEST(pointer_scroll_hi_res_wheel_pressed_noscroll)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	litest_drain_events(li);
+
+	litest_button_click_debounced(dev, li, BTN_MIDDLE, true);
+	litest_drain_events(li);
+
+	for (int i = 0; i < 10; i++) {
+		litest_event(dev, EV_REL, REL_WHEEL_HI_RES, 12);
+		litest_event(dev, EV_REL, REL_HWHEEL_HI_RES, 12);
+		litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	}
+
+	libinput_dispatch(li);
+
+	litest_assert_empty_queue(li);
+
+	litest_button_click_debounced(dev, li, BTN_MIDDLE, false);
+}
+END_TEST
+
+static void
+test_hi_res_wheel_event(struct litest_device *dev, int which, int v120_amount)
+{
+	struct libinput *li = dev->libinput;
+
+	switch(which) {
+	case REL_WHEEL_HI_RES:
+		/* mouse scroll wheels are 'upside down' */
+		litest_event(dev, EV_REL, REL_WHEEL_HI_RES, -1 * v120_amount);
+		litest_event(dev, EV_REL, REL_WHEEL, -1 * v120_amount/120);
+		litest_event(dev, EV_SYN, SYN_REPORT, 0);
+		break;
+	case REL_HWHEEL_HI_RES:
+		litest_event(dev, EV_REL, REL_HWHEEL_HI_RES, v120_amount);
+		litest_event(dev, EV_REL, REL_HWHEEL, v120_amount/120);
+		litest_event(dev, EV_SYN, SYN_REPORT, 0);
+		break;
+	default:
+		abort();
+	}
+
+	libinput_dispatch(li);
+
+	test_high_and_low_wheel_events_value(dev, which, v120_amount);
+}
+
+START_TEST(pointer_scroll_wheel_hires)
+{
+	struct litest_device *dev = litest_current_device();
+
+	if (!libevdev_has_event_code(dev->evdev, EV_REL, REL_WHEEL_HI_RES) &&
+	    !libevdev_has_event_code(dev->evdev, EV_REL, REL_HWHEEL_HI_RES))
+		return;
+
+	litest_drain_events(dev->libinput);
+
+	for (int axis = REL_WHEEL_HI_RES; axis <= REL_HWHEEL_HI_RES; axis++) {
+		if (!libevdev_has_event_code(dev->evdev, EV_REL, axis))
+			continue;
+
+		test_hi_res_wheel_event(dev, axis, -120);
+		test_hi_res_wheel_event(dev, axis, 120);
+
+		test_hi_res_wheel_event(dev, axis, -5 * 120);
+		test_hi_res_wheel_event(dev, axis, 6 * 120);
+
+		test_hi_res_wheel_event(dev, axis, 30);
+		test_hi_res_wheel_event(dev, axis, -40);
+		test_hi_res_wheel_event(dev, axis, -60);
+		test_hi_res_wheel_event(dev, axis, 180);
+	}
+}
+END_TEST
+
+START_TEST(pointer_scroll_wheel_hires_send_only_lores_vertical)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	if (!libevdev_has_event_code(dev->evdev, EV_REL, REL_WHEEL_HI_RES) &&
+	    !libevdev_has_event_code(dev->evdev, EV_REL, REL_HWHEEL_HI_RES))
+		return;
+
+	litest_drain_events(dev->libinput);
+	litest_set_log_handler_bug(li);
+
+	litest_event(dev, EV_REL, REL_WHEEL, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	test_high_and_low_wheel_events_value(dev, REL_WHEEL, -120);
+
+	litest_event(dev, EV_REL, REL_WHEEL, -1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	test_high_and_low_wheel_events_value(dev, REL_WHEEL, 120);
+
+	litest_event(dev, EV_REL, REL_HWHEEL, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	test_high_and_low_wheel_events_value(dev, REL_HWHEEL, 120);
+
+	litest_assert_empty_queue(li);
+	litest_restore_log_handler(li);
+}
+END_TEST
+
+START_TEST(pointer_scroll_wheel_hires_send_only_lores_horizontal)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	if (!libevdev_has_event_code(dev->evdev, EV_REL, REL_WHEEL_HI_RES) &&
+	    !libevdev_has_event_code(dev->evdev, EV_REL, REL_HWHEEL_HI_RES))
+		return;
+
+	litest_drain_events(dev->libinput);
+	litest_set_log_handler_bug(li);
+
+	litest_event(dev, EV_REL, REL_HWHEEL, 2);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	test_high_and_low_wheel_events_value(dev, REL_HWHEEL, 240);
+
+	litest_event(dev, EV_REL, REL_WHEEL, -1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	test_high_and_low_wheel_events_value(dev, REL_WHEEL, 120);
+
+	litest_event(dev, EV_REL, REL_HWHEEL, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	test_high_and_low_wheel_events_value(dev, REL_HWHEEL, 120);
+
+	litest_assert_empty_queue(li);
+	litest_restore_log_handler(li);
+}
+END_TEST
+
 START_TEST(pointer_scroll_natural_defaults)
 {
 	struct litest_device *dev = litest_current_device();
@@ -761,6 +953,7 @@
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 	pev = litest_is_axis_event(event,
+				   LIBINPUT_EVENT_POINTER_SCROLL_WHEEL,
 				   LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
 				   0);
 
@@ -1030,13 +1223,25 @@
 	litest_drain_events(li);
 
 	litest_button_scroll(dev, BTN_LEFT, 1, 6);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 6);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     6);
 	litest_button_scroll(dev, BTN_LEFT, 1, -7);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, -7);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     -7);
 	litest_button_scroll(dev, BTN_LEFT, 8, 1);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, 8);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     8);
 	litest_button_scroll(dev, BTN_LEFT, -9, 1);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, -9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     -9);
 
 	/* scroll smaller than the threshold should not generate axis events */
 	litest_button_scroll(dev, BTN_LEFT, 1, 1);
@@ -1161,7 +1366,10 @@
 	litest_button_click(dev, BTN_RIGHT, 0);
 	libinput_dispatch(li);
 
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, -1);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     -1);
 	litest_assert_empty_queue(li);
 
 	/* Restore default scroll behavior */
@@ -1249,7 +1457,10 @@
 	litest_button_click_debounced(dev, li, BTN_LEFT, false);
 	libinput_dispatch(li);
 
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 6);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     6);
 
 	litest_assert_empty_queue(li);
 
@@ -1350,7 +1561,10 @@
 	litest_button_click_debounced(dev, li, BTN_LEFT, true);
 	litest_button_click_debounced(dev, li, BTN_LEFT, false);
 
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 6);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     6);
 
 	litest_assert_empty_queue(li);
 
@@ -1413,7 +1627,10 @@
 	litest_button_click_debounced(dev, li, BTN_LEFT, true);
 	litest_button_click_debounced(dev, li, BTN_LEFT, false);
 
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 6);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     6);
 
 	litest_assert_empty_queue(li);
 
@@ -1455,7 +1672,8 @@
 		litest_event(dev, EV_REL, REL_Y, 6);
 		litest_event(dev, EV_SYN, SYN_REPORT, 0);
 	}
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li,
+				       LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
 
 	/* other button passes on normally */
 	litest_button_click_debounced(dev, li, BTN_RIGHT, true);
@@ -1466,7 +1684,8 @@
 	/* stop scroll lock */
 	litest_button_click_debounced(dev, li, BTN_LEFT, true);
 	litest_button_click_debounced(dev, li, BTN_LEFT, false);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li,
+				       LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
 
 	/* other button passes on normally */
 	litest_button_click_debounced(dev, li, BTN_RIGHT, true);
@@ -1527,7 +1746,10 @@
 
 	litest_button_click_debounced(dev, li, BTN_LEFT, true);
 	litest_button_click_debounced(dev, li, BTN_LEFT, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 6);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     6);
 	litest_assert_empty_queue(li);
 
 	/* back to motion */
@@ -1642,7 +1864,10 @@
 					   LIBINPUT_BUTTON_STATE_PRESSED);
 		litest_assert_button_event(li, BTN_RIGHT,
 					   LIBINPUT_BUTTON_STATE_RELEASED);
-		litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 6);
+		litest_assert_scroll(li,
+				     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+				     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+				     6);
 		litest_assert_empty_queue(li);
 		break;
 	case LRLR:
@@ -2487,10 +2712,11 @@
 	ev = libinput_get_event(li);
 	do {
 		pev = litest_is_axis_event(ev,
+					   LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
 					   LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
 					   LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS);
-		ck_assert_double_gt(libinput_event_pointer_get_axis_value(pev,
-									  LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL),
+		ck_assert_double_gt(litest_event_pointer_get_value(pev,
+								   LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL),
 				    0.0);
 		libinput_event_destroy(ev);
 		ev = libinput_get_event(li);
@@ -2500,14 +2726,10 @@
 	litest_event(dev, EV_SYN, SYN_REPORT, 0);
 	libinput_dispatch(li);
 
-	ev = libinput_get_event(li);
-	pev = litest_is_axis_event(ev,
-				   LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
-				   LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS);
-	ck_assert_double_eq(libinput_event_pointer_get_axis_value(pev,
-								  LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL),
-			    0.0);
-	libinput_event_destroy(ev);
+	litest_assert_axis_end_sequence(li,
+					LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+					LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+					LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS);
 
 	/* no button release */
 	litest_assert_empty_queue(li);
@@ -2695,6 +2917,64 @@
 }
 END_TEST
 
+START_TEST(debounce_bounce_high_delay)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	unsigned int button = _i; /* ranged test */
+
+	if (!libinput_device_pointer_has_button(dev->libinput_device,
+						button))
+		return;
+
+	litest_disable_middleemu(dev);
+	disable_button_scrolling(dev);
+	litest_drain_events(li);
+
+	/* Debouncing timeout is 25ms after a button down or up. Make sure we go
+	 * over 25ms for the total bouncing duration, but stay under 25ms for
+	 * each single event. */
+	litest_event(dev, EV_KEY, button, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	msleep(15);
+	litest_event(dev, EV_KEY, button, 0);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	msleep(15);
+	litest_event(dev, EV_KEY, button, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	litest_timeout_debounce();
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li,
+				   button,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+	litest_assert_empty_queue(li);
+
+	litest_event(dev, EV_KEY, button, 0);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	msleep(15);
+	litest_event(dev, EV_KEY, button, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	msleep(15);
+	litest_event(dev, EV_KEY, button, 0);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	litest_timeout_debounce();
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li,
+				   button,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+
+	litest_assert_empty_queue(li);
+}
+END_TEST
+
 START_TEST(debounce_bounce_check_immediate)
 {
 	struct litest_device *dev = litest_current_device();
@@ -2884,6 +3164,75 @@
 }
 END_TEST
 
+START_TEST(debounce_spurious_trigger_high_delay)
+{
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+
+	litest_disable_middleemu(dev);
+	litest_drain_events(li);
+
+	litest_event(dev, EV_KEY, BTN_LEFT, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	litest_timeout_debounce();
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li,
+				   BTN_LEFT,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+
+	/* Spurious timeout is 12ms after a button down or up. Make sure we go
+	 * over 12ms for the total bouncing duration, but stay under 12ms for
+	 * each single event. */
+	litest_event(dev, EV_KEY, BTN_LEFT, 0);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	msleep(5);
+	litest_event(dev, EV_KEY, BTN_LEFT, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	msleep(5);
+	litest_event(dev, EV_KEY, BTN_LEFT, 0);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	msleep(5);
+	litest_event(dev, EV_KEY, BTN_LEFT, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+
+	litest_timeout_debounce();
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li,
+				   BTN_LEFT,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+	litest_assert_button_event(li,
+				   BTN_LEFT,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+
+	/* gets filtered now */
+	litest_event(dev, EV_KEY, BTN_LEFT, 0);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	litest_event(dev, EV_KEY, BTN_LEFT, 1);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	litest_timeout_debounce();
+	litest_assert_empty_queue(li);
+
+	litest_event(dev, EV_KEY, BTN_LEFT, 0);
+	litest_event(dev, EV_SYN, SYN_REPORT, 0);
+	libinput_dispatch(li);
+	litest_timeout_debounce();
+	libinput_dispatch(li);
+	litest_assert_button_event(li,
+				   BTN_LEFT,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+	litest_assert_empty_queue(li);
+}
+END_TEST
+
 START_TEST(debounce_spurious_dont_enable_on_otherbutton)
 {
 	struct litest_device *dev = litest_current_device();
@@ -3130,88 +3479,95 @@
 	struct range buttons = {BTN_LEFT, BTN_TASK + 1};
 	struct range buttonorder = {0, _MB_BUTTONORDER_COUNT};
 
-	litest_add("pointer:motion", pointer_motion_relative, LITEST_RELATIVE, LITEST_POINTINGSTICK);
-	litest_add_for_device("pointer:motion", pointer_motion_relative_zero, LITEST_MOUSE);
-	litest_add_ranged("pointer:motion", pointer_motion_relative_min_decel, LITEST_RELATIVE, LITEST_POINTINGSTICK, &compass);
-	litest_add("pointer:motion", pointer_motion_absolute, LITEST_ABSOLUTE, LITEST_ANY);
-	litest_add("pointer:motion", pointer_motion_unaccel, LITEST_RELATIVE, LITEST_ANY);
-	litest_add("pointer:button", pointer_button, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add_no_device("pointer:button", pointer_button_auto_release);
-	litest_add_no_device("pointer:button", pointer_seat_button_count);
-	litest_add_for_device("pointer:button", pointer_button_has_no_button, LITEST_KEYBOARD);
-	litest_add("pointer:button", pointer_recover_from_lost_button_count, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:scroll", pointer_scroll_wheel, LITEST_WHEEL, LITEST_TABLET);
-	litest_add("pointer:scroll", pointer_scroll_button, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_noscroll, LITEST_ABSOLUTE|LITEST_BUTTON, LITEST_RELATIVE);
-	litest_add("pointer:scroll", pointer_scroll_button_noscroll, LITEST_ANY, LITEST_RELATIVE|LITEST_BUTTON);
-	litest_add("pointer:scroll", pointer_scroll_button_no_event_before_timeout, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_middle_emulation, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_device_remove_while_down, LITEST_ANY, LITEST_RELATIVE|LITEST_BUTTON);
-
-	litest_add("pointer:scroll", pointer_scroll_button_lock, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_lock_defaults, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_lock_config, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_lock_enable_while_down, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_lock_enable_while_down_just_lock, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_lock_otherbutton, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:scroll", pointer_scroll_button_lock_enable_while_otherbutton_down, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add_ranged("pointer:scroll", pointer_scroll_button_lock_middlebutton, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY, &buttonorder);
-	litest_add("pointer:scroll", pointer_scroll_button_lock_doubleclick_nomove, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-
-	litest_add("pointer:scroll", pointer_scroll_nowheel_defaults, LITEST_RELATIVE|LITEST_BUTTON, LITEST_WHEEL);
-	litest_add_for_device("pointer:scroll", pointer_scroll_defaults_logitech_marble , LITEST_LOGITECH_TRACKBALL);
-	litest_add("pointer:scroll", pointer_scroll_natural_defaults, LITEST_WHEEL, LITEST_TABLET);
-	litest_add("pointer:scroll", pointer_scroll_natural_defaults_noscroll, LITEST_ANY, LITEST_WHEEL);
-	litest_add("pointer:scroll", pointer_scroll_natural_enable_config, LITEST_WHEEL, LITEST_TABLET);
-	litest_add("pointer:scroll", pointer_scroll_natural_wheel, LITEST_WHEEL, LITEST_TABLET);
-	litest_add("pointer:scroll", pointer_scroll_has_axis_invalid, LITEST_WHEEL, LITEST_TABLET);
+	litest_add(pointer_motion_relative, LITEST_RELATIVE, LITEST_POINTINGSTICK);
+	litest_add_for_device(pointer_motion_relative_zero, LITEST_MOUSE);
+	litest_add_ranged(pointer_motion_relative_min_decel, LITEST_RELATIVE, LITEST_POINTINGSTICK, &compass);
+	litest_add(pointer_motion_absolute, LITEST_ABSOLUTE, LITEST_ANY);
+	litest_add(pointer_motion_unaccel, LITEST_RELATIVE, LITEST_ANY);
+	litest_add(pointer_button, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add_no_device(pointer_button_auto_release);
+	litest_add_no_device(pointer_seat_button_count);
+	litest_add_for_device(pointer_button_has_no_button, LITEST_KEYBOARD);
+	litest_add(pointer_recover_from_lost_button_count, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(pointer_scroll_wheel, LITEST_WHEEL, LITEST_TABLET);
+	litest_add_for_device(pointer_scroll_wheel_pressed_noscroll, LITEST_MOUSE);
+	litest_add_for_device(pointer_scroll_hi_res_wheel_pressed_noscroll, LITEST_MOUSE);
+	litest_add(pointer_scroll_wheel_hires, LITEST_WHEEL, LITEST_TABLET);
+	litest_add(pointer_scroll_wheel_hires_send_only_lores_vertical, LITEST_WHEEL, LITEST_TABLET);
+	litest_add(pointer_scroll_wheel_hires_send_only_lores_horizontal, LITEST_WHEEL, LITEST_TABLET);
+	litest_add(pointer_scroll_button, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_noscroll, LITEST_ABSOLUTE|LITEST_BUTTON, LITEST_RELATIVE);
+	litest_add(pointer_scroll_button_noscroll, LITEST_ANY, LITEST_RELATIVE|LITEST_BUTTON);
+	litest_add(pointer_scroll_button_no_event_before_timeout, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_middle_emulation, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_device_remove_while_down, LITEST_ANY, LITEST_RELATIVE|LITEST_BUTTON);
+
+	litest_add(pointer_scroll_button_lock, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_lock_defaults, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_lock_config, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_lock_enable_while_down, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_lock_enable_while_down_just_lock, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_lock_otherbutton, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_scroll_button_lock_enable_while_otherbutton_down, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add_ranged(pointer_scroll_button_lock_middlebutton, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY, &buttonorder);
+	litest_add(pointer_scroll_button_lock_doubleclick_nomove, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+
+	litest_add(pointer_scroll_nowheel_defaults, LITEST_RELATIVE|LITEST_BUTTON, LITEST_WHEEL);
+	litest_add_for_device(pointer_scroll_defaults_logitech_marble , LITEST_LOGITECH_TRACKBALL);
+	litest_add(pointer_scroll_natural_defaults, LITEST_WHEEL, LITEST_TABLET);
+	litest_add(pointer_scroll_natural_defaults_noscroll, LITEST_ANY, LITEST_WHEEL);
+	litest_add(pointer_scroll_natural_enable_config, LITEST_WHEEL, LITEST_TABLET);
+	litest_add(pointer_scroll_natural_wheel, LITEST_WHEEL, LITEST_TABLET);
+	litest_add(pointer_scroll_has_axis_invalid, LITEST_WHEEL, LITEST_TABLET);
 
-	litest_add("pointer:calibration", pointer_no_calibration, LITEST_ANY, LITEST_TOUCH|LITEST_SINGLE_TOUCH|LITEST_ABSOLUTE|LITEST_PROTOCOL_A|LITEST_TABLET);
+	litest_add(pointer_no_calibration, LITEST_ANY, LITEST_TOUCH|LITEST_SINGLE_TOUCH|LITEST_ABSOLUTE|LITEST_PROTOCOL_A|LITEST_TABLET);
 
 									/* tests touchpads too */
-	litest_add("pointer:left-handed", pointer_left_handed_defaults, LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:left-handed", pointer_left_handed, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:left-handed", pointer_left_handed_during_click, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-	litest_add("pointer:left-handed", pointer_left_handed_during_click_multiple_buttons, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
-
-	litest_add("pointer:accel", pointer_accel_defaults, LITEST_RELATIVE, LITEST_ANY);
-	litest_add("pointer:accel", pointer_accel_invalid, LITEST_RELATIVE, LITEST_ANY);
-	litest_add("pointer:accel", pointer_accel_defaults_absolute, LITEST_ABSOLUTE, LITEST_RELATIVE);
-	litest_add("pointer:accel", pointer_accel_defaults_absolute_relative, LITEST_ABSOLUTE|LITEST_RELATIVE, LITEST_ANY);
-	litest_add("pointer:accel", pointer_accel_direction_change, LITEST_RELATIVE, LITEST_POINTINGSTICK);
-	litest_add("pointer:accel", pointer_accel_profile_defaults, LITEST_RELATIVE, LITEST_TOUCHPAD);
-	litest_add("pointer:accel", pointer_accel_profile_defaults, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("pointer:accel", pointer_accel_profile_invalid, LITEST_RELATIVE, LITEST_ANY);
-	litest_add("pointer:accel", pointer_accel_profile_noaccel, LITEST_ANY, LITEST_TOUCHPAD|LITEST_RELATIVE|LITEST_TABLET);
-	litest_add("pointer:accel", pointer_accel_profile_flat_motion_relative, LITEST_RELATIVE, LITEST_TOUCHPAD);
-
-	litest_add("pointer:middlebutton", middlebutton, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_nostart_while_down, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_timeout, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_doubleclick, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_middleclick, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_middleclick_during, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_default_enabled, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_POINTINGSTICK);
-	litest_add("pointer:middlebutton", middlebutton_default_clickpad, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("pointer:middlebutton", middlebutton_default_touchpad, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_default_disabled, LITEST_ANY, LITEST_BUTTON);
-	litest_add_for_device("pointer:middlebutton", middlebutton_default_alps, LITEST_ALPS_SEMI_MT);
-	litest_add("pointer:middlebutton", middlebutton_button_scrolling, LITEST_RELATIVE|LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_button_scrolling_middle, LITEST_RELATIVE|LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_device_remove_while_down, LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("pointer:middlebutton", middlebutton_device_remove_while_one_is_down, LITEST_BUTTON, LITEST_CLICKPAD);
-
-	litest_add_ranged("pointer:state", pointer_absolute_initial_state, LITEST_ABSOLUTE, LITEST_ANY, &axis_range);
-
-	litest_add("pointer:time", pointer_time_usec, LITEST_RELATIVE, LITEST_ANY);
-
-	litest_add_ranged("pointer:debounce", debounce_bounce, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE, &buttons);
-	litest_add("pointer:debounce", debounce_bounce_check_immediate, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
-	litest_add_ranged("pointer:debounce", debounce_spurious, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE, &buttons);
-	litest_add("pointer:debounce", debounce_spurious_multibounce, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
-	litest_add("pointer:debounce_otherbutton", debounce_spurious_dont_enable_on_otherbutton, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
-	litest_add("pointer:debounce_otherbutton", debounce_spurious_cancel_debounce_otherbutton, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
-	litest_add("pointer:debounce_otherbutton", debounce_spurious_switch_to_otherbutton, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
-	litest_add_no_device("pointer:debounce", debounce_remove_device_button_down);
-	litest_add_no_device("pointer:debounce", debounce_remove_device_button_up);
+	litest_add(pointer_left_handed_defaults, LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_left_handed, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_left_handed_during_click, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+	litest_add(pointer_left_handed_during_click_multiple_buttons, LITEST_RELATIVE|LITEST_BUTTON, LITEST_ANY);
+
+	litest_add(pointer_accel_defaults, LITEST_RELATIVE, LITEST_ANY);
+	litest_add(pointer_accel_invalid, LITEST_RELATIVE, LITEST_ANY);
+	litest_add(pointer_accel_defaults_absolute, LITEST_ABSOLUTE, LITEST_RELATIVE);
+	litest_add(pointer_accel_defaults_absolute_relative, LITEST_ABSOLUTE|LITEST_RELATIVE, LITEST_ANY);
+	litest_add(pointer_accel_direction_change, LITEST_RELATIVE, LITEST_POINTINGSTICK);
+	litest_add(pointer_accel_profile_defaults, LITEST_RELATIVE, LITEST_TOUCHPAD);
+	litest_add(pointer_accel_profile_defaults, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(pointer_accel_profile_invalid, LITEST_RELATIVE, LITEST_ANY);
+	litest_add(pointer_accel_profile_noaccel, LITEST_ANY, LITEST_TOUCHPAD|LITEST_RELATIVE|LITEST_TABLET);
+	litest_add(pointer_accel_profile_flat_motion_relative, LITEST_RELATIVE, LITEST_TOUCHPAD);
+
+	litest_add(middlebutton, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_nostart_while_down, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_timeout, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_doubleclick, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_middleclick, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_middleclick_during, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_default_enabled, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_POINTINGSTICK);
+	litest_add(middlebutton_default_clickpad, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(middlebutton_default_touchpad, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(middlebutton_default_disabled, LITEST_ANY, LITEST_BUTTON);
+	litest_add_for_device(middlebutton_default_alps, LITEST_ALPS_SEMI_MT);
+	litest_add(middlebutton_button_scrolling, LITEST_RELATIVE|LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_button_scrolling_middle, LITEST_RELATIVE|LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_device_remove_while_down, LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(middlebutton_device_remove_while_one_is_down, LITEST_BUTTON, LITEST_CLICKPAD);
+
+	litest_add_ranged(pointer_absolute_initial_state, LITEST_ABSOLUTE, LITEST_ANY, &axis_range);
+
+	litest_add(pointer_time_usec, LITEST_RELATIVE, LITEST_ANY);
+
+	litest_add_ranged(debounce_bounce, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE, &buttons);
+	litest_add_ranged(debounce_bounce_high_delay, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE, &buttons);
+	litest_add(debounce_bounce_check_immediate, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
+	litest_add_ranged(debounce_spurious, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE, &buttons);
+	litest_add(debounce_spurious_multibounce, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
+	litest_add(debounce_spurious_trigger_high_delay, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
+	litest_add(debounce_spurious_dont_enable_on_otherbutton, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
+	litest_add(debounce_spurious_cancel_debounce_otherbutton, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
+	litest_add(debounce_spurious_switch_to_otherbutton, LITEST_BUTTON, LITEST_TOUCHPAD|LITEST_NO_DEBOUNCE);
+	litest_add_no_device(debounce_remove_device_button_down);
+	litest_add_no_device(debounce_remove_device_button_up);
 }
diff -Naur third_party_libinput_bak/test/test-quirks.c third_party_libinput_new/test/test-quirks.c
--- third_party_libinput_bak/test/test-quirks.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-quirks.c	2023-03-30 10:28:01.030477300 +0800
@@ -1206,6 +1206,49 @@
 }
 END_TEST
 
+struct qtest_bool {
+	const char *str;
+	bool success;
+	bool val;
+};
+
+START_TEST(quirks_parse_bool_attr)
+{
+	struct litest_device *dev = litest_current_device();
+	enum quirk attrs[] = {
+	        QUIRK_ATTR_USE_VELOCITY_AVERAGING,
+		QUIRK_ATTR_TABLET_SMOOTHING,
+	};
+	enum quirk *a;
+	struct qtest_bool test_values[] = {
+		{ "0", true, false },
+		{ "1", true, true },
+		{ "2", false, false },
+		{ "-1", false, false },
+		{ "a", false, false },
+	};
+	struct qtest_bool *t;
+
+	ARRAY_FOR_EACH(attrs, a) {
+		ARRAY_FOR_EACH(test_values, t) {
+			bool v;
+			bool rc;
+
+			rc = test_attr_parse(dev,
+					     *a,
+					     t->str,
+					     (qparsefunc)quirks_get_bool,
+					     &v);
+			ck_assert(rc == t->success);
+			if (!rc)
+				continue;
+
+			ck_assert(v == t->val);
+		}
+	}
+}
+END_TEST
+
 START_TEST(quirks_parse_integration_attr)
 {
 	struct litest_device *dev = litest_current_device();
@@ -1305,6 +1348,54 @@
 }
 END_TEST
 
+START_TEST(quirks_model_override)
+{
+	struct litest_device *dev = litest_current_device();
+	struct udev_device *ud = libinput_device_get_udev_device(dev->libinput_device);
+	struct quirks_context *ctx;
+	char *quirks_file;
+	struct data_dir dd;
+	struct quirks *q;
+	bool isset;
+	bool set = _i; /* ranged test */
+
+	/* Test model quirks override by setting, then unsetting (or the
+	   other way round) */
+	int rc = xasprintf(&quirks_file,
+			   "[first]\n"
+			   "MatchUdevType=mouse\n"
+			   "ModelAppleTouchpad=%d\n"
+			   "\n"
+			   "[second]\n"
+			   "MatchUdevType=mouse\n"
+			   "ModelAppleTouchpad=%d\n",
+			   set ? 0 : 1,
+			   set ? 1 : 0);
+	ck_assert_int_ne(rc, -1);
+
+	dd = make_data_dir(quirks_file);
+
+	ctx = quirks_init_subsystem(dd.dirname,
+				    NULL,
+				    log_handler,
+				    NULL,
+				    QLOG_CUSTOM_LOG_PRIORITIES);
+	ck_assert_notnull(ctx);
+
+	q = quirks_fetch_for_device(ctx, ud);
+	ck_assert_notnull(q);
+
+	ck_assert(quirks_get_bool(q, QUIRK_MODEL_APPLE_TOUCHPAD, &isset));
+	ck_assert(isset == set);
+
+	quirks_unref(q);
+	quirks_context_unref(ctx);
+	cleanup_data_dir(dd);
+	udev_device_unref(ud);
+	free(quirks_file);
+}
+END_TEST
+
 START_TEST(quirks_model_alps)
 {
 	struct litest_device *dev = litest_current_device();
@@ -1424,59 +1515,63 @@
 
 TEST_COLLECTION(quirks)
 {
-	litest_add_deviceless("quirks:datadir", quirks_invalid_dir);
-	litest_add_deviceless("quirks:datadir", quirks_empty_dir);
+	struct range boolean = {0, 2};
+
+	litest_add_deviceless(quirks_invalid_dir);
+	litest_add_deviceless(quirks_empty_dir);
 
-	litest_add_deviceless("quirks:structure", quirks_section_empty);
-	litest_add_deviceless("quirks:structure", quirks_section_double);
-	litest_add_deviceless("quirks:structure", quirks_section_missing_match);
-	litest_add_deviceless("quirks:structure", quirks_section_missing_attr);
-	litest_add_deviceless("quirks:structure", quirks_section_match_after_attr);
-	litest_add_deviceless("quirks:structure", quirks_section_duplicate_match);
-	litest_add_deviceless("quirks:structure", quirks_section_duplicate_attr);
-
-	litest_add_deviceless("quirks:parsing", quirks_parse_error_section);
-	litest_add_deviceless("quirks:parsing", quirks_parse_error_trailing_whitespace);
-	litest_add_deviceless("quirks:parsing", quirks_parse_error_unknown_match);
-	litest_add_deviceless("quirks:parsing", quirks_parse_error_unknown_attr);
-	litest_add_deviceless("quirks:parsing", quirks_parse_error_unknown_model);
-	litest_add_deviceless("quirks:parsing", quirks_parse_error_unknown_prefix);
-	litest_add_deviceless("quirks:parsing", quirks_parse_error_model_not_one);
-	litest_add_deviceless("quirks:parsing", quirks_parse_comment_inline);
-	litest_add_deviceless("quirks:parsing", quirks_parse_comment_empty);
-	litest_add_deviceless("quirks:parsing", quirks_parse_string_quotes_single);
-	litest_add_deviceless("quirks:parsing", quirks_parse_string_quotes_double);
-
-	litest_add_deviceless("quirks:parsing", quirks_parse_bustype);
-	litest_add_deviceless("quirks:parsing", quirks_parse_bustype_invalid);
-	litest_add_deviceless("quirks:parsing", quirks_parse_vendor);
-	litest_add_deviceless("quirks:parsing", quirks_parse_vendor_invalid);
-	litest_add_deviceless("quirks:parsing", quirks_parse_product);
-	litest_add_deviceless("quirks:parsing", quirks_parse_product_invalid);
-	litest_add_deviceless("quirks:parsing", quirks_parse_version);
-	litest_add_deviceless("quirks:parsing", quirks_parse_version_invalid);
-	litest_add_deviceless("quirks:parsing", quirks_parse_name);
-	litest_add_deviceless("quirks:parsing", quirks_parse_name_invalid);
-	litest_add_deviceless("quirks:parsing", quirks_parse_udev);
-	litest_add_deviceless("quirks:parsing", quirks_parse_udev_invalid);
-	litest_add_deviceless("quirks:parsing", quirks_parse_dmi);
-	litest_add_deviceless("quirks:parsing", quirks_parse_dmi_invalid);
-
-	litest_add_for_device("quirks:parsing", quirks_parse_dimension_attr, LITEST_MOUSE);
-	litest_add_for_device("quirks:parsing", quirks_parse_range_attr, LITEST_MOUSE);
-	litest_add_for_device("quirks:parsing", quirks_parse_uint_attr, LITEST_MOUSE);
-	litest_add_for_device("quirks:parsing", quirks_parse_double_attr, LITEST_MOUSE);
-	litest_add_for_device("quirks:parsing", quirks_parse_string_attr, LITEST_MOUSE);
-	litest_add_for_device("quirks:parsing", quirks_parse_integration_attr, LITEST_MOUSE);
-
-	litest_add_for_device("quirks:model", quirks_model_one, LITEST_MOUSE);
-	litest_add_for_device("quirks:model", quirks_model_zero, LITEST_MOUSE);
-
-	litest_add("quirks:devices", quirks_model_alps, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("quirks:devices", quirks_model_wacom, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("quirks:devices", quirks_model_apple, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("quirks:devices", quirks_model_synaptics_serial, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add_deviceless(quirks_section_empty);
+	litest_add_deviceless(quirks_section_double);
+	litest_add_deviceless(quirks_section_missing_match);
+	litest_add_deviceless(quirks_section_missing_attr);
+	litest_add_deviceless(quirks_section_match_after_attr);
+	litest_add_deviceless(quirks_section_duplicate_match);
+	litest_add_deviceless(quirks_section_duplicate_attr);
+
+	litest_add_deviceless(quirks_parse_error_section);
+	litest_add_deviceless(quirks_parse_error_trailing_whitespace);
+	litest_add_deviceless(quirks_parse_error_unknown_match);
+	litest_add_deviceless(quirks_parse_error_unknown_attr);
+	litest_add_deviceless(quirks_parse_error_unknown_model);
+	litest_add_deviceless(quirks_parse_error_unknown_prefix);
+	litest_add_deviceless(quirks_parse_error_model_not_one);
+	litest_add_deviceless(quirks_parse_comment_inline);
+	litest_add_deviceless(quirks_parse_comment_empty);
+	litest_add_deviceless(quirks_parse_string_quotes_single);
+	litest_add_deviceless(quirks_parse_string_quotes_double);
+
+	litest_add_deviceless(quirks_parse_bustype);
+	litest_add_deviceless(quirks_parse_bustype_invalid);
+	litest_add_deviceless(quirks_parse_vendor);
+	litest_add_deviceless(quirks_parse_vendor_invalid);
+	litest_add_deviceless(quirks_parse_product);
+	litest_add_deviceless(quirks_parse_product_invalid);
+	litest_add_deviceless(quirks_parse_version);
+	litest_add_deviceless(quirks_parse_version_invalid);
+	litest_add_deviceless(quirks_parse_name);
+	litest_add_deviceless(quirks_parse_name_invalid);
+	litest_add_deviceless(quirks_parse_udev);
+	litest_add_deviceless(quirks_parse_udev_invalid);
+	litest_add_deviceless(quirks_parse_dmi);
+	litest_add_deviceless(quirks_parse_dmi_invalid);
+
+	litest_add_for_device(quirks_parse_dimension_attr, LITEST_MOUSE);
+	litest_add_for_device(quirks_parse_range_attr, LITEST_MOUSE);
+	litest_add_for_device(quirks_parse_uint_attr, LITEST_MOUSE);
+	litest_add_for_device(quirks_parse_double_attr, LITEST_MOUSE);
+	litest_add_for_device(quirks_parse_string_attr, LITEST_MOUSE);
+	litest_add_for_device(quirks_parse_bool_attr, LITEST_MOUSE);
+	litest_add_for_device(quirks_parse_integration_attr, LITEST_MOUSE);
+
+	litest_add_for_device(quirks_model_one, LITEST_MOUSE);
+	litest_add_for_device(quirks_model_zero, LITEST_MOUSE);
+	litest_add_ranged_for_device(quirks_model_override, LITEST_MOUSE, &boolean);
+
+	litest_add(quirks_model_alps, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(quirks_model_wacom, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(quirks_model_apple, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(quirks_model_synaptics_serial, LITEST_TOUCHPAD, LITEST_ANY);
 
-	litest_add_deviceless("quirks:misc", quirks_call_NULL);
-	litest_add_deviceless("quirks:misc", quirks_ctx_ref);
+	litest_add_deviceless(quirks_call_NULL);
+	litest_add_deviceless(quirks_ctx_ref);
 }
diff -Naur third_party_libinput_bak/test/test-switch.c third_party_libinput_new/test/test-switch.c
--- third_party_libinput_bak/test/test-switch.c	2023-03-28 10:49:59.328626800 +0800
+++ third_party_libinput_new/test/test-switch.c	2023-03-30 10:28:34.308494300 +0800
@@ -286,6 +286,7 @@
 
 	touchpad = switch_init_paired_touchpad(li);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_grab_device(sw);
@@ -325,6 +326,7 @@
 
 	touchpad = switch_init_paired_touchpad(li);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(touchpad, 0, 50, 50);
@@ -404,18 +406,17 @@
 	litest_timeout_edgescroll();
 	litest_touch_move_to(touchpad, 0, 99, 20, 99, 30, 10);
 	libinput_dispatch(li);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	litest_grab_device(sw);
 	litest_switch_action(sw, which, LIBINPUT_SWITCH_STATE_ON);
 	litest_ungrab_device(sw);
 	libinput_dispatch(li);
 
-	event = libinput_get_event(li);
-	litest_is_axis_event(event,
-			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
-			     LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
-	libinput_event_destroy(event);
+	litest_assert_axis_end_sequence(li,
+					LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+					LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
 
 	event = libinput_get_event(li);
 	litest_is_switch_event(event, which, LIBINPUT_SWITCH_STATE_ON);
@@ -438,6 +439,7 @@
 	touchpad = switch_init_paired_touchpad(li);
 
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	/* default: switch is off - motion events */
@@ -471,6 +473,7 @@
 
 	touchpad = switch_init_paired_touchpad(li);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	libinput_device_config_send_events_set_mode(touchpad->libinput_device,
 						    LIBINPUT_CONFIG_SEND_EVENTS_DISABLED);
 	litest_drain_events(li);
@@ -512,6 +515,7 @@
 	touchpad = switch_init_paired_touchpad(li);
 	mouse = litest_add_device(li, LITEST_MOUSE);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	libinput_device_config_send_events_set_mode(touchpad->libinput_device,
 						    LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE);
 	litest_drain_events(li);
@@ -602,6 +606,8 @@
 	keyboard = litest_add_device(li, LITEST_KEYBOARD);
 	touchpad = litest_add_device(li, LITEST_SYNAPTICS_I2C);
 
+	litest_disable_hold_gestures(touchpad->libinput_device);
+
 	litest_grab_device(sw);
 	litest_switch_action(sw,
 			     LIBINPUT_SWITCH_LID,
@@ -928,6 +934,7 @@
 	/* touchpad comes with switch already on - no events */
 	touchpad = switch_init_paired_touchpad(li);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(touchpad, 0, 50, 50);
@@ -963,6 +970,7 @@
 
 	touchpad = switch_init_paired_touchpad(li);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	libinput_suspend(li);
@@ -1050,6 +1058,10 @@
 	litest_touch_down(touchpad, 0, 50, 50);
 	litest_touch_move_to(touchpad, 0, 50, 50, 70, 50, 10);
 	litest_touch_up(touchpad, 0);
+	litest_drain_events_of_type(li,
+				    LIBINPUT_EVENT_GESTURE_HOLD_BEGIN,
+				    LIBINPUT_EVENT_GESTURE_HOLD_END,
+				    -1);
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
 
 	litest_switch_action(sw,
@@ -1370,40 +1382,40 @@
 	struct range switches = { LIBINPUT_SWITCH_LID,
 				  LIBINPUT_SWITCH_TABLET_MODE + 1};
 
-	litest_add("switch:has", switch_has_cap, LITEST_SWITCH, LITEST_ANY);
-	litest_add("switch:has", switch_has_lid_switch, LITEST_SWITCH, LITEST_ANY);
-	litest_add("switch:has", switch_has_tablet_mode_switch, LITEST_SWITCH, LITEST_ANY);
-	litest_add_ranged("switch:toggle", switch_toggle, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add_ranged("switch:toggle", switch_toggle_double, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add_ranged("switch:toggle", switch_down_on_init, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add("switch:toggle", switch_not_down_on_init, LITEST_SWITCH, LITEST_ANY);
-	litest_add_ranged("switch:touchpad", switch_disable_touchpad, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add_ranged("switch:touchpad", switch_disable_touchpad_during_touch, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add_ranged("switch:touchpad", switch_disable_touchpad_edge_scroll, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add_ranged("switch:touchpad", switch_disable_touchpad_edge_scroll_interrupt, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add_ranged("switch:touchpad", switch_disable_touchpad_already_open, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add_ranged("switch:touchpad", switch_dont_resume_disabled_touchpad, LITEST_SWITCH, LITEST_ANY, &switches);
-	litest_add_ranged("switch:touchpad", switch_dont_resume_disabled_touchpad_external_mouse, LITEST_SWITCH, LITEST_ANY, &switches);
-
-	litest_add_ranged_no_device("switch:keyboard", switch_suspend_with_keyboard, &switches);
-	litest_add_ranged_no_device("switch:touchpad", switch_suspend_with_touchpad, &switches);
-
-	litest_add("lid:keyboard", lid_open_on_key, LITEST_SWITCH, LITEST_ANY);
-	litest_add("lid:keyboard", lid_open_on_key_touchpad_enabled, LITEST_SWITCH, LITEST_ANY);
-	litest_add_for_device("lid:buggy", lid_update_hw_on_key, LITEST_LID_SWITCH_SURFACE3);
-	litest_add_for_device("lid:buggy", lid_update_hw_on_key_closed_on_init, LITEST_LID_SWITCH_SURFACE3);
-	litest_add_for_device("lid:buggy", lid_update_hw_on_key_multiple_keyboards, LITEST_LID_SWITCH_SURFACE3);
-	litest_add_for_device("lid:keypress", lid_key_press, LITEST_GPIO_KEYS);
-
-	litest_add("tablet-mode:touchpad", tablet_mode_disable_touchpad_on_init, LITEST_SWITCH, LITEST_ANY);
-	litest_add("tablet-mode:touchpad", tablet_mode_disable_touchpad_on_resume, LITEST_SWITCH, LITEST_ANY);
-	litest_add("tablet-mode:touchpad", tablet_mode_enable_touchpad_on_resume, LITEST_SWITCH, LITEST_ANY);
-	litest_add("tablet-mode:keyboard", tablet_mode_disable_keyboard, LITEST_SWITCH, LITEST_ANY);
-	litest_add("tablet-mode:keyboard", tablet_mode_disable_keyboard_on_init, LITEST_SWITCH, LITEST_ANY);
-	litest_add("tablet-mode:keyboard", tablet_mode_disable_keyboard_on_resume, LITEST_SWITCH, LITEST_ANY);
-	litest_add("tablet-mode:keyboard", tablet_mode_enable_keyboard_on_resume, LITEST_SWITCH, LITEST_ANY);
-	litest_add("tablet-mode:trackpoint", tablet_mode_disable_trackpoint, LITEST_SWITCH, LITEST_ANY);
-	litest_add("tablet-mode:trackpoint", tablet_mode_disable_trackpoint_on_init, LITEST_SWITCH, LITEST_ANY);
+	litest_add(switch_has_cap, LITEST_SWITCH, LITEST_ANY);
+	litest_add(switch_has_lid_switch, LITEST_SWITCH, LITEST_ANY);
+	litest_add(switch_has_tablet_mode_switch, LITEST_SWITCH, LITEST_ANY);
+	litest_add_ranged(switch_toggle, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add_ranged(switch_toggle_double, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add_ranged(switch_down_on_init, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add(switch_not_down_on_init, LITEST_SWITCH, LITEST_ANY);
+	litest_add_ranged(switch_disable_touchpad, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add_ranged(switch_disable_touchpad_during_touch, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add_ranged(switch_disable_touchpad_edge_scroll, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add_ranged(switch_disable_touchpad_edge_scroll_interrupt, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add_ranged(switch_disable_touchpad_already_open, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add_ranged(switch_dont_resume_disabled_touchpad, LITEST_SWITCH, LITEST_ANY, &switches);
+	litest_add_ranged(switch_dont_resume_disabled_touchpad_external_mouse, LITEST_SWITCH, LITEST_ANY, &switches);
+
+	litest_add_ranged_no_device(switch_suspend_with_keyboard, &switches);
+	litest_add_ranged_no_device(switch_suspend_with_touchpad, &switches);
+
+	litest_add(lid_open_on_key, LITEST_SWITCH, LITEST_ANY);
+	litest_add(lid_open_on_key_touchpad_enabled, LITEST_SWITCH, LITEST_ANY);
+	litest_add_for_device(lid_update_hw_on_key, LITEST_LID_SWITCH_SURFACE3);
+	litest_add_for_device(lid_update_hw_on_key_closed_on_init, LITEST_LID_SWITCH_SURFACE3);
+	litest_add_for_device(lid_update_hw_on_key_multiple_keyboards, LITEST_LID_SWITCH_SURFACE3);
+	litest_add_for_device(lid_key_press, LITEST_GPIO_KEYS);
+
+	litest_add(tablet_mode_disable_touchpad_on_init, LITEST_SWITCH, LITEST_ANY);
+	litest_add(tablet_mode_disable_touchpad_on_resume, LITEST_SWITCH, LITEST_ANY);
+	litest_add(tablet_mode_enable_touchpad_on_resume, LITEST_SWITCH, LITEST_ANY);
+	litest_add(tablet_mode_disable_keyboard, LITEST_SWITCH, LITEST_ANY);
+	litest_add(tablet_mode_disable_keyboard_on_init, LITEST_SWITCH, LITEST_ANY);
+	litest_add(tablet_mode_disable_keyboard_on_resume, LITEST_SWITCH, LITEST_ANY);
+	litest_add(tablet_mode_enable_keyboard_on_resume, LITEST_SWITCH, LITEST_ANY);
+	litest_add(tablet_mode_disable_trackpoint, LITEST_SWITCH, LITEST_ANY);
+	litest_add(tablet_mode_disable_trackpoint_on_init, LITEST_SWITCH, LITEST_ANY);
 
-	litest_add("lid:dock", dock_toggle, LITEST_SWITCH, LITEST_ANY);
+	litest_add(dock_toggle, LITEST_SWITCH, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-tablet.c third_party_libinput_new/test/test-tablet.c
--- third_party_libinput_bak/test/test-tablet.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-tablet.c	2023-03-30 10:34:43.653697700 +0800
@@ -635,19 +635,42 @@
 	};
 	unsigned int axis = _i; /* ranged test */
 	double x, y, last_x, last_y;
+	double start_x = 20,
+	       start_y = 20;
 
-	litest_tablet_proximity_in(dev, 10, 10, axes);
-	litest_drain_events(li);
+	switch (axis) {
+	case ABS_X:
+		start_x = 15;
+		start_y = 20;
+		break;
+	case ABS_Y:
+		start_x = 20;
+		start_y = 15;
+		break;
+	default:
+		abort();
+	}
 
-	/* enough events to get the history going */
+	/* generate enough events to fill the history and move alonge the
+	 * current axis to avoid axis smoothing interference */
+	litest_tablet_proximity_in(dev, start_x, start_y, axes);
 	litest_axis_set_value(axes, ABS_PRESSURE, 20);
-	for (int i = 1; i < 10; i++) {
+	for (int i = 0; i < 5; i++) {
 		litest_push_event_frame(dev);
-		litest_tablet_motion(dev, 10 + i, 10 + i, axes);
+		litest_tablet_motion(dev, start_x, start_y, axes);
 		litest_event(dev, EV_KEY, BTN_TOUCH, 1);
 		litest_event(dev, EV_SYN, SYN_REPORT, 0);
 		litest_pop_event_frame(dev);
 
+		switch (axis) {
+		case ABS_X:
+			start_x++;
+			break;
+		case ABS_Y:
+			start_y++;
+			break;
+		}
+
 	}
 	litest_drain_events(li);
 
@@ -670,8 +693,6 @@
 	case ABS_Y:
 		litest_tablet_motion(dev, 20, 40, axes);
 		break;
-	default:
-		abort();
 	}
 	litest_event(dev, EV_KEY, BTN_TOUCH, 0);
 	litest_pop_event_frame(dev);
@@ -682,12 +703,24 @@
 					      LIBINPUT_EVENT_TABLET_TOOL_TIP);
 	ck_assert_int_eq(libinput_event_tablet_tool_get_tip_state(tablet_event),
 			 LIBINPUT_TABLET_TOOL_TIP_UP);
-	ck_assert(libinput_event_tablet_tool_x_has_changed(tablet_event));
-	ck_assert(libinput_event_tablet_tool_y_has_changed(tablet_event));
 	x = libinput_event_tablet_tool_get_x(tablet_event);
 	y = libinput_event_tablet_tool_get_y(tablet_event);
-	ck_assert_double_ne(last_x, x);
-	ck_assert_double_ne(last_y, y);
+
+	switch(axis) {
+	case ABS_X:
+		ck_assert(libinput_event_tablet_tool_x_has_changed(tablet_event));
+		ck_assert(!libinput_event_tablet_tool_y_has_changed(tablet_event));
+		ck_assert_double_ne(last_x, x);
+		ck_assert_double_eq(last_y, y);
+		break;
+	case ABS_Y:
+		ck_assert(!libinput_event_tablet_tool_x_has_changed(tablet_event));
+		ck_assert(libinput_event_tablet_tool_y_has_changed(tablet_event));
+		ck_assert_double_eq(last_x, x);
+		ck_assert_double_ne(last_y, y);
+		break;
+	}
+
 	libinput_event_destroy(event);
 
 	litest_assert_empty_queue(li);
@@ -2800,7 +2833,6 @@
 		{ BTN_TOOL_PEN, LIBINPUT_TABLET_TOOL_TYPE_PEN },
 		{ BTN_TOOL_RUBBER, LIBINPUT_TABLET_TOOL_TYPE_ERASER },
 		{ BTN_TOOL_BRUSH, LIBINPUT_TABLET_TOOL_TYPE_BRUSH },
-		{ BTN_TOOL_BRUSH, LIBINPUT_TABLET_TOOL_TYPE_BRUSH },
 		{ BTN_TOOL_PENCIL, LIBINPUT_TABLET_TOOL_TYPE_PENCIL },
 		{ BTN_TOOL_AIRBRUSH, LIBINPUT_TABLET_TOOL_TYPE_AIRBRUSH },
 		{ BTN_TOOL_MOUSE, LIBINPUT_TABLET_TOOL_TYPE_MOUSE },
@@ -2808,10 +2840,13 @@
 		{ -1, -1 }
 	};
 	struct tool_type_match *tt;
+	double x = 50, y = 50;
 
 	litest_drain_events(li);
 
 	for (tt = types; tt->code != -1; tt++) {
+		enum libinput_tablet_tool_type type;
+
 		if (!libevdev_has_event_code(dev->evdev,
 					     EV_KEY,
 					     tt->code))
@@ -2821,32 +2856,44 @@
 		    !tablet_has_mouse(dev))
 			continue;
 
-		litest_push_event_frame(dev);
-		litest_filter_event(dev, EV_KEY, BTN_TOOL_PEN);
-		litest_tablet_proximity_in(dev, 50, 50, axes);
-		litest_unfilter_event(dev, EV_KEY, BTN_TOOL_PEN);
-		litest_event(dev, EV_KEY, tt->code, 1);
-		litest_pop_event_frame(dev);
+		litest_tablet_set_tool_type(dev, tt->code);
+		litest_tablet_proximity_in(dev, x, y, axes);
 		libinput_dispatch(li);
 
 		event = libinput_get_event(li);
 		t = litest_is_tablet_event(event,
 				   LIBINPUT_EVENT_TABLET_TOOL_PROXIMITY);
 		tool = libinput_event_tablet_tool_get_tool(t);
+		type = libinput_tablet_tool_get_type(tool);
 
-		ck_assert_int_eq(libinput_tablet_tool_get_type(tool),
-				 tt->type);
+		/* Devices with doubled-up tool bits send the pen
+		 * in-prox and immediately out-of-prox before the real tool
+		 * type. Drop those two and continue with what we expect is
+		 * the real prox in event */
+		if (tt->type != LIBINPUT_TABLET_TOOL_TYPE_PEN &&
+		    type == LIBINPUT_TABLET_TOOL_TYPE_PEN) {
+			libinput_event_destroy(event);
+			event = libinput_get_event(li);
+			litest_is_tablet_event(event,
+					       LIBINPUT_EVENT_TABLET_TOOL_PROXIMITY);
+			libinput_event_destroy(event);
+			event = libinput_get_event(li);
+			t = litest_is_tablet_event(event,
+					   LIBINPUT_EVENT_TABLET_TOOL_PROXIMITY);
+			tool = libinput_event_tablet_tool_get_tool(t);
+			type = libinput_tablet_tool_get_type(tool);
+		}
+
+		ck_assert_int_eq(type, tt->type);
 
 		libinput_event_destroy(event);
 		litest_assert_empty_queue(li);
 
-		litest_push_event_frame(dev);
-		litest_filter_event(dev, EV_KEY, BTN_TOOL_PEN);
 		litest_tablet_proximity_out(dev);
-		litest_unfilter_event(dev, EV_KEY, BTN_TOOL_PEN);
-		litest_event(dev, EV_KEY, tt->code, 0);
-		litest_pop_event_frame(dev);
 		litest_drain_events(li);
+
+		x++;
+		y++;
 	}
 }
 END_TEST
@@ -3961,18 +4008,6 @@
 }
 END_TEST
 
-static void pressure_threshold_warning(struct libinput *libinput,
-				       enum libinput_log_priority priority,
-				       const char *format,
-				       va_list args)
-{
-	int *warning_triggered = (int*)libinput_get_user_data(libinput);
-
-	if (priority == LIBINPUT_LOG_PRIORITY_ERROR &&
-	    strstr(format, "pressure offset greater"))
-		(*warning_triggered)++;
-}
-
 START_TEST(tablet_pressure_min_max)
 {
 	struct litest_device *dev = litest_current_device();
@@ -4060,6 +4095,20 @@
 }
 END_TEST
 
+static void
+pressure_threshold_warning(struct libinput *libinput,
+			   enum libinput_log_priority priority,
+			   const char *format,
+			   va_list args)
+{
+	struct litest_user_data *user_data = libinput_get_user_data(libinput);
+	int *warning_triggered = user_data->private;
+
+	if (priority == LIBINPUT_LOG_PRIORITY_ERROR &&
+	    strstr(format, "pressure offset greater"))
+		(*warning_triggered)++;
+}
+
 START_TEST(tablet_pressure_offset_exceed_threshold)
 {
 	struct litest_device *dev = litest_current_device();
@@ -4073,12 +4122,11 @@
 	};
 	double pressure;
 	int warning_triggered = 0;
-	void *old_user_data;
+	struct litest_user_data *user_data = libinput_get_user_data(li);
 
 	litest_drain_events(li);
 
-	old_user_data = libinput_get_user_data(li);
-	libinput_set_user_data(li, &warning_triggered);
+	user_data->private = &warning_triggered;
 
 	libinput_log_set_handler(li, pressure_threshold_warning);
 	litest_tablet_proximity_in(dev, 5, 100, axes);
@@ -4092,8 +4140,6 @@
 
 	ck_assert_int_eq(warning_triggered, 1);
 	litest_restore_log_handler(li);
-
-	libinput_set_user_data(li, old_user_data);
 }
 END_TEST
 
@@ -4668,6 +4714,12 @@
 	ck_assert(dy == 0.0);
 	libinput_event_destroy(event);
 
+	/* work around axis smoothing */
+	litest_tablet_motion(dev, 19, 10, axes);
+	litest_tablet_motion(dev, 18, 10, axes);
+	litest_tablet_motion(dev, 17, 10, axes);
+	litest_drain_events(li);
+
 	litest_tablet_motion(dev, 5, 10, axes);
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
@@ -4679,7 +4731,13 @@
 	ck_assert(dy == 0.0);
 	libinput_event_destroy(event);
 
-	litest_tablet_motion(dev, 10, 20, axes);
+	/* work around axis smoothing */
+	litest_tablet_motion(dev, 5, 11, axes);
+	litest_tablet_motion(dev, 5, 12, axes);
+	litest_tablet_motion(dev, 5, 13, axes);
+	litest_drain_events(li);
+
+	litest_tablet_motion(dev, 5, 20, axes);
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 	tev = litest_is_tablet_event(event,
@@ -4690,7 +4748,13 @@
 	ck_assert(dy < 0.0);
 	libinput_event_destroy(event);
 
-	litest_tablet_motion(dev, 10, 5, axes);
+	/* work around axis smoothing */
+	litest_tablet_motion(dev, 5, 19, axes);
+	litest_tablet_motion(dev, 5, 18, axes);
+	litest_tablet_motion(dev, 5, 17, axes);
+	litest_drain_events(li);
+
+	litest_tablet_motion(dev, 5, 5, axes);
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 	tev = litest_is_tablet_event(event,
@@ -4746,6 +4810,9 @@
 
 	is_touchpad = !libevdev_has_property(finger->evdev, INPUT_PROP_DIRECT);
 
+	if (is_touchpad)
+		litest_disable_hold_gestures(finger->libinput_device);
+
 	litest_tablet_proximity_in(dev, 10, 10, axes);
 	litest_tablet_motion(dev, 10, 10, axes);
 	litest_tablet_motion(dev, 20, 40, axes);
@@ -4935,6 +5002,9 @@
 
 	is_touchpad = !libevdev_has_property(finger->evdev, INPUT_PROP_DIRECT);
 
+	if (is_touchpad)
+		litest_disable_hold_gestures(finger->libinput_device);
+
 	/* disable prox-out timer quirk */
 	litest_tablet_proximity_in(dev, 30, 30, axes);
 	litest_tablet_proximity_out(dev);
@@ -5020,6 +5090,9 @@
 
 	is_touchpad = !libevdev_has_property(dev->evdev, INPUT_PROP_DIRECT);
 
+	if (is_touchpad)
+		litest_disable_hold_gestures(dev->libinput_device);
+
 	/* we can't force a device suspend, but we can at least make sure
 	   the device doesn't send events */
 	status = libinput_device_config_send_events_set_mode(
@@ -5133,6 +5206,9 @@
 
 	is_touchpad = !libevdev_has_property(dev->evdev, INPUT_PROP_DIRECT);
 
+	if (is_touchpad)
+		litest_disable_hold_gestures(dev->libinput_device);
+
 	libinput_dispatch(li);
 	litest_tablet_proximity_in(tablet, 10, 10, axes);
 	litest_tablet_motion(tablet, 10, 10, axes);
@@ -5226,8 +5302,11 @@
 
 	finger = litest_add_device(li, other);
 	is_touchpad = !libevdev_has_property(finger->evdev, INPUT_PROP_DIRECT);
-	if (is_touchpad)
+	if (is_touchpad) {
 		litest_enable_tap(finger->libinput_device);
+		litest_disable_hold_gestures(finger->libinput_device);
+	}
+
 	litest_tablet_proximity_in(tablet, 10, 10, axes);
 	litest_tablet_motion(tablet, 10, 10, axes);
 	litest_tablet_motion(tablet, 20, 40, axes);
@@ -5675,6 +5754,7 @@
 
 	libinput_device_config_left_handed_set(finger->libinput_device,
 					       touch_from);
+	litest_disable_hold_gestures(finger->libinput_device);
 
 	verify_left_handed_touch_sequence(finger, li, enabled_from);
 	verify_left_handed_tablet_sequence(tablet, li, enabled_from);
@@ -5722,6 +5802,7 @@
 	/* change left-handed before tablet appears */
 	libinput_device_config_left_handed_set(finger->libinput_device,
 					       touch_from);
+	litest_disable_hold_gestures(finger->libinput_device);
 
 	tablet = litest_add_device(li, other);
 	litest_drain_events(li);
@@ -5923,128 +6004,212 @@
 }
 END_TEST
 
+START_TEST(tablet_smoothing)
+{
+#if HAVE_LIBWACOM
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	double x, y;
+	struct point {
+		double x, y;
+	} coordinates[100] = {0};
+	size_t npoints = 0;
+	size_t idx = 0;
+	struct axis_replacement axes[] = {
+		{ ABS_DISTANCE, 10 },
+		{ ABS_PRESSURE, 0 },
+		{ -1, -1 }
+	};
+
+	litest_drain_events(li);
+
+	litest_tablet_proximity_in(dev, 10, 10, axes);
+	libinput_dispatch(li);
+	litest_drain_events(li);
+
+	/* Move in a straight line, collect the resulting points */
+	for (x = 11, y = 11; x < 50; x++, y++) {
+		struct libinput_event *event;
+		struct libinput_event_tablet_tool *tev;
+		struct point *p = &coordinates[npoints++];
+
+		litest_assert(npoints <= ARRAY_LENGTH(coordinates));
+
+		litest_tablet_motion(dev, x, y, axes);
+		libinput_dispatch(li);
+
+		event = libinput_get_event(li);
+		tev = litest_is_tablet_event(event,
+					     LIBINPUT_EVENT_TABLET_TOOL_AXIS);
+		p->x = libinput_event_tablet_tool_get_x(tev);
+		p->y = libinput_event_tablet_tool_get_y(tev);
+
+		libinput_event_destroy(event);
+	}
+
+	litest_tablet_proximity_out(dev);
+	litest_tablet_proximity_in(dev, 10, 10, axes);
+	libinput_dispatch(li);
+	litest_drain_events(li);
+
+	/* Move in a wobbly line, collect every second point */
+	for (x = 11, y = 11; x < 50; x++, y++) {
+		struct libinput_event *event;
+		struct libinput_event_tablet_tool *tev;
+		double ex, ey;
+		struct point *p = &coordinates[idx++];
+
+		litest_assert(idx <= npoints);
+
+		/* point off position */
+		litest_tablet_motion(dev, x - 2, y + 1, axes);
+		libinput_dispatch(li);
+		event = libinput_get_event(li);
+		litest_is_tablet_event(event, LIBINPUT_EVENT_TABLET_TOOL_AXIS);
+		libinput_event_destroy(event);
+
+		/* same position as before */
+		litest_tablet_motion(dev, x, y, axes);
+		libinput_dispatch(li);
+		event = libinput_get_event(li);
+		tev = litest_is_tablet_event(event,
+					     LIBINPUT_EVENT_TABLET_TOOL_AXIS);
+		ex = libinput_event_tablet_tool_get_x(tev);
+		ey = libinput_event_tablet_tool_get_y(tev);
+
+		ck_assert_double_eq(ex, p->x);
+		ck_assert_double_eq(ey, p->y);
+
+		libinput_event_destroy(event);
+	}
+#endif
+}
+END_TEST
+
 TEST_COLLECTION(tablet)
 {
 	struct range with_timeout = { 0, 2 };
 	struct range xyaxes = { ABS_X, ABS_Y + 1 };
 	struct range lh_transitions = {0, 16}; /* 2 bits for in, 2 bits for out */
 
-	litest_add("tablet:tool", tool_ref, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
-	litest_add("tablet:tool", tool_user_data, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
-	litest_add("tablet:tool", tool_capability, LITEST_TABLET, LITEST_ANY);
-	litest_add_no_device("tablet:tool", tool_capabilities);
-	litest_add("tablet:tool", tool_type, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:tool", tool_in_prox_before_start, LITEST_TABLET, LITEST_TOTEM);
-	litest_add("tablet:tool", tool_direct_switch_skip_tool_update, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:tool", tool_direct_switch_with_forced_proxout, LITEST_TABLET, LITEST_ANY);
+	litest_add(tool_ref, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
+	litest_add(tool_user_data, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
+	litest_add(tool_capability, LITEST_TABLET, LITEST_ANY);
+	litest_add_no_device(tool_capabilities);
+	litest_add(tool_type, LITEST_TABLET, LITEST_FORCED_PROXOUT);
+	litest_add(tool_in_prox_before_start, LITEST_TABLET, LITEST_TOTEM);
+	litest_add(tool_direct_switch_skip_tool_update, LITEST_TABLET, LITEST_ANY);
+	litest_add(tool_direct_switch_with_forced_proxout, LITEST_TABLET, LITEST_ANY);
 
 	/* Tablets hold back the proximity until the first event from the
 	 * kernel, the totem sends it immediately */
-	litest_add("tablet:tool", tool_in_prox_before_start, LITEST_TABLET, LITEST_TOTEM);
-	litest_add("tablet:tool_serial", tool_unique, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
-	litest_add("tablet:tool_serial", tool_serial, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
-	litest_add("tablet:tool_serial", tool_id, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
-	litest_add("tablet:tool_serial", serial_changes_tool, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
-	litest_add("tablet:tool_serial", invalid_serials, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
-	litest_add_no_device("tablet:tool_serial", tools_with_serials);
-	litest_add_no_device("tablet:tool_serial", tools_without_serials);
-	litest_add_for_device("tablet:tool_serial", tool_delayed_serial, LITEST_WACOM_HID4800_PEN);
-	litest_add("tablet:proximity", proximity_out_clear_buttons, LITEST_TABLET, LITEST_FORCED_PROXOUT);
-	litest_add("tablet:proximity", proximity_in_out, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_in_button_down, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_out_button_up, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_has_axes, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:proximity", bad_distance_events, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_range_enter, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_range_in_out, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_range_button_click, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_range_button_press, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_range_button_release, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_out_slow_event, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_out_not_during_contact, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_out_not_during_buttonpress, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
-	litest_add("tablet:proximity", proximity_out_disables_forced, LITEST_TABLET, LITEST_FORCED_PROXOUT|LITEST_TOTEM);
-	litest_add("tablet:proximity", proximity_out_disables_forced_after_forced, LITEST_TABLET, LITEST_FORCED_PROXOUT|LITEST_TOTEM);
-	litest_add_no_device("tablet:proximity", proximity_out_on_delete);
-	litest_add("tablet:button", button_down_up, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:button", button_seat_count, LITEST_TABLET, LITEST_ANY);
-	litest_add_no_device("tablet:button", button_up_on_delete);
-	litest_add("tablet:tip", tip_down_up, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add("tablet:tip", tip_down_prox_in, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:tip", tip_up_prox_out, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:tip", tip_down_btn_change, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add("tablet:tip", tip_up_btn_change, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add("tablet:tip", tip_down_motion, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add("tablet:tip", tip_up_motion, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add_ranged("tablet:tip", tip_up_motion_one_axis, LITEST_TABLET|LITEST_HOVER, LITEST_ANY, &xyaxes);
-	litest_add("tablet:tip", tip_state_proximity, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add("tablet:tip", tip_state_axis, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add("tablet:tip", tip_state_button, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add_no_device("tablet:tip", tip_up_on_delete);
-	litest_add("tablet:motion", motion, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:motion", motion_event_state, LITEST_TABLET, LITEST_ANY);
-	litest_add_for_device("tablet:motion", motion_outside_bounds, LITEST_WACOM_CINTIQ_24HD);
-	litest_add("tablet:tilt", tilt_available, LITEST_TABLET|LITEST_TILT, LITEST_ANY);
-	litest_add("tablet:tilt", tilt_not_available, LITEST_TABLET, LITEST_TILT);
-	litest_add("tablet:tilt", tilt_x, LITEST_TABLET|LITEST_TILT, LITEST_ANY);
-	litest_add("tablet:tilt", tilt_y, LITEST_TABLET|LITEST_TILT, LITEST_ANY);
-	litest_add_for_device("tablet:left_handed", left_handed, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:left_handed", left_handed_tilt, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:left_handed", left_handed_mouse_rotation, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:left_handed", left_handed_artpen_rotation, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:left_handed", no_left_handed, LITEST_WACOM_CINTIQ);
-	litest_add("tablet:pad", pad_buttons_ignored, LITEST_TABLET, LITEST_TOTEM);
-	litest_add("tablet:mouse", mouse_tool, LITEST_TABLET | LITEST_TOOL_MOUSE, LITEST_ANY);
-	litest_add("tablet:mouse", mouse_buttons, LITEST_TABLET | LITEST_TOOL_MOUSE, LITEST_ANY);
-	litest_add("tablet:mouse", mouse_rotation, LITEST_TABLET | LITEST_TOOL_MOUSE, LITEST_ANY);
-	litest_add("tablet:mouse", mouse_wheel, LITEST_TABLET | LITEST_TOOL_MOUSE, LITEST_WHEEL);
-	litest_add("tablet:airbrush", airbrush_tool, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:airbrush", airbrush_slider, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:artpen", artpen_tool, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:artpen", artpen_rotation, LITEST_TABLET, LITEST_ANY);
+	litest_add(tool_in_prox_before_start, LITEST_TABLET, LITEST_TOTEM);
+	litest_add(tool_unique, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
+	litest_add(tool_serial, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
+	litest_add(tool_id, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
+	litest_add(serial_changes_tool, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
+	litest_add(invalid_serials, LITEST_TABLET | LITEST_TOOL_SERIAL, LITEST_ANY);
+	litest_add_no_device(tools_with_serials);
+	litest_add_no_device(tools_without_serials);
+	litest_add_for_device(tool_delayed_serial, LITEST_WACOM_HID4800_PEN);
+	litest_add(proximity_out_clear_buttons, LITEST_TABLET, LITEST_FORCED_PROXOUT);
+	litest_add(proximity_in_out, LITEST_TABLET, LITEST_ANY);
+	litest_add(proximity_in_button_down, LITEST_TABLET, LITEST_ANY);
+	litest_add(proximity_out_button_up, LITEST_TABLET, LITEST_ANY);
+	litest_add(proximity_has_axes, LITEST_TABLET, LITEST_ANY);
+	litest_add(bad_distance_events, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
+	litest_add(proximity_range_enter, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
+	litest_add(proximity_range_in_out, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
+	litest_add(proximity_range_button_click, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
+	litest_add(proximity_range_button_press, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
+	litest_add(proximity_range_button_release, LITEST_TABLET | LITEST_DISTANCE | LITEST_TOOL_MOUSE, LITEST_ANY);
+	litest_add(proximity_out_slow_event, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
+	litest_add(proximity_out_not_during_contact, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
+	litest_add(proximity_out_not_during_buttonpress, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
+	litest_add(proximity_out_disables_forced, LITEST_TABLET, LITEST_FORCED_PROXOUT|LITEST_TOTEM);
+	litest_add(proximity_out_disables_forced_after_forced, LITEST_TABLET, LITEST_FORCED_PROXOUT|LITEST_TOTEM);
+	litest_add_no_device(proximity_out_on_delete);
+	litest_add(button_down_up, LITEST_TABLET, LITEST_ANY);
+	litest_add(button_seat_count, LITEST_TABLET, LITEST_ANY);
+	litest_add_no_device(button_up_on_delete);
+	litest_add(tip_down_up, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add(tip_down_prox_in, LITEST_TABLET, LITEST_ANY);
+	litest_add(tip_up_prox_out, LITEST_TABLET, LITEST_ANY);
+	litest_add(tip_down_btn_change, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add(tip_up_btn_change, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add(tip_down_motion, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add(tip_up_motion, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add_ranged(tip_up_motion_one_axis, LITEST_TABLET|LITEST_HOVER, LITEST_ANY, &xyaxes);
+	litest_add(tip_state_proximity, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add(tip_state_axis, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add(tip_state_button, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add_no_device(tip_up_on_delete);
+	litest_add(motion, LITEST_TABLET, LITEST_ANY);
+	litest_add(motion_event_state, LITEST_TABLET, LITEST_ANY);
+	litest_add_for_device(motion_outside_bounds, LITEST_WACOM_CINTIQ_24HD);
+	litest_add(tilt_available, LITEST_TABLET|LITEST_TILT, LITEST_ANY);
+	litest_add(tilt_not_available, LITEST_TABLET, LITEST_TILT);
+	litest_add(tilt_x, LITEST_TABLET|LITEST_TILT, LITEST_ANY);
+	litest_add(tilt_y, LITEST_TABLET|LITEST_TILT, LITEST_ANY);
+	litest_add_for_device(left_handed, LITEST_WACOM_INTUOS);
+	litest_add_for_device(left_handed_tilt, LITEST_WACOM_INTUOS);
+	litest_add_for_device(left_handed_mouse_rotation, LITEST_WACOM_INTUOS);
+	litest_add_for_device(left_handed_artpen_rotation, LITEST_WACOM_INTUOS);
+	litest_add_for_device(no_left_handed, LITEST_WACOM_CINTIQ);
+	litest_add(pad_buttons_ignored, LITEST_TABLET, LITEST_TOTEM);
+	litest_add(mouse_tool, LITEST_TABLET | LITEST_TOOL_MOUSE, LITEST_ANY);
+	litest_add(mouse_buttons, LITEST_TABLET | LITEST_TOOL_MOUSE, LITEST_ANY);
+	litest_add(mouse_rotation, LITEST_TABLET | LITEST_TOOL_MOUSE, LITEST_ANY);
+	litest_add(mouse_wheel, LITEST_TABLET | LITEST_TOOL_MOUSE, LITEST_WHEEL);
+	litest_add(airbrush_tool, LITEST_TABLET, LITEST_ANY);
+	litest_add(airbrush_slider, LITEST_TABLET, LITEST_ANY);
+	litest_add(artpen_tool, LITEST_TABLET, LITEST_ANY);
+	litest_add(artpen_rotation, LITEST_TABLET, LITEST_ANY);
 
-	litest_add("tablet:time", tablet_time_usec, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:pressure", tablet_pressure_distance_exclusive, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
+	litest_add(tablet_time_usec, LITEST_TABLET, LITEST_ANY);
+	litest_add(tablet_pressure_distance_exclusive, LITEST_TABLET | LITEST_DISTANCE, LITEST_ANY);
 
 	/* The totem doesn't need calibration */
-	litest_add("tablet:calibration", tablet_calibration_has_matrix, LITEST_TABLET, LITEST_TOTEM);
-	litest_add("tablet:calibration", tablet_calibration_set_matrix, LITEST_TABLET, LITEST_TOTEM);
-	litest_add("tablet:calibration", tablet_calibration_set_matrix_delta, LITEST_TABLET, LITEST_TOTEM);
-
-	litest_add("tablet:pressure", tablet_pressure_min_max, LITEST_TABLET, LITEST_ANY);
-	litest_add_for_device("tablet:pressure", tablet_pressure_range, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:pressure", tablet_pressure_offset, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:pressure", tablet_pressure_offset_decrease, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:pressure", tablet_pressure_offset_increase, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:pressure", tablet_pressure_offset_exceed_threshold, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:pressure", tablet_pressure_offset_none_for_zero_distance, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:pressure", tablet_pressure_offset_none_for_small_distance, LITEST_WACOM_INTUOS);
-	litest_add_for_device("tablet:distance", tablet_distance_range, LITEST_WACOM_INTUOS);
-
-	litest_add("tablet:relative", relative_no_profile, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:relative", relative_no_delta_prox_in, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:relative", relative_delta, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:relative", relative_no_delta_on_tip, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
-	litest_add("tablet:relative", relative_calibration, LITEST_TABLET, LITEST_ANY);
-
-	litest_add("tablet:touch-arbitration", touch_arbitration, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:touch-arbitration", touch_arbitration_stop_touch, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:touch-arbitration", touch_arbitration_suspend_touch_device, LITEST_TOUCH, LITEST_ANY);
-	litest_add("tablet:touch-arbitration", touch_arbitration_remove_touch, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:touch-arbitration", touch_arbitration_remove_tablet, LITEST_TOUCH, LITEST_ANY);
-	litest_add("tablet:touch-arbitration", touch_arbitration_keep_ignoring, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:touch-arbitration", touch_arbitration_late_touch_lift, LITEST_TABLET, LITEST_ANY);
-	litest_add("tablet:touch-arbitration", touch_arbitration_outside_rect, LITEST_TABLET | LITEST_DIRECT, LITEST_ANY);
-	litest_add("tablet:touch-arbitration", touch_arbitration_remove_after, LITEST_TABLET | LITEST_DIRECT, LITEST_ANY);
-
-	litest_add_ranged("tablet:touch-rotation", tablet_rotation_left_handed, LITEST_TABLET, LITEST_ANY, &lh_transitions);
-	litest_add_ranged("tablet:touch-rotation", tablet_rotation_left_handed_configuration, LITEST_TABLET, LITEST_ANY, &lh_transitions);
-	litest_add_ranged("tablet:touch-rotation", tablet_rotation_left_handed_while_in_prox, LITEST_TABLET, LITEST_ANY, &lh_transitions);
-	litest_add_ranged("tablet:touch-rotation", tablet_rotation_left_handed_while_touch_down, LITEST_TABLET, LITEST_ANY, &lh_transitions);
-	litest_add_ranged("tablet:touch-rotation", tablet_rotation_left_handed_add_touchpad, LITEST_TABLET, LITEST_ANY, &lh_transitions);
-	litest_add_ranged("tablet:touch-rotation", tablet_rotation_left_handed_add_tablet, LITEST_TOUCHPAD, LITEST_ANY, &lh_transitions);
-
-	litest_add_for_device("tablet:quirks", huion_static_btn_tool_pen, LITEST_HUION_TABLET);
-	litest_add_for_device("tablet:quirks", huion_static_btn_tool_pen_no_timeout_during_usage, LITEST_HUION_TABLET);
-	litest_add_ranged_for_device("tablet:quirks", huion_static_btn_tool_pen_disable_quirk_on_prox_out, LITEST_HUION_TABLET, &with_timeout);
+	litest_add(tablet_calibration_has_matrix, LITEST_TABLET, LITEST_TOTEM);
+	litest_add(tablet_calibration_set_matrix, LITEST_TABLET, LITEST_TOTEM);
+	litest_add(tablet_calibration_set_matrix_delta, LITEST_TABLET, LITEST_TOTEM);
+
+	litest_add(tablet_pressure_min_max, LITEST_TABLET, LITEST_ANY);
+	litest_add_for_device(tablet_pressure_range, LITEST_WACOM_INTUOS);
+	litest_add_for_device(tablet_pressure_offset, LITEST_WACOM_INTUOS);
+	litest_add_for_device(tablet_pressure_offset_decrease, LITEST_WACOM_INTUOS);
+	litest_add_for_device(tablet_pressure_offset_increase, LITEST_WACOM_INTUOS);
+	litest_add_for_device(tablet_pressure_offset_exceed_threshold, LITEST_WACOM_INTUOS);
+	litest_add_for_device(tablet_pressure_offset_none_for_zero_distance, LITEST_WACOM_INTUOS);
+	litest_add_for_device(tablet_pressure_offset_none_for_small_distance, LITEST_WACOM_INTUOS);
+	litest_add_for_device(tablet_distance_range, LITEST_WACOM_INTUOS);
+
+	litest_add(relative_no_profile, LITEST_TABLET, LITEST_ANY);
+	litest_add(relative_no_delta_prox_in, LITEST_TABLET, LITEST_ANY);
+	litest_add(relative_delta, LITEST_TABLET, LITEST_ANY);
+	litest_add(relative_no_delta_on_tip, LITEST_TABLET|LITEST_HOVER, LITEST_ANY);
+	litest_add(relative_calibration, LITEST_TABLET, LITEST_ANY);
+
+	litest_add(touch_arbitration, LITEST_TABLET, LITEST_ANY);
+	litest_add(touch_arbitration_stop_touch, LITEST_TABLET, LITEST_ANY);
+	litest_add(touch_arbitration_suspend_touch_device, LITEST_TOUCH, LITEST_ANY);
+	litest_add(touch_arbitration_remove_touch, LITEST_TABLET, LITEST_ANY);
+	litest_add(touch_arbitration_remove_tablet, LITEST_TOUCH, LITEST_ANY);
+	litest_add(touch_arbitration_keep_ignoring, LITEST_TABLET, LITEST_ANY);
+	litest_add(touch_arbitration_late_touch_lift, LITEST_TABLET, LITEST_ANY);
+	litest_add(touch_arbitration_outside_rect, LITEST_TABLET | LITEST_DIRECT, LITEST_ANY);
+	litest_add(touch_arbitration_remove_after, LITEST_TABLET | LITEST_DIRECT, LITEST_ANY);
+
+	litest_add_ranged(tablet_rotation_left_handed, LITEST_TABLET, LITEST_ANY, &lh_transitions);
+	litest_add_ranged(tablet_rotation_left_handed_configuration, LITEST_TABLET, LITEST_ANY, &lh_transitions);
+	litest_add_ranged(tablet_rotation_left_handed_while_in_prox, LITEST_TABLET, LITEST_ANY, &lh_transitions);
+	litest_add_ranged(tablet_rotation_left_handed_while_touch_down, LITEST_TABLET, LITEST_ANY, &lh_transitions);
+	litest_add_ranged(tablet_rotation_left_handed_add_touchpad, LITEST_TABLET, LITEST_ANY, &lh_transitions);
+	litest_add_ranged(tablet_rotation_left_handed_add_tablet, LITEST_TOUCHPAD, LITEST_ANY, &lh_transitions);
+
+	litest_add_for_device(huion_static_btn_tool_pen, LITEST_HUION_TABLET);
+	litest_add_for_device(huion_static_btn_tool_pen_no_timeout_during_usage, LITEST_HUION_TABLET);
+	litest_add_ranged_for_device(huion_static_btn_tool_pen_disable_quirk_on_prox_out, LITEST_HUION_TABLET, &with_timeout);
+
+	litest_add_for_device(tablet_smoothing, LITEST_WACOM_HID4800_PEN);
 }
diff -Naur third_party_libinput_bak/test/test-totem.c third_party_libinput_new/test/test-totem.c
--- third_party_libinput_bak/test/test-totem.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-totem.c	2023-03-30 10:38:49.053212500 +0800
@@ -586,20 +586,20 @@
 
 TEST_COLLECTION(totem)
 {
-	litest_add("totem:tool", totem_type, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:tool", totem_axes, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:proximity", totem_proximity_in_out, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:proximity", totem_proximity_in_on_init, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:proximity", totem_proximity_out_on_suspend, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_type, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_axes, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_proximity_in_out, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_proximity_in_on_init, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_proximity_out_on_suspend, LITEST_TOTEM, LITEST_ANY);
 
-	litest_add("totem:axes", totem_motion, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:axes", totem_rotation, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:axes", totem_size, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:button", totem_button, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:button", totem_button_down_on_init, LITEST_TOTEM, LITEST_ANY);
-	litest_add_no_device("totem:button", totem_button_up_on_delete);
+	litest_add(totem_motion, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_rotation, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_size, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_button, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_button_down_on_init, LITEST_TOTEM, LITEST_ANY);
+	litest_add_no_device(totem_button_up_on_delete);
 
-	litest_add("totem:arbitration", totem_arbitration_below, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:arbitration", totem_arbitration_during, LITEST_TOTEM, LITEST_ANY);
-	litest_add("totem:arbitration", totem_arbitration_outside_rect, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_arbitration_below, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_arbitration_during, LITEST_TOTEM, LITEST_ANY);
+	litest_add(totem_arbitration_outside_rect, LITEST_TOTEM, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-touch.c third_party_libinput_new/test/test-touch.c
--- third_party_libinput_bak/test/test-touch.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-touch.c	2023-03-30 10:39:09.508345700 +0800
@@ -987,7 +987,7 @@
 	litest_touch_move_to(dev, 0, 50, 50, 70, 70, 10);
 	litest_drain_events(li);
 
-	/* Touch is still down when device is removed, espect a release */
+	/* Touch is still down when device is removed, expect a release */
 	litest_delete_device(dev);
 	libinput_dispatch(li);
 
@@ -1342,53 +1342,53 @@
 {
 	struct range axes = { ABS_X, ABS_Y + 1};
 
-	litest_add("touch:frame", touch_frame_events, LITEST_TOUCH, LITEST_ANY);
-	litest_add("touch:down", touch_downup_no_motion, LITEST_TOUCH, LITEST_ANY);
-	litest_add("touch:down", touch_downup_no_motion, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
-	litest_add_no_device("touch:abs-transform", touch_abs_transform);
-	litest_add("touch:slots", touch_seat_slot, LITEST_TOUCH, LITEST_TOUCHPAD);
-	litest_add_no_device("touch:slots", touch_many_slots);
-	litest_add("touch:double-touch-down-up", touch_double_touch_down_up, LITEST_TOUCH, LITEST_PROTOCOL_A);
-	litest_add("touch:calibration", touch_calibration_scale, LITEST_TOUCH, LITEST_TOUCHPAD);
-	litest_add("touch:calibration", touch_calibration_scale, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
-	litest_add("touch:calibration", touch_calibration_rotation, LITEST_TOUCH, LITEST_TOUCHPAD);
-	litest_add("touch:calibration", touch_calibration_rotation, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
-	litest_add("touch:calibration", touch_calibration_translation, LITEST_TOUCH, LITEST_TOUCHPAD);
-	litest_add("touch:calibration", touch_calibration_translation, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
-	litest_add_for_device("touch:calibration", touch_calibrated_screen_path, LITEST_CALIBRATED_TOUCHSCREEN);
-	litest_add_for_device("touch:calibration", touch_calibrated_screen_udev, LITEST_CALIBRATED_TOUCHSCREEN);
-	litest_add("touch:calibration", touch_calibration_config, LITEST_TOUCH, LITEST_ANY);
-
-	litest_add("touch:left-handed", touch_no_left_handed, LITEST_TOUCH, LITEST_ANY);
-
-	litest_add("touch:fake-mt", fake_mt_exists, LITEST_FAKE_MT, LITEST_ANY);
-	litest_add("touch:fake-mt", fake_mt_no_touch_events, LITEST_FAKE_MT, LITEST_ANY);
-
-	litest_add("touch:protocol a", touch_protocol_a_init, LITEST_PROTOCOL_A, LITEST_ANY);
-	litest_add("touch:protocol a", touch_protocol_a_touch, LITEST_PROTOCOL_A, LITEST_ANY);
-	litest_add("touch:protocol a", touch_protocol_a_2fg_touch, LITEST_PROTOCOL_A, LITEST_ANY);
-
-	litest_add_ranged("touch:state", touch_initial_state, LITEST_TOUCH, LITEST_PROTOCOL_A, &axes);
-
-	litest_add("touch:time", touch_time_usec, LITEST_TOUCH, LITEST_TOUCHPAD);
-
-	litest_add_for_device("touch:fuzz", touch_fuzz, LITEST_MULTITOUCH_FUZZ_SCREEN);
-	litest_add_for_device("touch:fuzz", touch_fuzz_property, LITEST_MULTITOUCH_FUZZ_SCREEN);
-
-	litest_add_no_device("touch:release", touch_release_on_unplug);
-
-	litest_add_for_device("touch:range", touch_invalid_range_over, LITEST_TOUCHSCREEN_INVALID_RANGE);
-	litest_add_for_device("touch:range", touch_invalid_range_under, LITEST_TOUCHSCREEN_INVALID_RANGE);
-
-	litest_add("touch:count", touch_count_st, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
-	litest_add("touch:count", touch_count_mt, LITEST_TOUCH, LITEST_SINGLE_TOUCH|LITEST_PROTOCOL_A);
-	litest_add("touch:count", touch_count_unknown, LITEST_PROTOCOL_A, LITEST_ANY);
-	litest_add("touch:count", touch_count_invalid, LITEST_ANY, LITEST_TOUCH|LITEST_SINGLE_TOUCH|LITEST_PROTOCOL_A);
-
-	litest_add("touch:tool", touch_palm_detect_tool_palm, LITEST_TOUCH, LITEST_ANY);
-	litest_add("touch:tool", touch_palm_detect_tool_palm_on_off, LITEST_TOUCH, LITEST_ANY);
-	litest_add("touch:tool", touch_palm_detect_tool_palm_keep_type, LITEST_TOUCH, LITEST_ANY);
-	litest_add("touch:tool", touch_palm_detect_tool_palm_2fg, LITEST_TOUCH, LITEST_SINGLE_TOUCH);
-	litest_add("touch:tool", touch_palm_detect_tool_palm_on_off_2fg, LITEST_TOUCH, LITEST_SINGLE_TOUCH);
-	litest_add("touch:tool", touch_palm_detect_tool_palm_keep_type_2fg, LITEST_TOUCH, LITEST_ANY);
+	litest_add(touch_frame_events, LITEST_TOUCH, LITEST_ANY);
+	litest_add(touch_downup_no_motion, LITEST_TOUCH, LITEST_ANY);
+	litest_add(touch_downup_no_motion, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
+	litest_add_no_device(touch_abs_transform);
+	litest_add(touch_seat_slot, LITEST_TOUCH, LITEST_TOUCHPAD);
+	litest_add_no_device(touch_many_slots);
+	litest_add(touch_double_touch_down_up, LITEST_TOUCH, LITEST_PROTOCOL_A);
+	litest_add(touch_calibration_scale, LITEST_TOUCH, LITEST_TOUCHPAD);
+	litest_add(touch_calibration_scale, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
+	litest_add(touch_calibration_rotation, LITEST_TOUCH, LITEST_TOUCHPAD);
+	litest_add(touch_calibration_rotation, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
+	litest_add(touch_calibration_translation, LITEST_TOUCH, LITEST_TOUCHPAD);
+	litest_add(touch_calibration_translation, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
+	litest_add_for_device(touch_calibrated_screen_path, LITEST_CALIBRATED_TOUCHSCREEN);
+	litest_add_for_device(touch_calibrated_screen_udev, LITEST_CALIBRATED_TOUCHSCREEN);
+	litest_add(touch_calibration_config, LITEST_TOUCH, LITEST_ANY);
+
+	litest_add(touch_no_left_handed, LITEST_TOUCH, LITEST_ANY);
+
+	litest_add(fake_mt_exists, LITEST_FAKE_MT, LITEST_ANY);
+	litest_add(fake_mt_no_touch_events, LITEST_FAKE_MT, LITEST_ANY);
+
+	litest_add(touch_protocol_a_init, LITEST_PROTOCOL_A, LITEST_ANY);
+	litest_add(touch_protocol_a_touch, LITEST_PROTOCOL_A, LITEST_ANY);
+	litest_add(touch_protocol_a_2fg_touch, LITEST_PROTOCOL_A, LITEST_ANY);
+
+	litest_add_ranged(touch_initial_state, LITEST_TOUCH, LITEST_PROTOCOL_A, &axes);
+
+	litest_add(touch_time_usec, LITEST_TOUCH, LITEST_TOUCHPAD);
+
+	litest_add_for_device(touch_fuzz, LITEST_MULTITOUCH_FUZZ_SCREEN);
+	litest_add_for_device(touch_fuzz_property, LITEST_MULTITOUCH_FUZZ_SCREEN);
+
+	litest_add_no_device(touch_release_on_unplug);
+
+	litest_add_for_device(touch_invalid_range_over, LITEST_TOUCHSCREEN_INVALID_RANGE);
+	litest_add_for_device(touch_invalid_range_under, LITEST_TOUCHSCREEN_INVALID_RANGE);
+
+	litest_add(touch_count_st, LITEST_SINGLE_TOUCH, LITEST_TOUCHPAD);
+	litest_add(touch_count_mt, LITEST_TOUCH, LITEST_SINGLE_TOUCH|LITEST_PROTOCOL_A);
+	litest_add(touch_count_unknown, LITEST_PROTOCOL_A, LITEST_ANY);
+	litest_add(touch_count_invalid, LITEST_ANY, LITEST_TOUCH|LITEST_SINGLE_TOUCH|LITEST_PROTOCOL_A);
+
+	litest_add(touch_palm_detect_tool_palm, LITEST_TOUCH, LITEST_ANY);
+	litest_add(touch_palm_detect_tool_palm_on_off, LITEST_TOUCH, LITEST_ANY);
+	litest_add(touch_palm_detect_tool_palm_keep_type, LITEST_TOUCH, LITEST_ANY);
+	litest_add(touch_palm_detect_tool_palm_2fg, LITEST_TOUCH, LITEST_SINGLE_TOUCH);
+	litest_add(touch_palm_detect_tool_palm_on_off_2fg, LITEST_TOUCH, LITEST_SINGLE_TOUCH);
+	litest_add(touch_palm_detect_tool_palm_keep_type_2fg, LITEST_TOUCH, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-touchpad-buttons.c third_party_libinput_new/test/test-touchpad-buttons.c
--- third_party_libinput_bak/test/test-touchpad-buttons.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-touchpad-buttons.c	2023-03-30 10:44:22.991827900 +0800
@@ -291,7 +291,6 @@
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
-	struct libinput_event *event;
 
 	if (litest_slot_count(dev) < 4)
 		return;
@@ -315,18 +314,6 @@
 
 	libinput_dispatch(li);
 
-	litest_wait_for_event(li);
-	event = libinput_get_event(li);
-	litest_is_button_event(event,
-			       BTN_MIDDLE,
-			       LIBINPUT_BUTTON_STATE_PRESSED);
-	libinput_event_destroy(event);
-	event = libinput_get_event(li);
-	litest_is_button_event(event,
-			       BTN_MIDDLE,
-			       LIBINPUT_BUTTON_STATE_RELEASED);
-	libinput_event_destroy(event);
-
 	litest_assert_empty_queue(li);
 }
 END_TEST
@@ -335,7 +322,6 @@
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
-	struct libinput_event *event;
 
 	if (litest_slot_count(dev) >= 3 ||
 	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_QUADTAP))
@@ -360,18 +346,6 @@
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
 
-	litest_wait_for_event(li);
-	event = libinput_get_event(li);
-	litest_is_button_event(event,
-			       BTN_MIDDLE,
-			       LIBINPUT_BUTTON_STATE_PRESSED);
-	libinput_event_destroy(event);
-	event = libinput_get_event(li);
-	litest_is_button_event(event,
-			       BTN_MIDDLE,
-			       LIBINPUT_BUTTON_STATE_RELEASED);
-	libinput_event_destroy(event);
-
 	litest_assert_empty_queue(li);
 }
 END_TEST
@@ -380,7 +354,6 @@
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
-	struct libinput_event *event;
 
 	if (litest_slot_count(dev) != 3 ||
 	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_TRIPLETAP))
@@ -409,18 +382,6 @@
 
 	libinput_dispatch(li);
 
-	litest_wait_for_event(li);
-	event = libinput_get_event(li);
-	litest_is_button_event(event,
-			       BTN_MIDDLE,
-			       LIBINPUT_BUTTON_STATE_PRESSED);
-	libinput_event_destroy(event);
-	event = libinput_get_event(li);
-	litest_is_button_event(event,
-			       BTN_MIDDLE,
-			       LIBINPUT_BUTTON_STATE_RELEASED);
-	libinput_event_destroy(event);
-
 	litest_assert_empty_queue(li);
 }
 END_TEST
@@ -1002,11 +963,11 @@
 		case 3:
 			if (nslots >= nfingers)
 				litest_touch_move(dev, 2, 60, 50 + i);
-			/* fallthrough */
+			_fallthrough_;
 		case 2:
 			if (nslots >= nfingers)
 				litest_touch_move(dev, 1, 50, 50 + i);
-			/* fallthrough */
+			_fallthrough_;
 		case 1:
 			litest_touch_move(dev, 0, 40, 50 + i);
 			break;
@@ -1146,9 +1107,9 @@
 	/* make sure the movement generates pointer events when
 	   not pinned */
 	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_move_to(dev, 0, 50, 50, 52, 52, 10);
-	litest_touch_move_to(dev, 0, 52, 52, 48, 48, 10);
-	litest_touch_move_to(dev, 0, 48, 48, 50, 50, 10);
+	litest_touch_move_to(dev, 0, 50, 50, 54, 54, 10);
+	litest_touch_move_to(dev, 0, 54, 54, 46, 46, 10);
+	litest_touch_move_to(dev, 0, 46, 46, 50, 50, 10);
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
 
 	litest_button_click(dev, BTN_LEFT, true);
@@ -2092,75 +2053,144 @@
 }
 END_TEST
 
+START_TEST(touchpad_non_clickpad_detection)
+{
+	struct libinput *li;
+	struct libinput_device *device;
+	struct libevdev_uinput *uinput;
+	static struct input_absinfo absinfo[] = {
+		{ ABS_X, 1472, 5472, 0, 0, 75 },
+		{ ABS_Y, 1408, 4448, 0, 0, 129 },
+		{ ABS_PRESSURE, 0, 255, 0, 0, 0 },
+		{ ABS_TOOL_WIDTH, 0, 15, 0, 0, 0 },
+		{ ABS_MT_SLOT, 0, 1, 0, 0, 0 },
+		{ ABS_MT_POSITION_X, 1472, 5472, 0, 0, 75 },
+		{ ABS_MT_POSITION_Y, 1408, 4448, 0, 0, 129 },
+		{ ABS_MT_TRACKING_ID, 0, 65535, 0, 0, 0 },
+		{ ABS_MT_PRESSURE, 0, 255, 0, 0, 0 },
+		{ .value = -1 }
+	};
+	uint32_t methods;
+
+	/* Create a touchpad with only a left button but missing
+	 * INPUT_PROP_BUTTONPAD. We should treat this as clickpad.
+	 */
+	uinput = litest_create_uinput_abs_device("litest NonClickpad",
+						 NULL,
+						 absinfo,
+						 EV_KEY, BTN_LEFT,
+						 EV_KEY, BTN_TOOL_FINGER,
+						 EV_KEY, BTN_TOUCH,
+						 -1);
+
+	li = litest_create_context();
+	device = libinput_path_add_device(li,
+					  libevdev_uinput_get_devnode(uinput));
+
+	methods = libinput_device_config_click_get_methods(device);
+	ck_assert(methods & LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS);
+	ck_assert(methods & LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER);
+
+
+	libinput_path_remove_device(device);
+	libevdev_uinput_destroy(uinput);
+	litest_destroy_context(li);
+}
+END_TEST
+
+START_TEST(touchpad_clickpad_detection)
+{
+	struct litest_device *dev;
+	uint32_t methods;
+	int codes[] = {
+		INPUT_PROP_MAX, INPUT_PROP_BUTTONPAD,
+		-1, -1,
+	};
+
+	/* Create a device with LR buttons and INPUT_PROP_BUTTONPAD set - we
+	 * should ignore the property and assume it's a non-clickpad.
+	 * Only way to check that is to verify no click methods are set.
+	 */
+	dev = litest_create_device_with_overrides(LITEST_SYNAPTICS_TOUCHPAD,
+						  "litest Fake Clickpad",
+						  NULL, NULL, codes);
+
+	methods = libinput_device_config_click_get_methods(dev->libinput_device);
+	ck_assert(methods == 0);
+	litest_delete_device(dev);
+}
+END_TEST
+
 TEST_COLLECTION(touchpad_buttons)
 {
 	struct range finger_count = {1, 4};
 
-	litest_add("touchpad:button", touchpad_button, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_button, LITEST_TOUCHPAD, LITEST_CLICKPAD);
 
-	litest_add("touchpad:clickfinger", touchpad_1fg_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_1fg_clickfinger_no_touch, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_2fg_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_3fg_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_3fg_clickfinger_btntool, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_4fg_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_4fg_clickfinger_btntool_2slots, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_4fg_clickfinger_btntool_3slots, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_2fg_clickfinger_distance, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_3fg_clickfinger_distance, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_3fg_clickfinger_distance_btntool, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add_for_device("touchpad:clickfinger", touchpad_2fg_clickfinger_bottom, LITEST_SYNAPTICS_TOPBUTTONPAD);
-	litest_add("touchpad:clickfinger", touchpad_clickfinger_to_area_method, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger",
-		   touchpad_clickfinger_to_area_method_while_down, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger", touchpad_area_to_clickfinger_method, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:clickfinger",
-		   touchpad_area_to_clickfinger_method_while_down, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_1fg_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_1fg_clickfinger_no_touch, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_2fg_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_3fg_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_3fg_clickfinger_btntool, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_4fg_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_4fg_clickfinger_btntool_2slots, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_4fg_clickfinger_btntool_3slots, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_2fg_clickfinger_distance, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_3fg_clickfinger_distance, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_3fg_clickfinger_distance_btntool, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add_for_device(touchpad_2fg_clickfinger_bottom, LITEST_SYNAPTICS_TOPBUTTONPAD);
+	litest_add(touchpad_clickfinger_to_area_method, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_clickfinger_to_area_method_while_down, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_area_to_clickfinger_method, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_area_to_clickfinger_method_while_down, LITEST_CLICKPAD, LITEST_ANY);
 	/* run those two for the T440 one only so we don't have to worry
 	 * about small touchpads messing with thumb detection expectations */
-	litest_add_for_device("touchpad:clickfinger", touchpad_clickfinger_3fg_tool_position, LITEST_SYNAPTICS_TOPBUTTONPAD);
-	litest_add_for_device("touchpad:clickfinger", touchpad_clickfinger_4fg_tool_position, LITEST_SYNAPTICS_TOPBUTTONPAD);
+	litest_add_for_device(touchpad_clickfinger_3fg_tool_position, LITEST_SYNAPTICS_TOPBUTTONPAD);
+	litest_add_for_device(touchpad_clickfinger_4fg_tool_position, LITEST_SYNAPTICS_TOPBUTTONPAD);
+
+	litest_add_for_device(touchpad_clickfinger_appletouch_config, LITEST_APPLETOUCH);
+	litest_add_for_device(touchpad_clickfinger_appletouch_1fg, LITEST_APPLETOUCH);
+	litest_add_for_device(touchpad_clickfinger_appletouch_2fg, LITEST_APPLETOUCH);
+	litest_add_for_device(touchpad_clickfinger_appletouch_3fg, LITEST_APPLETOUCH);
+
+	litest_add_ranged(touchpad_clickfinger_click_drag, LITEST_CLICKPAD, LITEST_ANY, &finger_count);
+
+	litest_add(touchpad_click_defaults_clickfinger, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_click_defaults_btnarea, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(touchpad_click_defaults_none, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_click_defaults_none, LITEST_ANY, LITEST_TOUCHPAD);
+
+	litest_add(touchpad_btn_left, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(clickpad_btn_left, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(clickpad_click_n_drag, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
+	litest_add(clickpad_finger_pin, LITEST_CLICKPAD, LITEST_ANY);
+
+	litest_add(clickpad_softbutton_left, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_middle, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_right, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_left_tap_n_drag, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_right_tap_n_drag, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_left_1st_fg_move, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_left_2nd_fg_move, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_left_to_right, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_right_to_left, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(clickpad_softbutton_hover_into_buttons, LITEST_CLICKPAD|LITEST_HOVER, LITEST_APPLE_CLICKPAD);
+
+	litest_add(clickpad_topsoftbuttons_left, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(clickpad_topsoftbuttons_right, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(clickpad_topsoftbuttons_middle, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(clickpad_topsoftbuttons_move_out_leftclick, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(clickpad_topsoftbuttons_move_out_leftclick_before_timeout, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(clickpad_topsoftbuttons_clickfinger, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(clickpad_topsoftbuttons_clickfinger_dev_disabled, LITEST_TOPBUTTONPAD, LITEST_ANY);
+
+	litest_add(clickpad_middleemulation_config_delayed, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(clickpad_middleemulation_click, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(clickpad_middleemulation_click_middle_left, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(clickpad_middleemulation_click_middle_right, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(clickpad_middleemulation_click_enable_while_down, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(clickpad_middleemulation_click_disable_while_down, LITEST_CLICKPAD, LITEST_ANY);
 
-	litest_add_for_device("touchpad:clickfinger", touchpad_clickfinger_appletouch_config, LITEST_APPLETOUCH);
-	litest_add_for_device("touchpad:clickfinger", touchpad_clickfinger_appletouch_1fg, LITEST_APPLETOUCH);
-	litest_add_for_device("touchpad:clickfinger", touchpad_clickfinger_appletouch_2fg, LITEST_APPLETOUCH);
-	litest_add_for_device("touchpad:clickfinger", touchpad_clickfinger_appletouch_3fg, LITEST_APPLETOUCH);
-
-	litest_add_ranged("touchpad:clickfinger", touchpad_clickfinger_click_drag, LITEST_CLICKPAD, LITEST_ANY, &finger_count);
-
-	litest_add("touchpad:click", touchpad_click_defaults_clickfinger, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:click", touchpad_click_defaults_btnarea, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:click", touchpad_click_defaults_none, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("touchpad:click", touchpad_click_defaults_none, LITEST_ANY, LITEST_TOUCHPAD);
-
-	litest_add("touchpad:click", touchpad_btn_left, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("touchpad:click", clickpad_btn_left, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:click", clickpad_click_n_drag, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:click", clickpad_finger_pin, LITEST_CLICKPAD, LITEST_ANY);
-
-	litest_add("touchpad:softbutton", clickpad_softbutton_left, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_middle, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_right, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_left_tap_n_drag, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_right_tap_n_drag, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_left_1st_fg_move, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_left_2nd_fg_move, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_left_to_right, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_right_to_left, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:softbutton", clickpad_softbutton_hover_into_buttons, LITEST_CLICKPAD|LITEST_HOVER, LITEST_APPLE_CLICKPAD);
-
-	litest_add("touchpad:topsoftbuttons", clickpad_topsoftbuttons_left, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("touchpad:topsoftbuttons", clickpad_topsoftbuttons_right, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("touchpad:topsoftbuttons", clickpad_topsoftbuttons_middle, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("touchpad:topsoftbuttons", clickpad_topsoftbuttons_move_out_leftclick, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("touchpad:topsoftbuttons", clickpad_topsoftbuttons_move_out_leftclick_before_timeout, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("touchpad:topsoftbuttons", clickpad_topsoftbuttons_clickfinger, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("touchpad:topsoftbuttons", clickpad_topsoftbuttons_clickfinger_dev_disabled, LITEST_TOPBUTTONPAD, LITEST_ANY);
-
-	litest_add("touchpad:middleemulation", clickpad_middleemulation_config_delayed, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:middleemulation", clickpad_middleemulation_click, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:middleemulation", clickpad_middleemulation_click_middle_left, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:middleemulation", clickpad_middleemulation_click_middle_right, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:middleemulation", clickpad_middleemulation_click_enable_while_down, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:middleemulation", clickpad_middleemulation_click_disable_while_down, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add_no_device(touchpad_clickpad_detection);
+	litest_add_no_device(touchpad_non_clickpad_detection);
 }
diff -Naur third_party_libinput_bak/test/test-touchpad-tap.c third_party_libinput_new/test/test-touchpad-tap.c
--- third_party_libinput_bak/test/test-touchpad-tap.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-touchpad-tap.c	2023-03-30 10:52:46.834000700 +0800
@@ -38,7 +38,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -56,25 +56,105 @@
 }
 END_TEST
 
-START_TEST(touchpad_1fg_doubletap)
+START_TEST(touchpad_doubletap)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime, curtime;
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    nfingers2 = _i / 3;
+	unsigned int button = 0,
+		     button2 = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
+	if (nfingers2 > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+	switch (nfingers2) {
+	case 1:
+		button2 = BTN_LEFT;
+		break;
+	case 2:
+		button2 = BTN_RIGHT;
+		break;
+	case 3:
+		button2 = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
+	/* one to three finger down, all fingers up, repeat with possibly
+	   different number of fingers -> two button event pairs */
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
 	msleep(10);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	msleep(10);
-	litest_touch_down(dev, 0, 50, 50);
+
+	switch (nfingers2) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
 	msleep(10);
-	litest_touch_up(dev, 0);
+	switch (nfingers2) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
 
 	litest_timeout_tap();
@@ -82,14 +162,14 @@
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_PRESSED);
 	oldtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
 
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_RELEASED);
 	curtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
@@ -97,7 +177,7 @@
 
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button2,
 				       LIBINPUT_BUTTON_STATE_PRESSED);
 	curtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
@@ -106,7 +186,7 @@
 
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button2,
 				       LIBINPUT_BUTTON_STATE_RELEASED);
 	curtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
@@ -116,7 +196,7 @@
 }
 END_TEST
 
-START_TEST(touchpad_1fg_multitap)
+START_TEST(touchpad_multitap)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
@@ -124,17 +204,58 @@
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime = 0,
 		 curtime;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -145,7 +266,7 @@
 	for (ntaps = 0; ntaps <= range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -153,19 +274,19 @@
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
 		ck_assert_int_ge(curtime, oldtime);
 		oldtime = curtime;
 	}
-	litest_timeout_tap();
+	litest_timeout_tapndrag();
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_multitap_n_drag_move)
+START_TEST(touchpad_multitap_n_drag_move)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
@@ -173,17 +294,57 @@
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime = 0,
 		 curtime;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -196,7 +357,7 @@
 	for (ntaps = 0; ntaps < range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -204,7 +365,7 @@
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -214,7 +375,7 @@
 
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_PRESSED);
 	curtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
@@ -224,15 +385,17 @@
 					LIBINPUT_EVENT_POINTER_MOTION);
 
 	litest_touch_up(dev, 0);
+	libinput_dispatch(li);
+	litest_timeout_tapndrag();
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_multitap_n_drag_2fg)
+START_TEST(touchpad_multitap_n_drag_2fg)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
@@ -240,34 +403,75 @@
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime = 0,
 		 curtime;
-	int range = _i,
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
 
 	if (libevdev_has_property(dev->evdev, INPUT_PROP_SEMI_MT))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
 
 	libinput_dispatch(li);
 	litest_touch_down(dev, 0, 50, 50);
-	msleep(10);
+	litest_touch_move_to(dev, 0, 50, 50, 30, 50, 10);
 	litest_touch_down(dev, 1, 70, 50);
 	libinput_dispatch(li);
 
 	for (ntaps = 0; ntaps < range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -275,7 +479,7 @@
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -285,7 +489,7 @@
 
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_PRESSED);
 	curtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
@@ -298,16 +502,17 @@
 
 	litest_touch_up(dev, 1);
 	litest_touch_up(dev, 0);
-	litest_timeout_tap();
+	libinput_dispatch(li);
+	litest_timeout_tapndrag();
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_multitap_n_drag_click)
+START_TEST(touchpad_multitap_n_drag_click)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
@@ -315,17 +520,58 @@
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime = 0,
 		 curtime;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -339,7 +585,7 @@
 	for (ntaps = 0; ntaps <= range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -347,7 +593,7 @@
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -362,31 +608,72 @@
 				   BTN_LEFT,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 	litest_touch_up(dev, 0);
-	litest_timeout_tap();
+	litest_timeout_tapndrag();
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_multitap_timeout)
+START_TEST(touchpad_multitap_timeout)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
 	struct libinput_event_pointer *ptrev;
 	uint32_t ptime, rtime;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
 		msleep(10);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -398,14 +685,14 @@
 	for (ntaps = 0; ntaps <= range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		ptime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		rtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -416,7 +703,7 @@
 }
 END_TEST
 
-START_TEST(touchpad_1fg_multitap_n_drag_timeout)
+START_TEST(touchpad_multitap_n_drag_timeout)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
@@ -424,18 +711,59 @@
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime = 0,
 		 curtime;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
 		msleep(10);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -450,7 +778,7 @@
 	for (ntaps = 0; ntaps < range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -458,7 +786,7 @@
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -468,7 +796,7 @@
 
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_PRESSED);
 	curtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
@@ -480,23 +808,45 @@
 					LIBINPUT_EVENT_POINTER_MOTION);
 
 	litest_touch_up(dev, 0);
+	libinput_dispatch(li);
+	litest_timeout_tapndrag();
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_tap_drag_high_delay)
+START_TEST(touchpad_multitap_n_drag_high_delay)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
@@ -504,10 +854,31 @@
 		/* Tap timeout is 180ms after a touch or release. Make sure we
 		* go over 180ms for touch+release, but stay under 180ms for
 		* each single event. */
-		litest_touch_down(dev, 0, 50, 50);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
 		libinput_dispatch(li);
 		msleep(100);
-		litest_touch_up(dev, 0);
+
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
 		libinput_dispatch(li);
 		msleep(100);
 	}
@@ -518,26 +889,28 @@
 	libinput_dispatch(li);
 
 	for (ntaps = 0; ntaps < range; ntaps++) {
-		litest_assert_button_event(li, BTN_LEFT,
+		litest_assert_button_event(li, button,
 					   LIBINPUT_BUTTON_STATE_PRESSED);
-		litest_assert_button_event(li, BTN_LEFT,
+		litest_assert_button_event(li, button,
 					   LIBINPUT_BUTTON_STATE_RELEASED);
 	}
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 	litest_assert_only_typed_events(li,
 					LIBINPUT_EVENT_POINTER_MOTION);
 
 	litest_touch_up(dev, 0);
-	litest_assert_button_event(li, BTN_LEFT,
+	libinput_dispatch(li);
+	litest_timeout_tapndrag();
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_multitap_n_drag_tap)
+START_TEST(touchpad_multitap_n_drag_tap)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
@@ -545,18 +918,59 @@
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime = 0,
 		 curtime;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
 		msleep(10);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -571,7 +985,7 @@
 	for (ntaps = 0; ntaps < range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -579,7 +993,7 @@
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -589,7 +1003,7 @@
 
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_PRESSED);
 	curtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
@@ -604,14 +1018,14 @@
 	litest_touch_down(dev, 0, 70, 50);
 	litest_touch_up(dev, 0);
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_multitap_n_drag_tap_click)
+START_TEST(touchpad_multitap_n_drag_tap_click)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
@@ -619,18 +1033,59 @@
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime = 0,
 		 curtime;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
 		msleep(10);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -645,7 +1100,7 @@
 	for (ntaps = 0; ntaps < range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -653,7 +1108,7 @@
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -663,7 +1118,7 @@
 
 	event = libinput_get_event(li);
 	ptrev = litest_is_button_event(event,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_PRESSED);
 	curtime = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(event);
@@ -681,7 +1136,7 @@
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	/* the physical click */
@@ -697,25 +1152,65 @@
 }
 END_TEST
 
-START_TEST(touchpad_1fg_tap_n_drag)
+START_TEST(touchpad_tap_n_drag)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_disable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 50, 50);
 	litest_touch_move_to(dev, 0, 50, 50, 80, 80, 20);
 
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	libinput_dispatch(li);
@@ -732,7 +1227,7 @@
 	event = libinput_get_event(li);
 	ck_assert_notnull(event);
 	litest_is_button_event(event,
-			       BTN_LEFT,
+			       button,
 			       LIBINPUT_BUTTON_STATE_RELEASED);
 	libinput_event_destroy(event);
 
@@ -740,25 +1235,65 @@
 }
 END_TEST
 
-START_TEST(touchpad_1fg_tap_n_drag_draglock)
+START_TEST(touchpad_tap_n_drag_draglock)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 50, 50);
 	litest_touch_move_to(dev, 0, 50, 50, 80, 80, 20);
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	libinput_dispatch(li);
@@ -774,32 +1309,76 @@
 
 	litest_timeout_tap();
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_tap_n_drag_draglock_tap)
+START_TEST(touchpad_tap_n_drag_draglock_tap)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    nfingers2 = _i / 3;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
+
+	if (nfingers2 > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 50, 50);
 	litest_touch_move_to(dev, 0, 50, 50, 80, 80, 20);
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	libinput_dispatch(li);
@@ -813,33 +1392,94 @@
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
 
 	litest_touch_up(dev, 0);
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	switch (nfingers2) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers2) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
+
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_1fg_tap_n_drag_draglock_tap_click)
+START_TEST(touchpad_tap_n_drag_draglock_tap_click)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 50, 50);
 	litest_touch_move_to(dev, 0, 50, 50, 80, 80, 20);
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	libinput_dispatch(li);
@@ -852,7 +1492,7 @@
 	litest_button_click(dev, BTN_LEFT, false);
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	/* the physical click */
@@ -868,23 +1508,63 @@
 }
 END_TEST
 
-START_TEST(touchpad_1fg_tap_n_drag_draglock_timeout)
+START_TEST(touchpad_tap_n_drag_draglock_timeout)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 50, 50);
 	libinput_dispatch(li);
 	litest_timeout_tap();
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_assert_empty_queue(li);
@@ -892,31 +1572,82 @@
 	libinput_dispatch(li);
 
 	litest_timeout_tapndrag();
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_2fg_tap_n_drag)
+START_TEST(touchpad_tap_n_drag_2fg)
 {
+	/* Test: tap with 1-3 fingers (multiple times), then a 1fg move
+	 * followed by a second finger down and *both* fingers moving.
+	 * This is a special behavior catering for the use-case when a user
+	 * needs a second finger down to "hold" the drag while resetting the
+	 * first finger.
+	 * Even though it's 2fg movement, we expect it to behave like a 1fg
+	 * drag. This behavior may change in the future.
+	 */
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_disable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 30, 70);
-	litest_touch_up(dev, 0);
-	litest_touch_down(dev, 0, 30, 70);
+	libinput_dispatch(li);
+	litest_timeout_tap();
+	libinput_dispatch(li);
 	litest_touch_down(dev, 1, 80, 70);
 	litest_touch_move_to(dev, 0, 30, 70, 30, 30, 10);
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
@@ -924,34 +1655,248 @@
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_2fg_tap_n_drag_3fg_btntool)
+START_TEST(touchpad_tap_n_drag_2fg_scroll)
+{
+	/* Test: tap with 1-3 fingers, then immediate 2fg scroll.
+	 * We expect this to be a tap followed by a scroll.
+	 */
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
+
+	litest_enable_2fg_scroll(dev);
+	litest_enable_tap(dev->libinput_device);
+	litest_disable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
+	litest_drain_events(li);
+
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
+
+	/* Two fingers down + move to trigger scrolling */
+	libinput_dispatch(li);
+	litest_touch_down(dev, 0, 50, 50);
+	litest_touch_down(dev, 1, 70, 50);
+	libinput_dispatch(li);
+	litest_touch_move_two_touches(dev, 50, 50, 70, 50, 0, 20, 10);
+	libinput_dispatch(li);
+	litest_touch_up(dev, 0);
+	litest_touch_up(dev, 1);
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
+
+	litest_assert_empty_queue(li);
+}
+END_TEST
+
+START_TEST(touchpad_tap_n_drag_draglock_2fg_scroll)
+{
+	/* Test: tap with 1-3 fingers, trigger drag-lock,
+	 * then immediate 2fg scroll.
+	 * We expect this to be a tap-and-drag followed by a scroll.
+	 */
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
+
+	litest_enable_2fg_scroll(dev);
+	litest_enable_tap(dev->libinput_device);
+	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
+	litest_drain_events(li);
+
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
+
+	/* Drag with one finger */
+	litest_touch_down(dev, 0, 50, 50);
+	litest_touch_move_to(dev, 0, 50, 50, 50, 70, 10);
+
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
+
+	/* Release finger to trigger drag-lock */
+	litest_touch_up(dev, 0);
+
+	/* Two fingers down + move to trigger scrolling */
+	libinput_dispatch(li);
+	litest_touch_down(dev, 0, 50, 50);
+	litest_touch_down(dev, 1, 70, 50);
+	libinput_dispatch(li);
+	litest_touch_move_two_touches(dev, 50, 50, 70, 50, 0, 20, 10);
+	libinput_dispatch(li);
+	litest_touch_up(dev, 0);
+	litest_touch_up(dev, 1);
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
+
+	litest_assert_empty_queue(li);
+}
+END_TEST
+
+START_TEST(touchpad_tap_n_drag_3fg_btntool)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
 
 	if (litest_slot_count(dev) > 2 ||
 	    !libevdev_has_event_code(dev->evdev, EV_KEY, BTN_TOOL_TRIPLETAP))
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 0, 40, 30);
+		litest_touch_down(dev, 1, 50, 30);
+		litest_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, 1);
+		litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 0);
+		litest_event(dev, EV_SYN, SYN_REPORT, 0);
+		break;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_event(dev, EV_KEY, BTN_TOOL_TRIPLETAP, 0);
+		litest_event(dev, EV_KEY, BTN_TOOL_DOUBLETAP, 1);
+		litest_event(dev, EV_SYN, SYN_REPORT, 0);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 30, 70);
-	litest_touch_up(dev, 0);
-	litest_touch_down(dev, 0, 30, 70);
+	libinput_dispatch(li);
+	litest_timeout_tap();
+	libinput_dispatch(li);
 	litest_touch_down(dev, 1, 80, 90);
 	litest_touch_move_to(dev, 0, 30, 70, 30, 30, 5);
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
@@ -962,7 +1907,7 @@
 	litest_event(dev, EV_SYN, SYN_REPORT, 0);
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	/* Releasing the fingers should not cause any events */
@@ -976,26 +1921,76 @@
 }
 END_TEST
 
-START_TEST(touchpad_2fg_tap_n_drag_3fg)
+START_TEST(touchpad_tap_n_drag_3fg)
 {
+	/* Test: tap with 1-3 fingers (multiple times), then a 1fg move
+	 * followed by a second finger down and *both* fingers moving.
+	 * This is a special behavior catering for the use-case when a user
+	 * needs a second finger down to "hold" the drag while resetting the
+	 * first finger.
+	 * Even though it's 2fg movement, we expect it to behave like a 1fg
+	 * drag. This behavior may change in the future.
+	 */
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
 
 	if (litest_slot_count(dev) < 3)
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
+	/* 1fg down triggers the drag */
 	litest_touch_down(dev, 0, 30, 70);
-	litest_touch_up(dev, 0);
-	litest_touch_down(dev, 0, 30, 70);
+	libinput_dispatch(li);
+	litest_timeout_tap();
+	libinput_dispatch(li);
+	/* 2fg is allowed now without cancelling the drag */
 	litest_touch_down(dev, 1, 80, 90);
 	litest_touch_move_to(dev, 0, 30, 70, 30, 30, 10);
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
@@ -1005,7 +2000,7 @@
 
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	/* Releasing the fingers should not cause any events */
@@ -1017,6 +2012,196 @@
 }
 END_TEST
 
+START_TEST(touchpad_tap_n_drag_3fg_swipe)
+{
+	/* Test: tap with 1-3 fingers, then immediate 3fg swipe.
+	 * We expect this to be a tap followed by a swipe.
+	 */
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (litest_slot_count(dev) < 3)
+		return;
+
+	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
+	litest_drain_events(li);
+
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
+
+
+	litest_touch_down(dev, 0, 30, 50);
+	litest_touch_down(dev, 1, 50, 50);
+	litest_touch_down(dev, 2, 80, 50);
+	libinput_dispatch(li);
+	litest_touch_move_three_touches(dev,
+					30, 50,
+					50, 50,
+					80, 50,
+					0, 20,
+					10);
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
+				    3);
+	litest_assert_only_typed_events(li,
+					LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE);
+
+	litest_touch_up(dev, 2);
+	litest_touch_up(dev, 1);
+	litest_touch_up(dev, 0);
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_SWIPE_END,
+				    3);
+
+	litest_assert_empty_queue(li);
+}
+END_TEST
+
+START_TEST(touchpad_tap_n_drag_draglock_3fg_swipe)
+{
+	/* Test: tap with 1-3 fingers, trigger drag-lock,
+	 * then immediate 3fg swipe.
+	 * We expect this to be a tap-and-drag followed by a swipe.
+	 */
+	struct litest_device *dev = litest_current_device();
+	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (litest_slot_count(dev) < 3)
+		return;
+
+	litest_enable_tap(dev->libinput_device);
+	litest_enable_drag_lock(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
+	litest_drain_events(li);
+
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
+
+	/* Drag with one finger */
+	litest_touch_down(dev, 0, 50, 50);
+	litest_touch_move_to(dev, 0, 50, 50, 50, 70, 10);
+
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_PRESSED);
+	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
+
+	/* Release finger to trigger drag-lock */
+	litest_touch_up(dev, 0);
+
+	litest_touch_down(dev, 0, 30, 50);
+	litest_touch_down(dev, 1, 50, 50);
+	litest_touch_down(dev, 2, 80, 50);
+	libinput_dispatch(li);
+	litest_touch_move_three_touches(dev,
+					30, 50,
+					50, 50,
+					80, 50,
+					0, 20,
+					10);
+	libinput_dispatch(li);
+
+	litest_assert_button_event(li, button,
+				   LIBINPUT_BUTTON_STATE_RELEASED);
+
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN,
+				    3);
+	litest_assert_only_typed_events(li,
+					LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE);
+
+	litest_touch_up(dev, 2);
+	litest_touch_up(dev, 1);
+	litest_touch_up(dev, 0);
+	litest_assert_gesture_event(li,
+				    LIBINPUT_EVENT_GESTURE_SWIPE_END,
+				    3);
+
+	litest_assert_empty_queue(li);
+}
+END_TEST
+
 START_TEST(touchpad_2fg_tap)
 {
 	struct litest_device *dev = litest_current_device();
@@ -1029,6 +2214,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_set_tap_map(dev->libinput_device, map);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	switch (map) {
 	case LIBINPUT_CONFIG_TAP_MAP_LRM:
@@ -1049,6 +2235,8 @@
 	litest_touch_up(dev, 1);
 
 	libinput_dispatch(li);
+	litest_timeout_tap();
+	libinput_dispatch(li);
 
 	ev = libinput_get_event(li);
 	ptrev = litest_is_button_event(ev,
@@ -1081,6 +2269,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_set_tap_map(dev->libinput_device, map);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	switch (map) {
 	case LIBINPUT_CONFIG_TAP_MAP_LRM:
@@ -1101,6 +2290,8 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
+	litest_timeout_tap();
+	libinput_dispatch(li);
 
 	ev = libinput_get_event(li);
 	ptrev = litest_is_button_event(ev,
@@ -1127,6 +2318,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -1158,7 +2350,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -1180,7 +2372,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -1202,7 +2394,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -1233,7 +2425,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	/* Finger down, finger up -> tap button press
@@ -1265,7 +2457,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	/* two fingers down, left button click, fingers up
@@ -1300,7 +2492,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	/* two fingers down, button click, fingers up
@@ -1331,7 +2523,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	/* two fingers down, button click, fingers up
@@ -1363,6 +2555,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	/* one finger down, move past threshold,
@@ -1386,6 +2579,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	/* one finger down, wait past tap timeout,
@@ -1412,7 +2606,7 @@
 	struct libinput_event *event;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	/* one finger down, second finger down,
@@ -1437,19 +2631,59 @@
 }
 END_TEST
 
-START_TEST(touchpad_1fg_double_tap_click)
+START_TEST(touchpad_double_tap_click)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(dev->libinput);
 
-	/* one finger down, up, down, button click, finger up
-	   -> two button left event pairs */
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	/* finger(s) down, up, one finger down, button click, finger up
+	   -> two button event pairs */
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 50, 50);
 	litest_event(dev, EV_KEY, BTN_LEFT, 1);
 	litest_event(dev, EV_SYN, SYN_REPORT, 0);
@@ -1459,9 +2693,9 @@
 
 	libinput_dispatch(li);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 	litest_assert_button_event(li, BTN_LEFT,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
@@ -1472,23 +2706,64 @@
 }
 END_TEST
 
-START_TEST(touchpad_1fg_tap_n_drag_click)
+START_TEST(touchpad_tap_n_drag_click)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(dev->libinput);
 
-	/* one finger down, up, down, move, button click, finger up
-	   -> two button left event pairs, motion allowed */
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	/* finger(s) down, up, one finger down, move, button click, finger up
+	   -> two button event pairs, motion allowed */
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	litest_touch_down(dev, 0, 50, 50);
 	litest_touch_move_to(dev, 0, 50, 50, 80, 50, 10);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
@@ -1496,7 +2771,7 @@
 	litest_event(dev, EV_KEY, BTN_LEFT, 1);
 	litest_event(dev, EV_SYN, SYN_REPORT, 0);
 
-	litest_assert_button_event(li, BTN_LEFT,
+	litest_assert_button_event(li, button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 	litest_assert_button_event(li, BTN_LEFT,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
@@ -1527,6 +2802,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_set_tap_map(dev->libinput_device, map);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	switch (map) {
 	case LIBINPUT_CONFIG_TAP_MAP_LRM:
@@ -1558,6 +2834,8 @@
 		litest_touch_up(dev, (i + 0) % 3);
 
 		libinput_dispatch(li);
+		litest_timeout_tap();
+		libinput_dispatch(li);
 
 		ev = libinput_get_event(li);
 		ptrev = litest_is_button_event(ev,
@@ -1588,6 +2866,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	uint64_t ptime, rtime;
 	struct libinput_event *ev;
@@ -1610,6 +2889,8 @@
 	litest_touch_up(dev, 2);
 
 	libinput_dispatch(li);
+	litest_timeout_tap();
+	libinput_dispatch(li);
 
 	for (i = 0; i < 2; i++) {
 		ev = libinput_get_event(li);
@@ -1639,7 +2920,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -1686,7 +2967,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_edge_scroll(dev);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -1751,7 +3032,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_edge_scroll(dev);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -1794,6 +3075,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_set_tap_map(dev->libinput_device, map);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	switch (map) {
 	case LIBINPUT_CONFIG_TAP_MAP_LRM:
@@ -1844,6 +3126,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_set_tap_map(dev->libinput_device, map);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	switch (map) {
 	case LIBINPUT_CONFIG_TAP_MAP_LRM:
@@ -1894,6 +3177,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_set_tap_map(dev->libinput_device, map);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	switch (map) {
 	case LIBINPUT_CONFIG_TAP_MAP_LRM:
@@ -1945,6 +3229,7 @@
 	 */
 	litest_drain_events(li);
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	/* touch 1 down */
 	litest_event(dev, EV_ABS, ABS_MT_SLOT, 0);
@@ -2036,6 +3321,7 @@
 
 	litest_enable_2fg_scroll(dev);
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	litest_touch_down(dev, 0, 40, 20);
 	litest_touch_down(dev, 1, 50, 20);
@@ -2071,6 +3357,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	for (i = 0; i < 4; i++) {
 		litest_drain_events(li);
@@ -2102,7 +3389,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -2139,25 +3426,25 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* respective number of fingers down */
 	switch(nfingers) {
 	case 5:
 		litest_touch_down(dev, 4, 70, 30);
-		/* fallthrough */
+		_fallthrough_;
 	case 4:
 		litest_touch_down(dev, 3, 70, 30);
-		/* fallthrough */
+		_fallthrough_;
 	case 3:
 		litest_touch_down(dev, 2, 60, 30);
-		/* fallthrough */
+		_fallthrough_;
 	case 2:
 		litest_touch_down(dev, 1, 50, 30);
-		/* fallthrough */
+		_fallthrough_;
 	case 1:
 		litest_touch_down(dev, 0, 40, 30);
-		/* fallthrough */
 		break;
 	default:
 		abort();
@@ -2178,19 +3465,18 @@
 	switch(nfingers) {
 	case 5:
 		litest_touch_up(dev, 4);
-		/* fallthrough */
+		_fallthrough_;
 	case 4:
 		litest_touch_up(dev, 3);
-		/* fallthrough */
+		_fallthrough_;
 	case 3:
 		litest_touch_up(dev, 2);
-		/* fallthrough */
+		_fallthrough_;
 	case 2:
 		litest_touch_up(dev, 1);
-		/* fallthrough */
+		_fallthrough_;
 	case 1:
 		litest_touch_up(dev, 0);
-		/* fallthrough */
 		break;
 	}
 	libinput_dispatch(li);
@@ -2211,6 +3497,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	for (i = 0; i < 5; i++) {
 		litest_drain_events(li);
@@ -2244,7 +3531,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 20, 50);
@@ -2280,7 +3567,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	/* finger down, button click, finger up
@@ -2476,6 +3763,7 @@
 	litest_enable_tap(dev->libinput_device);
 	litest_set_tap_map(dev->libinput_device,
 			   LIBINPUT_CONFIG_TAP_MAP_LRM);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(dev->libinput);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -2563,6 +3851,8 @@
 	struct litest_device *dev = litest_current_device();
 	enum libinput_config_drag_state state;
 
+	litest_disable_hold_gestures(dev->libinput_device);
+
 	litest_enable_tap(dev->libinput_device);
 
 	litest_disable_tap_drag(dev->libinput_device);
@@ -2590,14 +3880,56 @@
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_disable_tap_drag(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	/* lift fingers up */
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
+
 	libinput_dispatch(li);
 	litest_touch_down(dev, 0, 50, 50);
 	litest_touch_move_to(dev, 0, 50, 50, 90, 90, 10);
@@ -2605,10 +3937,10 @@
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 	litest_assert_only_typed_events(li,
 					LIBINPUT_EVENT_POINTER_MOTION);
@@ -2623,28 +3955,68 @@
 	struct libinput_event *ev;
 	struct libinput_event_pointer *ptrev;
 	uint64_t press_time, release_time;
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_disable_tap_drag(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
 	msleep(10); /* to force a time difference */
 	libinput_dispatch(li);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
 
 	ev = libinput_get_event(li);
 	ptrev = litest_is_button_event(ev,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_PRESSED);
 	press_time = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(ev);
 
 	ev = libinput_get_event(li);
 	ptrev = litest_is_button_event(ev,
-				       BTN_LEFT,
+				       button,
 				       LIBINPUT_BUTTON_STATE_RELEASED);
 	release_time = libinput_event_pointer_get_time(ptrev);
 	libinput_event_destroy(ev);
@@ -2661,17 +4033,58 @@
 	struct libinput_event_pointer *ptrev;
 	uint32_t oldtime = 0,
 		 curtime;
-	int range = _i, /* looped test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
+
+	if (nfingers > litest_slot_count(dev))
+		return;
 
 	litest_enable_tap(dev->libinput_device);
 	litest_disable_tap_drag(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
 
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -2684,7 +4097,7 @@
 	for (ntaps = 0; ntaps <= range; ntaps++) {
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_PRESSED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -2692,7 +4105,7 @@
 
 		event = libinput_get_event(li);
 		ptrev = litest_is_button_event(event,
-					       BTN_LEFT,
+					       button,
 					       LIBINPUT_BUTTON_STATE_RELEASED);
 		curtime = libinput_event_pointer_get_time(ptrev);
 		libinput_event_destroy(event);
@@ -2765,8 +4178,12 @@
 {
 	struct libevdev *evdev = dev->evdev;
 
+	if (dev->which == LITEST_SYNAPTICS_PRESSUREPAD)
+		return false;
+
 	if (libevdev_has_event_code(evdev, EV_ABS, ABS_MT_PRESSURE))
-		return true;
+		return libevdev_get_abs_resolution(evdev,
+						   ABS_MT_PRESSURE) == 0;
 
 	return false;
 }
@@ -2784,6 +4201,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* Finger down is immediately palm */
@@ -2810,6 +4228,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* Finger down is palm after touch begin */
@@ -2837,6 +4256,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* Finger down is palm after tap timeout */
@@ -2867,6 +4287,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* Finger down is palm after tap move threshold */
@@ -2892,21 +4313,62 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
 	/* tap + palm down */
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -2918,7 +4380,7 @@
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
@@ -2933,21 +4395,62 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
 	/* tap + palm down */
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_touch_down_extended(dev, 0, 50, 50, axes);
@@ -2959,14 +4462,14 @@
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
 }
 END_TEST
 
-START_TEST(touchpad_tap_palm_on_tapped_2fg)
+START_TEST(touchpad_tap_palm_on_tapped_doubletap)
 {
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
@@ -2974,21 +4477,80 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    nfingers2 = _i / 3;
+	unsigned int button = 0,
+		     button2 = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
+	if (nfingers2 + 1 > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+	switch (nfingers2) {
+	case 1:
+		button2 = BTN_LEFT;
+		break;
+	case 2:
+		button2 = BTN_RIGHT;
+		break;
+	case 3:
+		button2 = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
-	/* tap + palm down + tap with second finger */
+	/* tap + palm down + tap with additional finger(s) */
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -2996,21 +4558,41 @@
 
 	libinput_dispatch(li);
 
-	litest_touch_down(dev, 1, 50, 50);
-	litest_touch_up(dev, 1);
+	switch (nfingers2) {
+	case 3:
+		litest_touch_down(dev, 3, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 2, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 1, 40, 30);
+		break;
+	}
+	switch (nfingers2) {
+	case 3:
+		litest_touch_up(dev, 3);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 1);
+		break;
+	}
 	libinput_dispatch(li);
 
 	litest_timeout_tap();
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button2,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button2,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_touch_up(dev, 0);
@@ -3026,21 +4608,62 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
 	/* tap + finger down (->drag), finger turns into palm */
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -3052,7 +4675,7 @@
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_touch_up(dev, 0);
@@ -3068,27 +4691,70 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
-	int which = _i; /* ranged test */
-	int this = which % 2,
-	    other = (which + 1) % 2;
+	int this = _i % 2, /* ranged test */
+	    other = (_i + 1) % 2,
+	    nfingers = _i / 2;
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
 	/* tap + finger down, 2nd finger down, finger turns to palm */
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_touch_down(dev, this, 50, 50);
+	libinput_dispatch(li);
+	litest_timeout_tap();
+	libinput_dispatch(li);
 	litest_touch_down(dev, other, 60, 50);
 	libinput_dispatch(li);
 
@@ -3101,7 +4767,7 @@
 	litest_touch_up(dev, other);
 
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_touch_up(dev, this);
@@ -3125,6 +4791,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* 2fg tap with one finger detected as palm */
@@ -3165,6 +4832,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* 2fg tap with one finger detected as palm, that finger is lifted
@@ -3211,6 +4879,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* 3fg tap with one finger detected as palm, that finger is lifted,
@@ -3257,6 +4926,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* 3fg tap with one finger detected as palm, that finger is lifted,
@@ -3308,6 +4978,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* 3fg tap with one finger detected as palm, that finger is lifted,
@@ -3337,20 +5008,61 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
+	int nfingers = _i; /* ranged test */
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
-	litest_touch_down(dev, 0, 50, 50);
-	litest_touch_up(dev, 0);
+	switch (nfingers) {
+	case 3:
+		litest_touch_down(dev, 2, 60, 30);
+		_fallthrough_;
+	case 2:
+		litest_touch_down(dev, 1, 50, 30);
+		_fallthrough_;
+	case 1:
+		litest_touch_down(dev, 0, 40, 30);
+		break;
+	}
+	switch (nfingers) {
+	case 3:
+		litest_touch_up(dev, 2);
+		_fallthrough_;
+	case 2:
+		litest_touch_up(dev, 1);
+		_fallthrough_;
+	case 1:
+		litest_touch_up(dev, 0);
+		break;
+	}
 	libinput_dispatch(li);
 
 	libinput_dispatch(li);
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_PRESSED);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -3360,7 +5072,7 @@
 
 	litest_timeout_tap();
 	litest_assert_button_event(li,
-				   BTN_LEFT,
+				   button,
 				   LIBINPUT_BUTTON_STATE_RELEASED);
 
 	litest_assert_empty_queue(li);
@@ -3375,18 +5087,60 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
-	int range = _i, /* ranged test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -3400,10 +5154,10 @@
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
 		litest_assert_button_event(li,
-					   BTN_LEFT,
+					   button,
 					   LIBINPUT_BUTTON_STATE_PRESSED);
 		litest_assert_button_event(li,
-					   BTN_LEFT,
+					   button,
 					   LIBINPUT_BUTTON_STATE_RELEASED);
 	}
 
@@ -3419,18 +5173,60 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
-	int range = _i, /* ranged test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -3443,10 +5239,10 @@
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
 		litest_assert_button_event(li,
-					   BTN_LEFT,
+					   button,
 					   LIBINPUT_BUTTON_STATE_PRESSED);
 		litest_assert_button_event(li,
-					   BTN_LEFT,
+					   button,
 					   LIBINPUT_BUTTON_STATE_RELEASED);
 	}
 
@@ -3462,18 +5258,60 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
-	int range = _i, /* ranged test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers + 1 > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -3484,8 +5322,29 @@
 
 	/* keep palm finger down */
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 1, 50, 50);
-		litest_touch_up(dev, 1);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 3, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 2, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 1, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 3);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 1);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -3495,10 +5354,10 @@
 
 	for (ntaps = 0; ntaps <= 2 * range + 1; ntaps++) {
 		litest_assert_button_event(li,
-					   BTN_LEFT,
+					   button,
 					   LIBINPUT_BUTTON_STATE_PRESSED);
 		litest_assert_button_event(li,
-					   BTN_LEFT,
+					   button,
 					   LIBINPUT_BUTTON_STATE_RELEASED);
 	}
 
@@ -3515,18 +5374,60 @@
 		{ ABS_MT_PRESSURE, 75 },
 		{ -1, 0 }
 	};
-	int range = _i, /* ranged test */
+	int nfingers = (_i % 3) + 1, /* ranged test */
+	    range = _i / 3, /* looped test */
 	    ntaps;
+	unsigned int button = 0;
 
 	if (!touchpad_has_palm_pressure(dev))
 		return;
 
+	if (nfingers > litest_slot_count(dev))
+		return;
+
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
+
+	switch (nfingers) {
+	case 1:
+		button = BTN_LEFT;
+		break;
+	case 2:
+		button = BTN_RIGHT;
+		break;
+	case 3:
+		button = BTN_MIDDLE;
+		break;
+	default:
+		abort();
+	}
+
 	litest_drain_events(li);
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
-		litest_touch_down(dev, 0, 50, 50);
-		litest_touch_up(dev, 0);
+		switch (nfingers) {
+		case 3:
+			litest_touch_down(dev, 2, 60, 30);
+			_fallthrough_;
+		case 2:
+			litest_touch_down(dev, 1, 50, 30);
+			_fallthrough_;
+		case 1:
+			litest_touch_down(dev, 0, 40, 30);
+			break;
+		}
+		switch (nfingers) {
+		case 3:
+			litest_touch_up(dev, 2);
+			_fallthrough_;
+		case 2:
+			litest_touch_up(dev, 1);
+			_fallthrough_;
+		case 1:
+			litest_touch_up(dev, 0);
+			break;
+		}
+
 		libinput_dispatch(li);
 		msleep(10);
 	}
@@ -3542,10 +5443,10 @@
 
 	for (ntaps = 0; ntaps <= range; ntaps++) {
 		litest_assert_button_event(li,
-					   BTN_LEFT,
+					   button,
 					   LIBINPUT_BUTTON_STATE_PRESSED);
 		litest_assert_button_event(li,
-					   BTN_LEFT,
+					   button,
 					   LIBINPUT_BUTTON_STATE_RELEASED);
 	}
 
@@ -3574,6 +5475,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down_extended(dev, 0, 50, 50, axes);
@@ -3626,6 +5528,7 @@
 	keyboard = litest_add_device(li, LITEST_KEYBOARD);
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -3664,6 +5567,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_push_event_frame(dev);
@@ -3690,118 +5594,126 @@
 
 TEST_COLLECTION(touchpad_tap)
 {
-	struct range any_tap_range = {1, 4};
-	struct range multitap_range = {3, 5};
+	struct range any_tap_range = {3, 12};
+	struct range multitap_range = {9, 15};
 	struct range tap_map_range = { LIBINPUT_CONFIG_TAP_MAP_LRM,
 				       LIBINPUT_CONFIG_TAP_MAP_LMR + 1 };
 	struct range range_2fg = {0, 2};
+	struct range range_2fg_multifinger_tap = {2, 8};
 	struct range range_3fg = {0, 3};
 	struct range range_4fg = {0, 4};
 	struct range range_multifinger = {2, 5};
+	struct range range_multifinger_tap = {1, 4};
+	struct range range_multifinger_doubletap = {3, 12};
 
-	litest_add("tap:1fg", touchpad_1fg_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:1fg", touchpad_1fg_doubletap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add_ranged("tap:1fg", touchpad_1fg_tap_drag_high_delay, LITEST_TOUCHPAD, LITEST_ANY, &any_tap_range);
-	litest_add_ranged("tap:1fg", touchpad_1fg_multitap, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-	litest_add_ranged("tap:1fg", touchpad_1fg_multitap_timeout, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-	litest_add_ranged("tap:1fg", touchpad_1fg_multitap_n_drag_timeout, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-	litest_add_ranged("tap:1fg", touchpad_1fg_multitap_n_drag_tap, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-	litest_add_ranged("tap:1fg", touchpad_1fg_multitap_n_drag_move, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-	litest_add_ranged("tap:1fg", touchpad_1fg_multitap_n_drag_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &multitap_range);
-	litest_add_ranged("tap:1fg", touchpad_1fg_multitap_n_drag_click, LITEST_CLICKPAD, LITEST_ANY, &multitap_range);
-	litest_add("tap:1fg", touchpad_1fg_tap_n_drag, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:1fg", touchpad_1fg_tap_n_drag_draglock, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:1fg", touchpad_1fg_tap_n_drag_draglock_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:1fg", touchpad_1fg_tap_n_drag_draglock_timeout, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:2fg", touchpad_2fg_tap_n_drag, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("tap:2fg", touchpad_2fg_tap_n_drag_3fg_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_APPLE_CLICKPAD);
-	litest_add("tap:2fg", touchpad_2fg_tap_n_drag_3fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add_ranged("tap:2fg", touchpad_2fg_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT, &tap_map_range);
-	litest_add_ranged("tap:2fg", touchpad_2fg_tap_inverted, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &tap_map_range);
-	litest_add("tap:2fg", touchpad_2fg_tap_move_on_release, LITEST_TOUCHPAD|LITEST_SEMI_MT, LITEST_SINGLE_TOUCH);
-	litest_add("tap:2fg", touchpad_2fg_tap_n_hold_first, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("tap:2fg", touchpad_2fg_tap_n_hold_second, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("tap:2fg", touchpad_2fg_tap_quickrelease, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("tap:2fg", touchpad_1fg_tap_click, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("tap:2fg", touchpad_2fg_tap_click, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_SINGLE_TOUCH|LITEST_CLICKPAD);
-
-	litest_add("tap:2fg", touchpad_2fg_tap_click_apple, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-	litest_add("tap:2fg", touchpad_no_2fg_tap_after_move, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("tap:2fg", touchpad_no_2fg_tap_after_timeout, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("tap:2fg", touchpad_no_first_fg_tap_after_move, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add_ranged("tap:3fg", touchpad_3fg_tap_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &tap_map_range);
-	litest_add_ranged("tap:3fg", touchpad_3fg_tap_btntool_inverted, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &tap_map_range);
-	litest_add_ranged("tap:3fg", touchpad_3fg_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &tap_map_range);
-	litest_add("tap:3fg", touchpad_3fg_tap_tap_again, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("tap:3fg", touchpad_3fg_tap_quickrelease, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("tap:3fg", touchpad_3fg_tap_hover_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("tap:3fg", touchpad_3fg_tap_pressure_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add_for_device("tap:3fg", touchpad_3fg_tap_btntool_pointerjump, LITEST_SYNAPTICS_TOPBUTTONPAD);
-	litest_add_for_device("tap:3fg", touchpad_3fg_tap_slot_release_btntool, LITEST_SYNAPTICS_TOPBUTTONPAD);
-	litest_add("tap:3fg", touchpad_3fg_tap_after_scroll, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-
-	litest_add("tap:4fg", touchpad_4fg_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("tap:4fg", touchpad_4fg_tap_quickrelease, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("tap:5fg", touchpad_5fg_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("tap:5fg", touchpad_5fg_tap_quickrelease, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-
-	litest_add_ranged("tap:multifinger", touchpad_move_after_touch, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger);
+	litest_add(touchpad_1fg_tap, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add_ranged(touchpad_doubletap, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_doubletap);
+	litest_add_ranged(touchpad_multitap, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_multitap_timeout, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_multitap_n_drag_timeout, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_multitap_n_drag_high_delay, LITEST_TOUCHPAD, LITEST_ANY, &any_tap_range);
+	litest_add_ranged(touchpad_multitap_n_drag_tap, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_multitap_n_drag_move, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_multitap_n_drag_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &multitap_range);
+	litest_add_ranged(touchpad_multitap_n_drag_click, LITEST_CLICKPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_2fg_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT, &tap_map_range);
+	litest_add_ranged(touchpad_2fg_tap_inverted, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &tap_map_range);
+	litest_add(touchpad_2fg_tap_move_on_release, LITEST_TOUCHPAD|LITEST_SEMI_MT, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_2fg_tap_n_hold_first, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_2fg_tap_n_hold_second, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_2fg_tap_quickrelease, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_1fg_tap_click, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(touchpad_2fg_tap_click, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_SINGLE_TOUCH|LITEST_CLICKPAD);
+
+	litest_add(touchpad_2fg_tap_click_apple, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_no_2fg_tap_after_move, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_no_2fg_tap_after_timeout, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_no_first_fg_tap_after_move, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add_ranged(touchpad_3fg_tap_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &tap_map_range);
+	litest_add_ranged(touchpad_3fg_tap_btntool_inverted, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &tap_map_range);
+	litest_add_ranged(touchpad_3fg_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &tap_map_range);
+	litest_add(touchpad_3fg_tap_tap_again, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_3fg_tap_quickrelease, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_3fg_tap_hover_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_3fg_tap_pressure_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add_for_device(touchpad_3fg_tap_btntool_pointerjump, LITEST_SYNAPTICS_TOPBUTTONPAD);
+	litest_add_for_device(touchpad_3fg_tap_slot_release_btntool, LITEST_SYNAPTICS_TOPBUTTONPAD);
+	litest_add(touchpad_3fg_tap_after_scroll, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+
+	litest_add(touchpad_4fg_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_4fg_tap_quickrelease, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_5fg_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_5fg_tap_quickrelease, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+
+	litest_add_ranged(touchpad_move_after_touch, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger);
+
+	litest_add_ranged(touchpad_tap_n_drag, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_2fg_scroll, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_draglock_2fg_scroll, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_3fg_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_APPLE_CLICKPAD, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_3fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_3fg_swipe, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_draglock_3fg_swipe, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_draglock, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_draglock_tap, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_doubletap);
+	litest_add_ranged(touchpad_tap_n_drag_draglock_timeout, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
 
 	/* Real buttons don't interfere with tapping, so don't run those for
 	   pads with buttons */
-	litest_add("tap:1fg", touchpad_1fg_double_tap_click, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("tap:1fg", touchpad_1fg_tap_n_drag_click, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add_ranged("tap:1fg", touchpad_1fg_multitap_n_drag_tap_click, LITEST_CLICKPAD, LITEST_ANY, &multitap_range);
-	litest_add("tap:1fg", touchpad_1fg_tap_n_drag_draglock_tap_click, LITEST_CLICKPAD, LITEST_ANY);
-
-	litest_add("tap:config", touchpad_tap_default_disabled, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_ANY);
-	litest_add("tap:config", touchpad_tap_default_enabled, LITEST_TOUCHPAD, LITEST_BUTTON);
-	litest_add("tap:config", touchpad_tap_invalid, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:config", touchpad_tap_is_available, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:config", touchpad_tap_is_not_available, LITEST_ANY, LITEST_TOUCHPAD);
-
-	litest_add("tap:config", touchpad_tap_default_map, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:config", touchpad_tap_map_unsupported, LITEST_ANY, LITEST_TOUCHPAD);
-	litest_add("tap:config", touchpad_tap_set_map, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:config", touchpad_tap_set_map_no_tapping, LITEST_ANY, LITEST_TOUCHPAD);
-	litest_add("tap:config", touchpad_tap_get_map_no_tapping, LITEST_ANY, LITEST_TOUCHPAD);
-	litest_add("tap:config", touchpad_tap_map_delayed, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-
-	litest_add("tap:1fg", clickpad_1fg_tap_click, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("tap:2fg", clickpad_2fg_tap_click, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH|LITEST_APPLE_CLICKPAD);
-
-	litest_add("tap:draglock", touchpad_drag_lock_default_disabled, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:draglock", touchpad_drag_lock_default_unavailable, LITEST_ANY, LITEST_TOUCHPAD);
-
-	litest_add("tap:drag", touchpad_drag_default_disabled, LITEST_ANY, LITEST_TOUCHPAD);
-	litest_add("tap:drag", touchpad_drag_default_enabled, LITEST_TOUCHPAD, LITEST_BUTTON);
-	litest_add("tap:drag", touchpad_drag_config_invalid, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:drag", touchpad_drag_config_unsupported, LITEST_ANY, LITEST_TOUCHPAD);
-	litest_add("tap:drag", touchpad_drag_config_enabledisable, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:drag", touchpad_drag_disabled, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:drag", touchpad_drag_disabled_immediate, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add_ranged("tap:1fg", touchpad_drag_disabled_multitap_no_drag, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-
-	litest_add("tap:palm", touchpad_tap_palm_on_idle, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:palm", touchpad_tap_palm_on_touch, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:palm", touchpad_tap_palm_on_touch_hold_timeout, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:palm", touchpad_tap_palm_on_touch_hold_move, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:palm", touchpad_tap_palm_on_tapped, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:palm", touchpad_tap_palm_on_tapped_palm_down, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:palm", touchpad_tap_palm_on_tapped_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("tap:palm", touchpad_tap_palm_on_drag, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_on_drag_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_2fg);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_on_touch_2, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_2fg);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_on_touch_2_retouch, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_2fg);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_on_touch_3, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_3fg);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_on_touch_3_retouch, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_3fg);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_on_touch_4, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_4fg);
-	litest_add("tap:palm", touchpad_tap_palm_after_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_multitap, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_multitap_timeout, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_multitap_down_again, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &multitap_range);
-	litest_add_ranged("tap:palm", touchpad_tap_palm_multitap_click, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
-	litest_add("tap:palm", touchpad_tap_palm_click_then_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:palm", touchpad_tap_palm_dwt_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("tap:palm", touchpad_tap_palm_3fg_start, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add_ranged(touchpad_double_tap_click, LITEST_CLICKPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_n_drag_click, LITEST_CLICKPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_multitap_n_drag_tap_click, LITEST_CLICKPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_tap_n_drag_draglock_tap_click, LITEST_CLICKPAD, LITEST_ANY, &range_multifinger_tap);
+
+	litest_add(touchpad_tap_default_disabled, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_ANY);
+	litest_add(touchpad_tap_default_enabled, LITEST_TOUCHPAD, LITEST_BUTTON);
+	litest_add(touchpad_tap_invalid, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_tap_is_available, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_tap_is_not_available, LITEST_ANY, LITEST_TOUCHPAD);
+
+	litest_add(touchpad_tap_default_map, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_tap_map_unsupported, LITEST_ANY, LITEST_TOUCHPAD);
+	litest_add(touchpad_tap_set_map, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_tap_set_map_no_tapping, LITEST_ANY, LITEST_TOUCHPAD);
+	litest_add(touchpad_tap_get_map_no_tapping, LITEST_ANY, LITEST_TOUCHPAD);
+	litest_add(touchpad_tap_map_delayed, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+
+	litest_add(clickpad_1fg_tap_click, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(clickpad_2fg_tap_click, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH|LITEST_APPLE_CLICKPAD);
+
+	litest_add(touchpad_drag_lock_default_disabled, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_drag_lock_default_unavailable, LITEST_ANY, LITEST_TOUCHPAD);
+
+	litest_add(touchpad_drag_default_disabled, LITEST_ANY, LITEST_TOUCHPAD);
+	litest_add(touchpad_drag_default_enabled, LITEST_TOUCHPAD, LITEST_BUTTON);
+	litest_add(touchpad_drag_config_invalid, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_drag_config_unsupported, LITEST_ANY, LITEST_TOUCHPAD);
+	litest_add(touchpad_drag_config_enabledisable, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add_ranged(touchpad_drag_disabled, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_drag_disabled_immediate, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_drag_disabled_multitap_no_drag, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
+
+	litest_add(touchpad_tap_palm_on_idle, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_tap_palm_on_touch, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_tap_palm_on_touch_hold_timeout, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_tap_palm_on_touch_hold_move, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add_ranged(touchpad_tap_palm_on_tapped, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_palm_on_tapped_palm_down, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_palm_on_tapped_doubletap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_multifinger_doubletap);
+	litest_add_ranged(touchpad_tap_palm_on_drag, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_palm_on_drag_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_2fg_multifinger_tap);
+	litest_add_ranged(touchpad_tap_palm_on_touch_2, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_2fg);
+	litest_add_ranged(touchpad_tap_palm_on_touch_2_retouch, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_2fg);
+	litest_add_ranged(touchpad_tap_palm_on_touch_3, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_3fg);
+	litest_add_ranged(touchpad_tap_palm_on_touch_3_retouch, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_3fg);
+	litest_add_ranged(touchpad_tap_palm_on_touch_4, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &range_4fg);
+	litest_add_ranged(touchpad_tap_palm_after_tap, LITEST_TOUCHPAD, LITEST_ANY, &range_multifinger_tap);
+	litest_add_ranged(touchpad_tap_palm_multitap, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_tap_palm_multitap_timeout, LITEST_TOUCHPAD, LITEST_ANY, &multitap_range);
+	litest_add_ranged(touchpad_tap_palm_multitap_down_again, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH, &multitap_range);
+	litest_add_ranged(touchpad_tap_palm_multitap_click, LITEST_CLICKPAD, LITEST_ANY, &multitap_range);
+	litest_add(touchpad_tap_palm_click_then_tap, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_tap_palm_dwt_tap, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_tap_palm_3fg_start, LITEST_TOUCHPAD, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-touchpad.c third_party_libinput_new/test/test-touchpad.c
--- third_party_libinput_bak/test/test-touchpad.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-touchpad.c	2023-03-30 10:43:05.639385600 +0800
@@ -58,10 +58,9 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -74,10 +73,9 @@
 	ck_assert_notnull(event);
 
 	while (event) {
-		ck_assert_int_eq(libinput_event_get_type(event),
-				 LIBINPUT_EVENT_POINTER_MOTION);
+		struct libinput_event_pointer *ptrev;
 
-		ptrev = libinput_event_get_pointer_event(event);
+		ptrev = litest_is_motion_event(event);
 		ck_assert_int_ge(libinput_event_pointer_get_dx(ptrev), 0);
 		ck_assert_int_eq(libinput_event_pointer_get_dy(ptrev), 0);
 		libinput_event_destroy(event);
@@ -147,16 +145,29 @@
 		return;
 
 	litest_enable_2fg_scroll(dev);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	test_2fg_scroll(dev, 0.1, 40, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     9);
 	test_2fg_scroll(dev, 0.1, -40, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, -9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     -9);
 	test_2fg_scroll(dev, 40, 0.1, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, 9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     9);
 	test_2fg_scroll(dev, -40, 0.1, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, -9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     -9);
 
 	/* 2fg scroll smaller than the threshold should not generate events */
 	test_2fg_scroll(dev, 0.1, 0.1, true);
@@ -169,7 +180,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 	int i;
 	int expected_nevents;
 	double w, h;
@@ -208,11 +218,17 @@
 		expected_nevents++;
 	}
 
+	/* both high-resolution and low-resolution events are generated */
+	expected_nevents *= 2;
+
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 
 	do {
+		struct libinput_event_pointer *ptrev;
+
 		ptrev = litest_is_axis_event(event,
+				LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
 				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
 				LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
 		ck_assert(!libinput_event_pointer_has_axis(ptrev,
@@ -247,15 +263,27 @@
 
 	event = libinput_get_event(li);
 	while (event) {
-		litest_assert_event_type(event, LIBINPUT_EVENT_POINTER_AXIS);
-		ptrev = litest_is_axis_event(event, on_axis,
+		ptrev = litest_is_axis_event(event,
+				LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+				on_axis,
 				LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
 
 		has_on_axis = libinput_event_pointer_has_axis(ptrev, on_axis);
 		has_off_axis = libinput_event_pointer_has_axis(ptrev, off_axis);
 
 		if (has_on_axis && has_off_axis) {
-			val = (libinput_event_pointer_get_axis_value(ptrev, off_axis) == 0.0);
+			val = (litest_event_pointer_get_value(ptrev, off_axis) == 0.0);
+
+			/* There must be an extra low/high-resolution event with
+			 * the same axis value (0.0). */
+			libinput_event_destroy(event);
+			event = libinput_get_event(li);
+			ck_assert_notnull(event);
+			ptrev = litest_is_axis_event(event,
+					     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					     on_axis,
+					     LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
+			ck_assert(val == (litest_event_pointer_get_value(ptrev, off_axis) == 0.0));
 			break;
 		}
 
@@ -378,13 +406,16 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 	double width, height;
 	double y_move = 100;
+	bool last_hi_res_event_found, last_low_res_event_found;
 
 	if (!litest_has_2fg_scroll(dev))
 		return;
 
+	last_hi_res_event_found = false;
+	last_low_res_event_found = false;
+
 	/* We want to move > 5 mm. */
 	ck_assert_int_eq(libinput_device_get_size(dev->libinput_device,
 						  &width,
@@ -392,6 +423,7 @@
 	y_move = 100.0/height * 7;
 
 	litest_enable_2fg_scroll(dev);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 49, 50);
@@ -404,16 +436,28 @@
 	event = libinput_get_event(li);
 	ck_assert_notnull(event);
 
-	/* last event is value 0, tested elsewhere */
-	while (libinput_next_event_type(li) != LIBINPUT_EVENT_NONE) {
+	while (event) {
+		struct libinput_event_pointer *ptrev;
 		double axisval;
-		ck_assert_int_eq(libinput_event_get_type(event),
-				 LIBINPUT_EVENT_POINTER_AXIS);
-		ptrev = libinput_event_get_pointer_event(event);
 
-		axisval = libinput_event_pointer_get_axis_value(ptrev,
+		ptrev = litest_is_axis_event(event,
+					     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+					     0);
+		axisval = litest_event_pointer_get_value(ptrev,
 				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
-		ck_assert(axisval > 0.0);
+
+		if (litest_is_high_res_axis_event(event)) {
+			litest_assert(!last_hi_res_event_found);
+			if (axisval == 0)
+				last_hi_res_event_found = true;
+		} else {
+			litest_assert(!last_low_res_event_found);
+			if (axisval == 0)
+				last_low_res_event_found = true;
+		}
+
+		ck_assert(axisval >= 0.0);
 
 		/* this is to verify we test the right thing, if the value
 		   is greater than scroll.threshold we triggered the wrong
@@ -424,6 +468,8 @@
 		event = libinput_get_event(li);
 	}
 
+	litest_assert(last_low_res_event_found);
+	litest_assert(last_hi_res_event_found);
 	litest_assert_empty_queue(li);
 	libinput_event_destroy(event);
 }
@@ -434,7 +480,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 
 	if (!litest_has_2fg_scroll(dev))
 		return;
@@ -446,11 +491,10 @@
 	litest_wait_for_event_of_type(li, LIBINPUT_EVENT_POINTER_AXIS, -1);
 
 	while ((event = libinput_get_event(li))) {
-		ck_assert_int_eq(libinput_event_get_type(event),
-				 LIBINPUT_EVENT_POINTER_AXIS);
-		ptrev = libinput_event_get_pointer_event(event);
-		ck_assert_int_eq(libinput_event_pointer_get_axis_source(ptrev),
-				 LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
+		litest_is_axis_event(event,
+				     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+				     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+				     LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
 		libinput_event_destroy(event);
 	}
 }
@@ -476,7 +520,7 @@
 				      30, 40,
 				      10);
 
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -503,7 +547,7 @@
 	libinput_dispatch(li);
 	litest_timeout_finger_switch();
 	libinput_dispatch(li);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	litest_touch_move_to(dev, 0, 49, 70, 49, 50, 10);
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_MOTION);
@@ -515,7 +559,7 @@
 	libinput_dispatch(li);
 	litest_timeout_finger_switch();
 	libinput_dispatch(li);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	/* move with second finger */
 	litest_touch_move_to(dev, 1, 51, 70, 51, 50, 10);
@@ -559,7 +603,7 @@
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
 
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -602,13 +646,25 @@
 	libinput_device_config_scroll_set_natural_scroll_enabled(dev->libinput_device, 1);
 
 	test_2fg_scroll(dev, 0.1, 40, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, -9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     -9);
 	test_2fg_scroll(dev, 0.1, -40, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     9);
 	test_2fg_scroll(dev, 40, 0.1, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, -9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     -9);
 	test_2fg_scroll(dev, -40, 0.1, false);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, 9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     9);
 
 }
 END_TEST
@@ -628,7 +684,10 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, -4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     -4);
 	litest_assert_empty_queue(li);
 
 	litest_touch_down(dev, 0, 99, 80);
@@ -636,7 +695,10 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     4);
 	litest_assert_empty_queue(li);
 
 }
@@ -659,7 +721,10 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     4);
 	litest_assert_empty_queue(li);
 
 	litest_touch_down(dev, 0, 99, 80);
@@ -667,7 +732,10 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, -4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     -4);
 	litest_assert_empty_queue(li);
 }
 END_TEST
@@ -703,7 +771,10 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, 4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     4);
 	litest_assert_empty_queue(li);
 
 	litest_touch_down(dev, 0, 70, 99);
@@ -711,7 +782,10 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, -4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     -4);
 	litest_assert_empty_queue(li);
 }
 END_TEST
@@ -729,7 +803,10 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, 4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     4);
 	litest_assert_empty_queue(li);
 
 	litest_touch_down(dev, 0, 70, 99);
@@ -737,7 +814,10 @@
 	litest_touch_up(dev, 0);
 
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, -4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     -4);
 	litest_assert_empty_queue(li);
 }
 END_TEST
@@ -816,7 +896,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 	double width = 0, height = 0;
 	int nevents = 0;
 	double mm; /* one mm in percent of the device */
@@ -860,13 +939,15 @@
 	litest_wait_for_event_of_type(li, LIBINPUT_EVENT_POINTER_AXIS, -1);
 
 	while ((event = libinput_get_event(li))) {
+		struct libinput_event_pointer *ptrev;
 		double value;
 
 		ptrev = litest_is_axis_event(event,
+					     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
 					     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
 					     0);
-		value = libinput_event_pointer_get_axis_value(ptrev,
-							      LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
+		value = litest_event_pointer_get_value(ptrev,
+						       LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
 		ck_assert_double_lt(value, 5.0);
 		libinput_event_destroy(event);
 		nevents++;
@@ -898,7 +979,10 @@
 	litest_touch_up(dev, 0);
 	libinput_dispatch(li);
 
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 4);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     4);
 	litest_assert_empty_queue(li);
 }
 END_TEST
@@ -928,7 +1012,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 
 	litest_drain_events(li);
 	litest_enable_edge_scroll(dev);
@@ -940,10 +1023,12 @@
 	litest_wait_for_event_of_type(li, LIBINPUT_EVENT_POINTER_AXIS, -1);
 
 	while ((event = libinput_get_event(li))) {
-		ck_assert_int_eq(libinput_event_get_type(event),
-				 LIBINPUT_EVENT_POINTER_AXIS);
-		ptrev = libinput_event_get_pointer_event(event);
-		ck_assert_int_eq(libinput_event_pointer_get_axis_source(ptrev),
+		struct libinput_event_pointer *ptrev;
+		ptrev = litest_is_axis_event(event,
+					     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+					     LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
+		ck_assert_int_eq(litest_event_pointer_get_axis_source(ptrev),
 				 LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
 		libinput_event_destroy(event);
 	}
@@ -981,18 +1066,18 @@
 
 	litest_touch_down(dev, 0, 99, 40);
 	litest_touch_move_to(dev, 0, 99, 40, 99, 95, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 	/* in the button zone now, make sure we still get events */
 	litest_touch_move_to(dev, 0, 99, 95, 99, 100, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	/* and out of the zone again */
 	litest_touch_move_to(dev, 0, 99, 100, 99, 70, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	/* still out of the zone */
 	litest_touch_move_to(dev, 0, 99, 70, 99, 50, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -1012,15 +1097,15 @@
 
 	/* within left button */
 	litest_touch_move_to(dev, 0, 20, 99, 40, 99, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	/* over to right button */
 	litest_touch_move_to(dev, 0, 40, 99, 60, 99, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	/* within right button */
 	litest_touch_move_to(dev, 0, 60, 99, 80, 99, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -1029,8 +1114,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
-	double val;
 
 	if (!touchpad_has_horiz_edge_scroll_size(dev))
 		return;
@@ -1041,19 +1124,15 @@
 
 	litest_touch_down(dev, 0, 20, 95);
 	litest_touch_move_to(dev, 0, 20, 95, 70, 95, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	litest_button_click(dev, BTN_LEFT, true);
 	libinput_dispatch(li);
 
-	event = libinput_get_event(li);
-	ptrev = litest_is_axis_event(event,
-				     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
-				     LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
-	val = libinput_event_pointer_get_axis_value(ptrev,
-				    LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL);
-	ck_assert(val == 0.0);
-	libinput_event_destroy(event);
+	litest_assert_axis_end_sequence(li,
+					LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+					LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
 
 	event = libinput_get_event(li);
 	litest_is_button_event(event,
@@ -1085,8 +1164,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
-	double val;
 
 	if (!touchpad_has_horiz_edge_scroll_size(dev))
 		return;
@@ -1097,19 +1174,15 @@
 
 	litest_touch_down(dev, 0, 20, 95);
 	litest_touch_move_to(dev, 0, 20, 95, 70, 95, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	litest_button_click(dev, BTN_LEFT, true);
 	libinput_dispatch(li);
 
-	event = libinput_get_event(li);
-	ptrev = litest_is_axis_event(event,
-				     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
-				     LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
-	val = libinput_event_pointer_get_axis_value(ptrev,
-				    LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL);
-	ck_assert(val == 0.0);
-	libinput_event_destroy(event);
+	litest_assert_axis_end_sequence(li,
+					LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+					LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
 
 	event = libinput_get_event(li);
 	litest_is_button_event(event,
@@ -1144,15 +1217,14 @@
 	litest_touch_down(dev, 0, 99, 20);
 	litest_touch_move_to(dev, 0, 99, 20, 99, 50, 15);
 	litest_touch_move_to(dev, 0, 99, 50, 20, 50, 15);
-	litest_assert_only_typed_events(li,
-					LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
+
 	litest_touch_move_to(dev, 0, 20, 50, 20, 20, 15);
 	litest_touch_move_to(dev, 0, 20, 20, 99, 20, 15);
 	litest_assert_empty_queue(li);
 
 	litest_touch_move_to(dev, 0, 99, 20, 99, 50, 15);
-	litest_assert_only_typed_events(li,
-					LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -1182,7 +1254,7 @@
 	litest_enable_2fg_scroll(dev);
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 99, 50);
@@ -1208,7 +1280,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 20, 1);
@@ -1235,7 +1307,7 @@
 	litest_touch_move_to(dev, 0, 99, 50, 99, 70, 5);
 	litest_touch_up(dev, 0);
 
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -1251,6 +1323,7 @@
 	litest_enable_2fg_scroll(dev);
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	/* Run for non-clickpads only: make sure the bottom corners trigger
 	   palm detection too */
@@ -1280,6 +1353,7 @@
 	litest_enable_2fg_scroll(dev);
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	/* Run for non-clickpads only: make sure the bottom corners trigger
 	   palm detection too */
@@ -1311,7 +1385,7 @@
 	litest_enable_2fg_scroll(dev);
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 99, 20);
@@ -1330,7 +1404,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 20, 1);
@@ -1353,7 +1427,7 @@
 	litest_enable_2fg_scroll(dev);
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 99, 50);
@@ -1377,7 +1451,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 1);
@@ -1401,6 +1475,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	/* moving non-palm into the edge does not label it as palm */
 	litest_drain_events(li);
@@ -1430,6 +1505,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	/* moving non-palm into the edge does not label it as palm */
 	litest_drain_events(li);
@@ -1459,7 +1535,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 1);
@@ -1480,7 +1556,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 95, 5);
@@ -1523,7 +1599,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_buttonareas(dev);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 99, 99);
@@ -1578,7 +1654,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_clickfinger(dev);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 95, 5);
@@ -1634,7 +1710,7 @@
 	litest_assert_empty_queue(li);
 
 	litest_touch_move_two_touches(dev, 99, 50, 50, 50, 0, -20, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -1731,6 +1807,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_push_event_frame(dev);
@@ -1773,6 +1850,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_push_event_frame(dev);
@@ -1795,8 +1873,12 @@
 {
 	struct libevdev *evdev = dev->evdev;
 
+	if (dev->which == LITEST_SYNAPTICS_PRESSUREPAD)
+		return false;
+
 	if (libevdev_has_event_code(evdev, EV_ABS, ABS_MT_PRESSURE))
-		return true;
+		return libevdev_get_abs_resolution(evdev,
+						   ABS_MT_PRESSURE) == 0;
 
 	return false;
 }
@@ -1814,6 +1896,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down_extended(dev, 0, 50, 99, axes);
@@ -1838,6 +1921,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_clickfinger(dev);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* event after touch down is palm */
@@ -1871,6 +1955,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_clickfinger(dev);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* event in state HOLD is thumb */
@@ -1905,6 +1990,7 @@
 
 	litest_enable_tap(dev->libinput_device);
 	litest_enable_clickfinger(dev);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* event in state HOLD is thumb */
@@ -1952,6 +2038,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* trigger thumb detection by pressure after a slight movement */
@@ -1991,6 +2078,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -2017,6 +2105,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 80, 90);
@@ -2044,6 +2133,7 @@
 
 	litest_enable_2fg_scroll(dev);
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 99, 50);
@@ -2070,6 +2160,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -2109,6 +2200,7 @@
 
 	litest_enable_clickfinger(dev);
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down_extended(dev, 0, 50, 95, axes);
@@ -2142,6 +2234,7 @@
 
 	litest_enable_clickfinger(dev);
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down_extended(dev, 0, 50, 95, axes);
@@ -2191,6 +2284,7 @@
 
 	litest_enable_clickfinger(dev);
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down_extended(dev, 0, 50, 95, axes);
@@ -2226,6 +2320,7 @@
 
 	litest_enable_clickfinger(dev);
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down_extended(dev, 0, 50, 95, axes);
@@ -2415,6 +2510,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	status = libinput_device_config_left_handed_set(d, 1);
 	ck_assert_int_eq(status, LIBINPUT_CONFIG_STATUS_SUCCESS);
@@ -2449,6 +2545,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	status = libinput_device_config_left_handed_set(d, 1);
 	ck_assert_int_eq(status, LIBINPUT_CONFIG_STATUS_SUCCESS);
@@ -2592,7 +2689,6 @@
 	struct libinput *li = dev->libinput;
 	enum libinput_config_status status;
 	struct libinput_event *event;
-	struct libinput_event_pointer *p;
 	bool rotate = touchpad_has_rotation(dev->evdev);
 
 	if (!libinput_device_config_left_handed_is_available(d))
@@ -2611,6 +2707,7 @@
 	event = libinput_get_event(li);
 	ck_assert_notnull(event);
 	do {
+		struct libinput_event_pointer *p;
 		double x, y, ux, uy;
 
 		p = litest_is_motion_event(event);
@@ -3207,7 +3304,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_hover_start(dev, 0, 50, 50);
@@ -3299,7 +3396,8 @@
 	litest_event(trackpoint, EV_SYN, SYN_REPORT, 0);
 	litest_button_click(touchpad, BTN_2, false);
 
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li,
+				       LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS);
 
 	litest_delete_device(trackpoint);
 }
@@ -3394,7 +3492,6 @@
 	struct litest_device *trackpoint;
 	struct libinput *li = touchpad->libinput;
 	struct libinput_event *e;
-	struct libinput_event_pointer *pev;
 	double val;
 
 	trackpoint = litest_add_device(li,
@@ -3402,19 +3499,22 @@
 
 	litest_drain_events(li);
 
-	litest_touch_down(touchpad, 0, 49, 70);
-	litest_touch_down(touchpad, 1, 51, 70);
-	litest_touch_move_two_touches(touchpad, 49, 70, 51, 70, 0, -40, 10);
+	litest_touch_down(touchpad, 0, 40, 70);
+	litest_touch_down(touchpad, 1, 60, 70);
+	litest_touch_move_two_touches(touchpad, 40, 70, 60, 70, 0, -40, 10);
 
 	libinput_dispatch(li);
 	litest_wait_for_event(li);
 
 	/* Make sure we get scroll events but _not_ the scroll release */
 	while ((e = libinput_get_event(li))) {
-		ck_assert_int_eq(libinput_event_get_type(e),
-				 LIBINPUT_EVENT_POINTER_AXIS);
-		pev = libinput_event_get_pointer_event(e);
-		val = libinput_event_pointer_get_axis_value(pev,
+		struct libinput_event_pointer *pev;
+
+		pev = litest_is_axis_event(e,
+					   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					   LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+					   0);
+		val = litest_event_pointer_get_value(pev,
 				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
 		ck_assert(val != 0.0);
 		libinput_event_destroy(e);
@@ -3428,13 +3528,16 @@
 	litest_touch_move_to(touchpad, 0, 40, 30, 40, 70, 10);
 	litest_touch_move_to(touchpad, 1, 60, 30, 60, 70, 10);
 
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	while ((e = libinput_get_event(li))) {
-		ck_assert_int_eq(libinput_event_get_type(e),
-				 LIBINPUT_EVENT_POINTER_AXIS);
-		pev = libinput_event_get_pointer_event(e);
-		val = libinput_event_pointer_get_axis_value(pev,
+		struct libinput_event_pointer *pev;
+
+		pev = litest_is_axis_event(e,
+					   LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					   LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+					   0);
+		val = litest_event_pointer_get_value(pev,
 				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
 		ck_assert(val != 0.0);
 		libinput_event_destroy(e);
@@ -3453,7 +3556,7 @@
 	   */
 	litest_touch_move_to(touchpad, 0, 40, 70, 40, 60, 10);
 	litest_touch_move_to(touchpad, 1, 60, 70, 60, 60, 10);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 	litest_touch_move_to(touchpad, 0, 40, 60, 40, 30, 10);
 	litest_touch_move_to(touchpad, 1, 60, 60, 60, 30, 10);
 
@@ -3463,6 +3566,7 @@
 	libinput_dispatch(li);
 
 	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
 			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
 			     -1);
 
@@ -3494,8 +3598,6 @@
 {
 	struct litest_device *dev;
 	struct libinput *libinput1, *libinput2;
-	struct libinput_event *ev1, *ev2;
-	struct libinput_event_pointer *p1, *p2;
 	int axis = _i; /* looped test */
 	int x = 40, y = 60;
 
@@ -3503,6 +3605,7 @@
 	libinput1 = dev->libinput;
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	litest_touch_down(dev, 0, x, y);
 	litest_touch_up(dev, 0);
@@ -3529,6 +3632,9 @@
 	litest_wait_for_event(libinput2);
 
 	while (libinput_next_event_type(libinput1)) {
+		struct libinput_event *ev1, *ev2;
+		struct libinput_event_pointer *p1, *p2;
+
 		ev1 = libinput_get_event(libinput1);
 		ev2 = libinput_get_event(libinput2);
 
@@ -3630,6 +3736,7 @@
 
 	litest_drain_events(li);
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	litest_touch_down(dev, 0, 10, 10);
 	libinput_dispatch(li);
@@ -3655,7 +3762,7 @@
 	litest_touch_move_two_touches(dev, 50, 50, 70, 50, 0, -20, 10);
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	/* pointer motion still works? */
 	litest_touch_down(dev, 0, 50, 50);
@@ -3677,6 +3784,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -3712,6 +3820,7 @@
 		return;
 
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 
 	/* Yubikey is initialized first */
 	yubikey = litest_add_device(li, LITEST_YUBIKEY);
@@ -3755,6 +3864,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -3793,6 +3903,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -3830,6 +3941,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -3857,6 +3969,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -3906,6 +4019,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -3956,6 +4070,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -3997,6 +4112,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	for (i = 0; i < 5; i++) {
@@ -4035,6 +4151,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	for (i = 0; i < 5; i++) {
@@ -4087,6 +4204,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	ARRAY_FOR_EACH(modifiers, key) {
@@ -4132,6 +4250,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	ARRAY_FOR_EACH(modifiers, key) {
@@ -4181,6 +4300,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	ARRAY_FOR_EACH(modifiers, key) {
@@ -4234,6 +4354,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	ARRAY_FOR_EACH(modifiers, key) {
@@ -4281,6 +4402,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	for (key = KEY_F1; key < KEY_CNT; key++) {
@@ -4315,6 +4437,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_enable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4345,6 +4468,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_enable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4379,6 +4503,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4450,7 +4575,6 @@
 	struct litest_device *touchpad = litest_current_device();
 	struct litest_device *keyboard;
 	struct libinput *li = touchpad->libinput;
-	struct libinput_event_pointer *stop_event;
 
 	if (!has_disable_while_typing(touchpad))
 		return;
@@ -4465,19 +4589,20 @@
 	litest_timeout_edgescroll();
 	litest_touch_move_to(touchpad, 0, 99, 20, 99, 30, 10);
 	libinput_dispatch(li);
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
 	litest_keyboard_key(keyboard, KEY_A, false);
 	litest_keyboard_key(keyboard, KEY_A, true);
 	litest_keyboard_key(keyboard, KEY_A, false);
 
-	/* scroll stop event */
+	/* scroll stop events (low and high resolution) */
 	litest_wait_for_event(li);
-	stop_event = litest_is_axis_event(libinput_get_event(li),
-					  LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
-					  LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
-	libinput_event_destroy(libinput_event_pointer_get_base_event(stop_event));
+	litest_assert_axis_end_sequence(li,
+					LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+					LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+					LIBINPUT_POINTER_AXIS_SOURCE_FINGER);
+
 	litest_assert_only_typed_events(li, LIBINPUT_EVENT_KEYBOARD_KEY);
 
 	litest_timeout_dwt_long();
@@ -4583,6 +4708,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4612,6 +4738,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4654,6 +4781,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4685,6 +4813,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4719,6 +4848,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4751,6 +4881,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4785,6 +4916,7 @@
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_disable_tap(touchpad->libinput_device);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	litest_keyboard_key(keyboard, KEY_A, true);
@@ -4813,6 +4945,7 @@
 
 	litest_enable_tap(touchpad->libinput_device);
 	disable_dwt(touchpad);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_drain_events(li);
@@ -4851,6 +4984,7 @@
 
 	litest_enable_tap(touchpad->libinput_device);
 	enable_dwt(touchpad);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 
 	keyboard = dwt_init_paired_keyboard(li, touchpad);
 	litest_drain_events(li);
@@ -4985,6 +5119,23 @@
 }
 END_TEST
 
+START_TEST(touchpad_dwt_remove_before_keyboard)
+{
+	struct litest_device *keyboard = litest_current_device();
+	struct litest_device *touchpad;
+	struct libinput *li = keyboard->libinput;
+
+	touchpad = litest_add_device(li, LITEST_SYNAPTICS_RMI4);
+	ck_assert(has_disable_while_typing(touchpad));
+
+	libinput_dispatch(li);
+
+	/* remove the touchpad before the keyboard.
+	 * this test can fail in valgrind only */
+	litest_delete_device(touchpad);
+}
+END_TEST
+
 START_TEST(touchpad_dwt_multiple_keyboards_bothkeys)
 {
 	struct litest_device *touchpad = litest_current_device();
@@ -5111,7 +5262,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* Thumb below lower line - slow movement - no events */
@@ -5136,7 +5287,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* Thumb below lower line - fast movement - events */
@@ -5159,33 +5310,38 @@
 
 	litest_disable_tap(dev->libinput_device);
 	litest_enable_2fg_scroll(dev);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	if (libevdev_get_num_slots(dev->evdev) < 3)
 		return;
 
 	litest_drain_events(li);
 
-	/* exceed the speed movement threshold in slot 0 */
+	/* exceed the speed movement threshold in slot 0, then lift the
+	 * finger */
 	litest_touch_down(dev, 0, 50, 20);
 	litest_touch_move_to(dev, 0, 50, 20, 70, 99, 15);
 	litest_touch_up(dev, 0);
 
 	litest_drain_events(li);
 
-	/* scroll in slots 1 and 2, despite another finger down this is a
-	 * 2fg gesture */
+	/* now scroll in slots 1 and 2, this should be a normal scroll event
+	 * despite slot 0 exceeding the speed threshold earlier */
 	litest_touch_down(dev, 1, 50, 50);
 	litest_touch_down(dev, 2, 55, 50);
 	libinput_dispatch(li);
 	for (int i = 0, y = 50; i < 10; i++, y++) {
 		litest_touch_move_to(dev, 1, 50, y, 50, y + 1, 1);
-		litest_touch_move_to(dev, 2, 55, y, 50, y + 1, 1);
+		litest_touch_move_to(dev, 2, 55, y, 55, y + 1, 1);
 	}
 	libinput_dispatch(li);
 	litest_touch_up(dev, 1);
 	litest_touch_up(dev, 2);
 	libinput_dispatch(li);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 2);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     2);
 
 }
 END_TEST
@@ -5200,6 +5356,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	libinput_device_config_click_set_method(dev->libinput_device,
 						LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER);
@@ -5254,6 +5411,7 @@
 		return;
 
 	litest_disable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	libinput_device_config_click_set_method(dev->libinput_device,
 						LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS);
@@ -5284,6 +5442,7 @@
 
 	litest_disable_tap(dev->libinput_device);
 	litest_enable_clickfinger(dev);
+	litest_disable_hold_gestures(dev->libinput_device);
 
 	if (!has_thumb_detect(dev))
 		return;
@@ -5307,7 +5466,7 @@
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
 
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -5528,7 +5687,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 	int first, second;
 
 	/* Synaptics touchpads sometimes end the wrong touchpoint on finger
@@ -5580,6 +5738,8 @@
 		libinput_dispatch(li);
 		event = libinput_get_event(li);
 		do {
+			struct libinput_event_pointer *ptrev;
+
 			ptrev = litest_is_motion_event(event);
 			ck_assert_double_eq(libinput_event_pointer_get_dx(ptrev), 0.0);
 			ck_assert_double_lt(libinput_event_pointer_get_dy(ptrev), 1.0);
@@ -5622,10 +5782,9 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 
 	litest_disable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -5638,6 +5797,7 @@
 	ck_assert_notnull(event);
 
 	while (event) {
+		struct libinput_event_pointer *ptrev;
 		uint64_t utime;
 
 		ptrev = litest_is_motion_event(event);
@@ -5656,7 +5816,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 
 	litest_touch_down(dev, 0, 20, 30);
 	litest_touch_move_to(dev, 0, 20, 30, 90, 30, 10);
@@ -5676,6 +5835,7 @@
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 	do {
+		struct libinput_event_pointer *ptrev;
 		double dx, dy;
 
 		ptrev = litest_is_motion_event(event);
@@ -5695,7 +5855,6 @@
 	struct litest_device *dev = litest_current_device();
 	struct libinput *li = dev->libinput;
 	struct libinput_event *event;
-	struct libinput_event_pointer *ptrev;
 
 	litest_touch_down(dev, 0, 20, 30);
 	litest_touch_move_to(dev, 0, 20, 30, 90, 30, 10);
@@ -5716,6 +5875,7 @@
 	libinput_dispatch(li);
 	event = libinput_get_event(li);
 	do {
+		struct libinput_event_pointer *ptrev;
 		double dx, dy;
 
 		ptrev = litest_is_motion_event(event);
@@ -5913,8 +6073,12 @@
 {
 	struct libevdev *evdev = dev->evdev;
 
+	if (dev->which == LITEST_SYNAPTICS_PRESSUREPAD)
+		return false;
+
 	if (libevdev_has_event_code(evdev, EV_ABS, ABS_MT_PRESSURE))
-		return true;
+		return libevdev_get_abs_resolution(evdev,
+						   ABS_MT_PRESSURE) == 0;
 
 	if (libevdev_has_event_code(evdev, EV_ABS, ABS_PRESSURE) &&
 	    !libevdev_has_event_code(evdev, EV_ABS, ABS_MT_SLOT))
@@ -5975,7 +6139,7 @@
 	litest_touch_down(dev, 0, 30, 50);
 	litest_touch_down_extended(dev, 1, 50, 50, axes);
 	libinput_dispatch(li);
-	litest_touch_move_to(dev, 0, 50, 50, 80, 80, 10);
+	litest_touch_move_to(dev, 0, 30, 50, 80, 80, 10);
 	libinput_dispatch(li);
 	litest_assert_only_typed_events(li,
 					LIBINPUT_EVENT_POINTER_MOTION);
@@ -6036,6 +6200,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down_extended(dev, 0, 50, 50, axes);
@@ -6059,6 +6224,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* tap but too light */
@@ -6086,6 +6252,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* double-tap with one finger too light */
@@ -6132,6 +6299,7 @@
 		return;
 
 	litest_enable_tap(dev->libinput_device);
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	/* Two light touches down, doesn't count */
@@ -6202,7 +6370,10 @@
 	litest_pop_event_frame(dev);
 	libinput_dispatch(li);
 
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 0);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_FINGER,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     0);
 
 	litest_push_event_frame(dev);
 	litest_touch_move_extended(dev, 0, 40, 35, axes);
@@ -6533,7 +6704,7 @@
 	litest_touch_up(dev, 0);
 	litest_touch_up(dev, 1);
 
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -6601,7 +6772,7 @@
 	litest_touch_up(dev, 1);
 	litest_touch_up(dev, 0);
 
-	litest_assert_only_typed_events(li, LIBINPUT_EVENT_POINTER_AXIS);
+	litest_assert_only_axis_events(li, LIBINPUT_EVENT_POINTER_SCROLL_FINGER);
 }
 END_TEST
 
@@ -6654,6 +6825,7 @@
 	litest_grab_device(tabletmode);
 
 	litest_disable_tap(tp->libinput_device);
+	litest_disable_hold_gestures(tp->libinput_device);
 
 	/* ABBA test for touchpad internal suspend:
 	 *  reason A on
@@ -6792,6 +6964,7 @@
 	litest_grab_device(tabletmode);
 
 	litest_disable_tap(tp->libinput_device);
+	litest_disable_hold_gestures(tp->libinput_device);
 
 	/* ABAB test for touchpad internal suspend:
 	 *  reason A on
@@ -6935,7 +7108,7 @@
 	struct libinput *li = dev->libinput;
 
 	litest_enable_tap(dev->libinput_device);
-
+	litest_disable_hold_gestures(dev->libinput_device);
 	litest_drain_events(li);
 
 	litest_touch_down(dev, 0, 50, 50);
@@ -6986,203 +7159,204 @@
 	struct range twice = {0, 2 };
 	struct range five_fingers = {1, 6};
 
-	litest_add("touchpad:motion", touchpad_1fg_motion, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:motion", touchpad_2fg_no_motion, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_1fg_motion, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_2fg_no_motion, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
 
-	litest_add("touchpad:scroll", touchpad_2fg_scroll, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("touchpad:scroll", touchpad_2fg_scroll_initially_diagonal, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("touchpad:scroll", touchpad_2fg_scroll_axis_lock, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("touchpad:scroll", touchpad_2fg_scroll_axis_lock_switch, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-
-	litest_add("touchpad:scroll", touchpad_2fg_scroll_slow_distance, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:scroll", touchpad_2fg_scroll_return_to_motion, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:scroll", touchpad_2fg_scroll_source, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:scroll", touchpad_2fg_scroll_semi_mt, LITEST_SEMI_MT, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:scroll", touchpad_2fg_scroll_from_btnareas, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:scroll", touchpad_scroll_natural_defaults, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_scroll_natural_enable_config, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_scroll_natural_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:scroll", touchpad_scroll_natural_edge, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:scroll", touchpad_scroll_defaults, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_vert, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_horiz, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_horiz_clickpad, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_no_horiz, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_no_motion, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_no_edge_after_motion, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_timeout, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_source, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_no_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_into_buttonareas, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_within_buttonareas, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_buttonareas_click_stops_scroll, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_clickfinger_click_stops_scroll, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:scroll", touchpad_edge_scroll_into_area, LITEST_TOUCHPAD, LITEST_ANY);
-
-	litest_add("touchpad:palm", touchpad_palm_detect_at_edge, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_at_top, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
-	litest_add("touchpad:palm", touchpad_palm_detect_at_bottom_corners, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("touchpad:palm", touchpad_palm_detect_at_top_corners, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
-	litest_add("touchpad:palm", touchpad_palm_detect_palm_becomes_pointer, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_top_palm_becomes_pointer, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
-	litest_add("touchpad:palm", touchpad_palm_detect_palm_stays_palm, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_top_palm_stays_palm, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
-	litest_add("touchpad:palm", touchpad_palm_detect_no_palm_moving_into_edges, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_no_palm_moving_into_top, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
-	litest_add("touchpad:palm", touchpad_palm_detect_no_tap_top_edge, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
-	litest_add("touchpad:palm", touchpad_palm_detect_tap_hardbuttons, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("touchpad:palm", touchpad_palm_detect_tap_softbuttons, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_tap_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_no_palm_detect_at_edge_for_edge_scrolling, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("touchpad:palm", touchpad_no_palm_detect_2fg_scroll, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_both_edges, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_tool_palm, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_tool_palm_on_off, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_tool_palm_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_tool_palm_tap_after, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-
-	litest_add("touchpad:palm", touchpad_palm_detect_touch_size, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_touch_size_late, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_touch_size_keep_palm, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_touch_size_after_edge, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_touch_size_after_dwt, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-
-	litest_add("touchpad:palm", touchpad_palm_detect_pressure, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_pressure_late_tap, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_pressure_tap_hold, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_pressure_tap_hold_2ndfg, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_move_and_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_detect_pressure_late, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_pressure_keep_palm, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_pressure_after_edge, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_detect_pressure_after_dwt, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:palm", touchpad_palm_clickfinger_pressure, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_clickfinger_pressure_2fg, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_clickfinger_size, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:palm", touchpad_palm_clickfinger_size_2fg, LITEST_CLICKPAD, LITEST_ANY);
-
-	litest_add("touchpad:left-handed", touchpad_left_handed, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add_for_device("touchpad:left-handed", touchpad_left_handed_appletouch, LITEST_APPLETOUCH);
-	litest_add("touchpad:left-handed", touchpad_left_handed_clickpad, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:left-handed", touchpad_left_handed_clickfinger, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:left-handed", touchpad_left_handed_tapping, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:left-handed", touchpad_left_handed_tapping_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:left-handed", touchpad_left_handed_delayed, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_CLICKPAD);
-	litest_add("touchpad:left-handed", touchpad_left_handed_clickpad_delayed, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
-	litest_add("touchpad:left-handed", touchpad_left_handed_rotation, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_2fg_scroll, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_2fg_scroll_initially_diagonal, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_2fg_scroll_axis_lock, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_2fg_scroll_axis_lock_switch, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+
+	litest_add(touchpad_2fg_scroll_slow_distance, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_2fg_scroll_return_to_motion, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_2fg_scroll_source, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_2fg_scroll_semi_mt, LITEST_SEMI_MT, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_2fg_scroll_from_btnareas, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_scroll_natural_defaults, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_scroll_natural_enable_config, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_scroll_natural_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_scroll_natural_edge, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_scroll_defaults, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_vert, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_horiz, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_edge_scroll_horiz_clickpad, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_no_horiz, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_edge_scroll_no_motion, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_no_edge_after_motion, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_timeout, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_source, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_no_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_edge_scroll_into_buttonareas, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_within_buttonareas, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_buttonareas_click_stops_scroll, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_clickfinger_click_stops_scroll, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_edge_scroll_into_area, LITEST_TOUCHPAD, LITEST_ANY);
+
+	litest_add(touchpad_palm_detect_at_edge, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_at_top, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
+	litest_add(touchpad_palm_detect_at_bottom_corners, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_palm_detect_at_top_corners, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
+	litest_add(touchpad_palm_detect_palm_becomes_pointer, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_top_palm_becomes_pointer, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
+	litest_add(touchpad_palm_detect_palm_stays_palm, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_top_palm_stays_palm, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
+	litest_add(touchpad_palm_detect_no_palm_moving_into_edges, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_no_palm_moving_into_top, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
+	litest_add(touchpad_palm_detect_no_tap_top_edge, LITEST_TOUCHPAD, LITEST_TOPBUTTONPAD);
+	litest_add(touchpad_palm_detect_tap_hardbuttons, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_palm_detect_tap_softbuttons, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_tap_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_no_palm_detect_at_edge_for_edge_scrolling, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_no_palm_detect_2fg_scroll, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_both_edges, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_tool_palm, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_tool_palm_on_off, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_tool_palm_tap, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_tool_palm_tap_after, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+
+	litest_add(touchpad_palm_detect_touch_size, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_touch_size_late, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_touch_size_keep_palm, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_touch_size_after_edge, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_touch_size_after_dwt, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+
+	litest_add(touchpad_palm_detect_pressure, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_pressure_late_tap, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_pressure_tap_hold, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_pressure_tap_hold_2ndfg, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_move_and_tap, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_palm_detect_pressure_late, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_pressure_keep_palm, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_pressure_after_edge, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_detect_pressure_after_dwt, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_palm_clickfinger_pressure, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_clickfinger_pressure_2fg, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_clickfinger_size, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_palm_clickfinger_size_2fg, LITEST_CLICKPAD, LITEST_ANY);
+
+	litest_add(touchpad_left_handed, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add_for_device(touchpad_left_handed_appletouch, LITEST_APPLETOUCH);
+	litest_add(touchpad_left_handed_clickpad, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(touchpad_left_handed_clickfinger, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_left_handed_tapping, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_left_handed_tapping_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_left_handed_delayed, LITEST_TOUCHPAD|LITEST_BUTTON, LITEST_CLICKPAD);
+	litest_add(touchpad_left_handed_clickpad_delayed, LITEST_CLICKPAD, LITEST_APPLE_CLICKPAD);
+	litest_add(touchpad_left_handed_rotation, LITEST_TOUCHPAD, LITEST_ANY);
 
 	/* Semi-MT hover tests aren't generic, they only work on this device and
 	 * ignore the semi-mt capability (it doesn't matter for the tests) */
-	litest_add_for_device("touchpad:semi-mt-hover", touchpad_semi_mt_hover_noevent, LITEST_SYNAPTICS_HOVER_SEMI_MT);
-	litest_add_for_device("touchpad:semi-mt-hover", touchpad_semi_mt_hover_down, LITEST_SYNAPTICS_HOVER_SEMI_MT);
-	litest_add_for_device("touchpad:semi-mt-hover", touchpad_semi_mt_hover_down_up, LITEST_SYNAPTICS_HOVER_SEMI_MT);
-	litest_add_for_device("touchpad:semi-mt-hover", touchpad_semi_mt_hover_down_hover_down, LITEST_SYNAPTICS_HOVER_SEMI_MT);
-	litest_add_for_device("touchpad:semi-mt-hover", touchpad_semi_mt_hover_2fg_noevent, LITEST_SYNAPTICS_HOVER_SEMI_MT);
-	litest_add_for_device("touchpad:semi-mt-hover", touchpad_semi_mt_hover_2fg_1fg_down, LITEST_SYNAPTICS_HOVER_SEMI_MT);
-	litest_add_for_device("touchpad:semi-mt-hover", touchpad_semi_mt_hover_2fg_up, LITEST_SYNAPTICS_HOVER_SEMI_MT);
-
-	litest_add("touchpad:hover", touchpad_hover_noevent, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
-	litest_add("touchpad:hover", touchpad_hover_down, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
-	litest_add("touchpad:hover", touchpad_hover_down_up, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
-	litest_add("touchpad:hover", touchpad_hover_down_hover_down, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
-	litest_add("touchpad:hover", touchpad_hover_2fg_noevent, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
-	litest_add("touchpad:hover", touchpad_hover_2fg_1fg_down, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
-	litest_add("touchpad:hover", touchpad_hover_1fg_tap, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
-
-	litest_add_for_device("touchpad:trackpoint", touchpad_trackpoint_buttons, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
-	litest_add_for_device("touchpad:trackpoint", touchpad_trackpoint_mb_scroll, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
-	litest_add_for_device("touchpad:trackpoint", touchpad_trackpoint_mb_click, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
-	litest_add_for_device("touchpad:trackpoint", touchpad_trackpoint_buttons_softbuttons, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
-	litest_add_for_device("touchpad:trackpoint", touchpad_trackpoint_buttons_2fg_scroll, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
-	litest_add_for_device("touchpad:trackpoint", touchpad_trackpoint_no_trackpoint, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
-
-	litest_add_ranged("touchpad:state", touchpad_initial_state, LITEST_TOUCHPAD, LITEST_ANY, &axis_range);
-	litest_add_ranged("touchpad:state", touchpad_fingers_down_before_init, LITEST_TOUCHPAD, LITEST_ANY, &five_fingers);
-	litest_add("touchpad:state", touchpad_state_after_syn_dropped_2fg_change, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-
-	litest_add("touchpad:dwt", touchpad_dwt, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add_for_device("touchpad:dwt", touchpad_dwt_ext_and_int_keyboard, LITEST_SYNAPTICS_I2C);
-	litest_add("touchpad:dwt", touchpad_dwt_enable_touch, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_touch_hold, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_key_hold, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_key_hold_timeout, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_key_hold_timeout_existing_touch, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_key_hold_timeout_existing_touch_cornercase, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_type, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_type_short_timeout, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_modifier_no_dwt, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_modifier_combo_no_dwt, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_modifier_combo_dwt_after, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_modifier_combo_dwt_remains, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_fkeys_no_dwt, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_tap_drag, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_click, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_edge_scroll, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("touchpad:dwt", touchpad_dwt_edge_scroll_interrupt, LITEST_TOUCHPAD, LITEST_CLICKPAD);
-	litest_add("touchpad:dwt", touchpad_dwt_config_default_on, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_config_default_off, LITEST_ANY, LITEST_TOUCHPAD);
-	litest_add("touchpad:dwt", touchpad_dwt_disabled, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_disable_during_touch, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_disable_before_touch, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_disable_during_key_release, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_disable_during_key_hold, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_enable_during_touch, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_enable_before_touch, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_enable_during_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:dwt", touchpad_dwt_remove_kbd_while_active, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add_for_device("touchpad:dwt", touchpad_dwt_apple, LITEST_BCM5974);
-	litest_add_for_device("touchpad:dwt", touchpad_dwt_acer_hawaii, LITEST_ACER_HAWAII_TOUCHPAD);
-	litest_add_for_device("touchpad:dwt", touchpad_dwt_multiple_keyboards, LITEST_SYNAPTICS_I2C);
-	litest_add_for_device("touchpad:dwt", touchpad_dwt_multiple_keyboards_bothkeys, LITEST_SYNAPTICS_I2C);
-	litest_add_for_device("touchpad:dwt", touchpad_dwt_multiple_keyboards_bothkeys_modifier, LITEST_SYNAPTICS_I2C);
-	litest_add_ranged_for_device("touchpad:dwt", touchpad_dwt_multiple_keyboards_remove, LITEST_SYNAPTICS_I2C, &twice);
-
-	litest_add("touchpad:thumb", touchpad_thumb_lower_area_movement, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:thumb", touchpad_thumb_lower_area_movement_rethumb, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:thumb", touchpad_thumb_speed_empty_slots, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:thumb", touchpad_thumb_area_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:thumb", touchpad_thumb_area_btnarea, LITEST_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:thumb", touchpad_thumb_no_doublethumb, LITEST_CLICKPAD, LITEST_ANY);
-
-	litest_add_for_device("touchpad:bugs", touchpad_tool_tripletap_touch_count, LITEST_SYNAPTICS_TOPBUTTONPAD);
-	litest_add_for_device("touchpad:bugs", touchpad_tool_tripletap_touch_count_late, LITEST_SYNAPTICS_TOPBUTTONPAD);
-	litest_add_for_device("touchpad:bugs", touchpad_slot_swap, LITEST_SYNAPTICS_TOPBUTTONPAD);
-	litest_add_for_device("touchpad:bugs", touchpad_finger_always_down, LITEST_SYNAPTICS_TOPBUTTONPAD);
-
-	litest_add("touchpad:time", touchpad_time_usec, LITEST_TOUCHPAD, LITEST_ANY);
-
-	litest_add_for_device("touchpad:jumps", touchpad_jump_finger_motion, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("touchpad:jumps", touchpad_jump_delta, LITEST_SYNAPTICS_CLICKPAD_X220);
-
-	litest_add_for_device("touchpad:sendevents", touchpad_disabled_on_mouse, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("touchpad:sendevents", touchpad_disabled_on_mouse_suspend_mouse, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("touchpad:sendevents", touchpad_disabled_double_mouse, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("touchpad:sendevents", touchpad_disabled_double_mouse_one_suspended, LITEST_SYNAPTICS_CLICKPAD_X220);
-
-	litest_add("touchpad:pressure", touchpad_pressure, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:pressure", touchpad_pressure_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:pressure", touchpad_pressure_2fg_st, LITEST_TOUCHPAD|LITEST_SINGLE_TOUCH, LITEST_ANY);
-	litest_add("touchpad:pressure", touchpad_pressure_tap, LITEST_TOUCHPAD, LITEST_ANY);
-	litest_add("touchpad:pressure", touchpad_pressure_tap_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:pressure", touchpad_pressure_tap_2fg_1fg_light, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:pressure", touchpad_pressure_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
-	litest_add("touchpad:pressure", touchpad_pressure_semi_mt_2fg_goes_light, LITEST_SEMI_MT, LITEST_ANY);
-
-	litest_add("touchpad:touch-size", touchpad_touch_size, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-	litest_add("touchpad:touch-size", touchpad_touch_size_2fg, LITEST_APPLE_CLICKPAD, LITEST_ANY);
-
-	litest_add("touchpad:speed", touchpad_speed_ignore_finger, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("touchpad:speed", touchpad_speed_allow_nearby_finger, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add("touchpad:speed", touchpad_speed_ignore_finger_edgescroll, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
-	litest_add_for_device("touchpad:speed", touchpad_speed_ignore_hovering_finger, LITEST_BCM5974);
+	litest_add_for_device(touchpad_semi_mt_hover_noevent, LITEST_SYNAPTICS_HOVER_SEMI_MT);
+	litest_add_for_device(touchpad_semi_mt_hover_down, LITEST_SYNAPTICS_HOVER_SEMI_MT);
+	litest_add_for_device(touchpad_semi_mt_hover_down_up, LITEST_SYNAPTICS_HOVER_SEMI_MT);
+	litest_add_for_device(touchpad_semi_mt_hover_down_hover_down, LITEST_SYNAPTICS_HOVER_SEMI_MT);
+	litest_add_for_device(touchpad_semi_mt_hover_2fg_noevent, LITEST_SYNAPTICS_HOVER_SEMI_MT);
+	litest_add_for_device(touchpad_semi_mt_hover_2fg_1fg_down, LITEST_SYNAPTICS_HOVER_SEMI_MT);
+	litest_add_for_device(touchpad_semi_mt_hover_2fg_up, LITEST_SYNAPTICS_HOVER_SEMI_MT);
+
+	litest_add(touchpad_hover_noevent, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
+	litest_add(touchpad_hover_down, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
+	litest_add(touchpad_hover_down_up, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
+	litest_add(touchpad_hover_down_hover_down, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
+	litest_add(touchpad_hover_2fg_noevent, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
+	litest_add(touchpad_hover_2fg_1fg_down, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
+	litest_add(touchpad_hover_1fg_tap, LITEST_TOUCHPAD|LITEST_HOVER, LITEST_ANY);
+
+	litest_add_for_device(touchpad_trackpoint_buttons, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
+	litest_add_for_device(touchpad_trackpoint_mb_scroll, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
+	litest_add_for_device(touchpad_trackpoint_mb_click, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
+	litest_add_for_device(touchpad_trackpoint_buttons_softbuttons, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
+	litest_add_for_device(touchpad_trackpoint_buttons_2fg_scroll, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
+	litest_add_for_device(touchpad_trackpoint_no_trackpoint, LITEST_SYNAPTICS_TRACKPOINT_BUTTONS);
+
+	litest_add_ranged(touchpad_initial_state, LITEST_TOUCHPAD, LITEST_ANY, &axis_range);
+	litest_add_ranged(touchpad_fingers_down_before_init, LITEST_TOUCHPAD, LITEST_ANY, &five_fingers);
+	litest_add(touchpad_state_after_syn_dropped_2fg_change, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+
+	litest_add(touchpad_dwt, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add_for_device(touchpad_dwt_ext_and_int_keyboard, LITEST_SYNAPTICS_I2C);
+	litest_add(touchpad_dwt_enable_touch, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_touch_hold, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_key_hold, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_key_hold_timeout, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_key_hold_timeout_existing_touch, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_key_hold_timeout_existing_touch_cornercase, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_type, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_type_short_timeout, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_modifier_no_dwt, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_modifier_combo_no_dwt, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_modifier_combo_dwt_after, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_modifier_combo_dwt_remains, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_fkeys_no_dwt, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_tap, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_tap_drag, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_click, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_edge_scroll, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_dwt_edge_scroll_interrupt, LITEST_TOUCHPAD, LITEST_CLICKPAD);
+	litest_add(touchpad_dwt_config_default_on, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_config_default_off, LITEST_ANY, LITEST_TOUCHPAD);
+	litest_add(touchpad_dwt_disabled, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_disable_during_touch, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_disable_before_touch, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_disable_during_key_release, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_disable_during_key_hold, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_enable_during_touch, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_enable_before_touch, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_enable_during_tap, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_dwt_remove_kbd_while_active, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add_for_device(touchpad_dwt_apple, LITEST_BCM5974);
+	litest_add_for_device(touchpad_dwt_acer_hawaii, LITEST_ACER_HAWAII_TOUCHPAD);
+	litest_add_for_device(touchpad_dwt_multiple_keyboards, LITEST_SYNAPTICS_I2C);
+	litest_add_for_device(touchpad_dwt_multiple_keyboards_bothkeys, LITEST_SYNAPTICS_I2C);
+	litest_add_for_device(touchpad_dwt_multiple_keyboards_bothkeys_modifier, LITEST_SYNAPTICS_I2C);
+	litest_add_ranged_for_device(touchpad_dwt_multiple_keyboards_remove, LITEST_SYNAPTICS_I2C, &twice);
+	litest_add_for_device(touchpad_dwt_remove_before_keyboard, LITEST_KEYBOARD);
+
+	litest_add(touchpad_thumb_lower_area_movement, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_thumb_lower_area_movement_rethumb, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_thumb_speed_empty_slots, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_thumb_area_clickfinger, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_thumb_area_btnarea, LITEST_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_thumb_no_doublethumb, LITEST_CLICKPAD, LITEST_ANY);
+
+	litest_add_for_device(touchpad_tool_tripletap_touch_count, LITEST_SYNAPTICS_TOPBUTTONPAD);
+	litest_add_for_device(touchpad_tool_tripletap_touch_count_late, LITEST_SYNAPTICS_TOPBUTTONPAD);
+	litest_add_for_device(touchpad_slot_swap, LITEST_SYNAPTICS_TOPBUTTONPAD);
+	litest_add_for_device(touchpad_finger_always_down, LITEST_SYNAPTICS_TOPBUTTONPAD);
+
+	litest_add(touchpad_time_usec, LITEST_TOUCHPAD, LITEST_ANY);
+
+	litest_add_for_device(touchpad_jump_finger_motion, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(touchpad_jump_delta, LITEST_SYNAPTICS_CLICKPAD_X220);
+
+	litest_add_for_device(touchpad_disabled_on_mouse, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(touchpad_disabled_on_mouse_suspend_mouse, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(touchpad_disabled_double_mouse, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(touchpad_disabled_double_mouse_one_suspended, LITEST_SYNAPTICS_CLICKPAD_X220);
+
+	litest_add(touchpad_pressure, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_pressure_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_pressure_2fg_st, LITEST_TOUCHPAD|LITEST_SINGLE_TOUCH, LITEST_ANY);
+	litest_add(touchpad_pressure_tap, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_pressure_tap_2fg, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_pressure_tap_2fg_1fg_light, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_pressure_btntool, LITEST_TOUCHPAD, LITEST_SINGLE_TOUCH);
+	litest_add(touchpad_pressure_semi_mt_2fg_goes_light, LITEST_SEMI_MT, LITEST_ANY);
+
+	litest_add(touchpad_touch_size, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+	litest_add(touchpad_touch_size_2fg, LITEST_APPLE_CLICKPAD, LITEST_ANY);
+
+	litest_add(touchpad_speed_ignore_finger, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_speed_allow_nearby_finger, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add(touchpad_speed_ignore_finger_edgescroll, LITEST_CLICKPAD, LITEST_SINGLE_TOUCH|LITEST_SEMI_MT);
+	litest_add_for_device(touchpad_speed_ignore_hovering_finger, LITEST_BCM5974);
 
-	litest_add_ranged("touchpad:suspend", touchpad_suspend_abba, LITEST_TOUCHPAD, LITEST_ANY, &suspends);
-	litest_add_ranged("touchpad:suspend", touchpad_suspend_abab, LITEST_TOUCHPAD, LITEST_ANY, &suspends);
+	litest_add_ranged(touchpad_suspend_abba, LITEST_TOUCHPAD, LITEST_ANY, &suspends);
+	litest_add_ranged(touchpad_suspend_abab, LITEST_TOUCHPAD, LITEST_ANY, &suspends);
 
 	/* Happens on the "Wacom Intuos Pro M Finger" but our test device
 	 * has the same properties */
-	litest_add_for_device("touchpad:bugs", touchpad_end_start_touch, LITEST_WACOM_FINGER);
+	litest_add_for_device(touchpad_end_start_touch, LITEST_WACOM_FINGER);
 
-	litest_add("touchpad:fuzz", touchpad_fuzz, LITEST_TOUCHPAD, LITEST_ANY);
+	litest_add(touchpad_fuzz, LITEST_TOUCHPAD, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-trackball.c third_party_libinput_new/test/test-trackball.c
--- third_party_libinput_bak/test/test-trackball.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-trackball.c	2023-03-30 10:53:13.362393400 +0800
@@ -261,12 +261,12 @@
 
 TEST_COLLECTION(trackball)
 {
-	litest_add("trackball:rotation", trackball_rotation_config_defaults, LITEST_TRACKBALL, LITEST_ANY);
-	litest_add("trackball:rotation", trackball_rotation_config_invalid_range, LITEST_TRACKBALL, LITEST_ANY);
-	litest_add("trackball:rotation", trackball_rotation_config_no_rotation, LITEST_ANY, LITEST_TRACKBALL);
-	litest_add("trackball:rotation", trackball_rotation_config_right_angle, LITEST_TRACKBALL, LITEST_ANY);
-	litest_add("trackball:rotation", trackball_rotation_config_odd_angle, LITEST_TRACKBALL, LITEST_ANY);
-	litest_add("trackball:rotation", trackball_rotation_x, LITEST_TRACKBALL, LITEST_ANY);
-	litest_add("trackball:rotation", trackball_rotation_y, LITEST_TRACKBALL, LITEST_ANY);
-	litest_add("trackball:rotation", trackball_rotation_accel, LITEST_TRACKBALL, LITEST_ANY);
+	litest_add(trackball_rotation_config_defaults, LITEST_TRACKBALL, LITEST_ANY);
+	litest_add(trackball_rotation_config_invalid_range, LITEST_TRACKBALL, LITEST_ANY);
+	litest_add(trackball_rotation_config_no_rotation, LITEST_ANY, LITEST_TRACKBALL);
+	litest_add(trackball_rotation_config_right_angle, LITEST_TRACKBALL, LITEST_ANY);
+	litest_add(trackball_rotation_config_odd_angle, LITEST_TRACKBALL, LITEST_ANY);
+	litest_add(trackball_rotation_x, LITEST_TRACKBALL, LITEST_ANY);
+	litest_add(trackball_rotation_y, LITEST_TRACKBALL, LITEST_ANY);
+	litest_add(trackball_rotation_accel, LITEST_TRACKBALL, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-trackpoint.c third_party_libinput_new/test/test-trackpoint.c
--- third_party_libinput_bak/test/test-trackpoint.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-trackpoint.c	2023-03-30 10:53:35.535827700 +0800
@@ -77,13 +77,25 @@
 	litest_drain_events(li);
 
 	litest_button_scroll(dev, BTN_MIDDLE, 1, 6);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, 6);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     6);
 	litest_button_scroll(dev, BTN_MIDDLE, 1, -7);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL, -7);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL,
+			     -7);
 	litest_button_scroll(dev, BTN_MIDDLE, 8, 1);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, 8);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     8);
 	litest_button_scroll(dev, BTN_MIDDLE, -9, 1);
-	litest_assert_scroll(li, LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL, -9);
+	litest_assert_scroll(li,
+			     LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS,
+			     LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL,
+			     -9);
 
 	/* scroll smaller than the threshold should not generate axis events */
 	litest_button_scroll(dev, BTN_MIDDLE, 1, 1);
@@ -147,7 +159,7 @@
 	while ((event = libinput_get_event(li))) {
 		ptrev = libinput_event_get_pointer_event(event);
 
-		ck_assert_int_eq(libinput_event_pointer_get_axis_source(ptrev),
+		ck_assert_int_eq(litest_event_pointer_get_axis_source(ptrev),
 				 LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS);
 
 		libinput_event_destroy(event);
@@ -164,6 +176,8 @@
 	struct libinput_event *event;
 	struct libinput_device *device;
 
+	litest_disable_hold_gestures(touchpad->libinput_device);
+
 	trackpoint = litest_add_device(li, LITEST_TRACKPOINT);
 	litest_drain_events(li);
 	/* touchpad right-handed, trackpoint left-handed */
@@ -207,6 +221,8 @@
 	struct libinput_event *event;
 	struct libinput_device *device;
 
+	litest_disable_hold_gestures(touchpad->libinput_device);
+
 	trackpoint = litest_add_device(li, LITEST_TRACKPOINT);
 	litest_drain_events(li);
 	/* touchpad left-handed, trackpoint right-handed */
@@ -248,6 +264,8 @@
 	struct libinput_event *event;
 	struct libinput_device *device;
 
+	litest_disable_hold_gestures(touchpad->libinput_device);
+
 	trackpoint = litest_add_device(li, LITEST_TRACKPOINT);
 	litest_drain_events(li);
 	/* touchpad left-handed, trackpoint left-handed */
@@ -293,6 +311,7 @@
 	int i;
 
 	touchpad = litest_add_device(li, LITEST_SYNAPTICS_I2C);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	for (i = 0; i < 10; i++) {
@@ -328,6 +347,7 @@
 	int i;
 
 	touchpad = litest_add_device(li, LITEST_SYNAPTICS_I2C);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	for (i = 0; i < 10; i++) {
@@ -361,6 +381,7 @@
 	struct libinput *li = trackpoint->libinput;
 
 	touchpad = litest_add_device(li, LITEST_SYNAPTICS_I2C);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	/* A single event does not trigger palm detection */
@@ -386,6 +407,7 @@
 	struct libinput *li = trackpoint->libinput;
 
 	touchpad = litest_add_device(li, LITEST_SYNAPTICS_I2C);
+	litest_disable_hold_gestures(touchpad->libinput_device);
 	litest_drain_events(li);
 
 	for (int i = 0; i < 10; i++) {
@@ -410,16 +432,16 @@
 
 TEST_COLLECTION(trackpoint)
 {
-	litest_add("trackpoint:middlebutton", trackpoint_middlebutton, LITEST_POINTINGSTICK, LITEST_ANY);
-	litest_add("trackpoint:middlebutton", trackpoint_middlebutton_noscroll, LITEST_POINTINGSTICK, LITEST_ANY);
-	litest_add("trackpoint:scroll", trackpoint_scroll, LITEST_POINTINGSTICK, LITEST_ANY);
-	litest_add("trackpoint:scroll", trackpoint_scroll_source, LITEST_POINTINGSTICK, LITEST_ANY);
-	litest_add("trackpoint:left-handed", trackpoint_topsoftbuttons_left_handed_trackpoint, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("trackpoint:left-handed", trackpoint_topsoftbuttons_left_handed_touchpad, LITEST_TOPBUTTONPAD, LITEST_ANY);
-	litest_add("trackpoint:left-handed", trackpoint_topsoftbuttons_left_handed_both, LITEST_TOPBUTTONPAD, LITEST_ANY);
-
-	litest_add("trackpoint:palmdetect", trackpoint_palmdetect, LITEST_POINTINGSTICK, LITEST_ANY);
-	litest_add("trackpoint:palmdetect", trackpoint_palmdetect_resume_touch, LITEST_POINTINGSTICK, LITEST_ANY);
-	litest_add("trackpoint:palmdetect", trackpoint_palmdetect_require_min_events, LITEST_POINTINGSTICK, LITEST_ANY);
-	litest_add("trackpoint:palmdetect", trackpoint_palmdetect_require_min_events_timeout, LITEST_POINTINGSTICK, LITEST_ANY);
+	litest_add(trackpoint_middlebutton, LITEST_POINTINGSTICK, LITEST_ANY);
+	litest_add(trackpoint_middlebutton_noscroll, LITEST_POINTINGSTICK, LITEST_ANY);
+	litest_add(trackpoint_scroll, LITEST_POINTINGSTICK, LITEST_ANY);
+	litest_add(trackpoint_scroll_source, LITEST_POINTINGSTICK, LITEST_ANY);
+	litest_add(trackpoint_topsoftbuttons_left_handed_trackpoint, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(trackpoint_topsoftbuttons_left_handed_touchpad, LITEST_TOPBUTTONPAD, LITEST_ANY);
+	litest_add(trackpoint_topsoftbuttons_left_handed_both, LITEST_TOPBUTTONPAD, LITEST_ANY);
+
+	litest_add(trackpoint_palmdetect, LITEST_POINTINGSTICK, LITEST_ANY);
+	litest_add(trackpoint_palmdetect_resume_touch, LITEST_POINTINGSTICK, LITEST_ANY);
+	litest_add(trackpoint_palmdetect_require_min_events, LITEST_POINTINGSTICK, LITEST_ANY);
+	litest_add(trackpoint_palmdetect_require_min_events_timeout, LITEST_POINTINGSTICK, LITEST_ANY);
 }
diff -Naur third_party_libinput_bak/test/test-udev.c third_party_libinput_new/test/test-udev.c
--- third_party_libinput_bak/test/test-udev.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-udev.c	2023-03-30 10:54:01.384667500 +0800
@@ -175,10 +175,6 @@
 }
 END_TEST
 
-/**
- * This test only works if there's at least one device in the system that is
- * assigned the default seat. Should cover the 99% case.
- */
 START_TEST(udev_added_seat_default)
 {
 	struct libinput *li;
@@ -187,8 +183,7 @@
 	struct libinput_device *device;
 	struct libinput_seat *seat;
 	const char *seat_name;
-	enum libinput_event_type type;
-	int default_seat_found = 0;
+	struct litest_device *dev;
 
 	udev = udev_new();
 	ck_assert_notnull(udev);
@@ -198,33 +193,30 @@
 	ck_assert_int_eq(libinput_udev_assign_seat(li, "seat0"), 0);
 	libinput_dispatch(li);
 
-	while (!default_seat_found && (event = libinput_get_event(li))) {
-		type = libinput_event_get_type(event);
-		if (type != LIBINPUT_EVENT_DEVICE_ADDED) {
-			libinput_event_destroy(event);
-			continue;
-		}
-
-		device = libinput_event_get_device(event);
-		seat = libinput_device_get_seat(device);
-		ck_assert_notnull(seat);
+	/* Drop any events from other devices */
+	litest_drain_events(li);
 
-		seat_name = libinput_seat_get_logical_name(seat);
-		default_seat_found = streq(seat_name, "default");
-		libinput_event_destroy(event);
-	}
+	/* Now create our own device, it should be in the "default"
+	 * logical seat. This test may fail if there is a local rule changing
+	 * that, but it'll be fine for the 99% case. */
+	dev = litest_create(LITEST_MOUSE, NULL, NULL, NULL, NULL);
+	litest_wait_for_event_of_type(li, LIBINPUT_EVENT_DEVICE_ADDED, -1);
+	event = libinput_get_event(li);
+	device = libinput_event_get_device(event);
+	seat = libinput_device_get_seat(device);
+	ck_assert_notnull(seat);
 
-	ck_assert(default_seat_found);
+	seat_name = libinput_seat_get_logical_name(seat);
+	ck_assert_str_eq(seat_name, "default");
+	libinput_event_destroy(event);
 
 	libinput_unref(li);
 	udev_unref(udev);
+
+	litest_delete_device(dev);
 }
 END_TEST
 
-/**
- * This test only works if there's at least one device in the system that is
- * assigned the default seat. Should cover the 99% case.
- */
 START_TEST(udev_change_seat)
 {
 	struct libinput *li;
@@ -235,6 +227,7 @@
 	const char *seat1_name;
 	const char *seat2_name = "new seat";
 	int rc;
+	struct litest_device *dev;
 
 	udev = udev_new();
 	ck_assert_notnull(udev);
@@ -244,12 +237,15 @@
 	ck_assert_int_eq(libinput_udev_assign_seat(li, "seat0"), 0);
 	libinput_dispatch(li);
 
-	event = libinput_get_event(li);
-	ck_assert_notnull(event);
-
-	ck_assert_int_eq(libinput_event_get_type(event),
-			 LIBINPUT_EVENT_DEVICE_ADDED);
+	/* Drop any events from other devices */
+	litest_drain_events(li);
 
+	/* Now create our own device, it should be in the "default"
+	 * logical seat. This test may fail if there is a local rule changing
+	 * that, but it'll be fine for the 99% case. */
+	dev = litest_create(LITEST_MOUSE, NULL, NULL, NULL, NULL);
+	litest_wait_for_event_of_type(li, LIBINPUT_EVENT_DEVICE_ADDED, -1);
+	event = libinput_get_event(li);
 	device = libinput_event_get_device(event);
 	libinput_device_ref(device);
 
@@ -261,6 +257,7 @@
 
 	litest_drain_events(li);
 
+	/* Changing the logical seat name will remove and re-add the device */
 	rc = libinput_device_set_seat_logical_name(device,
 						   seat2_name);
 	ck_assert_int_eq(rc, 0);
@@ -293,6 +290,8 @@
 
 	libinput_unref(li);
 	udev_unref(udev);
+
+	litest_delete_device(dev);
 }
 END_TEST
 
@@ -489,7 +488,7 @@
 		ck_assert_notnull(sysname);
 		ck_assert_int_gt(strlen(sysname), 1);
 		ck_assert(strchr(sysname, '/') == NULL);
-		ck_assert_int_eq(strncmp(sysname, "event", 5), 0);
+		ck_assert(strneq(sysname, "event", 5));
 		libinput_event_destroy(ev);
 	}
 
@@ -674,25 +673,25 @@
 
 TEST_COLLECTION(udev)
 {
-	litest_add_no_device("udev:create", udev_create_NULL);
-	litest_add_no_device("udev:create", udev_create_seat0);
-	litest_add_no_device("udev:create", udev_create_empty_seat);
-	litest_add_no_device("udev:create", udev_create_seat_too_long);
-	litest_add_no_device("udev:create", udev_set_user_data);
-
-	litest_add_no_device("udev:seat", udev_added_seat_default);
-	litest_add_no_device("udev:seat", udev_change_seat);
-
-	litest_add_for_device("udev:suspend", udev_double_suspend, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("udev:suspend", udev_double_resume, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("udev:suspend", udev_suspend_resume, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("udev:suspend", udev_resume_before_seat, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("udev:suspend", udev_suspend_resume_before_seat, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("udev:device events", udev_device_sysname, LITEST_SYNAPTICS_CLICKPAD_X220);
-	litest_add_for_device("udev:seat", udev_seat_recycle, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_no_device(udev_create_NULL);
+	litest_add_no_device(udev_create_seat0);
+	litest_add_no_device(udev_create_empty_seat);
+	litest_add_no_device(udev_create_seat_too_long);
+	litest_add_no_device(udev_set_user_data);
+
+	litest_add_no_device(udev_added_seat_default);
+	litest_add_no_device(udev_change_seat);
+
+	litest_add_for_device(udev_double_suspend, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(udev_double_resume, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(udev_suspend_resume, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(udev_resume_before_seat, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(udev_suspend_resume_before_seat, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(udev_device_sysname, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_for_device(udev_seat_recycle, LITEST_SYNAPTICS_CLICKPAD_X220);
 
-	litest_add_no_device("udev:path", udev_path_add_device);
-	litest_add_for_device("udev:path", udev_path_remove_device, LITEST_SYNAPTICS_CLICKPAD_X220);
+	litest_add_no_device(udev_path_add_device);
+	litest_add_for_device(udev_path_remove_device, LITEST_SYNAPTICS_CLICKPAD_X220);
 
-	litest_add_no_device("udev:ignore", udev_ignore_device);
+	litest_add_no_device(udev_ignore_device);
 }
diff -Naur third_party_libinput_bak/test/test-utils.c third_party_libinput_new/test/test-utils.c
--- third_party_libinput_bak/test/test-utils.c	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/test/test-utils.c	2023-03-30 10:54:32.375285000 +0800
@@ -471,6 +471,38 @@
 }
 END_TEST
 
+START_TEST(boolean_prop_parser)
+{
+	struct parser_test_range {
+		char *tag;
+		bool success;
+		bool b;
+	} tests[] = {
+		{ "0", true, false },
+		{ "1", true, true },
+		{ "-1", false, false },
+		{ "2", false, false },
+		{ "abcd", false, false },
+		{ NULL, false, false }
+	};
+	int i;
+	bool success, b;
+
+	for (i = 0; tests[i].tag != NULL; i++) {
+		b = false;
+		success = parse_boolean_property(tests[i].tag, &b);
+		ck_assert(success == tests[i].success);
+		if (success)
+			ck_assert_int_eq(b, tests[i].b);
+		else
+			ck_assert_int_eq(b, false);
+	}
+
+	success = parse_boolean_property(NULL, NULL);
+	ck_assert(success == false);
+}
+END_TEST
+
 START_TEST(evcode_prop_parser)
 {
 	struct parser_test_tuple {
@@ -546,6 +578,52 @@
 }
 END_TEST
 
+START_TEST(input_prop_parser)
+{
+	struct parser_test_val {
+		const char *prop;
+		bool success;
+		size_t nvals;
+		uint32_t values[20];
+	} tests[] = {
+		{ "INPUT_PROP_BUTTONPAD", true, 1, {INPUT_PROP_BUTTONPAD}},
+		{ "INPUT_PROP_BUTTONPAD;INPUT_PROP_POINTER", true, 2,
+			{ INPUT_PROP_BUTTONPAD,
+			  INPUT_PROP_POINTER }},
+		{ "INPUT_PROP_BUTTONPAD;0x00;0x03", true, 3,
+			{ INPUT_PROP_BUTTONPAD,
+			  INPUT_PROP_POINTER,
+			  INPUT_PROP_SEMI_MT }},
+		{ .prop = "", .success = false },
+		{ .prop = "0xff", .success = false },
+		{ .prop = "INPUT_PROP", .success = false },
+		{ .prop = "INPUT_PROP_FOO", .success = false },
+		{ .prop = "INPUT_PROP_FOO;INPUT_PROP_FOO", .success = false },
+		{ .prop = "INPUT_PROP_POINTER;INPUT_PROP_FOO", .success = false },
+		{ .prop = "none", .success = false },
+		{ .prop = NULL },
+	};
+	struct parser_test_val *t;
+
+	for (int i = 0; tests[i].prop; i++) {
+		bool success;
+		uint32_t props[32];
+		size_t nprops = ARRAY_LENGTH(props);
+
+		t = &tests[i];
+		success = parse_input_prop_property(t->prop, props, &nprops);
+		ck_assert(success == t->success);
+		if (!success)
+			continue;
+
+		ck_assert_int_eq(nprops, t->nvals);
+		for (size_t j = 0; j < t->nvals; j++) {
+			ck_assert_int_eq(t->values[j], props[j]);
+		}
+	}
+}
+END_TEST
+
 START_TEST(evdev_abs_parser)
 {
 	struct test {
@@ -629,6 +707,7 @@
 	ck_assert_int_eq(ns2us(10000), 10);
 	ck_assert_int_eq(ms2us(10), 10000);
 	ck_assert_int_eq(s2us(1), 1000000);
+	ck_assert_int_eq(h2us(2), s2us(2 * 60 * 60));
 	ck_assert_int_eq(us2ms(10000), 10);
 }
 END_TEST
@@ -976,6 +1055,44 @@
 }
 END_TEST
 
+START_TEST(strargv_test)
+{
+	struct argv_test {
+		int argc;
+		char *argv[10];
+		int expected;
+	} tests[] = {
+		{ 0, {NULL}, 0 },
+		{ 1, {"hello", "World"}, 1 },
+		{ 2, {"hello", "World"}, 2 },
+		{ 2, {"", " "}, 2 },
+		{ 2, {"", NULL}, 0 },
+		{ 2, {NULL, NULL}, 0 },
+		{ 1, {NULL, NULL}, 0 },
+		{ 3, {"hello", NULL, "World"}, 0 },
+	};
+	struct argv_test *t;
+
+	ARRAY_FOR_EACH(tests, t) {
+		char **strv = strv_from_argv(t->argc, t->argv);
+
+		if (t->expected == 0) {
+			ck_assert(strv == NULL);
+		} else {
+			int count = 0;
+			char **s = strv;
+			while (*s) {
+				ck_assert_str_eq(*s, t->argv[count]);
+				count++;
+				s++;
+			}
+			ck_assert_int_eq(t->expected, count);
+			strv_free(strv);
+		}
+	}
+}
+END_TEST
+
 START_TEST(kvsplit_double_test)
 {
 	struct kvsplit_dbl_test {
@@ -1150,6 +1267,31 @@
 }
 END_TEST
 
+START_TEST(strsanitize_test)
+{
+	struct strsanitize_test {
+		const char *string;
+		const char *expected;
+	} tests[] = {
+		{ "foobar", "foobar" },
+		{ "", "" },
+		{ "%", "%%" },
+		{ "%%%%", "%%%%%%%%" },
+		{ "x %s", "x %%s" },
+		{ "x %", "x %%" },
+		{ "%sx", "%%sx" },
+		{ "%s%s", "%%s%%s" },
+		{ NULL, NULL },
+	};
+
+	for (struct strsanitize_test *t = tests; t->string; t++) {
+		char *sanitized = str_sanitize(t->string);
+		ck_assert_str_eq(sanitized, t->expected);
+		free(sanitized);
+	}
+}
+END_TEST
+
 START_TEST(list_test_insert)
 {
 	struct list_test {
@@ -1211,6 +1353,39 @@
 }
 END_TEST
 
+START_TEST(list_test_foreach)
+{
+	struct list_test {
+		int val;
+		struct list node;
+	} tests[] = {
+		{ .val  = 1 },
+		{ .val  = 2 },
+		{ .val  = 3 },
+		{ .val  = 4 },
+	};
+	struct list_test *t;
+	struct list head;
+
+	list_init(&head);
+
+	ARRAY_FOR_EACH(tests, t) {
+		list_append(&head, &t->node);
+	}
+
+	/* Make sure both loop macros are a single line statement */
+	if (false)
+		list_for_each(t, &head, node) {
+			ck_abort_msg("We should not get here");
+		}
+
+	if (false)
+		list_for_each_safe(t, &head, node) {
+			ck_abort_msg("We should not get here");
+		}
+}
+END_TEST
+
 START_TEST(strverscmp_test)
 {
 	ck_assert_int_eq(libinput_strverscmp("", ""), 0);
@@ -1224,6 +1399,84 @@
 }
 END_TEST
 
+START_TEST(streq_test)
+{
+	ck_assert(streq("", "") == true);
+	ck_assert(streq(NULL, NULL) == true);
+	ck_assert(streq("0.0.1", "") == false);
+	ck_assert(streq("foo", NULL) == false);
+	ck_assert(streq(NULL, "foo") == false);
+	ck_assert(streq("0.0.1", "0.0.1") == true);
+}
+END_TEST
+
+START_TEST(strneq_test)
+{
+	ck_assert(strneq("", "", 1) == true);
+	ck_assert(strneq(NULL, NULL, 1) == true);
+	ck_assert(strneq("0.0.1", "", 6) == false);
+	ck_assert(strneq("foo", NULL, 5) == false);
+	ck_assert(strneq(NULL, "foo", 5) == false);
+	ck_assert(strneq("0.0.1", "0.0.1", 6) == true);
+}
+END_TEST
+
+START_TEST(basename_test)
+{
+	struct test {
+		const char *path;
+		const char *expected;
+	} tests[] = {
+		{ "a", "a" },
+		{ "foo.c", "foo.c" },
+		{ "foo", "foo" },
+		{ "/path/to/foo.h", "foo.h" },
+		{ "../bar.foo", "bar.foo" },
+		{ "./bar.foo.baz", "bar.foo.baz" },
+		{ "./", NULL },
+		{ "/", NULL },
+		{ "/bar/", NULL },
+		{ "/bar", "bar" },
+		{ "", NULL },
+	};
+	struct test *t;
+
+	ARRAY_FOR_EACH(tests, t) {
+		const char *result = safe_basename(t->path);
+		if (t->expected == NULL)
+			ck_assert(result == NULL);
+		else
+			ck_assert_str_eq(result, t->expected);
+	}
+}
+END_TEST
+START_TEST(trunkname_test)
+{
+	struct test {
+		const char *path;
+		const char *expected;
+	} tests[] = {
+		{ "foo.c", "foo" },
+		{ "/path/to/foo.h", "foo" },
+		{ "/path/to/foo", "foo" },
+		{ "../bar.foo", "bar" },
+		{ "./bar.foo.baz", "bar.foo" },
+		{ "./", "" },
+		{ "/", "" },
+		{ "/bar/", "" },
+		{ "/bar", "bar" },
+		{ "", "" },
+	};
+	struct test *t;
+
+	ARRAY_FOR_EACH(tests, t) {
+		char *result = trunkname(t->path);
+		ck_assert_str_eq(result, t->expected);
+		free(result);
+	}
+}
+END_TEST
+
 static Suite *
 litest_utils_suite(void)
 {
@@ -1243,7 +1496,9 @@
 	tcase_add_test(tc, reliability_prop_parser);
 	tcase_add_test(tc, calibration_prop_parser);
 	tcase_add_test(tc, range_prop_parser);
+	tcase_add_test(tc, boolean_prop_parser);
 	tcase_add_test(tc, evcode_prop_parser);
+	tcase_add_test(tc, input_prop_parser);
 	tcase_add_test(tc, evdev_abs_parser);
 	tcase_add_test(tc, safe_atoi_test);
 	tcase_add_test(tc, safe_atoi_base_16_test);
@@ -1253,17 +1508,24 @@
 	tcase_add_test(tc, safe_atou_base_8_test);
 	tcase_add_test(tc, safe_atod_test);
 	tcase_add_test(tc, strsplit_test);
+	tcase_add_test(tc, strargv_test);
 	tcase_add_test(tc, kvsplit_double_test);
 	tcase_add_test(tc, strjoin_test);
 	tcase_add_test(tc, strstrip_test);
 	tcase_add_test(tc, strendswith_test);
 	tcase_add_test(tc, strstartswith_test);
+	tcase_add_test(tc, strsanitize_test);
 	tcase_add_test(tc, time_conversion);
 	tcase_add_test(tc, human_time);
 
 	tcase_add_test(tc, list_test_insert);
 	tcase_add_test(tc, list_test_append);
+	tcase_add_test(tc, list_test_foreach);
 	tcase_add_test(tc, strverscmp_test);
+	tcase_add_test(tc, streq_test);
+	tcase_add_test(tc, strneq_test);
+	tcase_add_test(tc, trunkname_test);
+	tcase_add_test(tc, basename_test);
 
 	suite_add_tcase(s, tc);
 
diff -Naur third_party_libinput_bak/tools/libinput-analyze-per-slot-delta.py third_party_libinput_new/tools/libinput-analyze-per-slot-delta.py
--- third_party_libinput_bak/tools/libinput-analyze-per-slot-delta.py	2023-03-28 10:49:59.332626900 +0800
+++ third_party_libinput_new/tools/libinput-analyze-per-slot-delta.py	2023-03-29 17:28:27.177942000 +0800
@@ -36,15 +36,16 @@
 import libevdev
 
 
-COLOR_RESET = '\x1b[0m'
-COLOR_RED = '\x1b[6;31m'
+COLOR_RESET = "\x1b[0m"
+COLOR_RED = "\x1b[6;31m"
 
 
-class SlotFormatter():
+class SlotFormatter:
     width = 16
 
-    def __init__(self, is_absolute=False, resolution=None,
-                 threshold=None, ignore_below=None):
+    def __init__(
+        self, is_absolute=False, resolution=None, threshold=None, ignore_below=None
+    ):
         self.threshold = threshold
         self.ignore_below = ignore_below
         self.resolution = resolution
@@ -54,19 +55,19 @@
         self.filtered = False
 
     def __str__(self):
-        return ' | '.join(self.slots)
+        return " | ".join(self.slots)
 
     def format_slot(self, slot):
         if slot.state == SlotState.BEGIN:
-            self.slots.append('+++++++'.center(self.width))
+            self.slots.append("+++++++".center(self.width))
             self.have_data = True
         elif slot.state == SlotState.END:
-            self.slots.append('-------'.center(self.width))
+            self.slots.append("-------".center(self.width))
             self.have_data = True
         elif slot.state == SlotState.NONE:
-            self.slots.append(('*' * (self.width - 2)).center(self.width))
+            self.slots.append(("*" * (self.width - 2)).center(self.width))
         elif not slot.dirty:
-            self.slots.append(' '.center(self.width))
+            self.slots.append(" ".center(self.width))
         else:
             if self.resolution is not None:
                 dx, dy = slot.dx / self.resolution[0], slot.dy / self.resolution[1]
@@ -81,35 +82,39 @@
                 else:
                     t = t * 180.0 / math.pi
 
-                directions = ['↖↑', '↖←', '↙←', '↙↓', '↓↘', '→↘', '→↗', '↑↗']
+                directions = ["↖↑", "↖←", "↙←", "↙↓", "↓↘", "→↘", "→↗", "↑↗"]
                 direction = directions[int(t / 45)]
             elif dy == 0:
                 if dx < 0:
-                    direction = '←←'
+                    direction = "←←"
                 else:
-                    direction = '→→'
+                    direction = "→→"
             else:
                 if dy < 0:
-                    direction = '↑↑'
+                    direction = "↑↑"
                 else:
-                    direction = '↓↓'
+                    direction = "↓↓"
 
-            color = ''
-            reset = ''
+            color = ""
+            reset = ""
             if not self.is_absolute:
                 if self.ignore_below is not None or self.threshold is not None:
                     dist = math.hypot(dx, dy)
                     if self.ignore_below is not None and dist < self.ignore_below:
-                        self.slots.append(' '.center(self.width))
+                        self.slots.append(" ".center(self.width))
                         self.filtered = True
                         return
                     if self.threshold is not None and dist >= self.threshold:
                         color = COLOR_RED
                         reset = COLOR_RESET
                 if isinstance(dx, int) and isinstance(dy, int):
-                    string = "{} {}{:+4d}/{:+4d}{}".format(direction, color, dx, dy, reset)
+                    string = "{} {}{:+4d}/{:+4d}{}".format(
+                        direction, color, dx, dy, reset
+                    )
                 else:
-                    string = "{} {}{:+3.2f}/{:+03.2f}{}".format(direction, color, dx, dy, reset)
+                    string = "{} {}{:+3.2f}/{:+03.2f}{}".format(
+                        direction, color, dx, dy, reset
+                    )
             else:
                 x, y = slot.x, slot.y
                 string = "{} {}{:4d}/{:4d}{}".format(direction, color, x, y, reset)
@@ -144,23 +149,46 @@
     slots = []
     xres, yres = 1, 1
 
-    parser = argparse.ArgumentParser(description="Measure delta between event frames for each slot")
-    parser.add_argument("--use-mm", action='store_true', help="Use mm instead of device deltas")
-    parser.add_argument("--use-st", action='store_true', help="Use ABS_X/ABS_Y instead of ABS_MT_POSITION_X/Y")
-    parser.add_argument("--use-absolute", action='store_true', help="Use absolute coordinates, not deltas")
-    parser.add_argument("path", metavar="recording",
-                        nargs=1, help="Path to libinput-record YAML file")
-    parser.add_argument("--threshold", type=float, default=None, help="Mark any delta above this treshold")
-    parser.add_argument("--ignore-below", type=float, default=None, help="Ignore any delta below this theshold")
+    parser = argparse.ArgumentParser(
+        description="Measure delta between event frames for each slot"
+    )
+    parser.add_argument(
+        "--use-mm", action="store_true", help="Use mm instead of device deltas"
+    )
+    parser.add_argument(
+        "--use-st",
+        action="store_true",
+        help="Use ABS_X/ABS_Y instead of ABS_MT_POSITION_X/Y",
+    )
+    parser.add_argument(
+        "--use-absolute",
+        action="store_true",
+        help="Use absolute coordinates, not deltas",
+    )
+    parser.add_argument(
+        "path", metavar="recording", nargs=1, help="Path to libinput-record YAML file"
+    )
+    parser.add_argument(
+        "--threshold",
+        type=float,
+        default=None,
+        help="Mark any delta above this threshold",
+    )
+    parser.add_argument(
+        "--ignore-below",
+        type=float,
+        default=None,
+        help="Ignore any delta below this threshold",
+    )
     args = parser.parse_args()
 
     if not sys.stdout.isatty():
-        COLOR_RESET = ''
-        COLOR_RED = ''
+        COLOR_RESET = ""
+        COLOR_RED = ""
 
     yml = yaml.safe_load(open(args.path[0]))
-    device = yml['devices'][0]
-    absinfo = device['evdev']['absinfo']
+    device = yml["devices"][0]
+    absinfo = device["evdev"]["absinfo"]
     try:
         nslots = absinfo[libevdev.EV_ABS.ABS_MT_SLOT.value][1] + 1
     except KeyError:
@@ -192,24 +220,37 @@
         libevdev.EV_KEY.BTN_TOOL_QUADTAP: 0,
         libevdev.EV_KEY.BTN_TOOL_QUINTTAP: 0,
     }
+    btn_state = {
+        libevdev.EV_KEY.BTN_LEFT: 0,
+        libevdev.EV_KEY.BTN_MIDDLE: 0,
+        libevdev.EV_KEY.BTN_RIGHT: 0,
+    }
 
     nskipped_lines = 0
 
-    for event in device['events']:
-        for evdev in event['evdev']:
+    for event in device["events"]:
+        for evdev in event["evdev"]:
             s = slots[slot]
-            e = libevdev.InputEvent(code=libevdev.evbit(evdev[2], evdev[3]),
-                                    value=evdev[4], sec=evdev[0], usec=evdev[1])
+            e = libevdev.InputEvent(
+                code=libevdev.evbit(evdev[2], evdev[3]),
+                value=evdev[4],
+                sec=evdev[0],
+                usec=evdev[1],
+            )
 
             if e.code in tool_bits:
                 tool_bits[e.code] = e.value
+            if e.code in btn_state:
+                btn_state[e.code] = e.value
 
             if args.use_st:
                 # Note: this relies on the EV_KEY events to come in before the
                 # x/y events, otherwise the last/first event in each slot will
                 # be wrong.
-                if (e.code == libevdev.EV_KEY.BTN_TOOL_FINGER or
-                        e.code == libevdev.EV_KEY.BTN_TOOL_PEN):
+                if (
+                    e.code == libevdev.EV_KEY.BTN_TOOL_FINGER
+                    or e.code == libevdev.EV_KEY.BTN_TOOL_PEN
+                ):
                     slot = 0
                     s = slots[slot]
                     s.dirty = True
@@ -251,7 +292,7 @@
                     s.dirty = True
                     # bcm5974 cycles through slot numbers, so let's say all below
                     # our current slot number was used
-                    for sl in slots[:slot + 1]:
+                    for sl in slots[: slot + 1]:
                         sl.used = True
                 elif e.code == libevdev.EV_ABS.ABS_MT_TRACKING_ID:
                     if e.value == -1:
@@ -290,11 +331,11 @@
                     last_time = t
 
                 tools = [
-                    (libevdev.EV_KEY.BTN_TOOL_QUINTTAP, 'QIN'),
-                    (libevdev.EV_KEY.BTN_TOOL_QUADTAP, 'QAD'),
-                    (libevdev.EV_KEY.BTN_TOOL_TRIPLETAP, 'TRI'),
-                    (libevdev.EV_KEY.BTN_TOOL_DOUBLETAP, 'DBL'),
-                    (libevdev.EV_KEY.BTN_TOUCH, 'TOU'),
+                    (libevdev.EV_KEY.BTN_TOOL_QUINTTAP, "QIN"),
+                    (libevdev.EV_KEY.BTN_TOOL_QUADTAP, "QAD"),
+                    (libevdev.EV_KEY.BTN_TOOL_TRIPLETAP, "TRI"),
+                    (libevdev.EV_KEY.BTN_TOOL_DOUBLETAP, "DBL"),
+                    (libevdev.EV_KEY.BTN_TOUCH, "TOU"),
                 ]
 
                 for bit, string in tools:
@@ -302,12 +343,25 @@
                         tool_state = string
                         break
                 else:
-                    tool_state = '   '
+                    tool_state = "   "
+
+                buttons = [
+                    (libevdev.EV_KEY.BTN_LEFT, "L"),
+                    (libevdev.EV_KEY.BTN_MIDDLE, "M"),
+                    (libevdev.EV_KEY.BTN_RIGHT, "R"),
+                ]
 
-                fmt = SlotFormatter(is_absolute=args.use_absolute,
-                                    resolution=(xres, yres) if args.use_mm else None,
-                                    threshold=args.threshold,
-                                    ignore_below=args.ignore_below)
+                button_state = (
+                    "".join([string for bit, string in buttons if btn_state[bit]])
+                    or "."
+                )
+
+                fmt = SlotFormatter(
+                    is_absolute=args.use_absolute,
+                    resolution=(xres, yres) if args.use_mm else None,
+                    threshold=args.threshold,
+                    ignore_below=args.ignore_below,
+                )
                 for sl in [s for s in slots if s.used]:
                     fmt.format_slot(sl)
 
@@ -323,11 +377,24 @@
                     if nskipped_lines > 0:
                         print("")
                         nskipped_lines = 0
-                    print("{:2d}.{:06d} {:+5d}ms {}: {}".format(e.sec, e.usec, tdelta, tool_state, fmt))
+                    print(
+                        "{:2d}.{:06d} {:+5d}ms {} {} {}".format(
+                            e.sec, e.usec, tdelta, tool_state, button_state, fmt
+                        )
+                    )
                 elif fmt.filtered:
                     nskipped_lines += 1
-                    print("\r", " " * 21, "... {} below threshold".format(nskipped_lines), flush=True, end='')
+                    print(
+                        "\r",
+                        " " * 21,
+                        "... {} below threshold".format(nskipped_lines),
+                        flush=True,
+                        end="",
+                    )
 
 
-if __name__ == '__main__':
-    main(sys.argv)
+if __name__ == "__main__":
+    try:
+        main(sys.argv)
+    except KeyboardInterrupt:
+        pass
diff -Naur third_party_libinput_bak/tools/libinput-analyze-recording.man third_party_libinput_new/tools/libinput-analyze-recording.man
--- third_party_libinput_bak/tools/libinput-analyze-recording.man	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/tools/libinput-analyze-recording.man	2023-03-29 17:28:43.742437200 +0800
@@ -0,0 +1,39 @@
+.TH libinput-analyze-recording "1"
+.SH NAME
+libinput\-analyze\-recording \- analyze a device recording
+.SH SYNOPSIS
+.B libinput analyze recording [\-\-help] [options] \fIrecording.yml\fI
+.SH DESCRIPTION
+.PP
+The
+.B "libinput analyze recording"
+tool analyzes a recording made with
+.B "libinput record"
+and prints a tabular summary of the events in that recording.
+.PP
+This is a debugging tool only, its output may change at any time. Do not
+rely on the output.
+.SH OPTIONS
+.TP 8
+.B \-\-help
+Print help
+.SH OUTPUT
+An example output for a tablet sequence is below.
+.PP
+.nf
+.sf
+Time    |      X |      Y | PRESSURE | DISTANCE |   MISC | SERIAL
+-----------------------------------------------------------------
+  0.000 |   9717 |   6266 |          |       63 |  0x862 | 0x9a805597 | BTN_TOOL_PEN
+  0.005 |   9709 |        |          |          |        | 0x9a805597 | BTN_TOOL_PEN
+  0.012 |   9701 |        |          |          |        | 0x9a805597 | BTN_TOOL_PEN
+  0.020 |   9692 |   6269 |          |          |        | 0x9a805597 | BTN_TOOL_PEN
+  0.028 |   9680 |   6277 |          |          |        | 0x9a805597 | BTN_TOOL_PEN
+  0.034 |   9668 |   6279 |          |          |        | 0x9a805597 | BTN_TOOL_PEN
+  0.042 |   9654 |   6282 |          |          |        | 0x9a805597 | BTN_TOOL_PEN
+.fi
+.in
+.SH LIBINPUT
+Part of the
+.B libinput(1)
+suite
diff -Naur third_party_libinput_bak/tools/libinput-analyze-recording.py third_party_libinput_new/tools/libinput-analyze-recording.py
--- third_party_libinput_bak/tools/libinput-analyze-recording.py	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/tools/libinput-analyze-recording.py	2023-03-29 17:29:11.635089300 +0800
@@ -0,0 +1,189 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8
+# vim: set expandtab shiftwidth=4:
+# -*- Mode: python; coding: utf-8; indent-tabs-mode: nil -*- */
+#
+# Copyright © 2021 Red Hat, Inc.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the 'Software'),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice (including the next
+# paragraph) shall be included in all copies or substantial portions of the
+# Software.
+#
+# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+#
+# Prints the data from a libinput recording in a table format to ease
+# debugging.
+#
+# Input is a libinput record yaml file
+
+import argparse
+import sys
+import yaml
+import libevdev
+
+# minimum width of a field in the table
+MIN_FIELD_WIDTH = 6
+
+
+# Default is to just return the value of an axis, but some axes want special
+# formatting.
+def format_value(code, value):
+    if code in (libevdev.EV_ABS.ABS_MISC, libevdev.EV_MSC.MSC_SERIAL):
+        return f"{value & 0xFFFFFFFF:#x}"
+
+    # Rel axes we always print the sign
+    if code.type == libevdev.EV_REL:
+        return f"{value:+d}"
+
+    return f"{value}"
+
+
+# The list of axes we want to track
+def is_tracked_axis(code):
+    if code.type in (libevdev.EV_KEY, libevdev.EV_SW, libevdev.EV_SYN):
+        return False
+
+    # We don't do slots in this tool
+    if code.type == libevdev.EV_ABS:
+        if libevdev.EV_ABS.ABS_MT_SLOT <= code <= libevdev.EV_ABS.ABS_MAX:
+            return False
+
+    return True
+
+
+def main(argv):
+    parser = argparse.ArgumentParser(
+        description="Display a recording in a tabular format"
+    )
+    parser.add_argument(
+        "path", metavar="recording", nargs=1, help="Path to libinput-record YAML file"
+    )
+    args = parser.parse_args()
+
+    yml = yaml.safe_load(open(args.path[0]))
+    if yml["ndevices"] > 1:
+        print(f"WARNING: Using only first {yml['ndevices']} devices in recording")
+    device = yml["devices"][0]
+
+    if not device["events"]:
+        print(f"No events found in recording")
+        sys.exit(1)
+
+    def events():
+        """
+        Yields the next event in the recording
+        """
+        for event in device["events"]:
+            for evdev in event.get("evdev", []):
+                yield libevdev.InputEvent(
+                    code=libevdev.evbit(evdev[2], evdev[3]),
+                    value=evdev[4],
+                    sec=evdev[0],
+                    usec=evdev[1],
+                )
+
+    def interesting_axes(events):
+        """
+        Yields the libevdev codes with the axes in this recording
+        """
+        used_axes = []
+        for e in events:
+            if e.code not in used_axes and is_tracked_axis(e.code):
+                yield e.code
+                used_axes.append(e.code)
+
+    # Compile all axes that we want to print first
+    axes = sorted(
+        interesting_axes(events()), key=lambda x: x.type.value * 1000 + x.value
+    )
+    # Strip the REL_/ABS_ prefix for the headers
+    headers = [a.name[4:].rjust(MIN_FIELD_WIDTH) for a in axes]
+    # for easier formatting later, we keep the header field width in a dict
+    axes = {a: len(h) for a, h in zip(axes, headers)}
+
+    # Time is a special case, always the first entry
+    # Format uses ms only, we rarely ever care about µs
+    headers = [f"{'Time':<7s}"] + headers + ["Keys"]
+    header_line = f"{' | '.join(headers)}"
+    print(header_line)
+    print("-" * len(header_line))
+
+    current_frame = {}  # {evdev-code: value}
+    axes_in_use = {}  # to print axes never sending events
+    last_fields = []  # to skip duplicate lines
+    continuation_count = 0
+
+    keystate = {}
+    keystate_changed = False
+
+    for e in events():
+        axes_in_use[e.code] = True
+
+        if e.code.type == libevdev.EV_KEY:
+            keystate[e.code] = e.value
+            keystate_changed = True
+        elif is_tracked_axis(e.code):
+            current_frame[e.code] = e.value
+        elif e.code == libevdev.EV_SYN.SYN_REPORT:
+            fields = []
+            for a in axes:
+                s = format_value(a, current_frame[a]) if a in current_frame else " "
+                fields.append(s.rjust(max(MIN_FIELD_WIDTH, axes[a])))
+            current_frame = {}
+
+            if last_fields != fields or keystate_changed:
+                last_fields = fields.copy()
+                keystate_changed = False
+
+                if continuation_count:
+                    continuation_count = 0
+                    print("")
+
+                fields.insert(0, f"{e.sec: 3d}.{e.usec//1000:03d}")
+                keys_down = [k.name for k, v in keystate.items() if v]
+                fields.append(", ".join(keys_down))
+                print(" | ".join(fields))
+            else:
+                continuation_count += 1
+                print(f"\r ... +{continuation_count}", end="", flush=True)
+
+    # Print out any rel/abs axes that not generate events in
+    # this recording
+    unused_axes = []
+    for evtype, evcodes in device["evdev"]["codes"].items():
+        for c in evcodes:
+            code = libevdev.evbit(int(evtype), int(c))
+            if is_tracked_axis(code) and code not in axes_in_use:
+                unused_axes.append(code)
+
+    if unused_axes:
+        print(
+            f"Axes present but without events: {', '.join([a.name for a in unused_axes])}"
+        )
+
+    for e in events():
+        if libevdev.EV_ABS.ABS_MT_SLOT <= code <= libevdev.EV_ABS.ABS_MAX:
+            print(
+                "WARNING: This recording contains multitouch data that is not supported by this tool."
+            )
+            break
+
+
+if __name__ == "__main__":
+    try:
+        main(sys.argv)
+    except BrokenPipeError:
+        pass
diff -Naur third_party_libinput_bak/tools/libinput-analyze-touch-down-state.man third_party_libinput_new/tools/libinput-analyze-touch-down-state.man
--- third_party_libinput_bak/tools/libinput-analyze-touch-down-state.man	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/tools/libinput-analyze-touch-down-state.man	2023-03-29 17:29:31.263103100 +0800
@@ -0,0 +1,45 @@
+.TH libinput-analyze-touch-down-state "1"
+.SH NAME
+libinput\-analyze\-touch\-down\-state \- analyze the touch states
+.SH SYNOPSIS
+.B libinput analyze touch-down-state [\-\-help] [options] \fIrecording.yml\fI
+.SH DESCRIPTION
+.PP
+The
+.B "libinput analyze touch\-down\state"
+tool analyzes a recording made with
+.B "libinput record"
+and prints "down" state of each touch. This tool aids with the detection of stuck touches.
+.PP
+This is a debugging tool only, its output may change at any time. Do not
+rely on the output.
+.SH OPTIONS
+.TP 8
+.B \-\-help
+Print help
+.TP 8
+.B \-\-use-st
+Use the single-touch BTN_TOOL_ bits instead of the slot state. The output
+will only show the "highest" finger down at any time. For examples, where
+two fingers are down, only the second slot will be marked as down.
+.SH OUTPUT
+An example output for a two-finger alternating sequence below.
+.PP
+.nf
+.sf
+  6.140281 +1062ms: x | x
+  7.410377 +1257ms:   | x
+  7.420200    +9ms:   |
+ 11.233108 +3812ms: x | x
+ 11.245721   +12ms: x | x
+ 11.850206  +604ms:   |
+ 13.827740 +1977ms: x |
+ 13.839723   +11ms: x |
+ 14.704027  +864ms: x | x
+ 14.716691   +12ms: x | x
+.fi
+.in
+.SH LIBINPUT
+Part of the
+.B libinput(1)
+suite
diff -Naur third_party_libinput_bak/tools/libinput-analyze-touch-down-state.py third_party_libinput_new/tools/libinput-analyze-touch-down-state.py
--- third_party_libinput_bak/tools/libinput-analyze-touch-down-state.py	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/tools/libinput-analyze-touch-down-state.py	2023-03-29 17:29:58.030457700 +0800
@@ -0,0 +1,202 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8
+# vim: set expandtab shiftwidth=4:
+# -*- Mode: python; coding: utf-8; indent-tabs-mode: nil -*- */
+#
+# Copyright © 2020 Red Hat, Inc.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the 'Software'),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice (including the next
+# paragraph) shall be included in all copies or substantial portions of the
+# Software.
+#
+# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+#
+#
+# Prints the down/up state of each touch slot
+#
+# Input is a libinput record yaml file
+
+import argparse
+import enum
+import sys
+import yaml
+import libevdev
+
+
+class Slot:
+    class State(enum.Enum):
+        NONE = "NONE"
+        BEGIN = "BEGIN"
+        UPDATE = "UPDATE"
+        END = "END"
+
+    def __init__(self, index):
+        self._state = Slot.State.NONE
+        self.index = index
+        self.used = False
+
+    def begin(self):
+        assert self.state == Slot.State.NONE
+        self.state = Slot.State.BEGIN
+
+    def end(self):
+        assert self.state in (Slot.State.BEGIN, Slot.State.UPDATE)
+        self.state = Slot.State.END
+
+    def sync(self):
+        if self.state == Slot.State.BEGIN:
+            self.state = Slot.State.UPDATE
+        elif self.state == Slot.State.END:
+            self.state = Slot.State.NONE
+
+    @property
+    def state(self):
+        return self._state
+
+    @state.setter
+    def state(self, newstate):
+        assert newstate in Slot.State
+
+        if newstate != Slot.State.NONE:
+            self.used = True
+        self._state = newstate
+
+    @property
+    def is_active(self):
+        return self.state in (Slot.State.BEGIN, Slot.State.UPDATE)
+
+    def __str__(self):
+        return "+" if self.state in (Slot.State.BEGIN, Slot.State.UPDATE) else " "
+
+
+def main(argv):
+    parser = argparse.ArgumentParser(description="Print the state of touches over time")
+    parser.add_argument(
+        "--use-st", action="store_true", help="Ignore slots, use the BTN_TOOL bits"
+    )
+    parser.add_argument(
+        "path", metavar="recording", nargs=1, help="Path to libinput-record YAML file"
+    )
+    args = parser.parse_args()
+
+    yml = yaml.safe_load(open(args.path[0]))
+    device = yml["devices"][0]
+    absinfo = device["evdev"]["absinfo"]
+    try:
+        nslots = absinfo[libevdev.EV_ABS.ABS_MT_SLOT.value][1] + 1
+    except KeyError:
+        args.use_st = True
+
+    tool_slot_map = {
+        libevdev.EV_KEY.BTN_TOOL_FINGER: 0,
+        libevdev.EV_KEY.BTN_TOOL_PEN: 0,
+        libevdev.EV_KEY.BTN_TOOL_DOUBLETAP: 1,
+        libevdev.EV_KEY.BTN_TOOL_TRIPLETAP: 2,
+        libevdev.EV_KEY.BTN_TOOL_QUADTAP: 3,
+        libevdev.EV_KEY.BTN_TOOL_QUINTTAP: 4,
+    }
+    if args.use_st:
+        for bit in tool_slot_map:
+            if bit.value in device["evdev"]["codes"][libevdev.EV_KEY.value]:
+                nslots = max(nslots, tool_slot_map[bit])
+
+    slots = [Slot(i) for i in range(0, nslots)]
+    # We claim the first slots are used just to make the formatting
+    # more consistent
+    for i in range(min(5, len(slots))):
+        slots[i].used = True
+
+    slot = 0
+    last_time = None
+    last_slot_state = None
+    header = "Timestamp | Rel time |     Slots     |"
+    print(header)
+    print("-" * len(header))
+
+    def events():
+        for event in device["events"]:
+            for evdev in event["evdev"]:
+                yield evdev
+
+    for evdev in events():
+        e = libevdev.InputEvent(
+            code=libevdev.evbit(evdev[2], evdev[3]),
+            value=evdev[4],
+            sec=evdev[0],
+            usec=evdev[1],
+        )
+
+        # single-touch formatting is simpler than multitouch, it'll just
+        # show the highest finger down rather than the correct output.
+        if args.use_st:
+            if e.code in tool_slot_map:
+                slot = tool_slot_map[e.code]
+                s = slots[slot]
+                if e.value:
+                    s.begin()
+                else:
+                    s.end()
+        else:
+            if e.code == libevdev.EV_ABS.ABS_MT_SLOT:
+                slot = e.value
+                s = slots[slot]
+                # bcm5974 cycles through slot numbers, so let's say all below
+                # our current slot number was used
+                for sl in slots[: slot + 1]:
+                    sl.used = True
+            else:
+                s = slots[slot]
+                if e.code == libevdev.EV_ABS.ABS_MT_TRACKING_ID:
+                    if e.value == -1:
+                        s.end()
+                    else:
+                        s.begin()
+                elif e.code in (
+                    libevdev.EV_ABS.ABS_MT_POSITION_X,
+                    libevdev.EV_ABS.ABS_MT_POSITION_Y,
+                    libevdev.EV_ABS.ABS_MT_PRESSURE,
+                    libevdev.EV_ABS.ABS_MT_TOUCH_MAJOR,
+                    libevdev.EV_ABS.ABS_MT_TOUCH_MINOR,
+                ):
+                    # If recording started after touch down
+                    if s.state == Slot.State.NONE:
+                        s.begin()
+
+        if e.code == libevdev.EV_SYN.SYN_REPORT:
+            current_slot_state = tuple(s.is_active for s in slots)
+
+            if current_slot_state != last_slot_state:
+                if last_time is None:
+                    last_time = e.sec * 1000000 + e.usec
+                    tdelta = 0
+                else:
+                    t = e.sec * 1000000 + e.usec
+                    tdelta = int((t - last_time) / 1000) / 1000
+                    last_time = t
+
+                fmt = " | ".join([str(s) for s in slots if s.used])
+                print(
+                    "{:2d}.{:06d} | {:+7.3f}s | {}".format(e.sec, e.usec, tdelta, fmt)
+                )
+
+                last_slot_state = current_slot_state
+
+            for s in slots:
+                s.sync()
+
+
+if __name__ == "__main__":
+    main(sys.argv)
diff -Naur third_party_libinput_bak/tools/libinput-analyze.man third_party_libinput_new/tools/libinput-analyze.man
--- third_party_libinput_bak/tools/libinput-analyze.man	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-analyze.man	2023-03-29 17:27:34.701031700 +0800
@@ -24,6 +24,13 @@
 .TP 8
 .B libinput\-analyze\-per-slot-delta(1)
 analyze the delta per event per slot
+.TP 8
+.B libinput\-analyze\-recording(1)
+analyze a recording made with
+.B libinput\-record(1)
+.TP 8
+.B libinput\-analyze\-touch-down-state(1)
+analyze the state of each touch in a recording
 .SH LIBINPUT
 Part of the
 .B libinput(1)
diff -Naur third_party_libinput_bak/tools/libinput-debug-events.c third_party_libinput_new/tools/libinput-debug-events.c
--- third_party_libinput_bak/tools/libinput-debug-events.c	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-debug-events.c	2023-03-30 10:15:09.362683600 +0800
@@ -86,6 +86,15 @@
 	case LIBINPUT_EVENT_POINTER_AXIS:
 		type = "POINTER_AXIS";
 		break;
+	case LIBINPUT_EVENT_POINTER_SCROLL_WHEEL:
+		type = "POINTER_SCROLL_WHEEL";
+		break;
+	case LIBINPUT_EVENT_POINTER_SCROLL_FINGER:
+		type = "POINTER_SCROLL_FINGER";
+		break;
+	case LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS:
+		type = "POINTER_SCROLL_CONTINUOUS";
+		break;
 	case LIBINPUT_EVENT_TOUCH_DOWN:
 		type = "TOUCH_DOWN";
 		break;
@@ -119,6 +128,12 @@
 	case LIBINPUT_EVENT_GESTURE_PINCH_END:
 		type = "GESTURE_PINCH_END";
 		break;
+	case LIBINPUT_EVENT_GESTURE_HOLD_BEGIN:
+		type = "GESTURE_HOLD_BEGIN";
+		break;
+	case LIBINPUT_EVENT_GESTURE_HOLD_END:
+		type = "GESTURE_HOLD_END";
+		break;
 	case LIBINPUT_EVENT_TABLET_TOOL_AXIS:
 		type = "TABLET_TOOL_AXIS";
 		break;
@@ -150,7 +165,7 @@
 
 	prefix = (last_device != dev) ? '-' : ' ';
 
-	printq("%c%-7s  %-16s ",
+	printq("%c%-7s  %-23s ",
 	       prefix,
 	       libinput_device_get_sysname(dev),
 	       type);
@@ -289,7 +304,7 @@
 }
 
 static void
-print_key_event(struct libinput *li, struct libinput_event *ev)
+print_key_event(struct libinput_event *ev)
 {
 	struct libinput_event_keyboard *k = libinput_event_get_keyboard_event(ev);
 	enum libinput_key_state state;
@@ -468,46 +483,49 @@
 print_pointer_axis_event(struct libinput_event *ev)
 {
 	struct libinput_event_pointer *p = libinput_event_get_pointer_event(ev);
-	double v = 0, h = 0;
-	int dv = 0, dh = 0;
+	double v = 0, h = 0, v120 = 0, h120 = 0;
 	const char *have_vert = "",
 		   *have_horiz = "";
 	const char *source = "invalid";
+	enum libinput_pointer_axis axis;
+	enum libinput_event_type type;
+
+	type = libinput_event_get_type(ev);
 
-	switch (libinput_event_pointer_get_axis_source(p)) {
-	case LIBINPUT_POINTER_AXIS_SOURCE_WHEEL:
+	switch (type) {
+	case LIBINPUT_EVENT_POINTER_SCROLL_WHEEL:
 		source = "wheel";
 		break;
-	case LIBINPUT_POINTER_AXIS_SOURCE_FINGER:
+	case LIBINPUT_EVENT_POINTER_SCROLL_FINGER:
 		source = "finger";
 		break;
-	case LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS:
+	case LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS:
 		source = "continuous";
 		break;
-	case LIBINPUT_POINTER_AXIS_SOURCE_WHEEL_TILT:
-		source = "tilt";
+	default:
+		abort();
 		break;
 	}
 
-	if (libinput_event_pointer_has_axis(p,
-				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL)) {
-		v = libinput_event_pointer_get_axis_value(p,
-			      LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
-		dv = libinput_event_pointer_get_axis_value_discrete(p,
-			      LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
+	axis = LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL;
+	if (libinput_event_pointer_has_axis(p, axis)) {
+		v = libinput_event_pointer_get_scroll_value(p, axis);
+		if (type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL)
+			v120 = libinput_event_pointer_get_scroll_value_v120(p, axis);
 		have_vert = "*";
 	}
-	if (libinput_event_pointer_has_axis(p,
-				LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL)) {
-		h = libinput_event_pointer_get_axis_value(p,
-			      LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL);
-		dh = libinput_event_pointer_get_axis_value_discrete(p,
-			      LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL);
+	axis = LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL;
+	if (libinput_event_pointer_has_axis(p, axis)) {
+		h = libinput_event_pointer_get_scroll_value(p, axis);
+		if (type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL)
+			h120 = libinput_event_pointer_get_scroll_value_v120(p, axis);
 		have_horiz = "*";
 	}
+
 	print_event_time(libinput_event_pointer_get_time(p));
-	printq("vert %.2f/%d%s horiz %.2f/%d%s (%s)\n",
-	       v, dv, have_vert, h, dh, have_horiz, source);
+	printq("vert %.2f/%.1f%s horiz %.2f/%.1f%s (%s)\n",
+	       v, v120, have_vert,
+	       h, h120, have_horiz, source);
 }
 
 static void
@@ -521,15 +539,6 @@
 }
 
 static void
-print_touch_event_without_coords(struct libinput_event *ev)
-{
-	struct libinput_event_touch *t = libinput_event_get_touch_event(ev);
-
-	print_event_time(libinput_event_touch_get_time(t));
-	printq("\n");
-}
-
-static void
 print_proximity_event(struct libinput_event *ev)
 {
 	struct libinput_event_tablet_tool *t = libinput_event_get_tablet_tool_event(ev);
@@ -629,21 +638,30 @@
 }
 
 static void
-print_touch_event_with_coords(struct libinput_event *ev)
+print_touch_event(struct libinput_event *ev)
 {
 	struct libinput_event_touch *t = libinput_event_get_touch_event(ev);
-	double x = libinput_event_touch_get_x_transformed(t, screen_width);
-	double y = libinput_event_touch_get_y_transformed(t, screen_height);
-	double xmm = libinput_event_touch_get_x(t);
-	double ymm = libinput_event_touch_get_y(t);
+	enum libinput_event_type type = libinput_event_get_type(ev);
 
 	print_event_time(libinput_event_touch_get_time(t));
 
-	printq("%d (%d) %5.2f/%5.2f (%5.2f/%5.2fmm)\n",
-	       libinput_event_touch_get_slot(t),
-	       libinput_event_touch_get_seat_slot(t),
-	       x, y,
-	       xmm, ymm);
+	if (type != LIBINPUT_EVENT_TOUCH_FRAME) {
+		printq("%d (%d)",
+		       libinput_event_touch_get_slot(t),
+		       libinput_event_touch_get_seat_slot(t));
+	}
+
+	if (type == LIBINPUT_EVENT_TOUCH_DOWN ||
+	    type == LIBINPUT_EVENT_TOUCH_MOTION) {
+		double x = libinput_event_touch_get_x_transformed(t, screen_width);
+		double y = libinput_event_touch_get_y_transformed(t, screen_height);
+		double xmm = libinput_event_touch_get_x(t);
+		double ymm = libinput_event_touch_get_y(t);
+
+		printq(" %5.2f/%5.2f (%5.2f/%5.2fmm)", x, y, xmm, ymm);
+	}
+
+	printq("\n");
 }
 
 static void
@@ -657,7 +675,8 @@
 	type = libinput_event_get_type(ev);
 
 	if (type == LIBINPUT_EVENT_GESTURE_SWIPE_END ||
-	    type == LIBINPUT_EVENT_GESTURE_PINCH_END)
+	    type == LIBINPUT_EVENT_GESTURE_PINCH_END ||
+	    type == LIBINPUT_EVENT_GESTURE_HOLD_END)
 	    cancelled = libinput_event_gesture_get_cancelled(t);
 
 	print_event_time(libinput_event_gesture_get_time(t));
@@ -824,11 +843,14 @@
 	int rc = -1;
 	struct libinput_event *ev;
 
-	libinput_dispatch(li);
+	tools_dispatch(li);
 	while ((ev = libinput_get_event(li))) {
-		print_event_header(ev);
+		enum libinput_event_type type = libinput_event_get_type(ev);
 
-		switch (libinput_event_get_type(ev)) {
+		if (type != LIBINPUT_EVENT_POINTER_AXIS)
+			print_event_header(ev);
+
+		switch (type) {
 		case LIBINPUT_EVENT_NONE:
 			abort();
 		case LIBINPUT_EVENT_DEVICE_ADDED:
@@ -840,7 +862,7 @@
 			print_device_notify(ev);
 			break;
 		case LIBINPUT_EVENT_KEYBOARD_KEY:
-			print_key_event(li, ev);
+			print_key_event(ev);
 			break;
 		case LIBINPUT_EVENT_POINTER_MOTION:
 			print_motion_event(ev);
@@ -852,22 +874,19 @@
 			print_pointer_button_event(ev);
 			break;
 		case LIBINPUT_EVENT_POINTER_AXIS:
+			/* ignore */
+			break;
+		case LIBINPUT_EVENT_POINTER_SCROLL_WHEEL:
+		case LIBINPUT_EVENT_POINTER_SCROLL_FINGER:
+		case LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS:
 			print_pointer_axis_event(ev);
 			break;
 		case LIBINPUT_EVENT_TOUCH_DOWN:
-			print_touch_event_with_coords(ev);
-			break;
 		case LIBINPUT_EVENT_TOUCH_MOTION:
-			print_touch_event_with_coords(ev);
-			break;
 		case LIBINPUT_EVENT_TOUCH_UP:
-			print_touch_event_without_coords(ev);
-			break;
 		case LIBINPUT_EVENT_TOUCH_CANCEL:
-			print_touch_event_without_coords(ev);
-			break;
 		case LIBINPUT_EVENT_TOUCH_FRAME:
-			print_touch_event_without_coords(ev);
+			print_touch_event(ev);
 			break;
 		case LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN:
 			print_gesture_event_without_coords(ev);
@@ -887,6 +906,12 @@
 		case LIBINPUT_EVENT_GESTURE_PINCH_END:
 			print_gesture_event_without_coords(ev);
 			break;
+		case LIBINPUT_EVENT_GESTURE_HOLD_BEGIN:
+			print_gesture_event_without_coords(ev);
+			break;
+		case LIBINPUT_EVENT_GESTURE_HOLD_END:
+			print_gesture_event_without_coords(ev);
+			break;
 		case LIBINPUT_EVENT_TABLET_TOOL_AXIS:
 			print_tablet_axis_event(ev);
 			break;
@@ -917,7 +942,6 @@
 		}
 
 		libinput_event_destroy(ev);
-		libinput_dispatch(li);
 		rc = 0;
 	}
 	return rc;
diff -Naur third_party_libinput_bak/tools/libinput-debug-gui.c third_party_libinput_new/tools/libinput-debug-gui.c
--- third_party_libinput_bak/tools/libinput-debug-gui.c	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-debug-gui.c	2023-03-30 10:17:52.299846200 +0800
@@ -48,6 +48,26 @@
 
 #include "shared.h"
 
+#ifdef GDK_WINDOWING_WAYLAND
+	#include <wayland-client.h>
+	#include "pointer-constraints-unstable-v1-client-protocol.h"
+	#if HAVE_GTK4
+		#include <gdk/wayland/gdkwayland.h>
+	#else
+		#include <gdk/gdkwayland.h>
+	#endif
+#endif
+
+#ifdef GDK_WINDOWING_X11
+	#include <X11/X.h>
+	#include <X11/Xlib.h>
+	#if HAVE_GTK4
+		#include <gdk/x11/gdkx.h>
+	#else
+		#include <gdk/gdkx.h>
+	#endif
+#endif
+
 #define clip(val_, min_, max_) min((max_), max((min_), (val_)))
 
 enum touch_state {
@@ -65,10 +85,6 @@
 	double x, y;
 };
 
-struct device_user_data {
-	struct point scroll_accumulated;
-};
-
 struct evdev_device {
 	struct list node;
 	struct libevdev *evdev;
@@ -82,12 +98,15 @@
 	struct tools_options options;
 	struct list evdev_devices;
 
+	GMainLoop *event_loop;
+
 	GtkWidget *win;
 	GtkWidget *area;
 	int width, height; /* of window */
 
 	/* sprite position */
-	double x, y;
+	struct point pointer;
+	struct point unaccelerated;
 
 	/* these are for the delta coordinates, but they're not
 	 * deltas, they are converted into abs positions */
@@ -95,7 +114,17 @@
 	struct point deltas[64];
 
 	/* abs position */
-	int absx, absy;
+	struct point abs;
+
+	/* Wayland and X11 pointer locking */
+	struct {
+		bool locked;
+
+#ifdef GDK_WINDOWING_WAYLAND
+		struct zwp_pointer_constraints_v1 *wayland_pointer_constraints;
+		struct zwp_locked_pointer_v1 *wayland_locked_pointer;
+#endif
+	} lock_pointer;
 
 	/* scroll bar positions */
 	struct {
@@ -130,6 +159,11 @@
 	} pinch;
 
 	struct {
+		int nfingers;
+		bool active;
+	} hold;
+
+	struct {
 		double x, y;
 		double x_in, y_in;
 		double x_down, y_down;
@@ -173,6 +207,180 @@
 	struct libinput_device *devices[50];
 };
 
+#ifdef GDK_WINDOWING_WAYLAND
+static void
+wayland_registry_global(void *data,
+			struct wl_registry *registry,
+			uint32_t name,
+			const char *interface,
+			uint32_t version)
+{
+	struct window *w = data;
+
+	if (!g_strcmp0(interface, "zwp_pointer_constraints_v1")) {
+		w->lock_pointer.wayland_pointer_constraints =
+			wl_registry_bind(registry,
+					 name,
+					 &zwp_pointer_constraints_v1_interface,
+					 1);
+        }
+}
+
+static void
+wayland_registry_global_remove(void *data,
+			       struct wl_registry *wl_registry,
+			       uint32_t name)
+{
+
+}
+
+struct wl_registry_listener registry_listener = {
+	wayland_registry_global,
+	wayland_registry_global_remove
+};
+
+static bool
+wayland_lock_pointer(struct window *w)
+{
+	GdkDisplay *gdk_display;
+	GdkSeat *gdk_seat;
+	GdkDevice *gdk_device;
+	struct wl_display *display;
+	struct wl_registry *registry;
+	struct wl_pointer *wayland_pointer;
+	struct wl_surface *surface;
+
+	w->lock_pointer.wayland_pointer_constraints = NULL;
+
+	gdk_display = gdk_display_get_default();
+	display = gdk_wayland_display_get_wl_display(gdk_display);
+
+	gdk_seat = gdk_display_get_default_seat(gdk_display);
+	gdk_device = gdk_seat_get_pointer(gdk_seat);
+	wayland_pointer = gdk_wayland_device_get_wl_pointer(gdk_device);
+
+	registry = wl_display_get_registry(display);
+	wl_registry_add_listener(registry, &registry_listener, w);
+	wl_display_roundtrip(display);
+
+	if (!w->lock_pointer.wayland_pointer_constraints)
+		return false;
+
+#if HAVE_GTK4
+	GtkNative *window = gtk_widget_get_native(w->win);
+	GdkSurface *gdk_surface = gtk_native_get_surface(window);
+	surface = gdk_wayland_surface_get_wl_surface(gdk_surface);
+#else
+	GdkWindow *window = gtk_widget_get_window(w->win);
+	surface = gdk_wayland_window_get_wl_surface(window);
+#endif
+
+	w->lock_pointer.wayland_locked_pointer =
+		zwp_pointer_constraints_v1_lock_pointer(w->lock_pointer.wayland_pointer_constraints,
+							surface,
+							wayland_pointer,
+							NULL,
+							ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_PERSISTENT);
+
+	return true;
+}
+
+static void
+wayland_unlock_pointer(struct window *w)
+{
+	w->lock_pointer.wayland_pointer_constraints = NULL;
+	zwp_locked_pointer_v1_destroy(w->lock_pointer.wayland_locked_pointer);
+}
+
+static inline bool
+backend_is_wayland(void)
+{
+	return GDK_IS_WAYLAND_DISPLAY(gdk_display_get_default());
+}
+#endif /* GDK_WINDOWING_WAYLAND */
+
+#ifdef GDK_WINDOWING_X11
+static bool
+x_lock_pointer(struct window *w)
+{
+	Display *x_display;
+	Window x_win;
+	int result;
+
+	x_display = GDK_DISPLAY_XDISPLAY(gdk_display_get_default());
+
+#if HAVE_GTK4
+	GtkNative *window = gtk_widget_get_native(w->win);
+	GdkSurface *surface = gtk_native_get_surface(window);
+	x_win = GDK_SURFACE_XID(surface);
+#else
+	GdkWindow *window = gtk_widget_get_window(w->win);
+	x_win = GDK_WINDOW_XID(window);
+#endif
+
+	result = XGrabPointer(x_display, x_win,
+			      False, NoEventMask,
+			      GrabModeAsync, GrabModeAsync,
+			      x_win,
+			      None,
+			      CurrentTime);
+	return (result == GrabSuccess);
+}
+
+static void
+x_unlock_pointer(struct window *w)
+{
+	Display *x_display;
+
+	x_display = GDK_DISPLAY_XDISPLAY(gdk_display_get_default());
+
+	XUngrabPointer(x_display, CurrentTime);
+}
+
+static inline bool
+backend_is_x11(void)
+{
+	return GDK_IS_X11_DISPLAY(gdk_display_get_default());
+}
+#endif /* GDK_WINDOWING_X11 */
+
+static bool
+window_lock_pointer(struct window *w)
+{
+	w->lock_pointer.locked = false;
+
+#ifdef GDK_WINDOWING_WAYLAND
+	if (backend_is_wayland())
+		w->lock_pointer.locked = wayland_lock_pointer(w);
+#endif
+
+#ifdef GDK_WINDOWING_X11
+	if (backend_is_x11())
+		w->lock_pointer.locked = x_lock_pointer(w);
+#endif
+
+	return w->lock_pointer.locked;
+}
+
+static void
+window_unlock_pointer(struct window *w)
+{
+	if (!w->lock_pointer.locked)
+		return;
+
+	w->lock_pointer.locked = false;
+
+#ifdef GDK_WINDOWING_WAYLAND
+	if (backend_is_wayland())
+		wayland_unlock_pointer(w);
+#endif
+
+#ifdef GDK_WINDOWING_X11
+	if (backend_is_x11())
+		x_unlock_pointer(w);
+#endif
+}
+
 LIBINPUT_ATTRIBUTE_PRINTF(1, 2)
 static inline void
 msg(const char *fmt, ...)
@@ -310,19 +518,18 @@
 static inline void
 draw_gestures(struct window *w, cairo_t *cr)
 {
-	int i;
 	int offset;
 
 	/* swipe */
 	cairo_save(cr);
 	cairo_translate(cr, w->swipe.x, w->swipe.y);
-	for (i = 0; i < w->swipe.nfingers; i++) {
+	for (int i = 0; i < w->swipe.nfingers; i++) {
 		cairo_set_source_rgb(cr, .8, .8, .4);
 		cairo_arc(cr, (i - 2) * 40, 0, 20, 0, 2 * M_PI);
 		cairo_fill(cr);
 	}
 
-	for (i = 0; i < 4; i++) { /* 4 fg max */
+	for (int i = 0; i < 4; i++) { /* 4 fg max */
 		cairo_set_source_rgb(cr, 0, 0, 0);
 		cairo_arc(cr, (i - 2) * 40, 0, 20, 0, 2 * M_PI);
 		cairo_stroke(cr);
@@ -348,6 +555,29 @@
 	cairo_stroke(cr);
 
 	cairo_restore(cr);
+
+	/* hold */
+	cairo_save(cr);
+	cairo_translate(cr, w->width/2, w->height/2 + 100);
+
+	for (int i = 4; i > 0; i--) { /* 4 fg max */
+		double r, g, b, hold_alpha;
+
+		r = .4 + .2 * (i % 2);
+		g = .2;
+		b = .2;
+		hold_alpha = (w->hold.active && i <= w->hold.nfingers) ? 1 : .5;
+
+		cairo_set_source_rgba(cr, r, g, b, hold_alpha);
+		cairo_arc(cr, 0, 0, 20 * i, 0, 2 * M_PI);
+		cairo_fill(cr);
+
+		cairo_set_source_rgba(cr, 0, 0, 0, hold_alpha);
+		cairo_arc(cr, 0, 0, 20 * i, 0, 2 * M_PI);
+		cairo_stroke(cr);
+	}
+
+	cairo_restore(cr);
 }
 
 static inline void
@@ -396,7 +626,7 @@
 
 	cairo_save(cr);
 	cairo_set_source_rgb(cr, .2, .4, .8);
-	cairo_arc(cr, w->absx, w->absy, 10, 0, 2 * M_PI);
+	cairo_arc(cr, w->abs.x, w->abs.y, 10, 0, 2 * M_PI);
 	cairo_fill(cr);
 	cairo_restore(cr);
 }
@@ -645,12 +875,21 @@
 	/* draw pointer sprite */
 	cairo_set_source_rgb(cr, 0, 0, 0);
 	cairo_save(cr);
-	cairo_move_to(cr, w->x, w->y);
+	cairo_move_to(cr, w->pointer.x, w->pointer.y);
 	cairo_rel_line_to(cr, 10, 15);
 	cairo_rel_line_to(cr, -10, 0);
 	cairo_rel_line_to(cr, 0, -15);
 	cairo_fill(cr);
 
+	/* draw unaccelerated sprite */
+	cairo_set_source_rgb(cr, 0.7, 0.7, 0.7);
+	cairo_save(cr);
+	cairo_move_to(cr, w->unaccelerated.x, w->unaccelerated.y);
+	cairo_rel_line_to(cr, -5, -10);
+	cairo_rel_line_to(cr, 10, 0);
+	cairo_rel_line_to(cr, -5, 10);
+	cairo_fill(cr);
+
 	/* pointer deltas */
 	mask = ARRAY_LENGTH(w->deltas);
 	first = max(w->ndeltas + 1, mask) - mask;
@@ -753,18 +992,34 @@
 	return TRUE;
 }
 
+#if HAVE_GTK4
 static void
-map_event_cb(GtkWidget *widget, GdkEvent *event, gpointer data)
+draw_gtk4(GtkDrawingArea *widget,
+	  cairo_t *cr,
+	  int width,
+	  int height,
+	  gpointer data)
 {
-	struct window *w = data;
-	GdkDisplay *display;
-	GdkSeat *seat;
-	GdkWindow *window;
+	draw(GTK_WIDGET(widget), cr, data);
+}
+#endif
 
+static void
+window_place_ui_elements(GtkWidget *widget, struct window *w)
+{
+#if HAVE_GTK4
+	w->width = gtk_widget_get_width(w->area);
+	w->height = gtk_widget_get_height(w->area);
+#else
 	gtk_window_get_size(GTK_WINDOW(widget), &w->width, &w->height);
+#endif
 
-	w->x = w->width/2;
-	w->y = w->height/2;
+	w->pointer.x = w->width/2;
+	w->pointer.y = w->height/2;
+	w->unaccelerated.x = w->width/2;
+	w->unaccelerated.y = w->height/2;
+	w->deltas[0].x = w->pointer.x;
+	w->deltas[0].y = w->pointer.y;
 
 	w->scroll.vx = w->width/2;
 	w->scroll.vy = w->height/2;
@@ -781,6 +1036,34 @@
 	w->pinch.scale = 1.0;
 	w->pinch.x = w->width/2;
 	w->pinch.y = w->height/2;
+}
+
+#if HAVE_GTK4
+static void
+map_event_cb(GtkDrawingArea *widget, int width, int height, gpointer data)
+{
+	struct window *w = data;
+
+	window_place_ui_elements(GTK_WIDGET(widget), w);
+
+	gtk_drawing_area_set_draw_func(GTK_DRAWING_AREA(w->area),
+				       draw_gtk4,
+				       w,
+				       NULL);
+
+	gtk_widget_set_cursor_from_name(w->win, "none");
+
+	window_lock_pointer(w);
+}
+#else
+static void
+map_event_cb(GtkWidget *widget, GdkEvent *event, gpointer data)
+{
+	struct window *w = data;
+	GdkDisplay *display;
+	GdkWindow *window;
+
+	window_place_ui_elements(widget, w);
 
 	g_signal_connect(G_OBJECT(w->area), "draw", G_CALLBACK(draw), w);
 
@@ -791,39 +1074,79 @@
 			      gdk_cursor_new_for_display(display,
 							 GDK_BLANK_CURSOR));
 
-	seat = gdk_display_get_default_seat(display);
-	gdk_seat_grab(seat,
-		      window,
-		      GDK_SEAT_CAPABILITY_ALL_POINTING,
-		      FALSE, /* owner-events */
-		      NULL, /* cursor */
-		      NULL, /* triggering event */
-		      NULL, /* prepare_func */
-		      NULL /* prepare_func_data */
-		     );
+	window_lock_pointer(w);
 }
+#endif
+
+static void
+window_quit(struct window *w)
+{
+	g_main_loop_quit(w->event_loop);
+}
+
+#if HAVE_GTK4
+static gboolean
+window_delete_event_cb(GtkWindow *window, gpointer data)
+{
+	struct window *w = data;
+
+	window_quit(w);
+
+	return TRUE;
+}
+#else
+static void
+window_delete_event_cb(GtkWidget *widget, GdkEvent *event, gpointer data)
+{
+	struct window *w = data;
+
+	window_quit(w);
+}
+#endif
 
 static void
 window_init(struct window *w)
 {
 	list_init(&w->evdev_devices);
 
+#if HAVE_GTK4
+	w->win = gtk_window_new();
+#else
 	w->win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-	if (getenv("LIBINPUT_RUNNING_TEST_SUITE"))
+#endif
+
+	if (getenv("LIBINPUT_RUNNING_TEST_SUITE")) {
+#if HAVE_GTK4
+		gtk_window_minimize(GTK_WINDOW(w->win));
+#else
 		gtk_window_iconify(GTK_WINDOW(w->win));
-	gtk_widget_set_events(w->win, 0);
+#endif
+	}
+
 	gtk_window_set_title(GTK_WINDOW(w->win), "libinput debugging tool");
 	gtk_window_set_default_size(GTK_WINDOW(w->win), 1024, 768);
 	gtk_window_maximize(GTK_WINDOW(w->win));
 	gtk_window_set_resizable(GTK_WINDOW(w->win), TRUE);
 	gtk_widget_realize(w->win);
-	g_signal_connect(G_OBJECT(w->win), "map-event", G_CALLBACK(map_event_cb), w);
-	g_signal_connect(G_OBJECT(w->win), "delete-event", G_CALLBACK(gtk_main_quit), NULL);
 
 	w->area = gtk_drawing_area_new();
+
+#if HAVE_GTK4
+	g_signal_connect(G_OBJECT(w->area), "resize", G_CALLBACK(map_event_cb), w);
+	g_signal_connect(G_OBJECT(w->win), "close-request", G_CALLBACK(window_delete_event_cb), w);
+
+	gtk_window_set_child(GTK_WINDOW(w->win), w->area);
+	gtk_widget_show(w->win);
+#else
+	g_signal_connect(G_OBJECT(w->win), "map-event", G_CALLBACK(map_event_cb), w);
+	g_signal_connect(G_OBJECT(w->win), "delete-event", G_CALLBACK(window_delete_event_cb), w);
+
+	gtk_widget_set_events(w->win, 0);
 	gtk_widget_set_events(w->area, 0);
+
 	gtk_container_add(GTK_CONTAINER(w->win), w->area);
 	gtk_widget_show_all(w->win);
+#endif
 
 	w->pad.ring.position = -1;
 	w->pad.strip.position = -1;
@@ -960,7 +1283,6 @@
 	const char *device_node;
 	int fd;
 	struct evdev_device *d;
-	struct device_user_data *data;
 
 	ud = libinput_device_get_udev_device(dev);
 	device_node = udev_device_get_devnode(ud);
@@ -983,9 +1305,6 @@
 	d->evdev = evdev;
 	d->libinput_device =libinput_device_ref(dev);
 
-	data = zalloc(sizeof *data);
-	libinput_device_set_user_data(dev, data);
-
 	c = g_io_channel_unix_new(fd);
 	g_io_channel_set_encoding(c, NULL, NULL);
 	d->source_id = g_io_add_watch(c, G_IO_IN,
@@ -1002,7 +1321,7 @@
 {
 	struct evdev_device *d;
 
-	list_for_each(d, &w->evdev_devices, node) {
+	list_for_each_safe(d, &w->evdev_devices, node) {
 		if (d->libinput_device != dev)
 			continue;
 
@@ -1022,10 +1341,10 @@
 handle_event_device_notify(struct libinput_event *ev)
 {
 	struct libinput_device *dev = libinput_event_get_device(ev);
+	struct libinput_device **device;
 	struct libinput *li;
 	struct window *w;
 	const char *type;
-	size_t i;
 
 	li = libinput_event_get_context(ev);
 	w = libinput_get_user_data(li);
@@ -1046,17 +1365,17 @@
 	    type);
 
 	if (libinput_event_get_type(ev) == LIBINPUT_EVENT_DEVICE_ADDED) {
-		for (i = 0; i < ARRAY_LENGTH(w->devices); i++) {
-			if (w->devices[i] == NULL) {
-				w->devices[i] = libinput_device_ref(dev);
+		ARRAY_FOR_EACH(w->devices, device) {
+			if (*device == NULL) {
+				*device = libinput_device_ref(dev);
 				break;
 			}
 		}
 	} else  {
-		for (i = 0; i < ARRAY_LENGTH(w->devices); i++) {
-			if (w->devices[i] == dev) {
-				libinput_device_unref(w->devices[i]);
-				w->devices[i] = NULL;
+		ARRAY_FOR_EACH(w->devices, device) {
+			if (*device == dev) {
+				libinput_device_unref(*device);
+				*device = NULL;
 				break;
 			}
 		}
@@ -1069,20 +1388,22 @@
 	struct libinput_event_pointer *p = libinput_event_get_pointer_event(ev);
 	double dx = libinput_event_pointer_get_dx(p),
 	       dy = libinput_event_pointer_get_dy(p);
+	double dx_unaccel = libinput_event_pointer_get_dx_unaccelerated(p),
+	       dy_unaccel = libinput_event_pointer_get_dy_unaccelerated(p);
 	struct point point;
 	const int mask = ARRAY_LENGTH(w->deltas);
 	size_t idx;
 
-	w->x += dx;
-	w->y += dy;
-	w->x = clip(w->x, 0.0, w->width);
-	w->y = clip(w->y, 0.0, w->height);
+	w->pointer.x = clip(w->pointer.x + dx, 0.0, w->width);
+	w->pointer.y = clip(w->pointer.y + dy, 0.0, w->height);
+	w->unaccelerated.x = clip(w->unaccelerated.x + dx_unaccel, 0.0, w->width);
+	w->unaccelerated.y = clip(w->unaccelerated.y + dy_unaccel, 0.0, w->height);
 
 	idx = w->ndeltas % mask;
 	point = w->deltas[idx];
 	idx = (w->ndeltas + 1) % mask;
-	point.x += libinput_event_pointer_get_dx_unaccelerated(p);
-	point.y += libinput_event_pointer_get_dy_unaccelerated(p);
+	point.x += dx_unaccel;
+	point.y += dy_unaccel;
 	w->deltas[idx] = point;
 	w->ndeltas++;
 }
@@ -1094,8 +1415,8 @@
 	double x = libinput_event_pointer_get_absolute_x_transformed(p, w->width),
 	       y = libinput_event_pointer_get_absolute_y_transformed(p, w->height);
 
-	w->absx = x;
-	w->absy = y;
+	w->abs.x = x;
+	w->abs.y = y;
 }
 
 static void
@@ -1134,44 +1455,33 @@
 handle_event_axis(struct libinput_event *ev, struct window *w)
 {
 	struct libinput_event_pointer *p = libinput_event_get_pointer_event(ev);
-	struct libinput_device *dev = libinput_event_get_device(ev);
-	struct device_user_data *data = libinput_device_get_user_data(dev);
 	double value;
-	int discrete;
+	enum libinput_pointer_axis axis;
+	enum libinput_event_type type;
 
-	assert(data);
+	type = libinput_event_get_type(ev);
 
-	if (libinput_event_pointer_has_axis(p,
-			LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL)) {
-		value = libinput_event_pointer_get_axis_value(p,
-				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
+	axis = LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL;
+	if (libinput_event_pointer_has_axis(p, axis)) {
+		value = libinput_event_pointer_get_scroll_value(p, axis);
 		w->scroll.vy += value;
 		w->scroll.vy = clip(w->scroll.vy, 0, w->height);
-		data->scroll_accumulated.y += value;
 
-		discrete = libinput_event_pointer_get_axis_value_discrete(p,
-				LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL);
-		if (discrete) {
-			w->scroll.vy_discrete += data->scroll_accumulated.y;
+		if (type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL) {
+			w->scroll.vy_discrete += value;
 			w->scroll.vy_discrete = clip(w->scroll.vy_discrete, 0, w->height);
-			data->scroll_accumulated.y = 0;
 		}
 	}
 
-	if (libinput_event_pointer_has_axis(p,
-			LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL)) {
-		value = libinput_event_pointer_get_axis_value(p,
-				LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL);
+	axis = LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL;
+	if (libinput_event_pointer_has_axis(p, axis)) {
+		value = libinput_event_pointer_get_scroll_value(p, axis);
 		w->scroll.hx += value;
 		w->scroll.hx = clip(w->scroll.hx, 0, w->width);
-		data->scroll_accumulated.x += value;
 
-		discrete = libinput_event_pointer_get_axis_value_discrete(p,
-				LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL);
-		if (discrete) {
-			w->scroll.hx_discrete += data->scroll_accumulated.x;
+		if (type == LIBINPUT_EVENT_POINTER_SCROLL_WHEEL) {
+			w->scroll.hx_discrete += value;
 			w->scroll.hx_discrete = clip(w->scroll.hx_discrete, 0, w->width);
-			data->scroll_accumulated.x = 0;
 		}
 	}
 }
@@ -1296,6 +1606,28 @@
 }
 
 static void
+handle_event_hold(struct libinput_event *ev, struct window *w)
+{
+	struct libinput_event_gesture *g = libinput_event_get_gesture_event(ev);
+	int nfingers;
+
+	nfingers = libinput_event_gesture_get_finger_count(g);
+
+	switch (libinput_event_get_type(ev)) {
+	case LIBINPUT_EVENT_GESTURE_HOLD_BEGIN:
+		w->hold.nfingers = nfingers;
+		w->hold.active = true;
+		break;
+	case LIBINPUT_EVENT_GESTURE_HOLD_END:
+		w->hold.nfingers = nfingers;
+		w->hold.active = false;
+		break;
+	default:
+		abort();
+	}
+}
+
+static void
 handle_event_tablet(struct libinput_event *ev, struct window *w)
 {
 	struct libinput_event_tablet_tool *t = libinput_event_get_tablet_tool_event(ev);
@@ -1342,7 +1674,7 @@
 			w->tool.y_up = y;
 			w->tool.is_down = false;
 		}
-		/* fallthrough */
+		_fallthrough_;
 	case LIBINPUT_EVENT_TABLET_TOOL_AXIS:
 		w->tool.x = x;
 		w->tool.y = y;
@@ -1422,7 +1754,7 @@
 	struct window *w = libinput_get_user_data(li);
 	struct libinput_event *ev;
 
-	libinput_dispatch(li);
+	tools_dispatch(li);
 
 	while ((ev = libinput_get_event(li))) {
 		switch (libinput_event_get_type(ev)) {
@@ -1447,6 +1779,11 @@
 		case LIBINPUT_EVENT_TOUCH_FRAME:
 			break;
 		case LIBINPUT_EVENT_POINTER_AXIS:
+			/* ignore */
+			break;
+		case LIBINPUT_EVENT_POINTER_SCROLL_WHEEL:
+		case LIBINPUT_EVENT_POINTER_SCROLL_FINGER:
+		case LIBINPUT_EVENT_POINTER_SCROLL_CONTINUOUS:
 			handle_event_axis(ev, w);
 			break;
 		case LIBINPUT_EVENT_POINTER_BUTTON:
@@ -1455,7 +1792,7 @@
 		case LIBINPUT_EVENT_KEYBOARD_KEY:
 			if (handle_event_keyboard(ev, w)) {
 				libinput_event_destroy(ev);
-				gtk_main_quit();
+				window_quit(w);
 				return FALSE;
 			}
 			break;
@@ -1469,6 +1806,10 @@
 		case LIBINPUT_EVENT_GESTURE_PINCH_END:
 			handle_event_pinch(ev, w);
 			break;
+		case LIBINPUT_EVENT_GESTURE_HOLD_BEGIN:
+		case LIBINPUT_EVENT_GESTURE_HOLD_END:
+			handle_event_hold(ev, w);
+			break;
 		case LIBINPUT_EVENT_TABLET_TOOL_AXIS:
 		case LIBINPUT_EVENT_TABLET_TOOL_PROXIMITY:
 		case LIBINPUT_EVENT_TABLET_TOOL_TIP:
@@ -1487,7 +1828,6 @@
 		}
 
 		libinput_event_destroy(ev);
-		libinput_dispatch(li);
 	}
 	gtk_widget_queue_draw(w->area);
 
@@ -1511,7 +1851,10 @@
 static gboolean
 signal_handler(void *data)
 {
-	gtk_main_quit();
+	struct libinput *li = data;
+	struct window *w = libinput_get_user_data(li);
+
+	window_quit(w);
 
 	return FALSE;
 }
@@ -1525,11 +1868,16 @@
 	enum tools_backend backend = BACKEND_NONE;
 	const char *seat_or_device[2] = {"seat0", NULL};
 	bool verbose = false;
+	bool gtk_init = false;
 
-	if (!gtk_init_check(&argc, &argv))
-		return 77;
+#if HAVE_GTK4
+	gtk_init = gtk_init_check();
+#else
+	gtk_init = gtk_init_check(&argc, &argv);
+#endif
 
-	g_unix_signal_add(SIGINT, signal_handler, NULL);
+	if (!gtk_init)
+		return 77;
 
 	tools_init_options(&options);
 
@@ -1605,13 +1953,17 @@
 
 	libinput_set_user_data(li, &w);
 
+	g_unix_signal_add(SIGINT, signal_handler, li);
+
 	window_init(&w);
 	w.options = options;
 	sockets_init(li);
 	handle_event_libinput(NULL, 0, li);
 
-	gtk_main();
+	w.event_loop = g_main_loop_new(NULL, FALSE);
+	g_main_loop_run(w.event_loop);
 
+	window_unlock_pointer(&w);
 	window_cleanup(&w);
 	libinput_unref(li);
 
diff -Naur third_party_libinput_bak/tools/libinput-debug-gui.man third_party_libinput_new/tools/libinput-debug-gui.man
--- third_party_libinput_bak/tools/libinput-debug-gui.man	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-debug-gui.man	2023-03-30 10:18:05.459280700 +0800
@@ -51,6 +51,14 @@
 light grey to help debug cusor positioning. The cursor movement is
 the one as seen by libinput and may not match the cursor movement of the
 display server.
+.PP
+The unaccelerated cusor motion is displayed as a grey upside-down triangle.
+The movement of this cursor typically reflects the relative motion in device
+units and can differ significantly to the normal cursor movement.
+.PP
+The unaccelerated cursor motion is also displayed as a yellow snake. This is
+the connected set of recent deltas. Unlike the unaccelerated cursor, these
+coordinates are not clipped to the window.
 .TP 8
 .B Button testing
 Four oblongs are displayed at the bottom. The top three are left, middle,
diff -Naur third_party_libinput_bak/tools/libinput-debug-tablet.c third_party_libinput_new/tools/libinput-debug-tablet.c
--- third_party_libinput_bak/tools/libinput-debug-tablet.c	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-debug-tablet.c	2023-03-30 10:18:16.529747800 +0800
@@ -72,6 +72,7 @@
 	} abs;
 };
 
+LIBINPUT_ATTRIBUTE_PRINTF(1, 2)
 static void
 print_line(const char *format, ...)
 {
@@ -306,17 +307,18 @@
 {
 	struct libinput_event_tablet_tool *t = libinput_event_get_tablet_tool_event(ev);
 	unsigned int button = libinput_event_tablet_tool_get_button(t);
+	unsigned int *btn;
 	enum libinput_button_state state = libinput_event_tablet_tool_get_button_state(t);
 
-	for (size_t i = 0; i < ARRAY_LENGTH(ctx->buttons_down); i++) {
+	ARRAY_FOR_EACH(ctx->buttons_down, btn) {
 		if (state == LIBINPUT_BUTTON_STATE_PRESSED) {
-		    if (ctx->buttons_down[i] == 0) {
-				ctx->buttons_down[i] = button;
+		    if (*btn == 0) {
+				*btn = button;
 				break;
 		    }
 		} else {
-			if (ctx->buttons_down[i] == button) {
-				ctx->buttons_down[i] = 0;
+			if (*btn == button) {
+				*btn = 0;
 				break;
 			}
 		}
@@ -390,7 +392,6 @@
 		}
 
 		libinput_event_destroy(ev);
-		libinput_dispatch(li);
 	}
 }
 
diff -Naur third_party_libinput_bak/tools/libinput-list-devices.c third_party_libinput_new/tools/libinput-list-devices.c
--- third_party_libinput_bak/tools/libinput-list-devices.c	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-list-devices.c	2023-03-30 10:18:43.798647000 +0800
@@ -44,8 +44,8 @@
 
 	if (libinput_device_config_tap_get_default_enabled(device))
 		return "enabled";
-	else
-		return "disabled";
+
+	return "disabled";
 }
 
 static const char *
@@ -56,8 +56,8 @@
 
 	if (libinput_device_config_tap_get_default_drag_enabled(device))
 		return "enabled";
-	else
-		return "disabled";
+
+	return "disabled";
 }
 
 static const char *
@@ -68,8 +68,8 @@
 
 	if (libinput_device_config_tap_get_default_drag_lock_enabled(device))
 		return "enabled";
-	else
-		return "disabled";
+
+	return "disabled";
 }
 
 static const char*
@@ -80,8 +80,8 @@
 
 	if (libinput_device_config_left_handed_get_default(device))
 		return "enabled";
-	else
-		return "disabled";
+
+	return "disabled";
 }
 
 static const char *
@@ -92,8 +92,8 @@
 
 	if (libinput_device_config_scroll_get_default_natural_scroll_enabled(device))
 		return "enabled";
-	else
-		return "disabled";
+
+	return "disabled";
 }
 
 static const char *
@@ -104,8 +104,8 @@
 
 	if (libinput_device_config_middle_emulation_get_default_enabled(device))
 		return "enabled";
-	else
-		return "disabled";
+
+	return "disabled";
 }
 
 static char *
@@ -222,8 +222,8 @@
 
 	if (libinput_device_config_dwt_get_default_enabled(device))
 		return "enabled";
-	else
-		return "disabled";
+
+	return "disabled";
 }
 
 static char *
@@ -384,13 +384,15 @@
 		if (streq(argv[1], "--help")) {
 			usage();
 			return 0;
-		} else if (streq(argv[1], "--version")) {
+		}
+
+		if (streq(argv[1], "--version")) {
 			printf("%s\n", LIBINPUT_VERSION);
 			return 0;
-		} else {
-			usage();
-			return EXIT_INVALID_USAGE;
 		}
+
+		usage();
+		return EXIT_INVALID_USAGE;
 	}
 
 	li = tools_open_backend(BACKEND_UDEV, seat, false, &grab);
diff -Naur third_party_libinput_bak/tools/libinput-measure-fuzz.py third_party_libinput_new/tools/libinput-measure-fuzz.py
--- third_party_libinput_bak/tools/libinput-measure-fuzz.py	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-measure-fuzz.py	2023-03-30 10:21:15.396020600 +0800
@@ -28,26 +28,29 @@
 import sys
 import argparse
 import subprocess
+
 try:
     import libevdev
     import pyudev
 except ModuleNotFoundError as e:
-    print('Error: {}'.format(str(e)), file=sys.stderr)
-    print('One or more python modules are missing. Please install those '
-          'modules and re-run this tool.')
+    print("Error: {}".format(str(e)), file=sys.stderr)
+    print(
+        "One or more python modules are missing. Please install those "
+        "modules and re-run this tool."
+    )
     sys.exit(1)
 
 
-DEFAULT_HWDB_FILE = '/usr/lib/udev/hwdb.d/60-evdev.hwdb'
-OVERRIDE_HWDB_FILE = '/etc/udev/hwdb.d/99-touchpad-fuzz-override.hwdb'
+DEFAULT_HWDB_FILE = "/usr/lib/udev/hwdb.d/60-evdev.hwdb"
+OVERRIDE_HWDB_FILE = "/etc/udev/hwdb.d/99-touchpad-fuzz-override.hwdb"
 
 
 class tcolors:
-    GREEN = '\033[92m'
-    RED = '\033[91m'
-    YELLOW = '\033[93m'
-    BOLD = '\033[1m'
-    NORMAL = '\033[0m'
+    GREEN = "\033[92m"
+    RED = "\033[91m"
+    YELLOW = "\033[93m"
+    BOLD = "\033[1m"
+    NORMAL = "\033[0m"
 
 
 def print_bold(msg, **kwargs):
@@ -81,44 +84,53 @@
         else:
             self.path = path
 
-        fd = open(self.path, 'rb')
+        fd = open(self.path, "rb")
         super().__init__(fd)
         context = pyudev.Context()
         self.udev_device = pyudev.Devices.from_device_file(context, self.path)
 
     def find_touch_device(self):
         context = pyudev.Context()
-        for device in context.list_devices(subsystem='input'):
-            if not device.get('ID_INPUT_TOUCHPAD', 0):
+        for device in context.list_devices(subsystem="input"):
+            if not device.get("ID_INPUT_TOUCHPAD", 0):
                 continue
 
-            if not device.device_node or \
-                    not device.device_node.startswith('/dev/input/event'):
+            if not device.device_node or not device.device_node.startswith(
+                "/dev/input/event"
+            ):
                 continue
 
             return device.device_node
 
-        print('Unable to find a touch device.', file=sys.stderr)
+        print("Unable to find a touch device.", file=sys.stderr)
         sys.exit(1)
 
     def check_property(self):
-        '''Return a tuple of (xfuzz, yfuzz) with the fuzz as set in the libinput
-           property. Returns None if the property doesn't exist'''
+        """Return a tuple of (xfuzz, yfuzz) with the fuzz as set in the libinput
+        property. Returns None if the property doesn't exist"""
 
         axes = {
-            0x00: self.udev_device.get('LIBINPUT_FUZZ_00'),
-            0x01: self.udev_device.get('LIBINPUT_FUZZ_01'),
-            0x35: self.udev_device.get('LIBINPUT_FUZZ_35'),
-            0x36: self.udev_device.get('LIBINPUT_FUZZ_36'),
+            0x00: self.udev_device.get("LIBINPUT_FUZZ_00"),
+            0x01: self.udev_device.get("LIBINPUT_FUZZ_01"),
+            0x35: self.udev_device.get("LIBINPUT_FUZZ_35"),
+            0x36: self.udev_device.get("LIBINPUT_FUZZ_36"),
         }
 
         if axes[0x35] is not None:
             if axes[0x35] != axes[0x00]:
-                print_bold('WARNING: fuzz mismatch ABS_X: {}, ABS_MT_POSITION_X: {}'.format(axes[0x00], axes[0x35]))
+                print_bold(
+                    "WARNING: fuzz mismatch ABS_X: {}, ABS_MT_POSITION_X: {}".format(
+                        axes[0x00], axes[0x35]
+                    )
+                )
 
         if axes[0x36] is not None:
             if axes[0x36] != axes[0x01]:
-                print_bold('WARNING: fuzz mismatch ABS_Y: {}, ABS_MT_POSITION_Y: {}'.format(axes[0x01], axes[0x36]))
+                print_bold(
+                    "WARNING: fuzz mismatch ABS_Y: {}, ABS_MT_POSITION_Y: {}".format(
+                        axes[0x01], axes[0x36]
+                    )
+                )
 
         xfuzz = axes[0x35] or axes[0x00]
         yfuzz = axes[0x36] or axes[0x01]
@@ -126,27 +138,34 @@
         if xfuzz is None and yfuzz is None:
             return None
 
-        if ((xfuzz is not None and yfuzz is None) or
-                (xfuzz is None and yfuzz is not None)):
-            raise InvalidConfigurationError('fuzz should be set for both axes')
+        if (xfuzz is not None and yfuzz is None) or (
+            xfuzz is None and yfuzz is not None
+        ):
+            raise InvalidConfigurationError("fuzz should be set for both axes")
 
         return (int(xfuzz), int(yfuzz))
 
     def check_axes(self):
-        '''
+        """
         Returns a tuple of (xfuzz, yfuzz) with the fuzz as set on the device
         axis. Returns None if no fuzz is set.
-        '''
+        """
         if not self.has(libevdev.EV_ABS.ABS_X) or not self.has(libevdev.EV_ABS.ABS_Y):
-            raise InvalidDeviceError('device does not have x/y axes')
+            raise InvalidDeviceError("device does not have x/y axes")
 
-        if self.has(libevdev.EV_ABS.ABS_MT_POSITION_X) != self.has(libevdev.EV_ABS.ABS_MT_POSITION_Y):
-            raise InvalidDeviceError('device does not have both multitouch axes')
-
-        xfuzz = (self.absinfo[libevdev.EV_ABS.ABS_X].fuzz or
-                 self.absinfo[libevdev.EV_ABS.ABS_MT_POSITION_X].fuzz)
-        yfuzz = (self.absinfo[libevdev.EV_ABS.ABS_Y].fuzz or
-                 self.absinfo[libevdev.EV_ABS.ABS_MT_POSITION_Y].fuzz)
+        if self.has(libevdev.EV_ABS.ABS_MT_POSITION_X) != self.has(
+            libevdev.EV_ABS.ABS_MT_POSITION_Y
+        ):
+            raise InvalidDeviceError("device does not have both multitouch axes")
+
+        xfuzz = (
+            self.absinfo[libevdev.EV_ABS.ABS_X].fuzz
+            or self.absinfo[libevdev.EV_ABS.ABS_MT_POSITION_X].fuzz
+        )
+        yfuzz = (
+            self.absinfo[libevdev.EV_ABS.ABS_Y].fuzz
+            or self.absinfo[libevdev.EV_ABS.ABS_MT_POSITION_Y].fuzz
+        )
 
         if xfuzz == 0 and yfuzz == 0:
             return None
@@ -155,13 +174,13 @@
 
 
 def print_fuzz(what, fuzz):
-    print('  Checking {}... '.format(what), end='')
+    print("  Checking {}... ".format(what), end="")
     if fuzz is None:
-        print('not set')
+        print("not set")
     elif fuzz == (0, 0):
-        print('is zero')
+        print("is zero")
     else:
-        print('x={} y={}'.format(*fuzz))
+        print("x={} y={}".format(*fuzz))
 
 
 def handle_existing_entry(device, fuzz):
@@ -174,10 +193,10 @@
     # If the lines aren't in the same order in the file, it'll be a false
     # negative.
     overrides = {
-        0x00: device.udev_device.get('EVDEV_ABS_00'),
-        0x01: device.udev_device.get('EVDEV_ABS_01'),
-        0x35: device.udev_device.get('EVDEV_ABS_35'),
-        0x36: device.udev_device.get('EVDEV_ABS_36'),
+        0x00: device.udev_device.get("EVDEV_ABS_00"),
+        0x01: device.udev_device.get("EVDEV_ABS_01"),
+        0x35: device.udev_device.get("EVDEV_ABS_35"),
+        0x36: device.udev_device.get("EVDEV_ABS_36"),
     }
 
     has_existing_rules = False
@@ -188,85 +207,98 @@
     if not has_existing_rules:
         return False
 
-    print_red('Error! ', end='')
-    print('This device already has axis overrides defined')
-    print('')
-    print_bold('Searching for existing override...')
+    print_red("Error! ", end="")
+    print("This device already has axis overrides defined")
+    print("")
+    print_bold("Searching for existing override...")
 
     # Construct a template that looks like a hwdb entry (values only) from
     # the udev property values
-    template = [' EVDEV_ABS_00={}'.format(overrides[0x00]),
-                ' EVDEV_ABS_01={}'.format(overrides[0x01])]
+    template = [
+        " EVDEV_ABS_00={}".format(overrides[0x00]),
+        " EVDEV_ABS_01={}".format(overrides[0x01]),
+    ]
     if overrides[0x35] is not None:
-        template += [' EVDEV_ABS_35={}'.format(overrides[0x35]),
-                     ' EVDEV_ABS_36={}'.format(overrides[0x36])]
+        template += [
+            " EVDEV_ABS_35={}".format(overrides[0x35]),
+            " EVDEV_ABS_36={}".format(overrides[0x36]),
+        ]
 
-    print('Checking in {}... '.format(OVERRIDE_HWDB_FILE), end='')
+    print("Checking in {}... ".format(OVERRIDE_HWDB_FILE), end="")
     entry, prefix, lineno = check_file_for_lines(OVERRIDE_HWDB_FILE, template)
     if entry is not None:
-        print_green('found')
-        print('The existing hwdb entry can be overwritten')
+        print_green("found")
+        print("The existing hwdb entry can be overwritten")
         return False
     else:
-        print_red('not found')
-        print('Checking in {}... '.format(DEFAULT_HWDB_FILE, template), end='')
+        print_red("not found")
+        print("Checking in {}... ".format(DEFAULT_HWDB_FILE), end="")
         entry, prefix, lineno = check_file_for_lines(DEFAULT_HWDB_FILE, template)
         if entry is not None:
-            print_green('found')
+            print_green("found")
         else:
-            print_red('not found')
-            print('The device has a hwdb override defined but it\'s not where I expected it to be.')
-            print('Please look at the libinput documentation for more details.')
-            print('Exiting now.')
+            print_red("not found")
+            print(
+                "The device has a hwdb override defined but it's not where I expected it to be."
+            )
+            print("Please look at the libinput documentation for more details.")
+            print("Exiting now.")
             return True
 
-    print_bold('Probable entry for this device found in line {}:'.format(lineno))
-    print('\n'.join(prefix + entry))
-    print('')
+    print_bold("Probable entry for this device found in line {}:".format(lineno))
+    print("\n".join(prefix + entry))
+    print("")
 
-    print_bold('Suggested new entry for this device:')
+    print_bold("Suggested new entry for this device:")
     new_entry = []
     for i in range(0, len(template)):
-        parts = entry[i].split(':')
+        parts = entry[i].split(":")
         while len(parts) < 4:
-            parts.append('')
+            parts.append("")
         parts[3] = str(fuzz)
-        new_entry.append(':'.join(parts))
-    print('\n'.join(prefix + new_entry))
-    print('')
+        new_entry.append(":".join(parts))
+    print("\n".join(prefix + new_entry))
+    print("")
 
     # Not going to overwrite the 60-evdev.hwdb entry with this program, too
     # risky. And it may not be our device match anyway.
-    print_bold('You must now:')
-    print('\n'.join((
-        '1. Check the above suggestion for sanity. Does it match your device?',
-        '2. Open {} and amend the existing entry'.format(DEFAULT_HWDB_FILE),
-        '   as recommended above',
-        '',
-        '   The property format is:',
-        '    EVDEV_ABS_00=min:max:resolution:fuzz',
-        '',
-        '   Leave the entry as-is and only add or amend the fuzz value.',
-        '   A non-existent value can be skipped, e.g. this entry sets the ',
-        '   resolution to 32 and the fuzz to 8',
-        '    EVDEV_ABS_00=::32:8',
-        '',
-        '3. Save the edited file',
-        '4. Say Y to the next prompt')))
+    print_bold("You must now:")
+    print(
+        "\n".join(
+            (
+                "1. Check the above suggestion for sanity. Does it match your device?",
+                "2. Open {} and amend the existing entry".format(DEFAULT_HWDB_FILE),
+                "   as recommended above",
+                "",
+                "   The property format is:",
+                "    EVDEV_ABS_00=min:max:resolution:fuzz",
+                "",
+                "   Leave the entry as-is and only add or amend the fuzz value.",
+                "   A non-existent value can be skipped, e.g. this entry sets the ",
+                "   resolution to 32 and the fuzz to 8",
+                "    EVDEV_ABS_00=::32:8",
+                "",
+                "3. Save the edited file",
+                "4. Say Y to the next prompt",
+            )
+        )
+    )
 
-    cont = input('Continue? [Y/n] ')
-    if cont == 'n':
+    cont = input("Continue? [Y/n] ")
+    if cont == "n":
         raise KeyboardInterrupt
 
     if test_hwdb_entry(device, fuzz):
-        print_bold('Please test the new fuzz setting by restarting libinput')
-        print_bold('Then submit a pull request for this hwdb entry change to '
-                   'to systemd at http://github.com/systemd/systemd')
+        print_bold("Please test the new fuzz setting by restarting libinput")
+        print_bold(
+            "Then submit a pull request for this hwdb entry change to "
+            "to systemd at http://github.com/systemd/systemd"
+        )
     else:
-        print_bold('The new fuzz setting did not take effect.')
-        print_bold('Did you edit the correct file?')
-        print('Please look at the libinput documentation for more details.')
-        print('Exiting now.')
+        print_bold("The new fuzz setting did not take effect.")
+        print_bold("Did you edit the correct file?")
+        print("Please look at the libinput documentation for more details.")
+        print("Exiting now.")
 
     return True
 
@@ -274,47 +306,49 @@
 def reload_and_trigger_udev(device):
     import time
 
-    print('Running systemd-hwdb update')
-    subprocess.run(['systemd-hwdb', 'update'], check=True)
-    syspath = device.path.replace('/dev/input/', '/sys/class/input/')
+    print("Running systemd-hwdb update")
+    subprocess.run(["systemd-hwdb", "update"], check=True)
+    syspath = device.path.replace("/dev/input/", "/sys/class/input/")
     time.sleep(2)
-    print('Running udevadm trigger {}'.format(syspath))
-    subprocess.run(['udevadm', 'trigger', syspath], check=True)
+    print("Running udevadm trigger {}".format(syspath))
+    subprocess.run(["udevadm", "trigger", syspath], check=True)
     time.sleep(2)
 
 
 def test_hwdb_entry(device, fuzz):
     reload_and_trigger_udev(device)
-    print_bold('Testing... ', end='')
+    print_bold("Testing... ", end="")
 
     d = Device(device.path)
     f = d.check_axes()
     if f is not None:
         if f == (fuzz, fuzz):
-            print_yellow('Warning')
-            print_bold('The hwdb applied to the device but libinput\'s udev '
-                       'rules have not picked it up. This should only happen'
-                       'if libinput is not installed')
+            print_yellow("Warning")
+            print_bold(
+                "The hwdb applied to the device but libinput's udev "
+                "rules have not picked it up. This should only happen"
+                "if libinput is not installed"
+            )
             return True
         else:
-            print_red('Error')
+            print_red("Error")
             return False
     else:
         f = d.check_property()
         if f is not None and f == (fuzz, fuzz):
-            print_green('Success')
+            print_green("Success")
             return True
         else:
-            print_red('Error')
+            print_red("Error")
             return False
 
 
 def check_file_for_lines(path, template):
-    '''
+    """
     Checks file at path for the lines given in template. If found, the
     return value is a tuple of the matching lines and the prefix (i.e. the
     two lines before the matching lines)
-    '''
+    """
     try:
         lines = [l[:-1] for l in open(path).readlines()]
         idx = -1
@@ -322,12 +356,12 @@
             while idx < len(lines) - 1:
                 idx += 1
                 line = lines[idx]
-                if not line.startswith(' EVDEV_ABS_00'):
+                if not line.startswith(" EVDEV_ABS_00"):
                     continue
-                if lines[idx:idx + len(template)] != template:
+                if lines[idx : idx + len(template)] != template:
                     continue
 
-                return (lines[idx:idx + len(template)], lines[idx - 2:idx], idx)
+                return (lines[idx : idx + len(template)], lines[idx - 2 : idx], idx)
 
         except IndexError:
             pass
@@ -338,43 +372,51 @@
 
 
 def write_udev_rule(device, fuzz):
-    '''Write out a udev rule that may match the device, run udevadm trigger and
+    """Write out a udev rule that may match the device, run udevadm trigger and
     check if the udev rule worked. Of course, there's plenty to go wrong...
-    '''
-    print('')
-    print_bold('Guessing a udev rule to overwrite the fuzz')
+    """
+    print("")
+    print_bold("Guessing a udev rule to overwrite the fuzz")
 
     # Some devices match better on pvr, others on pn, so we get to try both. yay
-    modalias = open('/sys/class/dmi/id/modalias').readlines()[0]
-    ms = modalias.split(':')
+    modalias = open("/sys/class/dmi/id/modalias").readlines()[0]
+    ms = modalias.split(":")
     svn, pn, pvr = None, None, None
     for m in ms:
-        if m.startswith('svn'):
+        if m.startswith("svn"):
             svn = m
-        elif m.startswith('pn'):
+        elif m.startswith("pn"):
             pn = m
-        elif m.startswith('pvr'):
+        elif m.startswith("pvr"):
             pvr = m
 
     # Let's print out both to inform and/or confuse the user
-    template = '\n'.join(('# {} {}',
-                          'evdev:name:{}:dmi:*:{}*:{}*:',
-                          ' EVDEV_ABS_00=:::{}',
-                          ' EVDEV_ABS_01=:::{}',
-                          ' EVDEV_ABS_35=:::{}',
-                          ' EVDEV_ABS_36=:::{}',
-                          ''))
-    rule1 = template.format(svn[3:], device.name, device.name, svn, pvr, fuzz, fuzz, fuzz, fuzz)
-    rule2 = template.format(svn[3:], device.name, device.name, svn, pn, fuzz, fuzz, fuzz, fuzz)
+    template = "\n".join(
+        (
+            "# {} {}",
+            "evdev:name:{}:dmi:*:{}*:{}*:",
+            " EVDEV_ABS_00=:::{}",
+            " EVDEV_ABS_01=:::{}",
+            " EVDEV_ABS_35=:::{}",
+            " EVDEV_ABS_36=:::{}",
+            "",
+        )
+    )
+    rule1 = template.format(
+        svn[3:], device.name, device.name, svn, pvr, fuzz, fuzz, fuzz, fuzz
+    )
+    rule2 = template.format(
+        svn[3:], device.name, device.name, svn, pn, fuzz, fuzz, fuzz, fuzz
+    )
 
-    print('Full modalias is: {}'.format(modalias))
+    print("Full modalias is: {}".format(modalias))
     print()
-    print_bold('Suggested udev rule, option 1:')
+    print_bold("Suggested udev rule, option 1:")
     print(rule1)
     print()
-    print_bold('Suggested udev rule, option 2:')
+    print_bold("Suggested udev rule, option 2:")
     print(rule2)
-    print('')
+    print("")
 
     # The weird hwdb matching behavior means we match on the least specific
     # rule (i.e. most wildcards) first although that was supposed to be fixed in
@@ -386,77 +428,88 @@
         return
 
     while True:
-        print_bold('Wich rule do you want to to test? 1 or 2? ', end='')
-        yesno = input('Ctrl+C to exit ')
+        print_bold("Wich rule do you want to to test? 1 or 2? ", end="")
+        yesno = input("Ctrl+C to exit ")
 
-        if yesno == '1':
+        if yesno == "1":
             rule = rule1
             break
-        elif yesno == '2':
+        elif yesno == "2":
             rule = rule2
             break
 
     fname = OVERRIDE_HWDB_FILE
     try:
-        fd = open(fname, 'x')
+        fd = open(fname, "x")
     except FileExistsError:
-        yesno = input('File {} exists, overwrite? [Y/n] '.format(fname))
-        if yesno.lower == 'n':
+        yesno = input("File {} exists, overwrite? [Y/n] ".format(fname))
+        if yesno.lower == "n":
             return
 
-        fd = open(fname, 'w')
+        fd = open(fname, "w")
 
-    fd.write('# File generated by libinput measure fuzz\n\n')
+    fd.write("# File generated by libinput measure fuzz\n\n")
     fd.write(rule)
     fd.close()
 
     if test_hwdb_entry(device, fuzz):
-        print('Your hwdb override file is in {}'.format(fname))
-        print_bold('Please test the new fuzz setting by restarting libinput')
-        print_bold('Then submit a pull request for this hwdb entry to '
-                   'systemd at http://github.com/systemd/systemd')
+        print("Your hwdb override file is in {}".format(fname))
+        print_bold("Please test the new fuzz setting by restarting libinput")
+        print_bold(
+            "Then submit a pull request for this hwdb entry to "
+            "systemd at http://github.com/systemd/systemd"
+        )
     else:
-        print('The hwdb entry failed to apply to the device.')
-        print('Removing hwdb file again.')
+        print("The hwdb entry failed to apply to the device.")
+        print("Removing hwdb file again.")
         os.remove(fname)
         reload_and_trigger_udev(device)
-        print_bold('What now?')
-        print('1. Re-run this program and try the other suggested udev rule. If that fails,')
-        print('2. File a bug with the suggested udev rule at http://github.com/systemd/systemd')
+        print_bold("What now?")
+        print(
+            "1. Re-run this program and try the other suggested udev rule. If that fails,"
+        )
+        print(
+            "2. File a bug with the suggested udev rule at http://github.com/systemd/systemd"
+        )
 
 
 def main(args):
     parser = argparse.ArgumentParser(
-        description='Print fuzz settings and/or suggest udev rules for the fuzz to be adjusted.'
+        description="Print fuzz settings and/or suggest udev rules for the fuzz to be adjusted."
+    )
+    parser.add_argument(
+        "path",
+        metavar="/dev/input/event0",
+        nargs="?",
+        type=str,
+        help="Path to device (optional)",
     )
-    parser.add_argument('path', metavar='/dev/input/event0',
-                        nargs='?', type=str, help='Path to device (optional)')
-    parser.add_argument('--fuzz', type=int, help='Suggested fuzz')
+    parser.add_argument("--fuzz", type=int, help="Suggested fuzz")
     args = parser.parse_args()
 
     try:
         device = Device(args.path)
-        print_bold('Using {}: {}'.format(device.name, device.path))
+        print_bold("Using {}: {}".format(device.name, device.path))
 
         fuzz = device.check_property()
-        print_fuzz('udev property', fuzz)
+        print_fuzz("udev property", fuzz)
 
         fuzz = device.check_axes()
-        print_fuzz('axes', fuzz)
+        print_fuzz("axes", fuzz)
 
         userfuzz = args.fuzz
         if userfuzz is not None:
             write_udev_rule(device, userfuzz)
 
     except PermissionError:
-        print('Permission denied, please re-run as root')
+        print("Permission denied, please re-run as root")
     except InvalidConfigurationError as e:
-        print('Error: {}'.format(e))
+        print("Error: {}".format(e))
     except InvalidDeviceError as e:
-        print('Error: {}'.format(e))
+        print("Error: {}".format(e))
     except KeyboardInterrupt:
-        print('Exited on user request')
+        print("Exited on user request")
 
 
-if __name__ == '__main__':
+if __name__ == "__main__":
     main(sys.argv)
diff -Naur third_party_libinput_bak/tools/libinput-measure-touch-size.py third_party_libinput_new/tools/libinput-measure-touch-size.py
--- third_party_libinput_bak/tools/libinput-measure-touch-size.py	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-measure-touch-size.py	2023-03-30 10:58:33.818815000 +0800
@@ -27,21 +27,25 @@
 import sys
 import subprocess
 import argparse
+
 try:
     import libevdev
     import pyudev
 except ModuleNotFoundError as e:
-    print('Error: {}'.format(str(e)), file=sys.stderr)
-    print('One or more python modules are missing. Please install those '
-          'modules and re-run this tool.')
+    print("Error: {}".format(str(e)), file=sys.stderr)
+    print(
+        "One or more python modules are missing. Please install those "
+        "modules and re-run this tool."
+    )
     sys.exit(1)
 
 
 class Range(object):
     """Class to keep a min/max of a value around"""
+
     def __init__(self):
-        self.min = float('inf')
-        self.max = float('-inf')
+        self.min = float("inf")
+        self.max = float("-inf")
 
     def update(self, value):
         self.min = min(self.min, value)
@@ -148,7 +152,9 @@
             self.major_range.min, self.major_range.max
         )
         if self.device.has_minor:
-            s += "minor: [{:3d}..{:3d}] ".format(self.minor_range.min, self.minor_range.max)
+            s += "minor: [{:3d}..{:3d}] ".format(
+                self.minor_range.min, self.minor_range.max
+            )
         if self.was_down:
             s += " down"
         if self.was_palm:
@@ -160,10 +166,12 @@
 
     def _str_state(self):
         touch = self.points[-1]
-        s = "{}, tags: {} {} {}".format(touch,
-                                        "down" if self.is_down else "    ",
-                                        "palm" if self.is_palm else "    ",
-                                        "thumb" if self.is_thumb else "     ")
+        s = "{}, tags: {} {} {}".format(
+            touch,
+            "down" if self.is_down else "    ",
+            "palm" if self.is_palm else "    ",
+            "thumb" if self.is_thumb else "     ",
+        )
         return s
 
 
@@ -178,7 +186,7 @@
         else:
             self.path = path
 
-        fd = open(self.path, 'rb')
+        fd = open(self.path, "rb")
         super().__init__(fd)
 
         print("Using {}: {}\n".format(self.name, self.path))
@@ -200,13 +208,15 @@
 
     def find_touch_device(self):
         context = pyudev.Context()
-        for device in context.list_devices(subsystem='input'):
-            if not device.get('ID_INPUT_TOUCHPAD', 0) and \
-               not device.get('ID_INPUT_TOUCHSCREEN', 0):
+        for device in context.list_devices(subsystem="input"):
+            if not device.get("ID_INPUT_TOUCHPAD", 0) and not device.get(
+                "ID_INPUT_TOUCHSCREEN", 0
+            ):
                 continue
 
-            if not device.device_node or \
-                    not device.device_node.startswith('/dev/input/event'):
+            if not device.device_node or not device.device_node.startswith(
+                "/dev/input/event"
+            ):
                 continue
 
             return device.device_node
@@ -215,21 +225,24 @@
         sys.exit(1)
 
     def _init_thresholds_from_quirks(self):
-        command = ['libinput', 'quirks', 'list', self.path]
+        command = ["libinput", "quirks", "list", self.path]
         cmd = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
         if cmd.returncode != 0:
-            print("Error querying quirks: {}".format(cmd.stderr.decode('utf-8')), file=sys.stderr)
+            print(
+                "Error querying quirks: {}".format(cmd.stderr.decode("utf-8")),
+                file=sys.stderr,
+            )
             return
 
-        stdout = cmd.stdout.decode('utf-8')
-        quirks = [q.split('=') for q in stdout.split('\n')]
+        stdout = cmd.stdout.decode("utf-8")
+        quirks = [q.split("=") for q in stdout.split("\n")]
 
         for q in quirks:
-            if q[0] == 'AttrPalmSizeThreshold':
+            if q[0] == "AttrPalmSizeThreshold":
                 self.palm = int(q[1])
-            elif q[0] == 'AttrTouchSizeRange':
+            elif q[0] == "AttrTouchSizeRange":
                 self.down, self.up = colon_tuple(q[1])
-            elif q[0] == 'AttrThumbSizeThreshold':
+            elif q[0] == "AttrThumbSizeThreshold":
                 self.thumb = int(q[1])
 
     def start_new_sequence(self, tracking_id):
@@ -239,13 +252,17 @@
         return self.sequences[-1]
 
     def handle_key(self, event):
-        tapcodes = [libevdev.EV_KEY.BTN_TOOL_DOUBLETAP,
-                    libevdev.EV_KEY.BTN_TOOL_TRIPLETAP,
-                    libevdev.EV_KEY.BTN_TOOL_QUADTAP,
-                    libevdev.EV_KEY.BTN_TOOL_QUINTTAP]
+        tapcodes = [
+            libevdev.EV_KEY.BTN_TOOL_DOUBLETAP,
+            libevdev.EV_KEY.BTN_TOOL_TRIPLETAP,
+            libevdev.EV_KEY.BTN_TOOL_QUADTAP,
+            libevdev.EV_KEY.BTN_TOOL_QUINTTAP,
+        ]
         if event.code in tapcodes and event.value > 0:
-            print("\rThis tool cannot handle multiple fingers, "
-                  "output will be invalid", file=sys.stderr)
+            print(
+                "\rThis tool cannot handle multiple fingers, " "output will be invalid",
+                file=sys.stderr,
+            )
 
     def handle_abs(self, event):
         if event.matches(libevdev.EV_ABS.ABS_MT_TRACKING_ID):
@@ -271,9 +288,11 @@
             try:
                 self.current_sequence().append(self.touch)
                 print("\r{}".format(self.current_sequence()), end="")
-                self.touch = Touch(major=self.touch.major,
-                                   minor=self.touch.minor,
-                                   orientation=self.touch.orientation)
+                self.touch = Touch(
+                    major=self.touch.major,
+                    minor=self.touch.minor,
+                    orientation=self.touch.orientation,
+                )
             except IndexError:
                 pass
 
@@ -290,8 +309,10 @@
         print("Touch sizes used: {}:{}".format(self.down, self.up))
         print("Palm size used: {}".format(self.palm))
         print("Thumb size used: {}".format(self.thumb))
-        print("Place a single finger on the device to measure touch size.\n"
-              "Ctrl+C to exit\n")
+        print(
+            "Place a single finger on the device to measure touch size.\n"
+            "Ctrl+C to exit\n"
+        )
 
         while True:
             for event in self.events():
@@ -300,11 +321,11 @@
 
 def colon_tuple(string):
     try:
-        ts = string.split(':')
+        ts = string.split(":")
         t = tuple([int(x) for x in ts])
         if len(t) == 2 and t[0] >= t[1]:
             return t
-    except: # noqa
+    except:  # noqa
         pass
 
     msg = "{} is not in format N:M (N >= M)".format(string)
@@ -313,13 +334,25 @@
 
 def main(args):
     parser = argparse.ArgumentParser(description="Measure touch size and orientation")
-    parser.add_argument('path', metavar='/dev/input/event0',
-                        nargs='?', type=str, help='Path to device (optional)')
-    parser.add_argument('--touch-thresholds', metavar='down:up',
-                        type=colon_tuple,
-                        help='Thresholds when a touch is logically down or up')
-    parser.add_argument('--palm-threshold', metavar='t',
-                        type=int, help='Threshold when a touch is a palm')
+    parser.add_argument(
+        "path",
+        metavar="/dev/input/event0",
+        nargs="?",
+        type=str,
+        help="Path to device (optional)",
+    )
+    parser.add_argument(
+        "--touch-thresholds",
+        metavar="down:up",
+        type=colon_tuple,
+        help="Thresholds when a touch is logically down or up",
+    )
+    parser.add_argument(
+        "--palm-threshold",
+        metavar="t",
+        type=int,
+        help="Threshold when a touch is a palm",
+    )
     args = parser.parse_args()
 
     try:
@@ -337,7 +370,9 @@
     except (PermissionError, OSError):
         print("Error: failed to open device")
     except InvalidDeviceError as e:
-        print("This device does not have the capabilities for size-based touch detection.")
+        print(
+            "This device does not have the capabilities for size-based touch detection."
+        )
         print("Details: {}".format(e))
 
 
diff -Naur third_party_libinput_bak/tools/libinput-measure-touchpad-pressure.py third_party_libinput_new/tools/libinput-measure-touchpad-pressure.py
--- third_party_libinput_bak/tools/libinput-measure-touchpad-pressure.py	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-measure-touchpad-pressure.py	2023-03-30 10:23:06.906947200 +0800
@@ -27,13 +27,16 @@
 import sys
 import subprocess
 import argparse
+
 try:
     import libevdev
     import pyudev
 except ModuleNotFoundError as e:
-    print('Error: {}'.format(str(e)), file=sys.stderr)
-    print('One or more python modules are missing. Please install those '
-          'modules and re-run this tool.')
+    print("Error: {}".format(str(e)), file=sys.stderr)
+    print(
+        "One or more python modules are missing. Please install those "
+        "modules and re-run this tool."
+    )
     sys.exit(1)
 
 
@@ -48,35 +51,35 @@
         return sum(self.colwidths) + 1
 
     def headers(self, args):
-        s = '|'
+        s = "|"
         align = self.ALIGNMENT - 1  # account for |
 
         for arg in args:
             # +2 because we want space left/right of text
             w = ((len(arg) + 2 + align) // align) * align
             self.colwidths.append(w + 1)
-            s += ' {:^{width}s} |'.format(arg, width=w - 2)
+            s += " {:^{width}s} |".format(arg, width=w - 2)
 
         return s
 
     def values(self, args):
-        s = '|'
+        s = "|"
         for w, arg in zip(self.colwidths, args):
             w -= 1  # width includes | separator
             if type(arg) == str:
                 # We want space margins for strings
-                s += ' {:{width}s} |'.format(arg, width=w - 2)
+                s += " {:{width}s} |".format(arg, width=w - 2)
             elif type(arg) == bool:
-                s += '{:^{width}s}|'.format('x' if arg else ' ', width=w)
+                s += "{:^{width}s}|".format("x" if arg else " ", width=w)
             else:
-                s += '{:^{width}d}|'.format(arg, width=w)
+                s += "{:^{width}d}|".format(arg, width=w)
 
         if len(args) < len(self.colwidths):
-            s += '|'.rjust(self.width - len(s), ' ')
+            s += "|".rjust(self.width - len(s), " ")
         return s
 
     def separator(self):
-        return '+' + '-' * (self.width - 2) + '+'
+        return "+" + "-" * (self.width - 2) + "+"
 
 
 fmt = TableFormatter()
@@ -84,9 +87,10 @@
 
 class Range(object):
     """Class to keep a min/max of a value around"""
+
     def __init__(self):
-        self.min = float('inf')
-        self.max = float('-inf')
+        self.min = float("inf")
+        self.max = float("-inf")
 
     def update(self, value):
         self.min = min(self.min, value)
@@ -157,19 +161,47 @@
 
     def _str_summary(self):
         if not self.points:
-            return fmt.values([self.tracking_id, False, False, False, False,
-                              'No pressure values recorded'])
-
-        s = fmt.values([self.tracking_id, self.was_down, True, self.was_palm,
-                        self.was_thumb, self.prange.min, self.prange.max, 0,
-                        self.avg(), self.median()])
+            return fmt.values(
+                [
+                    self.tracking_id,
+                    False,
+                    False,
+                    False,
+                    False,
+                    "No pressure values recorded",
+                ]
+            )
+
+        s = fmt.values(
+            [
+                self.tracking_id,
+                self.was_down,
+                True,
+                self.was_palm,
+                self.was_thumb,
+                self.prange.min,
+                self.prange.max,
+                0,
+                self.avg(),
+                self.median(),
+            ]
+        )
 
         return s
 
     def _str_state(self):
-        s = fmt.values([self.tracking_id, self.is_down, not self.is_down,
-                        self.is_palm, self.is_thumb, self.prange.min,
-                        self.prange.max, self.points[-1].pressure])
+        s = fmt.values(
+            [
+                self.tracking_id,
+                self.is_down,
+                not self.is_down,
+                self.is_palm,
+                self.is_thumb,
+                self.prange.min,
+                self.prange.max,
+                self.points[-1].pressure,
+            ]
+        )
         return s
 
 
@@ -184,7 +216,7 @@
         else:
             self.path = path
 
-        fd = open(self.path, 'rb')
+        fd = open(self.path, "rb")
         super().__init__(fd)
 
         print("Using {}: {}\n".format(self.name, self.path))
@@ -195,7 +227,9 @@
             absinfo = self.absinfo[libevdev.EV_ABS.ABS_PRESSURE]
             self.has_mt_pressure = False
             if absinfo is None:
-                raise InvalidDeviceError("Device does not have ABS_PRESSURE or ABS_MT_PRESSURE")
+                raise InvalidDeviceError(
+                    "Device does not have ABS_PRESSURE or ABS_MT_PRESSURE"
+                )
 
         prange = absinfo.maximum - absinfo.minimum
 
@@ -210,12 +244,13 @@
 
     def find_touchpad_device(self):
         context = pyudev.Context()
-        for device in context.list_devices(subsystem='input'):
-            if not device.get('ID_INPUT_TOUCHPAD', 0):
+        for device in context.list_devices(subsystem="input"):
+            if not device.get("ID_INPUT_TOUCHPAD", 0):
                 continue
 
-            if not device.device_node or \
-               not device.device_node.startswith('/dev/input/event'):
+            if not device.device_node or not device.device_node.startswith(
+                "/dev/input/event"
+            ):
                 continue
 
             return device.device_node
@@ -223,21 +258,24 @@
         sys.exit(1)
 
     def _init_thresholds_from_quirks(self):
-        command = ['libinput', 'quirks', 'list', self.path]
+        command = ["libinput", "quirks", "list", self.path]
         cmd = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
         if cmd.returncode != 0:
-            print("Error querying quirks: {}".format(cmd.stderr.decode('utf-8')), file=sys.stderr)
+            print(
+                "Error querying quirks: {}".format(cmd.stderr.decode("utf-8")),
+                file=sys.stderr,
+            )
             return
 
-        stdout = cmd.stdout.decode('utf-8')
-        quirks = [q.split('=') for q in stdout.split('\n')]
+        stdout = cmd.stdout.decode("utf-8")
+        quirks = [q.split("=") for q in stdout.split("\n")]
 
         for q in quirks:
-            if q[0] == 'AttrPalmPressureThreshold':
+            if q[0] == "AttrPalmPressureThreshold":
                 self.palm = int(q[1])
-            elif q[0] == 'AttrPressureRange':
+            elif q[0] == "AttrPressureRange":
                 self.down, self.up = colon_tuple(q[1])
-            elif q[0] == 'AttrThumbPressureThreshold':
+            elif q[0] == "AttrThumbPressureThreshold":
                 self.thumb = int(q[1])
 
     def start_new_sequence(self, tracking_id):
@@ -252,11 +290,13 @@
         libevdev.EV_KEY.BTN_TOOL_DOUBLETAP,
         libevdev.EV_KEY.BTN_TOOL_TRIPLETAP,
         libevdev.EV_KEY.BTN_TOOL_QUADTAP,
-        libevdev.EV_KEY.BTN_TOOL_QUINTTAP
+        libevdev.EV_KEY.BTN_TOOL_QUINTTAP,
     ]
     if event.code in tapcodes and event.value > 0:
-        print('\r\033[2KThis tool cannot handle multiple fingers, '
-              'output will be invalid')
+        print(
+            "\r\033[2KThis tool cannot handle multiple fingers, "
+            "output will be invalid"
+        )
 
 
 def handle_abs(device, event):
@@ -271,8 +311,9 @@
             except IndexError:
                 # If the finger was down at startup
                 pass
-    elif (event.matches(libevdev.EV_ABS.ABS_MT_PRESSURE) or
-          (event.matches(libevdev.EV_ABS.ABS_PRESSURE) and not device.has_mt_pressure)):
+    elif event.matches(libevdev.EV_ABS.ABS_MT_PRESSURE) or (
+        event.matches(libevdev.EV_ABS.ABS_PRESSURE) and not device.has_mt_pressure
+    ):
         try:
             s = device.current_sequence()
             s.append(Touch(pressure=event.value))
@@ -290,24 +331,26 @@
 
 
 def loop(device):
-    print('This is an interactive tool')
+    print("This is an interactive tool")
     print()
     print("Place a single finger on the touchpad to measure pressure values.")
-    print('Check that:')
-    print('- touches subjectively perceived as down are tagged as down')
-    print('- touches with a thumb are tagged as thumb')
-    print('- touches with a palm are tagged as palm')
+    print("Check that:")
+    print("- touches subjectively perceived as down are tagged as down")
+    print("- touches with a thumb are tagged as thumb")
+    print("- touches with a palm are tagged as palm")
     print()
-    print('If the touch states do not match the interaction, re-run')
-    print('with --touch-thresholds=down:up using observed pressure values.')
-    print('See --help for more options.')
+    print("If the touch states do not match the interaction, re-run")
+    print("with --touch-thresholds=down:up using observed pressure values.")
+    print("See --help for more options.")
     print()
     print("Press Ctrl+C to exit")
     print()
 
-    headers = fmt.headers(['Touch', 'down', 'up', 'palm', 'thumb', 'min', 'max', 'p', 'avg', 'median'])
+    headers = fmt.headers(
+        ["Touch", "down", "up", "palm", "thumb", "min", "max", "p", "avg", "median"]
+    )
     print(fmt.separator())
-    print(fmt.values(['Thresh', device.down, device.up, device.palm, device.thumb]))
+    print(fmt.values(["Thresh", device.down, device.up, device.palm, device.thumb]))
     print(fmt.separator())
     print(headers)
     print(fmt.separator())
@@ -319,11 +362,11 @@
 
 def colon_tuple(string):
     try:
-        ts = string.split(':')
+        ts = string.split(":")
         t = tuple([int(x) for x in ts])
         if len(t) == 2 and t[0] >= t[1]:
             return t
-    except: # noqa
+    except:  # noqa
         pass
 
     msg = "{} is not in format N:M (N >= M)".format(string)
@@ -331,24 +374,31 @@
 
 
 def main(args):
-    parser = argparse.ArgumentParser(
-        description="Measure touchpad pressure values"
-    )
+    parser = argparse.ArgumentParser(description="Measure touchpad pressure values")
     parser.add_argument(
-        'path', metavar='/dev/input/event0', nargs='?', type=str,
-        help='Path to device (optional)'
+        "path",
+        metavar="/dev/input/event0",
+        nargs="?",
+        type=str,
+        help="Path to device (optional)",
     )
     parser.add_argument(
-        '--touch-thresholds', metavar='down:up', type=colon_tuple,
-        help='Thresholds when a touch is logically down or up'
+        "--touch-thresholds",
+        metavar="down:up",
+        type=colon_tuple,
+        help="Thresholds when a touch is logically down or up",
     )
     parser.add_argument(
-        '--palm-threshold', metavar='t', type=int,
-        help='Threshold when a touch is a palm'
+        "--palm-threshold",
+        metavar="t",
+        type=int,
+        help="Threshold when a touch is a palm",
     )
     parser.add_argument(
-        '--thumb-threshold', metavar='t', type=int,
-        help='Threshold when a touch is a thumb'
+        "--thumb-threshold",
+        metavar="t",
+        type=int,
+        help="Threshold when a touch is a thumb",
     )
     args = parser.parse_args()
 
@@ -366,13 +416,15 @@
 
         loop(device)
     except KeyboardInterrupt:
-        print('\r\033[2K{}'.format(fmt.separator()))
+        print("\r\033[2K{}".format(fmt.separator()))
         print()
 
     except (PermissionError, OSError):
         print("Error: failed to open device")
     except InvalidDeviceError as e:
-        print("This device does not have the capabilities for pressure-based touch detection.")
+        print(
+            "This device does not have the capabilities for pressure-based touch detection."
+        )
         print("Details: {}".format(e))
 
 
diff -Naur third_party_libinput_bak/tools/libinput-measure-touchpad-size.man third_party_libinput_new/tools/libinput-measure-touchpad-size.man
--- third_party_libinput_bak/tools/libinput-measure-touchpad-size.man	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-measure-touchpad-size.man	2023-03-30 10:23:29.212669000 +0800
@@ -24,7 +24,7 @@
 /dev/input/eventX nodes.
 .SH OPTIONS
 This tool must be provided the physical dimensions of the device in mm.
-For example, if your touchpad is 100mm wide and 55mm heigh, run this tool as
+For example, if your touchpad is 100mm wide and 55mm high, run this tool as
 .B libinput measure touchpad-size 100x55
 .PP
 If a device node is given, this tool opens that device node. Otherwise, this
diff -Naur third_party_libinput_bak/tools/libinput-measure-touchpad-size.py third_party_libinput_new/tools/libinput-measure-touchpad-size.py
--- third_party_libinput_bak/tools/libinput-measure-touchpad-size.py	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-measure-touchpad-size.py	2023-03-30 10:24:58.228420700 +0800
@@ -26,13 +26,16 @@
 
 import sys
 import argparse
+
 try:
     import libevdev
     import pyudev
 except ModuleNotFoundError as e:
-    print('Error: {}'.format(str(e)), file=sys.stderr)
-    print('One or more python modules are missing. Please install those '
-          'modules and re-run this tool.')
+    print("Error: {}".format(str(e)), file=sys.stderr)
+    print(
+        "One or more python modules are missing. Please install those "
+        "modules and re-run this tool."
+    )
     sys.exit(1)
 
 
@@ -51,15 +54,15 @@
         x = evdev.absinfo[libevdev.EV_ABS.ABS_X]
         y = evdev.absinfo[libevdev.EV_ABS.ABS_Y]
         if not x or not y:
-            raise DeviceError('Device does not have an x or axis')
+            raise DeviceError("Device does not have an x or axis")
 
         if not x.resolution or not y.resolution:
-            print('Device does not have resolutions.', file=sys.stderr)
+            print("Device does not have resolutions.", file=sys.stderr)
             x.resolution = 1
             y.resolution = 1
 
-        self.xrange = (x.maximum - x.minimum)
-        self.yrange = (y.maximum - y.minimum)
+        self.xrange = x.maximum - x.minimum
+        self.yrange = y.maximum - y.minimum
         self.width = self.xrange / x.resolution
         self.height = self.yrange / y.resolution
 
@@ -70,7 +73,12 @@
         # terminal character space is (guesswork) ca 2.3 times as high as
         # wide.
         self.columns = 30
-        self.rows = int(self.columns * (self.yrange // y.resolution) // (self.xrange // x.resolution) / 2.3)
+        self.rows = int(
+            self.columns
+            * (self.yrange // y.resolution)
+            // (self.xrange // x.resolution)
+            / 2.3
+        )
         self.pos = Point(0, 0)
         self.min = Point()
         self.max = Point()
@@ -87,8 +95,8 @@
     def x(self, x):
         self._x.minimum = min(self.x.minimum, x)
         self._x.maximum = max(self.x.maximum, x)
-        self.min.x = min(x, self.min.x or 0xffffffff)
-        self.max.x = max(x, self.max.x or -0xffffffff)
+        self.min.x = min(x, self.min.x or 0xFFFFFFFF)
+        self.max.x = max(x, self.max.x or -0xFFFFFFFF)
         # we calculate the position based on the original range.
         # this means on devices with a narrower range than advertised, not
         # all corners may be reachable in the touchpad drawing.
@@ -98,8 +106,8 @@
     def y(self, y):
         self._y.minimum = min(self.y.minimum, y)
         self._y.maximum = max(self.y.maximum, y)
-        self.min.y = min(y, self.min.y or 0xffffffff)
-        self.max.y = max(y, self.max.y or -0xffffffff)
+        self.min.y = min(y, self.min.y or 0xFFFFFFFF)
+        self.max.y = max(y, self.max.y or -0xFFFFFFFF)
         # we calculate the position based on the original range.
         # this means on devices with a narrower range than advertised, not
         # all corners may be reachable in the touchpad drawing.
@@ -107,61 +115,61 @@
 
     def update_from_data(self):
         if None in [self.min.x, self.min.y, self.max.x, self.max.y]:
-            raise DeviceError('Insufficient data to continue')
+            raise DeviceError("Insufficient data to continue")
         self._x.minimum = self.min.x
         self._x.maximum = self.max.x
         self._y.minimum = self.min.y
         self._y.maximum = self.max.y
 
     def draw(self):
-        print('Detected axis range: x [{:4d}..{:4d}], y [{:4d}..{:4d}]'.format(
-              self.min.x if self.min.x is not None else 0,
-              self.max.x if self.max.x is not None else 0,
-              self.min.y if self.min.y is not None else 0,
-              self.max.y if self.max.y is not None else 0))
+        print(
+            "Detected axis range: x [{:4d}..{:4d}], y [{:4d}..{:4d}]".format(
+                self.min.x if self.min.x is not None else 0,
+                self.max.x if self.max.x is not None else 0,
+                self.min.y if self.min.y is not None else 0,
+                self.max.y if self.max.y is not None else 0,
+            )
+        )
 
         print()
-        print('Move one finger along all edges of the touchpad'.center(self.columns))
-        print('until the detected axis range stops changing.'.center(self.columns))
+        print("Move one finger along all edges of the touchpad".center(self.columns))
+        print("until the detected axis range stops changing.".center(self.columns))
 
         top = int(self.pos.y * self.rows)
 
-        print('+{}+'.format(''.ljust(self.columns, '-')))
+        print("+{}+".format("".ljust(self.columns, "-")))
         for row in range(0, top):
-            print('|{}|'.format(''.ljust(self.columns)))
+            print("|{}|".format("".ljust(self.columns)))
 
         left = int(self.pos.x * self.columns)
         right = max(0, self.columns - 1 - left)
-        print('|{}{}{}|'.format(
-            ''.ljust(left),
-            'O',
-            ''.ljust(right)))
+        print("|{}{}{}|".format("".ljust(left), "O", "".ljust(right)))
 
         for row in range(top + 1, self.rows):
-            print('|{}|'.format(''.ljust(self.columns)))
+            print("|{}|".format("".ljust(self.columns)))
 
-        print('+{}+'.format(''.ljust(self.columns, '-')))
+        print("+{}+".format("".ljust(self.columns, "-")))
 
-        print('Press Ctrl+C to stop'.center(self.columns))
+        print("Press Ctrl+C to stop".center(self.columns))
 
-        print('\033[{}A'.format(self.rows + 8), flush=True)
+        print("\033[{}A".format(self.rows + 8), flush=True)
 
         self.rows_printed = self.rows + 8
 
     def erase(self):
         # Erase all previous lines so we're not left with rubbish
         for row in range(self.rows_printed):
-            print('\033[K')
-        print('\033[{}A'.format(self.rows_printed))
+            print("\033[K")
+        print("\033[{}A".format(self.rows_printed))
 
 
 def dimension(string):
     try:
-        ts = string.split('x')
+        ts = string.split("x")
         t = tuple([int(x) for x in ts])
         if len(t) == 2:
             return t
-    except: # noqa
+    except:  # noqa
         pass
 
     msg = "{} is not in format WxH".format(string)
@@ -173,82 +181,95 @@
 
 
 def dmi_modalias_match(modalias):
-    modalias = modalias.split(':')
-    dmi = {'svn': None, 'pvr': None, 'pn': None}
+    modalias = modalias.split(":")
+    dmi = {"svn": None, "pvr": None, "pn": None}
     for m in modalias:
         for key in dmi:
             if m.startswith(key):
-                dmi[key] = m[len(key):]
+                dmi[key] = m[len(key) :]
 
     # Based on the current 60-evdev.hwdb, Lenovo uses pvr and everyone else
     # uses pn to provide a human-identifiable match
-    if dmi['svn'] == 'LENOVO':
-        return 'dmi:*svn{}:*pvr{}*'.format(dmi['svn'], dmi['pvr'])
+    if dmi["svn"] == "LENOVO":
+        return "dmi:*svn{}:*pvr{}*".format(dmi["svn"], dmi["pvr"])
     else:
-        return 'dmi:*svn{}:*pn{}*'.format(dmi['svn'], dmi['pn'])
+        return "dmi:*svn{}:*pn{}*".format(dmi["svn"], dmi["pn"])
 
 
 def main(args):
-    parser = argparse.ArgumentParser(
-        description="Measure the touchpad size"
-    )
+    parser = argparse.ArgumentParser(description="Measure the touchpad size")
     parser.add_argument(
-        'size', metavar='WxH', type=dimension,
-        help='Touchpad size (width by height) in mm',
+        "size",
+        metavar="WxH",
+        type=dimension,
+        help="Touchpad size (width by height) in mm",
     )
     parser.add_argument(
-        'path', metavar='/dev/input/event0', nargs='?', type=str,
-        help='Path to device (optional)'
+        "path",
+        metavar="/dev/input/event0",
+        nargs="?",
+        type=str,
+        help="Path to device (optional)",
     )
     context = pyudev.Context()
 
     args = parser.parse_args()
     if not args.path:
-        for device in context.list_devices(subsystem='input'):
-            if (device.get('ID_INPUT_TOUCHPAD', 0) and
-                    (device.device_node or '').startswith('/dev/input/event')):
+        for device in context.list_devices(subsystem="input"):
+            if device.get("ID_INPUT_TOUCHPAD", 0) and (
+                device.device_node or ""
+            ).startswith("/dev/input/event"):
                 args.path = device.device_node
-                name = 'unknown'
+                name = "unknown"
                 parent = device
                 while parent is not None:
-                    n = parent.get('NAME', None)
+                    n = parent.get("NAME", None)
                     if n:
                         name = n
                         break
                     parent = parent.parent
 
-                print('Using {}: {}'.format(name, device.device_node))
+                print("Using {}: {}".format(name, device.device_node))
                 break
         else:
-            print('Unable to find a touchpad device.', file=sys.stderr)
+            print("Unable to find a touchpad device.", file=sys.stderr)
             return 1
 
     dev = pyudev.Devices.from_device_file(context, args.path)
-    overrides = [p for p in dev.properties if p.startswith('EVDEV_ABS')]
+    overrides = [p for p in dev.properties if p.startswith("EVDEV_ABS")]
     if overrides:
         print()
-        print('********************************************************************')
-        print('WARNING: axis overrides already in place for this device:')
+        print("********************************************************************")
+        print("WARNING: axis overrides already in place for this device:")
         for prop in overrides:
-            print('  {}={}'.format(prop, dev.properties[prop]))
-        print('The systemd hwdb already overrides the axis ranges and/or resolution.')
-        print('This tool is not needed unless you want to verify the axis overrides.')
-        print('********************************************************************')
+            print("  {}={}".format(prop, dev.properties[prop]))
+        print("The systemd hwdb already overrides the axis ranges and/or resolution.")
+        print("This tool is not needed unless you want to verify the axis overrides.")
+        print("********************************************************************")
         print()
 
     try:
-        fd = open(args.path, 'rb')
+        fd = open(args.path, "rb")
         evdev = libevdev.Device(fd)
         touchpad = Touchpad(evdev)
-        print('Kernel specified touchpad size: {:.1f}x{:.1f}mm'.format(touchpad.width, touchpad.height))
-        print('User specified touchpad size:   {:.1f}x{:.1f}mm'.format(*args.size))
+        print(
+            "Kernel specified touchpad size: {:.1f}x{:.1f}mm".format(
+                touchpad.width, touchpad.height
+            )
+        )
+        print("User specified touchpad size:   {:.1f}x{:.1f}mm".format(*args.size))
 
         print()
-        print('Kernel axis range:   x [{:4d}..{:4d}], y [{:4d}..{:4d}]'.format(
-              touchpad.x.minimum, touchpad.x.maximum,
-              touchpad.y.minimum, touchpad.y.maximum))
+        print(
+            "Kernel axis range:   x [{:4d}..{:4d}], y [{:4d}..{:4d}]".format(
+                touchpad.x.minimum,
+                touchpad.x.maximum,
+                touchpad.y.minimum,
+                touchpad.y.maximum,
+            )
+        )
 
-        print('Put your finger on the touchpad to start\033[1A')
+        print("Put your finger on the touchpad to start\033[1A")
 
         try:
             touchpad.draw()
@@ -264,15 +285,27 @@
             touchpad.erase()
             touchpad.update_from_data()
 
-        print('Detected axis range: x [{:4d}..{:4d}], y [{:4d}..{:4d}]'.format(
-              touchpad.x.minimum, touchpad.x.maximum,
-              touchpad.y.minimum, touchpad.y.maximum))
-
-        touchpad.x.resolution = round((touchpad.x.maximum - touchpad.x.minimum) / args.size[0])
-        touchpad.y.resolution = round((touchpad.y.maximum - touchpad.y.minimum) / args.size[1])
-
-        print('Resolutions calculated based on user-specified size: x {}, y {} units/mm'.format(
-              touchpad.x.resolution, touchpad.y.resolution))
+        print(
+            "Detected axis range: x [{:4d}..{:4d}], y [{:4d}..{:4d}]".format(
+                touchpad.x.minimum,
+                touchpad.x.maximum,
+                touchpad.y.minimum,
+                touchpad.y.maximum,
+            )
+        )
+
+        touchpad.x.resolution = round(
+            (touchpad.x.maximum - touchpad.x.minimum) / args.size[0]
+        )
+        touchpad.y.resolution = round(
+            (touchpad.y.maximum - touchpad.y.minimum) / args.size[1]
+        )
+
+        print(
+            "Resolutions calculated based on user-specified size: x {}, y {} units/mm".format(
+                touchpad.x.resolution, touchpad.y.resolution
+            )
+        )
 
         # If both x/y are within some acceptable deviation, we skip the axis
         # overrides and only override the resolution
@@ -287,50 +320,73 @@
 
         if skip:
             print()
-            print('Note: Axis ranges within acceptable deviation, skipping min/max override')
+            print(
+                "Note: Axis ranges within acceptable deviation, skipping min/max override"
+            )
             print()
 
         print()
-        print('Suggested hwdb entry:')
+        print("Suggested hwdb entry:")
 
-        use_dmi = evdev.id['bustype'] not in [0x03, 0x05]  # USB, Bluetooth
+        use_dmi = evdev.id["bustype"] not in [0x03, 0x05]  # USB, Bluetooth
         if use_dmi:
-            modalias = open('/sys/class/dmi/id/modalias').read().strip()
-            print('Note: the dmi modalias match is a guess based on your machine\'s modalias:')
-            print(' ', modalias)
-            print('Please verify that this is the most sensible match and adjust if necessary.')
+            modalias = open("/sys/class/dmi/id/modalias").read().strip()
+            print(
+                "Note: the dmi modalias match is a guess based on your machine's modalias:"
+            )
+            print(" ", modalias)
+            print(
+                "Please verify that this is the most sensible match and adjust if necessary."
+            )
 
-        print('-8<--------------------------')
-        print('# Laptop model description (e.g. Lenovo X1 Carbon 5th)')
+        print("-8<--------------------------")
+        print("# Laptop model description (e.g. Lenovo X1 Carbon 5th)")
         if use_dmi:
-            print('evdev:name:{}:{}*'.format(evdev.name, dmi_modalias_match(modalias)))
+            print("evdev:name:{}:{}*".format(evdev.name, dmi_modalias_match(modalias)))
         else:
-            print('evdev:input:b{:04X}v{:04X}p{:04X}*'.format(
-                  evdev.id['bustype'], evdev.id['vendor'], evdev.id['product']))
-        print(' EVDEV_ABS_00={}:{}:{}'.format(
-              touchpad.x.minimum if not skip else '',
-              touchpad.x.maximum if not skip else '',
-              touchpad.x.resolution))
-        print(' EVDEV_ABS_01={}:{}:{}'.format(
-              touchpad.y.minimum if not skip else '',
-              touchpad.y.maximum if not skip else '',
-              touchpad.y.resolution))
+            print(
+                "evdev:input:b{:04X}v{:04X}p{:04X}*".format(
+                    evdev.id["bustype"], evdev.id["vendor"], evdev.id["product"]
+                )
+            )
+        print(
+            " EVDEV_ABS_00={}:{}:{}".format(
+                touchpad.x.minimum if not skip else "",
+                touchpad.x.maximum if not skip else "",
+                touchpad.x.resolution,
+            )
+        )
+        print(
+            " EVDEV_ABS_01={}:{}:{}".format(
+                touchpad.y.minimum if not skip else "",
+                touchpad.y.maximum if not skip else "",
+                touchpad.y.resolution,
+            )
+        )
         if evdev.absinfo[libevdev.EV_ABS.ABS_MT_POSITION_X]:
-            print(' EVDEV_ABS_35={}:{}:{}'.format(
-                  touchpad.x.minimum if not skip else '',
-                  touchpad.x.maximum if not skip else '',
-                  touchpad.x.resolution))
-            print(' EVDEV_ABS_36={}:{}:{}'.format(
-                  touchpad.y.minimum if not skip else '',
-                  touchpad.y.maximum if not skip else '',
-                  touchpad.y.resolution))
-        print('-8<--------------------------')
-        print('Instructions on what to do with this snippet are in /usr/lib/udev/hwdb.d/60-evdev.hwdb')
+            print(
+                " EVDEV_ABS_35={}:{}:{}".format(
+                    touchpad.x.minimum if not skip else "",
+                    touchpad.x.maximum if not skip else "",
+                    touchpad.x.resolution,
+                )
+            )
+            print(
+                " EVDEV_ABS_36={}:{}:{}".format(
+                    touchpad.y.minimum if not skip else "",
+                    touchpad.y.maximum if not skip else "",
+                    touchpad.y.resolution,
+                )
+            )
+        print("-8<--------------------------")
+        print(
+            "Instructions on what to do with this snippet are in /usr/lib/udev/hwdb.d/60-evdev.hwdb"
+        )
     except DeviceError as e:
-        print('Error: {}'.format(e), file=sys.stderr)
+        print("Error: {}".format(e), file=sys.stderr)
         return 1
     except PermissionError:
-        print('Unable to open device. Please run me as root', file=sys.stderr)
+        print("Unable to open device. Please run me as root", file=sys.stderr)
         return 1
 
     return 0
diff -Naur third_party_libinput_bak/tools/libinput-measure-touchpad-tap.man third_party_libinput_new/tools/libinput-measure-touchpad-tap.man
--- third_party_libinput_bak/tools/libinput-measure-touchpad-tap.man	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-measure-touchpad-tap.man	2023-03-30 10:25:12.008746500 +0800
@@ -66,7 +66,7 @@
 .B WARNING:
 The data contained in the output is grouped by different sort orders. For
 example, the first few columns may list tap information in the 'natural'
-sort order (i.e. as they occured), the data in the next few columns may list
+sort order (i.e. as they occurred), the data in the next few columns may list
 tap information sorted by the delta time between touch down and touch up.
 Comparing columns across these group boundaries will compare data of two
 different touch points and result in invalid analysis.
diff -Naur third_party_libinput_bak/tools/libinput-measure-touchpad-tap.py third_party_libinput_new/tools/libinput-measure-touchpad-tap.py
--- third_party_libinput_bak/tools/libinput-measure-touchpad-tap.py	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-measure-touchpad-tap.py	2023-03-30 10:57:28.434302400 +0800
@@ -26,14 +26,17 @@
 
 import sys
 import argparse
+
 try:
     import libevdev
     import textwrap
     import pyudev
 except ModuleNotFoundError as e:
-    print('Error: {}'.format(e), file=sys.stderr)
-    print('One or more python modules are missing. Please install those '
-          'modules and re-run this tool.')
+    print("Error: {}".format(e), file=sys.stderr)
+    print(
+        "One or more python modules are missing. Please install those "
+        "modules and re-run this tool."
+    )
     sys.exit(1)
 
 print_dest = sys.stdout
@@ -66,7 +69,7 @@
 
     @up.setter
     def up(self, up):
-        assert(up > self.down)
+        assert up > self.down
         self._up = up
 
     @property
@@ -88,7 +91,7 @@
             self.path = self._find_touch_device()
         else:
             self.path = path
-        fd = open(self.path, 'rb')
+        fd = open(self.path, "rb")
         super().__init__(fd)
 
         print("Using {}: {}\n".format(self.name, self.path))
@@ -101,18 +104,19 @@
     def _find_touch_device(self):
         context = pyudev.Context()
         device_node = None
-        for device in context.list_devices(subsystem='input'):
-            if (not device.device_node or
-                    not device.device_node.startswith('/dev/input/event')):
+        for device in context.list_devices(subsystem="input"):
+            if not device.device_node or not device.device_node.startswith(
+                "/dev/input/event"
+            ):
                 continue
 
             # pick the touchpad by default, fallback to the first
             # touchscreen only when there is no touchpad
-            if device.get('ID_INPUT_TOUCHPAD', 0):
+            if device.get("ID_INPUT_TOUCHPAD", 0):
                 device_node = device.device_node
                 break
 
-            if device.get('ID_INPUT_TOUCHSCREEN', 0) and device_node is None:
+            if device.get("ID_INPUT_TOUCHSCREEN", 0) and device_node is None:
                 device_node = device.device_node
 
         if device_node is not None:
@@ -127,17 +131,19 @@
             self.touches.append(t)
         else:
             self.touches[-1].up = tv2us(event.sec, event.usec)
-            msg("\rTouch sequences detected: {}".format(len(self.touches)),
-                end='')
+            msg("\rTouch sequences detected: {}".format(len(self.touches)), end="")
 
     def handle_key(self, event):
-        tapcodes = [libevdev.EV_KEY.BTN_TOOL_DOUBLETAP,
-                    libevdev.EV_KEY.BTN_TOOL_TRIPLETAP,
-                    libevdev.EV_KEY.BTN_TOOL_QUADTAP,
-                    libevdev.EV_KEY.BTN_TOOL_QUINTTAP]
+        tapcodes = [
+            libevdev.EV_KEY.BTN_TOOL_DOUBLETAP,
+            libevdev.EV_KEY.BTN_TOOL_TRIPLETAP,
+            libevdev.EV_KEY.BTN_TOOL_QUADTAP,
+            libevdev.EV_KEY.BTN_TOOL_QUINTTAP,
+        ]
         if event.code in tapcodes and event.value > 0:
-            error("\rThis tool cannot handle multiple fingers, "
-                  "output will be invalid")
+            error(
+                "\rThis tool cannot handle multiple fingers, " "output will be invalid"
+            )
             return
 
         if event.matches(libevdev.EV_KEY.BTN_TOUCH):
@@ -146,9 +152,11 @@
     def handle_syn(self, event):
         if self.touch.dirty:
             self.current_sequence().append(self.touch)
-            self.touch = Touch(major=self.touch.major,
-                               minor=self.touch.minor,
-                               orientation=self.touch.orientation)
+            self.touch = Touch(
+                major=self.touch.major,
+                minor=self.touch.minor,
+                orientation=self.touch.orientation,
+            )
 
     def handle_event(self, event):
         if event.matches(libevdev.EV_KEY):
@@ -182,14 +190,16 @@
 
     def print_dat(self):
         print("# libinput-measure-touchpad-tap")
-        print(textwrap.dedent('''\
+        print(
+            textwrap.dedent(
+                """\
               # File contents:
               #    This file contains multiple prints of the data in
               #    different sort order. Row number is index of touch
               #    point within each group. Comparing data across groups
               #    will result in invalid analysis.
               # Columns (1-indexed):
-              # Group 1, sorted by time of occurence
+              # Group 1, sorted by time of occurrence
               #  1: touch down time in ms, offset by first event
               #  2: touch up time in ms, offset by first event
               #  3: time delta in ms);
@@ -197,7 +207,9 @@
               #  4: touch down time in ms, offset by first event
               #  5: touch up time in ms, offset by first event
               #  6: time delta in ms
-              '''))
+              """
+            )
+        )
 
         deltas = [t for t in self.touches]
         deltas_sorted = sorted(deltas, key=lambda t: t.tdelta)
@@ -205,28 +217,44 @@
         offset = deltas[0].down
 
         for t1, t2 in zip(deltas, deltas_sorted):
-            print(t1.down - offset, t1.up - offset, t1.tdelta,
-                  t2.down - offset, t2.up - offset, t2.tdelta)
+            print(
+                t1.down - offset,
+                t1.up - offset,
+                t1.tdelta,
+                t2.down - offset,
+                t2.up - offset,
+                t2.tdelta,
+            )
 
     def print(self, format):
         if not self.touches:
             error("No tap data available")
             return
 
-        if format == 'summary':
+        if format == "summary":
             self.print_summary()
-        elif format == 'dat':
+        elif format == "dat":
             self.print_dat()
 
 
 def main(args):
-    parser = argparse.ArgumentParser(description="Measure tap-to-click properties of devices")
-    parser.add_argument('path', metavar='/dev/input/event0',
-                        nargs='?', type=str, help='Path to device (optional)')
-    parser.add_argument('--format', metavar='format',
-                        choices=['summary', 'dat'],
-                        default='summary',
-                        help='data format to print ("summary" or "dat")')
+    parser = argparse.ArgumentParser(
+        description="Measure tap-to-click properties of devices"
+    )
+    parser.add_argument(
+        "path",
+        metavar="/dev/input/event0",
+        nargs="?",
+        type=str,
+        help="Path to device (optional)",
+    )
+    parser.add_argument(
+        "--format",
+        metavar="format",
+        choices=["summary", "dat"],
+        default="summary",
+        help='data format to print ("summary" or "dat")',
+    )
     args = parser.parse_args()
 
     if not sys.stdout.isatty():
@@ -235,13 +263,15 @@
 
     try:
         device = Device(args.path)
-        error("Ready for recording data.\n"
-              "Tap the touchpad multiple times with a single finger only.\n"
-              "For useful data we recommend at least 20 taps.\n"
-              "Ctrl+C to exit")
+        error(
+            "Ready for recording data.\n"
+            "Tap the touchpad multiple times with a single finger only.\n"
+            "For useful data we recommend at least 20 taps.\n"
+            "Ctrl+C to exit"
+        )
         device.read_events()
     except KeyboardInterrupt:
-        msg('')
+        msg("")
         device.print(args.format)
     except (PermissionError, OSError) as e:
         error("Error: failed to open device. {}".format(e))
diff -Naur third_party_libinput_bak/tools/libinput-quirks.c third_party_libinput_new/tools/libinput-quirks.c
--- third_party_libinput_bak/tools/libinput-quirks.c	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-quirks.c	2023-03-30 10:58:55.070875000 +0800
@@ -35,6 +35,7 @@
 
 static bool verbose = false;
 
+LIBINPUT_ATTRIBUTE_PRINTF(3, 0)
 static void
 log_handler(struct libinput *this_is_null,
 	    enum libinput_log_priority priority,
@@ -67,7 +68,10 @@
 	}
 
 	snprintf(buf, sizeof(buf), "%s: %s", prefix, format);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-nonliteral"
 	vfprintf(out, buf, args);
+#pragma GCC diagnostic pop
 }
 
 static void
@@ -191,6 +195,9 @@
 	}
 
 	udev = udev_new();
+	if (!udev)
+		goto out;
+		
 	path = argv[optind];
 	if (strneq(path, "/sys/", 5)) {
 		device = udev_device_new_from_syspath(udev, path);
diff -Naur third_party_libinput_bak/tools/libinput-record-verify-yaml.py third_party_libinput_new/tools/libinput-record-verify-yaml.py
--- third_party_libinput_bak/tools/libinput-record-verify-yaml.py	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-record-verify-yaml.py	2023-03-30 11:24:54.098750400 +0800
@@ -34,7 +34,7 @@
 
 
 class TestYaml(unittest.TestCase):
-    filename = ''
+    filename = ""
 
     @classmethod
     def setUpClass(cls):
@@ -42,163 +42,166 @@
             cls.yaml = yaml.safe_load(f)
 
     def dict_key_crosscheck(self, d, keys):
-        '''Check that each key in d is in keys, and that each key is in d'''
+        """Check that each key in d is in keys, and that each key is in d"""
         self.assertEqual(sorted(d.keys()), sorted(keys))
 
     def libinput_events(self, filter=None):
-        '''Returns all libinput events in the recording, regardless of the
-        device'''
-        devices = self.yaml['devices']
+        """Returns all libinput events in the recording, regardless of the
+        device"""
+        devices = self.yaml["devices"]
         for d in devices:
-            events = d['events']
+            events = d["events"]
             if not events:
                 raise unittest.SkipTest()
             for e in events:
                 try:
-                    libinput = e['libinput']
+                    libinput = e["libinput"]
                 except KeyError:
                     continue
 
                 for ev in libinput:
-                    if (filter is None or ev['type'] == filter or
-                            isinstance(filter, list) and ev['type'] in filter):
+                    if (
+                        filter is None
+                        or ev["type"] == filter
+                        or isinstance(filter, list)
+                        and ev["type"] in filter
+                    ):
                         yield ev
 
     def test_sections_exist(self):
-        sections = ['version', 'ndevices', 'libinput', 'system', 'devices']
+        sections = ["version", "ndevices", "libinput", "system", "devices"]
         for section in sections:
             self.assertIn(section, self.yaml)
 
     def test_version(self):
-        version = self.yaml['version']
+        version = self.yaml["version"]
         self.assertTrue(isinstance(version, int))
         self.assertEqual(version, 1)
 
     def test_ndevices(self):
-        ndevices = self.yaml['ndevices']
+        ndevices = self.yaml["ndevices"]
         self.assertTrue(isinstance(ndevices, int))
         self.assertGreaterEqual(ndevices, 1)
-        self.assertEqual(ndevices, len(self.yaml['devices']))
+        self.assertEqual(ndevices, len(self.yaml["devices"]))
 
     def test_libinput(self):
-        libinput = self.yaml['libinput']
-        version = libinput['version']
+        libinput = self.yaml["libinput"]
+        version = libinput["version"]
         self.assertTrue(isinstance(version, str))
-        self.assertGreaterEqual(parse_version(version),
-                                parse_version('1.10.0'))
-        git = libinput['git']
+        self.assertGreaterEqual(parse_version(version), parse_version("1.10.0"))
+        git = libinput["git"]
         self.assertTrue(isinstance(git, str))
-        self.assertNotEqual(git, 'unknown')
+        self.assertNotEqual(git, "unknown")
 
     def test_system(self):
-        system = self.yaml['system']
-        kernel = system['kernel']
+        system = self.yaml["system"]
+        kernel = system["kernel"]
         self.assertTrue(isinstance(kernel, str))
         self.assertEqual(kernel, os.uname().release)
 
-        dmi = system['dmi']
+        dmi = system["dmi"]
         self.assertTrue(isinstance(dmi, str))
-        with open('/sys/class/dmi/id/modalias') as f:
+        with open("/sys/class/dmi/id/modalias") as f:
             sys_dmi = f.read()[:-1]  # trailing newline
             self.assertEqual(dmi, sys_dmi)
 
     def test_devices_sections_exist(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            self.assertIn('node', d)
-            self.assertIn('evdev', d)
-            self.assertIn('udev', d)
+            self.assertIn("node", d)
+            self.assertIn("evdev", d)
+            self.assertIn("udev", d)
 
     def test_evdev_sections_exist(self):
-        sections = ['name', 'id', 'codes', 'properties']
-        devices = self.yaml['devices']
+        sections = ["name", "id", "codes", "properties"]
+        devices = self.yaml["devices"]
         for d in devices:
-            evdev = d['evdev']
+            evdev = d["evdev"]
             for s in sections:
                 self.assertIn(s, evdev)
 
     def test_evdev_name(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            evdev = d['evdev']
-            name = evdev['name']
+            evdev = d["evdev"]
+            name = evdev["name"]
             self.assertTrue(isinstance(name, str))
             self.assertGreaterEqual(len(name), 5)
 
     def test_evdev_id(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            evdev = d['evdev']
-            id = evdev['id']
+            evdev = d["evdev"]
+            id = evdev["id"]
             self.assertTrue(isinstance(id, list))
             self.assertEqual(len(id), 4)
             self.assertGreater(id[0], 0)
             self.assertGreater(id[1], 0)
 
     def test_evdev_properties(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            evdev = d['evdev']
-            properties = evdev['properties']
+            evdev = d["evdev"]
+            properties = evdev["properties"]
             self.assertTrue(isinstance(properties, list))
 
     def test_hid(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            hid = d['hid']
+            hid = d["hid"]
             self.assertTrue(isinstance(hid, list))
             for byte in hid:
                 self.assertGreaterEqual(byte, 0)
                 self.assertLessEqual(byte, 255)
 
     def test_udev_sections_exist(self):
-        sections = ['properties']
-        devices = self.yaml['devices']
+        sections = ["properties"]
+        devices = self.yaml["devices"]
         for d in devices:
-            udev = d['udev']
+            udev = d["udev"]
             for s in sections:
                 self.assertIn(s, udev)
 
     def test_udev_properties(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            udev = d['udev']
-            properties = udev['properties']
+            udev = d["udev"]
+            properties = udev["properties"]
             self.assertTrue(isinstance(properties, list))
             self.assertGreater(len(properties), 0)
 
-            self.assertIn('ID_INPUT=1', properties)
+            self.assertIn("ID_INPUT=1", properties)
             for p in properties:
-                self.assertTrue(re.match('[A-Z0-9_]+=.+', p))
+                self.assertTrue(re.match("[A-Z0-9_]+=.+", p))
 
     def test_udev_id_inputs(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            udev = d['udev']
-            properties = udev['properties']
-            id_inputs = [p for p in properties if p.startswith('ID_INPUT')]
+            udev = d["udev"]
+            properties = udev["properties"]
+            id_inputs = [p for p in properties if p.startswith("ID_INPUT")]
             # We expect ID_INPUT and ID_INPUT_something, but might get more
             # than one of the latter
             self.assertGreaterEqual(len(id_inputs), 2)
 
     def test_events_have_section(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            events = d['events']
+            events = d["events"]
             if not events:
                 raise unittest.SkipTest()
             for e in events:
-                self.assertTrue('evdev' in e or 'libinput' in e)
+                self.assertTrue("evdev" in e or "libinput" in e)
 
     def test_events_evdev(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            events = d['events']
+            events = d["events"]
             if not events:
                 raise unittest.SkipTest()
             for e in events:
                 try:
-                    evdev = e['evdev']
+                    evdev = e["evdev"]
                 except KeyError:
                     continue
 
@@ -213,28 +216,28 @@
                 self.assertLessEqual(ev_syn[4], 1)
 
     def test_events_evdev_syn_report(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            events = d['events']
+            events = d["events"]
             if not events:
                 raise unittest.SkipTest()
             for e in events:
                 try:
-                    evdev = e['evdev']
+                    evdev = e["evdev"]
                 except KeyError:
                     continue
                 for ev in evdev[:-1]:
                     self.assertFalse(ev[2] == 0 and ev[3] == 0)
 
     def test_events_libinput(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            events = d['events']
+            events = d["events"]
             if not events:
                 raise unittest.SkipTest()
             for e in events:
                 try:
-                    libinput = e['libinput']
+                    libinput = e["libinput"]
                 except KeyError:
                     continue
 
@@ -243,20 +246,35 @@
                     self.assertTrue(isinstance(ev, dict))
 
     def test_events_libinput_type(self):
-        types = ['POINTER_MOTION', 'POINTER_MOTION_ABSOLUTE', 'POINTER_AXIS',
-                 'POINTER_BUTTON', 'DEVICE_ADDED', 'KEYBOARD_KEY',
-                 'TOUCH_DOWN', 'TOUCH_MOTION', 'TOUCH_UP', 'TOUCH_FRAME',
-                 'GESTURE_SWIPE_BEGIN', 'GESTURE_SWIPE_UPDATE',
-                 'GESTURE_SWIPE_END', 'GESTURE_PINCH_BEGIN',
-                 'GESTURE_PINCH_UPDATE', 'GESTURE_PINCH_END',
-                 'TABLET_TOOL_AXIS', 'TABLET_TOOL_PROXIMITY',
-                 'TABLET_TOOL_BUTTON', 'TABLET_TOOL_TIP',
-                 'TABLET_PAD_STRIP', 'TABLET_PAD_RING',
-                 'TABLET_PAD_BUTTON', 'SWITCH_TOGGLE',
-                 ]
+        types = [
+            "POINTER_MOTION",
+            "POINTER_MOTION_ABSOLUTE",
+            "POINTER_AXIS",
+            "POINTER_BUTTON",
+            "DEVICE_ADDED",
+            "KEYBOARD_KEY",
+            "TOUCH_DOWN",
+            "TOUCH_MOTION",
+            "TOUCH_UP",
+            "TOUCH_FRAME",
+            "GESTURE_SWIPE_BEGIN",
+            "GESTURE_SWIPE_UPDATE",
+            "GESTURE_SWIPE_END",
+            "GESTURE_PINCH_BEGIN",
+            "GESTURE_PINCH_UPDATE",
+            "GESTURE_PINCH_END",
+            "TABLET_TOOL_AXIS",
+            "TABLET_TOOL_PROXIMITY",
+            "TABLET_TOOL_BUTTON",
+            "TABLET_TOOL_TIP",
+            "TABLET_PAD_STRIP",
+            "TABLET_PAD_RING",
+            "TABLET_PAD_BUTTON",
+            "SWITCH_TOGGLE",
+        ]
         for e in self.libinput_events():
-            self.assertIn('type', e)
-            self.assertIn(e['type'], types)
+            self.assertIn("type", e)
+            self.assertIn(e["type"], types)
 
     def test_events_libinput_time(self):
         # DEVICE_ADDED has no time
@@ -264,51 +282,51 @@
         # libinput event.
         try:
             for e in list(self.libinput_events())[2:]:
-                self.assertIn('time', e)
-                self.assertGreater(e['time'], 0.0)
-                self.assertLess(e['time'], 60.0)
+                self.assertIn("time", e)
+                self.assertGreater(e["time"], 0.0)
+                self.assertLess(e["time"], 60.0)
         except IndexError:
             pass
 
     def test_events_libinput_device_added(self):
-        keys = ['type', 'seat', 'logical_seat']
-        for e in self.libinput_events('DEVICE_ADDED'):
+        keys = ["type", "seat", "logical_seat"]
+        for e in self.libinput_events("DEVICE_ADDED"):
             self.dict_key_crosscheck(e, keys)
-            self.assertEqual(e['seat'], 'seat0')
-            self.assertEqual(e['logical_seat'], 'default')
+            self.assertEqual(e["seat"], "seat0")
+            self.assertEqual(e["logical_seat"], "default")
 
     def test_events_libinput_pointer_motion(self):
-        keys = ['type', 'time', 'delta', 'unaccel']
-        for e in self.libinput_events('POINTER_MOTION'):
+        keys = ["type", "time", "delta", "unaccel"]
+        for e in self.libinput_events("POINTER_MOTION"):
             self.dict_key_crosscheck(e, keys)
-            delta = e['delta']
+            delta = e["delta"]
             self.assertTrue(isinstance(delta, list))
             self.assertEqual(len(delta), 2)
             for d in delta:
                 self.assertTrue(isinstance(d, float))
-            unaccel = e['unaccel']
+            unaccel = e["unaccel"]
             self.assertTrue(isinstance(unaccel, list))
             self.assertEqual(len(unaccel), 2)
             for d in unaccel:
                 self.assertTrue(isinstance(d, float))
 
     def test_events_libinput_pointer_button(self):
-        keys = ['type', 'time', 'button', 'state', 'seat_count']
-        for e in self.libinput_events('POINTER_BUTTON'):
+        keys = ["type", "time", "button", "state", "seat_count"]
+        for e in self.libinput_events("POINTER_BUTTON"):
             self.dict_key_crosscheck(e, keys)
-            button = e['button']
+            button = e["button"]
             self.assertGreater(button, 0x100)  # BTN_0
             self.assertLess(button, 0x160)  # KEY_OK
-            state = e['state']
-            self.assertIn(state, ['pressed', 'released'])
-            scount = e['seat_count']
+            state = e["state"]
+            self.assertIn(state, ["pressed", "released"])
+            scount = e["seat_count"]
             self.assertGreaterEqual(scount, 0)
 
     def test_events_libinput_pointer_absolute(self):
-        keys = ['type', 'time', 'point', 'transformed']
-        for e in self.libinput_events('POINTER_MOTION_ABSOLUTE'):
+        keys = ["type", "time", "point", "transformed"]
+        for e in self.libinput_events("POINTER_MOTION_ABSOLUTE"):
             self.dict_key_crosscheck(e, keys)
-            point = e['point']
+            point = e["point"]
             self.assertTrue(isinstance(point, list))
             self.assertEqual(len(point), 2)
             for p in point:
@@ -316,7 +334,7 @@
                 self.assertGreater(p, 0.0)
                 self.assertLess(p, 300.0)
 
-            transformed = e['transformed']
+            transformed = e["transformed"]
             self.assertTrue(isinstance(transformed, list))
             self.assertEqual(len(transformed), 2)
             for t in transformed:
@@ -325,25 +343,24 @@
                 self.assertLess(t, 100.0)
 
     def test_events_libinput_touch(self):
-        keys = ['type', 'time', 'slot', 'seat_slot']
+        keys = ["type", "time", "slot", "seat_slot"]
         for e in self.libinput_events():
-            if (not e['type'].startswith('TOUCH_') or
-                    e['type'] == 'TOUCH_FRAME'):
+            if not e["type"].startswith("TOUCH_") or e["type"] == "TOUCH_FRAME":
                 continue
 
             for k in keys:
                 self.assertIn(k, e.keys())
-            slot = e['slot']
-            seat_slot = e['seat_slot']
+            slot = e["slot"]
+            seat_slot = e["seat_slot"]
 
             self.assertGreaterEqual(slot, 0)
             self.assertGreaterEqual(seat_slot, 0)
 
     def test_events_libinput_touch_down(self):
-        keys = ['type', 'time', 'slot', 'seat_slot', 'point', 'transformed']
-        for e in self.libinput_events('TOUCH_DOWN'):
+        keys = ["type", "time", "slot", "seat_slot", "point", "transformed"]
+        for e in self.libinput_events("TOUCH_DOWN"):
             self.dict_key_crosscheck(e, keys)
-            point = e['point']
+            point = e["point"]
             self.assertTrue(isinstance(point, list))
             self.assertEqual(len(point), 2)
             for p in point:
@@ -351,7 +368,7 @@
                 self.assertGreater(p, 0.0)
                 self.assertLess(p, 300.0)
 
-            transformed = e['transformed']
+            transformed = e["transformed"]
             self.assertTrue(isinstance(transformed, list))
             self.assertEqual(len(transformed), 2)
             for t in transformed:
@@ -360,10 +377,10 @@
                 self.assertLess(t, 100.0)
 
     def test_events_libinput_touch_motion(self):
-        keys = ['type', 'time', 'slot', 'seat_slot', 'point', 'transformed']
-        for e in self.libinput_events('TOUCH_MOTION'):
+        keys = ["type", "time", "slot", "seat_slot", "point", "transformed"]
+        for e in self.libinput_events("TOUCH_MOTION"):
             self.dict_key_crosscheck(e, keys)
-            point = e['point']
+            point = e["point"]
             self.assertTrue(isinstance(point, list))
             self.assertEqual(len(point), 2)
             for p in point:
@@ -371,7 +388,7 @@
                 self.assertGreater(p, 0.0)
                 self.assertLess(p, 300.0)
 
-            transformed = e['transformed']
+            transformed = e["transformed"]
             self.assertTrue(isinstance(transformed, list))
             self.assertEqual(len(transformed), 2)
             for t in transformed:
@@ -380,25 +397,25 @@
                 self.assertLess(t, 100.0)
 
     def test_events_libinput_touch_frame(self):
-        devices = self.yaml['devices']
+        devices = self.yaml["devices"]
         for d in devices:
-            events = d['events']
+            events = d["events"]
             if not events:
                 raise unittest.SkipTest()
             for e in events:
                 try:
-                    evdev = e['libinput']
+                    evdev = e["libinput"]
                 except KeyError:
                     continue
 
                 need_frame = False
                 for ev in evdev:
-                    t = ev['type']
-                    if not t.startswith('TOUCH_'):
+                    t = ev["type"]
+                    if not t.startswith("TOUCH_"):
                         self.assertFalse(need_frame)
                         continue
 
-                    if t == 'TOUCH_FRAME':
+                    if t == "TOUCH_FRAME":
                         self.assertTrue(need_frame)
                         need_frame = False
                     else:
@@ -407,177 +424,175 @@
                 self.assertFalse(need_frame)
 
     def test_events_libinput_gesture_pinch(self):
-        keys = ['type', 'time', 'nfingers', 'delta',
-                'unaccel', 'angle_delta', 'scale']
-        for e in self.libinput_events(['GESTURE_PINCH_BEGIN',
-                                       'GESTURE_PINCH_UPDATE',
-                                       'GESTURE_PINCH_END']):
+        keys = ["type", "time", "nfingers", "delta", "unaccel", "angle_delta", "scale"]
+        for e in self.libinput_events(
+            ["GESTURE_PINCH_BEGIN", "GESTURE_PINCH_UPDATE", "GESTURE_PINCH_END"]
+        ):
             self.dict_key_crosscheck(e, keys)
-            delta = e['delta']
+            delta = e["delta"]
             self.assertTrue(isinstance(delta, list))
             self.assertEqual(len(delta), 2)
             for d in delta:
                 self.assertTrue(isinstance(d, float))
-            unaccel = e['unaccel']
+            unaccel = e["unaccel"]
             self.assertTrue(isinstance(unaccel, list))
             self.assertEqual(len(unaccel), 2)
             for d in unaccel:
                 self.assertTrue(isinstance(d, float))
 
-            adelta = e['angle_delta']
+            adelta = e["angle_delta"]
             self.assertTrue(isinstance(adelta, list))
             self.assertEqual(len(adelta), 2)
             for d in adelta:
                 self.assertTrue(isinstance(d, float))
 
-            scale = e['scale']
+            scale = e["scale"]
             self.assertTrue(isinstance(scale, list))
             self.assertEqual(len(scale), 2)
             for d in scale:
                 self.assertTrue(isinstance(d, float))
 
     def test_events_libinput_gesture_swipe(self):
-        keys = ['type', 'time', 'nfingers', 'delta',
-                'unaccel']
-        for e in self.libinput_events(['GESTURE_SWIPE_BEGIN',
-                                       'GESTURE_SWIPE_UPDATE',
-                                       'GESTURE_SWIPE_END']):
+        keys = ["type", "time", "nfingers", "delta", "unaccel"]
+        for e in self.libinput_events(
+            ["GESTURE_SWIPE_BEGIN", "GESTURE_SWIPE_UPDATE", "GESTURE_SWIPE_END"]
+        ):
             self.dict_key_crosscheck(e, keys)
-            delta = e['delta']
+            delta = e["delta"]
             self.assertTrue(isinstance(delta, list))
             self.assertEqual(len(delta), 2)
             for d in delta:
                 self.assertTrue(isinstance(d, float))
-            unaccel = e['unaccel']
+            unaccel = e["unaccel"]
             self.assertTrue(isinstance(unaccel, list))
             self.assertEqual(len(unaccel), 2)
             for d in unaccel:
                 self.assertTrue(isinstance(d, float))
 
     def test_events_libinput_tablet_pad_button(self):
-        keys = ['type', 'time', 'button', 'state', 'mode', 'is-toggle']
+        keys = ["type", "time", "button", "state", "mode", "is-toggle"]
 
-        for e in self.libinput_events('TABLET_PAD_BUTTON'):
+        for e in self.libinput_events("TABLET_PAD_BUTTON"):
             self.dict_key_crosscheck(e, keys)
 
-            b = e['button']
+            b = e["button"]
             self.assertTrue(isinstance(b, int))
             self.assertGreaterEqual(b, 0)
             self.assertLessEqual(b, 16)
 
-            state = e['state']
-            self.assertIn(state, ['pressed', 'released'])
+            state = e["state"]
+            self.assertIn(state, ["pressed", "released"])
 
-            m = e['mode']
+            m = e["mode"]
             self.assertTrue(isinstance(m, int))
             self.assertGreaterEqual(m, 0)
             self.assertLessEqual(m, 3)
 
-            t = e['is-toggle']
+            t = e["is-toggle"]
             self.assertTrue(isinstance(t, bool))
 
     def test_events_libinput_tablet_pad_ring(self):
-        keys = ['type', 'time', 'number', 'position', 'source', 'mode']
+        keys = ["type", "time", "number", "position", "source", "mode"]
 
-        for e in self.libinput_events('TABLET_PAD_RING'):
+        for e in self.libinput_events("TABLET_PAD_RING"):
             self.dict_key_crosscheck(e, keys)
 
-            n = e['number']
+            n = e["number"]
             self.assertTrue(isinstance(n, int))
             self.assertGreaterEqual(n, 0)
             self.assertLessEqual(n, 4)
 
-            p = e['position']
+            p = e["position"]
             self.assertTrue(isinstance(p, float))
             if p != -1.0:  # special 'end' case
                 self.assertGreaterEqual(p, 0.0)
                 self.assertLess(p, 360.0)
 
-            m = e['mode']
+            m = e["mode"]
             self.assertTrue(isinstance(m, int))
             self.assertGreaterEqual(m, 0)
             self.assertLessEqual(m, 3)
 
-            s = e['source']
-            self.assertIn(s, ['finger', 'unknown'])
+            s = e["source"]
+            self.assertIn(s, ["finger", "unknown"])
 
     def test_events_libinput_tablet_pad_strip(self):
-        keys = ['type', 'time', 'number', 'position', 'source', 'mode']
+        keys = ["type", "time", "number", "position", "source", "mode"]
 
-        for e in self.libinput_events('TABLET_PAD_STRIP'):
+        for e in self.libinput_events("TABLET_PAD_STRIP"):
             self.dict_key_crosscheck(e, keys)
 
-            n = e['number']
+            n = e["number"]
             self.assertTrue(isinstance(n, int))
             self.assertGreaterEqual(n, 0)
             self.assertLessEqual(n, 4)
 
-            p = e['position']
+            p = e["position"]
             self.assertTrue(isinstance(p, float))
             if p != -1.0:  # special 'end' case
                 self.assertGreaterEqual(p, 0.0)
                 self.assertLessEqual(p, 1.0)
 
-            m = e['mode']
+            m = e["mode"]
             self.assertTrue(isinstance(m, int))
             self.assertGreaterEqual(m, 0)
             self.assertLessEqual(m, 3)
 
-            s = e['source']
-            self.assertIn(s, ['finger', 'unknown'])
+            s = e["source"]
+            self.assertIn(s, ["finger", "unknown"])
 
     def test_events_libinput_tablet_tool_proximity(self):
-        keys = ['type', 'time', 'proximity', 'tool-type', 'serial', 'axes']
+        keys = ["type", "time", "proximity", "tool-type", "serial", "axes"]
 
-        for e in self.libinput_events('TABLET_TOOL_PROXIMITY'):
+        for e in self.libinput_events("TABLET_TOOL_PROXIMITY"):
             for k in keys:
                 self.assertIn(k, e)
 
-            p = e['proximity']
-            self.assertIn(p, ['in', 'out'])
+            p = e["proximity"]
+            self.assertIn(p, ["in", "out"])
 
-            p = e['tool-type']
-            self.assertIn(p, ['pen', 'eraser', 'brush', 'airbrush', 'mouse',
-                              'lens', 'unknown'])
+            p = e["tool-type"]
+            self.assertIn(
+                p, ["pen", "eraser", "brush", "airbrush", "mouse", "lens", "unknown"]
+            )
 
-            s = e['serial']
+            s = e["serial"]
             self.assertTrue(isinstance(s, int))
             self.assertGreaterEqual(s, 0)
 
-            a = e['axes']
-            for ax in e['axes']:
-                self.assertIn(a, 'pdtrsw')
+            a = e["axes"]
+            for ax in e["axes"]:
+                self.assertIn(a, "pdtrsw")
 
     def test_events_libinput_tablet_tool(self):
-        keys = ['type', 'time', 'tip']
+        keys = ["type", "time", "tip"]
 
-        for e in self.libinput_events(['TABLET_TOOL_AXIS',
-                                       'TABLET_TOOL_TIP']):
+        for e in self.libinput_events(["TABLET_TOOL_AXIS", "TABLET_TOOL_TIP"]):
             for k in keys:
                 self.assertIn(k, e)
 
-            t = e['tip']
-            self.assertIn(t, ['down', 'up'])
+            t = e["tip"]
+            self.assertIn(t, ["down", "up"])
 
     def test_events_libinput_tablet_tool_button(self):
-        keys = ['type', 'time', 'button', 'state']
+        keys = ["type", "time", "button", "state"]
 
-        for e in self.libinput_events('TABLET_TOOL_BUTTON'):
+        for e in self.libinput_events("TABLET_TOOL_BUTTON"):
             self.dict_key_crosscheck(e, keys)
 
-            b = e['button']
+            b = e["button"]
             # STYLUS, STYLUS2, STYLUS3
-            self.assertIn(b, [0x14b, 0x14c, 0x139])
+            self.assertIn(b, [0x14B, 0x14C, 0x139])
 
-            s = e['state']
-            self.assertIn(s, ['pressed', 'released'])
+            s = e["state"]
+            self.assertIn(s, ["pressed", "released"])
 
     def test_events_libinput_tablet_tool_axes(self):
-        for e in self.libinput_events(['TABLET_TOOL_PROXIMITY',
-                                       'TABLET_TOOL_AXIS',
-                                       'TABLET_TOOL_TIP']):
+        for e in self.libinput_events(
+            ["TABLET_TOOL_PROXIMITY", "TABLET_TOOL_AXIS", "TABLET_TOOL_TIP"]
+        ):
 
-            point = e['point']
+            point = e["point"]
             self.assertTrue(isinstance(point, list))
             self.assertEqual(len(point), 2)
             for p in point:
@@ -585,7 +600,7 @@
                 self.assertGreater(p, 0.0)
 
             try:
-                tilt = e['tilt']
+                tilt = e["tilt"]
                 self.assertTrue(isinstance(tilt, list))
                 self.assertEqual(len(tilt), 2)
                 for t in tilt:
@@ -594,70 +609,75 @@
                 pass
 
             try:
-                d = e['distance']
+                d = e["distance"]
                 self.assertTrue(isinstance(d, float))
                 self.assertGreaterEqual(d, 0.0)
-                self.assertNotIn('pressure', e)
+                self.assertNotIn("pressure", e)
             except KeyError:
                 pass
 
             try:
-                p = e['pressure']
+                p = e["pressure"]
                 self.assertTrue(isinstance(p, float))
                 self.assertGreaterEqual(p, 0.0)
-                self.assertNotIn('distance', e)
+                self.assertNotIn("distance", e)
             except KeyError:
                 pass
 
             try:
-                r = e['rotation']
+                r = e["rotation"]
                 self.assertTrue(isinstance(r, float))
                 self.assertGreaterEqual(r, 0.0)
             except KeyError:
                 pass
 
             try:
-                s = e['slider']
+                s = e["slider"]
                 self.assertTrue(isinstance(s, float))
                 self.assertGreaterEqual(s, 0.0)
             except KeyError:
                 pass
 
             try:
-                w = e['wheel']
+                w = e["wheel"]
                 self.assertTrue(isinstance(w, float))
                 self.assertGreaterEqual(w, 0.0)
-                self.assertIn('wheel-discrete', e)
-                wd = e['wheel-discrete']
+                self.assertIn("wheel-discrete", e)
+                wd = e["wheel-discrete"]
                 self.assertTrue(isinstance(wd, 1))
                 self.assertGreaterEqual(wd, 0.0)
 
                 def sign(x):
                     (1, -1)[x < 0]
+
                 self.assertTrue(sign(w), sign(wd))
             except KeyError:
                 pass
 
     def test_events_libinput_switch(self):
-        keys = ['type', 'time', 'switch', 'state']
+        keys = ["type", "time", "switch", "state"]
 
-        for e in self.libinput_events('SWITCH_TOGGLE'):
+        for e in self.libinput_events("SWITCH_TOGGLE"):
             self.dict_key_crosscheck(e, keys)
 
-            s = e['switch']
+            s = e["switch"]
             self.assertTrue(isinstance(s, int))
             self.assertIn(s, [0x00, 0x01])
 
             # yaml converts on/off to true/false
-            state = e['state']
+            state = e["state"]
             self.assertTrue(isinstance(state, bool))
 
 
-if __name__ == '__main__':
-    parser = argparse.ArgumentParser(description='Verify a YAML recording')
-    parser.add_argument('recording', metavar='recorded-file.yaml',
-                        type=str, help='Path to device recording')
-    parser.add_argument('--verbose', action='store_true')
+if __name__ == "__main__":
+    parser = argparse.ArgumentParser(description="Verify a YAML recording")
+    parser.add_argument(
+        "recording",
+        metavar="recorded-file.yaml",
+        type=str,
+        help="Path to device recording",
+    )
+    parser.add_argument("--verbose", action="store_true")
     args, remainder = parser.parse_known_args()
     TestYaml.filename = args.recording
     verbosity = 1
diff -Naur third_party_libinput_bak/tools/libinput-record.c third_party_libinput_new/tools/libinput-record.c
--- third_party_libinput_bak/tools/libinput-record.c	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-record.c	2023-03-30 11:10:42.206564300 +0800
@@ -24,11 +24,13 @@
 #include "config.h"
 
 #include <errno.h>
+#include <sys/epoll.h>
 #include <inttypes.h>
 #include <linux/input.h>
 #include <libevdev/libevdev.h>
 #include <libudev.h>
 #include <sys/signalfd.h>
+#include <sys/timerfd.h>
 #include <sys/utsname.h>
 #include <sys/stat.h>
 #include <string.h>
@@ -53,47 +55,49 @@
 
 static const int FILE_VERSION_NUMBER = 1;
 
-/* libinput is not designed to keep events past immediate use so we need to
- * cache our events. Simplest way to do this is to just cache the printf
- * output */
-struct li_event {
-	char msg[256];
-};
-
-enum event_type {
-	NONE,
-	EVDEV,
-	LIBINPUT,
-	COMMENT,
-};
-
-struct event {
-	enum event_type type;
-	uint64_t time;
-	union {
-		struct input_event evdev;
-		struct li_event libinput;
-		char comment[200];
-	} u;
+/* Indentation levels for the various data nodes */
+enum indent {
+	I_NONE = 0,
+	I_TOPLEVEL = 0,
+	I_LIBINPUT = 2,			/* nodes inside libinput: */
+	I_SYSTEM = 0,			/* nodes inside system:   */
+	I_DEVICE = 2,			/* nodes inside devices:  */
+	I_EVDEV = 4,			/* nodes inside evdev:    */
+	I_EVDEV_DATA = 6,		/* nodes below evdev:	  */
+	I_UDEV = 4,			/* nodes inside udev:     */
+	I_UDEV_DATA = 6,		/* nodes below udev:      */
+	I_QUIRKS = 4,			/* nodes inside quirks:	  */
+	I_LIBINPUTDEV = 4,		/* nodes inside libinput: (the
+					   device description */
+	I_EVENTTYPE = 4,		/* event type (evdev:, libinput:,
+					   hidraw:) */
+	I_EVENT = 6,			/* event data */
 };
 
 struct record_device {
+	struct record_context *ctx;
 	struct list link;
 	char *devnode;		/* device node of the source device */
 	struct libevdev *evdev;
 	struct libevdev *evdev_prev; /* previous value, used for EV_ABS
 					deltas */
 	struct libinput_device *device;
-
-	struct event *events;
-	size_t nevents;
-	size_t events_sz;
+	struct list hidraw_devices;
 
 	struct {
 		bool is_touch_device;
 		uint16_t slot_state;
 		uint16_t last_slot_state;
 	} touch;
+
+	FILE *fp;
+};
+
+struct hidraw {
+	struct list link;
+	struct record_device *device;
+	int fd;
+	char *name;
 };
 
 struct record_context {
@@ -102,26 +106,68 @@
 
 	uint64_t offset;
 
+	/* The first device to be added */
+	struct record_device *first_device;
+
 	struct list devices;
 	int ndevices;
 
-	char *outfile; /* file name given on cmdline */
-	char *output_file; /* full file name with suffix */
-
-	int out_fd;
-	unsigned int indent;
+	struct {
+		char *name;		 /* file name given on cmdline */
+		char *name_with_suffix;  /* full file name with suffix */
+	} output_file;
 
 	struct libinput *libinput;
+
+	int epoll_fd;
+	struct list sources;
+
+	struct {
+		bool had_events_since_last_time;
+		bool skipped_timer_print;
+	} timestamps;
+
+	bool had_events;
+	bool stop;
 };
 
-static inline bool
+#define resize(array_, sz_) \
+{ \
+	size_t new_size = (sz_) + 1000; \
+	void *tmp = realloc((array_), new_size * sizeof(*(array_))); \
+	assert(tmp); \
+	(array_)  = tmp; \
+	(sz_) = new_size; \
+}
+
+typedef void (*source_dispatch_t)(struct record_context *ctx,
+				  int fd,
+				  void *user_data);
+
+struct source {
+	source_dispatch_t dispatch;
+	void *user_data;
+	int fd;
+	struct list link;
+};
+
+static bool
 obfuscate_keycode(struct input_event *ev)
 {
 	switch (ev->type) {
 	case EV_KEY:
-		if (ev->code >= KEY_ESC && ev->code < KEY_ZENKAKUHANKAKU) {
-			ev->code = KEY_A;
-			return true;
+		switch (ev->code) {
+		case KEY_ESC:
+		case KEY_TAB:
+		case KEY_ENTER:
+		case KEY_LEFTCTRL:
+			break;
+		default:
+			if ((ev->code > KEY_ESC && ev->code < KEY_CAPSLOCK) ||
+			    (ev->code >= KEY_KP7 && ev->code <= KEY_KPDOT)) {
+				ev->code = KEY_A;
+				return true;
+			}
 		}
 		break;
 	case EV_MSC:
@@ -135,34 +181,23 @@
 	return false;
 }
 
-static inline void
-indent_push(struct record_context *ctx)
-{
-	ctx->indent += 2;
-}
-
-static inline void
-indent_pop(struct record_context *ctx)
-{
-	assert(ctx->indent >= 2);
-	ctx->indent -= 2;
-}
-
 /**
- * Indented dprintf, indentation is given as second parameter.
+ * Indented dprintf, indentation is in the context
  */
-static inline void
-iprintf(const struct record_context *ctx, const char *format, ...)
+LIBINPUT_ATTRIBUTE_PRINTF(3, 4)
+static void
+iprintf(FILE *fp,
+	enum indent indent,
+	const char *format, ...)
 {
 	va_list args;
 	char fmt[1024];
 	static const char space[] = "                                     ";
 	static const size_t len = sizeof(space);
-	unsigned int indent = ctx->indent;
 	int rc;
 
 	assert(indent < len);
-	assert(strlen(format) > 1);
+	assert(strlen(format) >= 1);
 
 	/* Special case: if we're printing a new list item, we want less
 	 * indentation because the '- ' takes up one level of indentation
@@ -170,52 +205,39 @@
 	 * This is only needed because I don't want to deal with open/close
 	 * lists statements.
 	 */
-	if (format[0] == '-')
+	if (format[0] == '-' && indent > 0)
 		indent -= 2;
 
 	snprintf(fmt, sizeof(fmt), "%s%s", &space[len - indent - 1], format);
 	va_start(args, format);
-	rc = vdprintf(ctx->out_fd, fmt, args);
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-nonliteral"
+	rc = vfprintf(fp, fmt, args);
+#pragma GCC diagnostic pop
 	va_end(args);
 
 	assert(rc != -1 && (unsigned int)rc > indent);
 }
 
-/**
- * Normal printf, just wrapped for the context
- */
-static inline void
-noiprintf(const struct record_context *ctx, const char *format, ...)
-{
-	va_list args;
-	int rc;
-
-	va_start(args, format);
-	rc = vdprintf(ctx->out_fd, format, args);
-	va_end(args);
-	assert(rc != -1 && (unsigned int)rc > 0);
-}
-
-static inline uint64_t
+static uint64_t
 time_offset(struct record_context *ctx, uint64_t time)
 {
 	return ctx->offset ? time - ctx->offset : 0;
 }
 
-static inline void
-print_evdev_event(struct record_context *ctx,
-		  struct record_device *dev,
+static void
+print_evdev_event(struct record_device *dev,
 		  struct input_event *ev)
 {
 	const char *tname, *cname;
 	bool was_modified = false;
 	char desc[1024];
-	uint64_t time = input_event_time(ev) - ctx->offset;
+	uint64_t time = input_event_time(ev) - dev->ctx->offset;
 
 	input_event_set_time(ev, time);
 
 	/* Don't leak passwords unless the user wants to */
-	if (!ctx->show_keycodes)
+	if (!dev->ctx->show_keycodes)
 		was_modified = obfuscate_keycode(ev);
 
 	tname = libevdev_event_type_get_name(ev->type);
@@ -331,7 +353,8 @@
 			 was_modified ? " (obfuscated)" : "");
 	}
 
-	iprintf(ctx,
+	iprintf(dev->fp,
+		I_EVENT,
 		"- [%3lu, %6u, %3d, %3d, %7d] # %s\n",
 		ev->input_event_sec,
 		(unsigned int)ev->input_event_usec,
@@ -341,42 +364,25 @@
 		desc);
 }
 
-#define resize(array_, sz_) \
-{ \
-	size_t new_size = (sz_) + 1000; \
-	void *tmp = realloc((array_), new_size * sizeof(*(array_))); \
-	assert(tmp); \
-	(array_)  = tmp; \
-	(sz_) = new_size; \
-}
-
-static inline size_t
-handle_evdev_frame(struct record_context *ctx, struct record_device *d)
+static bool
+handle_evdev_frame(struct record_device *d)
 {
 	struct libevdev *evdev = d->evdev;
 	struct input_event e;
-	size_t count = 0;
-	uint32_t last_time = 0;
-	struct event *event;
-
-	while (libevdev_next_event(evdev,
-				   LIBEVDEV_READ_FLAG_NORMAL,
-				   &e) == LIBEVDEV_READ_STATUS_SUCCESS) {
-		uint64_t time = input_event_time(&e);
 
-		if (ctx->offset == 0)
-			ctx->offset = time;
-		else
-			time = time_offset(ctx, time);
+	if (libevdev_next_event(evdev, LIBEVDEV_READ_FLAG_NORMAL, &e) !=
+		LIBEVDEV_READ_STATUS_SUCCESS)
+		return false;
 
-		if (d->nevents == d->events_sz)
-			resize(d->events, d->events_sz);
+	iprintf(d->fp, I_EVENTTYPE, "- evdev:\n");
+	do {
+
+		if (d->ctx->offset == 0) {
+			uint64_t time = input_event_time(&e);
+			d->ctx->offset = time;
+		}
 
-		event = &d->events[d->nevents++];
-		event->type = EVDEV;
-		event->time = time;
-		event->u.evdev = e;
-		count++;
+		print_evdev_event(d, &e);
 
 		if (d->touch.is_touch_device &&
 		    e.type == EV_ABS &&
@@ -390,38 +396,29 @@
 				d->touch.slot_state &= ~(1 << slot);
 		}
 
-		last_time = event->time;
-
 		if (e.type == EV_SYN && e.code == SYN_REPORT)
 			break;
-	}
+	} while (libevdev_next_event(evdev,
+				     LIBEVDEV_READ_FLAG_NORMAL,
+				     &e) == LIBEVDEV_READ_STATUS_SUCCESS);
 
 	if (d->touch.slot_state != d->touch.last_slot_state) {
 		d->touch.last_slot_state = d->touch.slot_state;
-		if (d->nevents == d->events_sz)
-			resize(d->events, d->events_sz);
-
 		if (d->touch.slot_state == 0) {
-			event = &d->events[d->nevents++];
-			event->type = COMMENT;
-			event->time = last_time;
-			snprintf(event->u.comment,
-				 sizeof(event->u.comment),
-				 "                               # Touch device in neutral state\n");
-			count++;
+			iprintf(d->fp,
+				I_EVENT,
+				 "                                 # Touch device in neutral state\n");
 		}
 	}
 
-	return count;
+	return true;
 }
 
 static void
-buffer_device_notify(struct record_context *ctx,
-		     struct libinput_event *e,
-		     struct event *event)
+print_device_notify(struct record_device *dev, struct libinput_event *e)
 {
-	struct libinput_device *dev = libinput_event_get_device(e);
-	struct libinput_seat *seat = libinput_device_get_seat(dev);
+	struct libinput_device *d = libinput_event_get_device(e);
+	struct libinput_seat *seat = libinput_device_get_seat(d);
 	const char *type = NULL;
 
 	switch(libinput_event_get_type(e)) {
@@ -435,19 +432,16 @@
 		abort();
 	}
 
-	event->time = 0;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{type: %s, seat: %5s, logical_seat: %7s}",
-		 type,
-		 libinput_seat_get_physical_name(seat),
-		 libinput_seat_get_logical_name(seat));
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {type: %s, seat: %5s, logical_seat: %7s}\n",
+		type,
+		libinput_seat_get_physical_name(seat),
+		libinput_seat_get_logical_name(seat));
 }
 
 static void
-buffer_key_event(struct record_context *ctx,
-		 struct libinput_event *e,
-		 struct event *event)
+print_key_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_keyboard *k = libinput_event_get_keyboard_event(e);
 	enum libinput_key_state state;
@@ -463,29 +457,26 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_keyboard_get_time_usec(k));
+	time = time_offset(dev->ctx, libinput_event_keyboard_get_time_usec(k));
 	state = libinput_event_keyboard_get_key_state(k);
 
 	key = libinput_event_keyboard_get_key(k);
-	if (!ctx->show_keycodes &&
+	if (!dev->ctx->show_keycodes &&
 	    (key >= KEY_ESC && key < KEY_ZENKAKUHANKAKU))
 		key = -1;
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, key: %d, state: %s}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 key,
-		 state == LIBINPUT_KEY_STATE_PRESSED ? "pressed" : "released");
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, key: %d, state: %s}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		key,
+		state == LIBINPUT_KEY_STATE_PRESSED ? "pressed" : "released");
 }
 
 static void
-buffer_motion_event(struct record_context *ctx,
-		    struct libinput_event *e,
-		    struct event *event)
+print_motion_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_pointer *p = libinput_event_get_pointer_event(e);
 	double x = libinput_event_pointer_get_dx(p),
@@ -503,22 +494,19 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_pointer_get_time_usec(p));
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, delta: [%6.2f, %6.2f], unaccel: [%6.2f, %6.2f]}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 x, y,
-		 uax, uay);
+	time = time_offset(dev->ctx, libinput_event_pointer_get_time_usec(p));
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, delta: [%6.2f, %6.2f], unaccel: [%6.2f, %6.2f]}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		x, y,
+		uax, uay);
 }
 
 static void
-buffer_absmotion_event(struct record_context *ctx,
-		       struct libinput_event *e,
-		       struct event *event)
+print_absmotion_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_pointer *p = libinput_event_get_pointer_event(e);
 	double x = libinput_event_pointer_get_absolute_x(p),
@@ -536,23 +524,20 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_pointer_get_time_usec(p));
+	time = time_offset(dev->ctx, libinput_event_pointer_get_time_usec(p));
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, point: [%6.2f, %6.2f], transformed: [%6.2f, %6.2f]}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 x, y,
-		 tx, ty);
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, point: [%6.2f, %6.2f], transformed: [%6.2f, %6.2f]}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		x, y,
+		tx, ty);
 }
 
 static void
-buffer_pointer_button_event(struct record_context *ctx,
-			    struct libinput_event *e,
-			    struct event *event)
+print_pointer_button_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_pointer *p = libinput_event_get_pointer_event(e);
 	enum libinput_button_state state;
@@ -568,26 +553,23 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_pointer_get_time_usec(p));
+	time = time_offset(dev->ctx, libinput_event_pointer_get_time_usec(p));
 	button = libinput_event_pointer_get_button(p);
 	state = libinput_event_pointer_get_button_state(p);
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, button: %d, state: %s, seat_count: %u}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 button,
-		 state == LIBINPUT_BUTTON_STATE_PRESSED ? "pressed" : "released",
-		 libinput_event_pointer_get_seat_button_count(p));
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, button: %d, state: %s, seat_count: %u}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		button,
+		state == LIBINPUT_BUTTON_STATE_PRESSED ? "pressed" : "released",
+		libinput_event_pointer_get_seat_button_count(p));
 }
 
 static void
-buffer_pointer_axis_event(struct record_context *ctx,
-			  struct libinput_event *e,
-			  struct event *event)
+print_pointer_axis_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_pointer *p = libinput_event_get_pointer_event(e);
 	uint64_t time;
@@ -603,7 +585,7 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_pointer_get_time_usec(p));
+	time = time_offset(dev->ctx, libinput_event_pointer_get_time_usec(p));
 	if (libinput_event_pointer_has_axis(p,
 				LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL)) {
 		h = libinput_event_pointer_get_axis_value(p,
@@ -628,22 +610,19 @@
 		break;
 	}
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, axes: [%2.2f, %2.2f], discrete: [%d, %d], source: %s}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 h, v,
-		 hd, vd,
-		 source);
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, axes: [%2.2f, %2.2f], discrete: [%d, %d], source: %s}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		h, v,
+		hd, vd,
+		source);
 }
 
 static void
-buffer_touch_event(struct record_context *ctx,
-		   struct libinput_event *e,
-		   struct event *event)
+print_touch_event(struct record_device *dev, struct libinput_event *e)
 {
 	enum libinput_event_type etype = libinput_event_get_type(e);
 	struct libinput_event_touch *t = libinput_event_get_touch_event(e);
@@ -673,22 +652,21 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_touch_get_time_usec(t));
+	time = time_offset(dev->ctx, libinput_event_touch_get_time_usec(t));
 
 	if (etype != LIBINPUT_EVENT_TOUCH_FRAME) {
 		slot = libinput_event_touch_get_slot(t);
 		seat_slot = libinput_event_touch_get_seat_slot(t);
 	}
-	event->time = time;
 
 	switch (etype) {
 	case LIBINPUT_EVENT_TOUCH_FRAME:
-		snprintf(event->u.libinput.msg,
-			 sizeof(event->u.libinput.msg),
-			 "{time: %ld.%06ld, type: %s}",
-			 (long)(time / (int)1e6),
-			 (long)(time % (int)1e6),
-			 type);
+		iprintf(dev->fp,
+			I_EVENT,
+			"- {time: %ld.%06ld, type: %s}\n",
+			(long)(time / (int)1e6),
+			(long)(time % (int)1e6),
+			type);
 		break;
 	case LIBINPUT_EVENT_TOUCH_DOWN:
 	case LIBINPUT_EVENT_TOUCH_MOTION:
@@ -696,27 +674,28 @@
 		y = libinput_event_touch_get_y(t);
 		tx = libinput_event_touch_get_x_transformed(t, 100);
 		ty = libinput_event_touch_get_y_transformed(t, 100);
-		snprintf(event->u.libinput.msg,
-			 sizeof(event->u.libinput.msg),
-			 "{time: %ld.%06ld, type: %s, slot: %d, seat_slot: %d, point: [%6.2f, %6.2f], transformed: [%6.2f, %6.2f]}",
-			 (long)(time / (int)1e6),
-			 (long)(time % (int)1e6),
-			 type,
-			 slot,
-			 seat_slot,
-			 x, y,
-			 tx, ty);
+		iprintf(dev->fp,
+			I_EVENT,
+			"- {time: %ld.%06ld, type: %s, slot: %d, seat_slot: %d, "
+			"point: [%6.2f, %6.2f], transformed: [%6.2f, %6.2f]}\n",
+			(long)(time / (int)1e6),
+			(long)(time % (int)1e6),
+			type,
+			slot,
+			seat_slot,
+			x, y,
+			tx, ty);
 		break;
 	case LIBINPUT_EVENT_TOUCH_UP:
 	case LIBINPUT_EVENT_TOUCH_CANCEL:
-		snprintf(event->u.libinput.msg,
-			 sizeof(event->u.libinput.msg),
-			 "{time: %ld.%06ld, type: %s, slot: %d, seat_slot: %d}",
-			 (long)(time / (int)1e6),
-			 (long)(time % (int)1e6),
-			 type,
-			 slot,
-			 seat_slot);
+		iprintf(dev->fp,
+			I_EVENT,
+			"- {time: %ld.%06ld, type: %s, slot: %d, seat_slot: %d}\n",
+			(long)(time / (int)1e6),
+			(long)(time % (int)1e6),
+			type,
+			slot,
+			seat_slot);
 		break;
 	default:
 		abort();
@@ -724,9 +703,7 @@
 }
 
 static void
-buffer_gesture_event(struct record_context *ctx,
-		     struct libinput_event *e,
-		     struct event *event)
+print_gesture_event(struct record_device *dev, struct libinput_event *e)
 {
 	enum libinput_event_type etype = libinput_event_get_type(e);
 	struct libinput_event_gesture *g = libinput_event_get_gesture_event(e);
@@ -756,46 +733,45 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_gesture_get_time_usec(g));
-	event->time = time;
+	time = time_offset(dev->ctx, libinput_event_gesture_get_time_usec(g));
 
 	switch (etype) {
 	case LIBINPUT_EVENT_GESTURE_PINCH_BEGIN:
 	case LIBINPUT_EVENT_GESTURE_PINCH_UPDATE:
 	case LIBINPUT_EVENT_GESTURE_PINCH_END:
-		snprintf(event->u.libinput.msg,
-			 sizeof(event->u.libinput.msg),
-			 "{time: %ld.%06ld, type: %s, nfingers: %d, "
-			 "delta: [%6.2f, %6.2f], unaccel: [%6.2f, %6.2f], "
-			 "angle_delta: %6.2f, scale: %6.2f}",
-			 (long)(time / (int)1e6),
-			 (long)(time % (int)1e6),
-			 type,
-			 libinput_event_gesture_get_finger_count(g),
-			 libinput_event_gesture_get_dx(g),
-			 libinput_event_gesture_get_dy(g),
-			 libinput_event_gesture_get_dx_unaccelerated(g),
-			 libinput_event_gesture_get_dy_unaccelerated(g),
-			 libinput_event_gesture_get_angle_delta(g),
-			 libinput_event_gesture_get_scale(g)
-			 );
+		iprintf(dev->fp,
+			I_EVENT,
+			"- {time: %ld.%06ld, type: %s, nfingers: %d, "
+			"delta: [%6.2f, %6.2f], unaccel: [%6.2f, %6.2f], "
+			"angle_delta: %6.2f, scale: %6.2f}\n",
+			(long)(time / (int)1e6),
+			(long)(time % (int)1e6),
+			type,
+			libinput_event_gesture_get_finger_count(g),
+			libinput_event_gesture_get_dx(g),
+			libinput_event_gesture_get_dy(g),
+			libinput_event_gesture_get_dx_unaccelerated(g),
+			libinput_event_gesture_get_dy_unaccelerated(g),
+			libinput_event_gesture_get_angle_delta(g),
+			libinput_event_gesture_get_scale(g)
+		       );
 		break;
 	case LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN:
 	case LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE:
 	case LIBINPUT_EVENT_GESTURE_SWIPE_END:
-		snprintf(event->u.libinput.msg,
-			 sizeof(event->u.libinput.msg),
-			 "{time: %ld.%06ld, type: %s, nfingers: %d, "
-			 "delta: [%6.2f, %6.2f], unaccel: [%6.2f, %6.2f]}",
-			 (long)(time / (int)1e6),
-			 (long)(time % (int)1e6),
-			 type,
-			 libinput_event_gesture_get_finger_count(g),
-			 libinput_event_gesture_get_dx(g),
-			 libinput_event_gesture_get_dy(g),
-			 libinput_event_gesture_get_dx_unaccelerated(g),
-			 libinput_event_gesture_get_dy_unaccelerated(g)
-			 );
+		iprintf(dev->fp,
+			I_EVENT,
+			"- {time: %ld.%06ld, type: %s, nfingers: %d, "
+			"delta: [%6.2f, %6.2f], unaccel: [%6.2f, %6.2f]}\n",
+			(long)(time / (int)1e6),
+			(long)(time % (int)1e6),
+			type,
+			libinput_event_gesture_get_finger_count(g),
+			libinput_event_gesture_get_dx(g),
+			libinput_event_gesture_get_dy(g),
+			libinput_event_gesture_get_dx_unaccelerated(g),
+			libinput_event_gesture_get_dy_unaccelerated(g)
+		       );
 		break;
 	default:
 		abort();
@@ -888,9 +864,7 @@
 }
 
 static void
-buffer_tablet_tool_proximity_event(struct record_context *ctx,
-				   struct libinput_event *e,
-				   struct event *event)
+print_tablet_tool_proximity_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_tablet_tool *t =
 		libinput_event_get_tablet_tool_event(e);
@@ -939,7 +913,7 @@
 	}
 
 	prox = libinput_event_tablet_tool_get_proximity_state(t);
-	time = time_offset(ctx, libinput_event_tablet_tool_get_time_usec(t));
+	time = time_offset(dev->ctx, libinput_event_tablet_tool_get_time_usec(t));
 	axes = buffer_tablet_axes(t);
 
 	idx = 0;
@@ -957,25 +931,23 @@
 		caps[idx++] = 'w';
 	assert(idx <= ARRAY_LENGTH(caps));
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, proximity: %s, tool-type: %s, serial: %" PRIu64 ", axes: %s, %s}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 prox ? "in" : "out",
-		 tool_type,
-		 libinput_tablet_tool_get_serial(tool),
-		 caps,
-		 axes);
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, proximity: %s, tool-type: %s, serial: %" PRIu64 ", axes: %s, %s}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		prox ? "in" : "out",
+		tool_type,
+		libinput_tablet_tool_get_serial(tool),
+		caps,
+		axes);
 	free(axes);
 }
 
 static void
-buffer_tablet_tool_button_event(struct record_context *ctx,
-				struct libinput_event *e,
-				struct event *event)
+print_tablet_tool_button_event(struct record_device *dev,
+			       struct libinput_event *e)
 {
 	struct libinput_event_tablet_tool *t =
 		libinput_event_get_tablet_tool_event(e);
@@ -995,23 +967,20 @@
 
 	button = libinput_event_tablet_tool_get_button(t);
 	state = libinput_event_tablet_tool_get_button_state(t);
-	time = time_offset(ctx, libinput_event_tablet_tool_get_time_usec(t));
+	time = time_offset(dev->ctx, libinput_event_tablet_tool_get_time_usec(t));
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, button: %d, state: %s}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 button,
-		 state ? "pressed" : "released");
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, button: %d, state: %s}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		button,
+		state ? "pressed" : "released");
 }
 
 static void
-buffer_tablet_tool_event(struct record_context *ctx,
-			 struct libinput_event *e,
-			 struct event *event)
+print_tablet_tool_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_tablet_tool *t =
 		libinput_event_get_tablet_tool_event(e);
@@ -1048,26 +1017,24 @@
 	}
 
 	tip = libinput_event_tablet_tool_get_tip_state(t);
-	time = time_offset(ctx, libinput_event_tablet_tool_get_time_usec(t));
+	time = time_offset(dev->ctx, libinput_event_tablet_tool_get_time_usec(t));
 	axes = buffer_tablet_axes(t);
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s%s, tip: %s, %s}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 btn_buffer, /* may be empty string */
-		 tip ? "down" : "up",
-		 axes);
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s%s, tip: %s, %s}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		btn_buffer, /* may be empty string */
+		tip ? "down" : "up",
+		axes);
 	free(axes);
 }
 
 static void
-buffer_tablet_pad_button_event(struct record_context *ctx,
-			       struct libinput_event *e,
-			       struct event *event)
+print_tablet_pad_button_event(struct record_device *dev,
+			      struct libinput_event *e)
 {
 	struct libinput_event_tablet_pad *p =
 		libinput_event_get_tablet_pad_event(e);
@@ -1085,32 +1052,29 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_tablet_pad_get_time_usec(p));
+	time = time_offset(dev->ctx, libinput_event_tablet_pad_get_time_usec(p));
 	button = libinput_event_tablet_pad_get_button_number(p),
 	state = libinput_event_tablet_pad_get_button_state(p);
 	mode = libinput_event_tablet_pad_get_mode(p);
 	group = libinput_event_tablet_pad_get_mode_group(p);
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, button: %d, state: %s, mode: %d, is-toggle: %s}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 button,
-		 state == LIBINPUT_BUTTON_STATE_PRESSED ? "pressed" : "released",
-		 mode,
-		 libinput_tablet_pad_mode_group_button_is_toggle(group, button) ? "true" : "false"
-		 );
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, button: %d, state: %s, mode: %d, is-toggle: %s}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		button,
+		state == LIBINPUT_BUTTON_STATE_PRESSED ? "pressed" : "released",
+		mode,
+		libinput_tablet_pad_mode_group_button_is_toggle(group, button) ? "true" : "false"
+	       );
 
 
 }
 
 static void
-buffer_tablet_pad_ringstrip_event(struct record_context *ctx,
-				  struct libinput_event *e,
-				  struct event *event)
+print_tablet_pad_ringstrip_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_tablet_pad *p =
 		libinput_event_get_tablet_pad_event(e);
@@ -1153,26 +1117,23 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_tablet_pad_get_time_usec(p));
+	time = time_offset(dev->ctx, libinput_event_tablet_pad_get_time_usec(p));
 	mode = libinput_event_tablet_pad_get_mode(p);
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, number: %d, position: %.2f, source: %s, mode: %d}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 number,
-		 pos,
-		 source,
-		 mode);
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, number: %d, position: %.2f, source: %s, mode: %d}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		number,
+		pos,
+		source,
+		mode);
 }
 
 static void
-buffer_switch_event(struct record_context *ctx,
-		    struct libinput_event *e,
-		    struct event *event)
+print_switch_event(struct record_device *dev, struct libinput_event *e)
 {
 	struct libinput_event_switch *s = libinput_event_get_switch_event(e);
 	enum libinput_switch_state state;
@@ -1188,54 +1149,51 @@
 		abort();
 	}
 
-	time = time_offset(ctx, libinput_event_switch_get_time_usec(s));
+	time = time_offset(dev->ctx, libinput_event_switch_get_time_usec(s));
 	sw = libinput_event_switch_get_switch(s);
 	state = libinput_event_switch_get_switch_state(s);
 
-	event->time = time;
-	snprintf(event->u.libinput.msg,
-		 sizeof(event->u.libinput.msg),
-		 "{time: %ld.%06ld, type: %s, switch: %d, state: %s}",
-		 (long)(time / (int)1e6),
-		 (long)(time % (int)1e6),
-		 type,
-		 sw,
-		 state == LIBINPUT_SWITCH_STATE_ON ? "on" : "off");
+	iprintf(dev->fp,
+		I_EVENT,
+		"- {time: %ld.%06ld, type: %s, switch: %d, state: %s}\n",
+		(long)(time / (int)1e6),
+		(long)(time % (int)1e6),
+		type,
+		sw,
+		state == LIBINPUT_SWITCH_STATE_ON ? "on" : "off");
 }
 
 static void
-buffer_libinput_event(struct record_context *ctx,
-		      struct libinput_event *e,
-		      struct event *event)
+print_libinput_event(struct record_device *dev, struct libinput_event *e)
 {
 	switch (libinput_event_get_type(e)) {
 	case LIBINPUT_EVENT_NONE:
 		abort();
 	case LIBINPUT_EVENT_DEVICE_ADDED:
 	case LIBINPUT_EVENT_DEVICE_REMOVED:
-		buffer_device_notify(ctx, e, event);
+		print_device_notify(dev, e);
 		break;
 	case LIBINPUT_EVENT_KEYBOARD_KEY:
-		buffer_key_event(ctx, e, event);
+		print_key_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_POINTER_MOTION:
-		buffer_motion_event(ctx, e, event);
+		print_motion_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE:
-		buffer_absmotion_event(ctx, e, event);
+		print_absmotion_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_POINTER_BUTTON:
-		buffer_pointer_button_event(ctx, e, event);
+		print_pointer_button_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_POINTER_AXIS:
-		buffer_pointer_axis_event(ctx, e, event);
+		print_pointer_axis_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_TOUCH_DOWN:
 	case LIBINPUT_EVENT_TOUCH_UP:
 	case LIBINPUT_EVENT_TOUCH_MOTION:
 	case LIBINPUT_EVENT_TOUCH_CANCEL:
 	case LIBINPUT_EVENT_TOUCH_FRAME:
-		buffer_touch_event(ctx, e, event);
+		print_touch_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_GESTURE_PINCH_BEGIN:
 	case LIBINPUT_EVENT_GESTURE_PINCH_UPDATE:
@@ -1243,124 +1201,98 @@
 	case LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN:
 	case LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE:
 	case LIBINPUT_EVENT_GESTURE_SWIPE_END:
-		buffer_gesture_event(ctx, e, event);
+		print_gesture_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_TABLET_TOOL_PROXIMITY:
-		buffer_tablet_tool_proximity_event(ctx, e, event);
+		print_tablet_tool_proximity_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_TABLET_TOOL_AXIS:
 	case LIBINPUT_EVENT_TABLET_TOOL_TIP:
-		buffer_tablet_tool_event(ctx, e, event);
+		print_tablet_tool_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_TABLET_TOOL_BUTTON:
-		buffer_tablet_tool_button_event(ctx, e, event);
+		print_tablet_tool_button_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_TABLET_PAD_BUTTON:
-		buffer_tablet_pad_button_event(ctx, e, event);
+		print_tablet_pad_button_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_TABLET_PAD_RING:
 	case LIBINPUT_EVENT_TABLET_PAD_STRIP:
-		buffer_tablet_pad_ringstrip_event(ctx, e, event);
+		print_tablet_pad_ringstrip_event(dev, e);
 		break;
 	case LIBINPUT_EVENT_SWITCH_TOGGLE:
-		buffer_switch_event(ctx, e, event);
+		print_switch_event(dev, e);
 		break;
 	default:
 		break;
 	}
 }
 
-static void
-print_cached_events(struct record_context *ctx,
-		    struct record_device *d,
-		    unsigned int offset,
-		    int len)
-{
-	unsigned int idx;
-	enum event_type last_type;
-	uint64_t last_time;
-
-	if (len == -1)
-		len = d->nevents - offset;
-	assert(offset + len <= d->nevents);
-
-	if (offset == 0) {
-		last_type = NONE;
-		last_time = 0;
-	} else {
-		last_type = d->events[offset - 1].type;
-		last_time = d->events[offset - 1].time;
-	}
-
-	idx = offset;
-	indent_push(ctx);
-	while (idx < offset + len) {
-		struct event *e;
-
-		e = &d->events[idx++];
-		if (e->type != last_type || e->time != last_time) {
-			bool new_frame = false;
-
-			if (last_time == 0 || e->time != last_time)
-				new_frame = true;
-
-			indent_pop(ctx);
-
-			switch(e->type) {
-			case EVDEV:
-				if (new_frame)
-					iprintf(ctx, "- evdev:\n");
-				else
-					iprintf(ctx, "evdev:\n");
-				break;
-			case LIBINPUT:
-				if (new_frame)
-					iprintf(ctx, "- libinput:\n");
-				else
-					iprintf(ctx, "libinput:\n");
-				break;
-			case COMMENT:
-				break;
-			default:
-				abort();
-			}
-			indent_push(ctx);
+static bool
+handle_hidraw(struct hidraw *hidraw)
+{
+	struct record_device *d = hidraw->device;
+	unsigned char report[4096];
+	const char *sep = "";
+	struct timespec ts;
+	struct timeval tv;
+	uint64_t time;
 
-			last_type = e->type;
-		}
+	int rc = read(hidraw->fd, report, sizeof(report));
+	if (rc <= 0)
+		return false;
 
-		switch (e->type) {
-		case EVDEV:
-			print_evdev_event(ctx, d, &e->u.evdev);
-			break;
-		case LIBINPUT:
-			iprintf(ctx, "- %s\n", e->u.libinput.msg);
-			break;
-		case COMMENT:
-			iprintf(ctx, "%s", e->u.comment);
-			break;
-		default:
-			abort();
+	/* hidraw doesn't give us a timestamps, we have to make them up */
+	clock_gettime(CLOCK_MONOTONIC, &ts);
+	time = s2us(ts.tv_sec) + ns2us(ts.tv_nsec);
+
+	/* The first evdev event is guaranteed to have an event time earlier
+	   than now, so we don't set the offset here, we rely on the evdev
+	   events to do so. This potentially leaves us with multiple hidraw
+	   events at timestap 0 but it's too niche to worry about.  */
+	if (d->ctx->offset == 0)
+		time = 0;
+	else
+		time = time_offset(d->ctx, time);
+
+	tv = us2tv(time);
+
+	iprintf(d->fp, I_EVENTTYPE, "- hid:\n");
+	iprintf(d->fp, I_EVENT, "time: [%3lu, %6lu]\n", tv.tv_sec, tv.tv_usec);
+	iprintf(d->fp, I_EVENT, "%s: [", hidraw->name);
+
+	for (int byte = 0; byte < rc; byte++) {
+		if (byte % 16 == 0) {
+			iprintf(d->fp, I_NONE, "%s\n", sep);
+			iprintf(d->fp, I_EVENT, "  ");
+			iprintf(d->fp, I_NONE, "0x%02x", report[byte]);
+		} else {
+			iprintf(d->fp, I_NONE, "%s0x%02x", sep, report[byte]);
 		}
-
-		last_time = e->time;
+		sep = ", ";
 	}
-	indent_pop(ctx);
+	iprintf(d->fp, I_NONE, "\n");
+	iprintf(d->fp, I_EVENT, "]\n");
+
+	return true;
 }
 
-static inline size_t
+static bool
 handle_libinput_events(struct record_context *ctx,
-		       struct record_device *d)
+		       struct record_device *d,
+		       bool start_frame)
 {
 	struct libinput_event *e;
-	size_t count = 0;
 	struct record_device *current = d;
 
 	libinput_dispatch(ctx->libinput);
+	e = libinput_get_event(ctx->libinput);
+	if (!e)
+		return false;
 
-	while ((e = libinput_get_event(ctx->libinput)) != NULL) {
+	iprintf(d->fp, I_EVENTTYPE, "%slibinput:\n", start_frame ? "- " : "");
+	do {
 		struct libinput_device *device = libinput_event_get_device(e);
-		struct event *event;
 
 		if (device != current->device) {
 			struct record_device *tmp;
@@ -1375,65 +1307,49 @@
 			assert(found);
 		}
 
-		if (current->nevents == current->events_sz)
-			resize(current->events, current->events_sz);
-
-		event = &current->events[current->nevents++];
-		event->type = LIBINPUT;
-		buffer_libinput_event(ctx, e, event);
-
-		if (current == d)
-			count++;
+		print_libinput_event(current, e);
 		libinput_event_destroy(e);
-	}
-	return count;
+	} while ((e = libinput_get_event(ctx->libinput)) != NULL);
+
+	return true;
 }
 
-static inline void
-handle_events(struct record_context *ctx, struct record_device *d, bool print)
+static void
+handle_events(struct record_context *ctx, struct record_device *d)
 {
-	while(true) {
-		size_t first_idx = d->nevents;
-		size_t evcount = 0,
-		       licount = 0;
+	bool has_events = true;
 
-		evcount = handle_evdev_frame(ctx, d);
+	while (has_events) {
+		has_events = handle_evdev_frame(d);
 
 		if (ctx->libinput)
-			licount = handle_libinput_events(ctx, d);
-
-		if (evcount == 0 && licount == 0)
-			break;
-
-		if (!print)
-			continue;
-
-		print_cached_events(ctx, d, first_idx, evcount + licount);
+			has_events |= handle_libinput_events(ctx,
+							     d,
+							     !has_events);
 	}
+
+	fflush(d->fp);
 }
 
-static inline void
-print_libinput_header(struct record_context *ctx)
+static void
+print_libinput_header(FILE *fp, int timeout)
 {
-	iprintf(ctx, "libinput:\n");
-	indent_push(ctx);
-	iprintf(ctx, "version: \"%s\"\n", LIBINPUT_VERSION);
-	iprintf(ctx, "git: \"%s\"\n", LIBINPUT_GIT_VERSION);
-	if (ctx->timeout > 0)
-		iprintf(ctx, "autorestart: %d\n", ctx->timeout);
-	indent_pop(ctx);
+	iprintf(fp, I_TOPLEVEL, "libinput:\n");
+	iprintf(fp, I_LIBINPUT, "version: \"%s\"\n", LIBINPUT_VERSION);
+	iprintf(fp, I_LIBINPUT, "git: \"%s\"\n", LIBINPUT_GIT_VERSION);
+	if (timeout > 0)
+		iprintf(fp, I_LIBINPUT, "autorestart: %d\n", timeout);
 }
 
-static inline void
-print_system_header(struct record_context *ctx)
+static void
+print_system_header(FILE *fp)
 {
 	struct utsname u;
 	const char *kernel = "unknown";
 	FILE *dmi, *osrelease;
 	char dmistr[2048] = "unknown";
 
-	iprintf(ctx, "system:\n");
-	indent_push(ctx);
+	iprintf(fp, I_TOPLEVEL, "system:\n");
 
 	/* /etc/os-release version and distribution name */
 	osrelease = fopen("/etc/os-release", "r");
@@ -1452,7 +1368,11 @@
 				version = strstrip(&osrstr[11], "\"'");
 
 			if (distro && version) {
-				iprintf(ctx, "os: \"%s:%s\"\n", distro, version);
+				iprintf(fp,
+					I_SYSTEM,
+					"os: \"%s:%s\"\n",
+					distro,
+					version);
 				break;
 			}
 		}
@@ -1464,7 +1384,7 @@
 	/* kernel version */
 	if (uname(&u) != -1)
 		kernel = u.release;
-	iprintf(ctx, "kernel: \"%s\"\n", kernel);
+	iprintf(fp, I_SYSTEM, "kernel: \"%s\"\n", kernel);
 
 	/* dmi modalias */
 	dmi = fopen("/sys/class/dmi/id/modalias", "r");
@@ -1476,21 +1396,21 @@
 		}
 		fclose(dmi);
 	}
-	iprintf(ctx, "dmi: \"%s\"\n", dmistr);
-	indent_pop(ctx);
+	iprintf(fp, I_SYSTEM, "dmi: \"%s\"\n", dmistr);
 }
 
-static inline void
-print_header(struct record_context *ctx)
+static void
+print_header(FILE *fp, struct record_context *ctx)
 {
-	iprintf(ctx, "version: %d\n", FILE_VERSION_NUMBER);
-	iprintf(ctx, "ndevices: %d\n", ctx->ndevices);
-	print_libinput_header(ctx);
-	print_system_header(ctx);
+	iprintf(fp, I_TOPLEVEL, "# libinput record\n");
+	iprintf(fp, I_TOPLEVEL, "version: %d\n", FILE_VERSION_NUMBER);
+	iprintf(fp, I_TOPLEVEL, "ndevices: %d\n", ctx->ndevices);
+	print_libinput_header(fp, ctx->timeout);
+	print_system_header(fp);
 }
 
-static inline void
-print_description_abs(struct record_context *ctx,
+static void
+print_description_abs(FILE *fp,
 		      struct libevdev *dev,
 		      unsigned int code)
 {
@@ -1499,26 +1419,26 @@
 	abs = libevdev_get_abs_info(dev, code);
 	assert(abs);
 
-	iprintf(ctx, "#       Value      %6d\n", abs->value);
-	iprintf(ctx, "#       Min        %6d\n", abs->minimum);
-	iprintf(ctx, "#       Max        %6d\n", abs->maximum);
-	iprintf(ctx, "#       Fuzz       %6d\n", abs->fuzz);
-	iprintf(ctx, "#       Flat       %6d\n", abs->flat);
-	iprintf(ctx, "#       Resolution %6d\n", abs->resolution);
+	iprintf(fp, I_EVDEV, "#       Value      %6d\n", abs->value);
+	iprintf(fp, I_EVDEV, "#       Min        %6d\n", abs->minimum);
+	iprintf(fp, I_EVDEV, "#       Max        %6d\n", abs->maximum);
+	iprintf(fp, I_EVDEV, "#       Fuzz       %6d\n", abs->fuzz);
+	iprintf(fp, I_EVDEV, "#       Flat       %6d\n", abs->flat);
+	iprintf(fp, I_EVDEV, "#       Resolution %6d\n", abs->resolution);
 }
 
-static inline void
-print_description_state(struct record_context *ctx,
+static void
+print_description_state(FILE *fp,
 			struct libevdev *dev,
 			unsigned int type,
 			unsigned int code)
 {
 	int state = libevdev_get_event_value(dev, type, code);
-	iprintf(ctx, "#       State %d\n", state);
+	iprintf(fp, I_EVDEV, "#       State %d\n", state);
 }
 
-static inline void
-print_description_codes(struct record_context *ctx,
+static void
+print_description_codes(FILE *fp,
 			struct libevdev *dev,
 			unsigned int type)
 {
@@ -1528,7 +1448,8 @@
 	if (max == -1)
 		return;
 
-	iprintf(ctx,
+	iprintf(fp,
+		I_EVDEV,
 		"# Event type %d (%s)\n",
 		type,
 		libevdev_event_type_get_name(type));
@@ -1540,7 +1461,8 @@
 		if (!libevdev_has_event_code(dev, type, code))
 			continue;
 
-		iprintf(ctx,
+		iprintf(fp,
+			I_EVDEV,
 			"#   Event code %d (%s)\n",
 			code,
 			libevdev_event_code_get_name(type,
@@ -1548,23 +1470,24 @@
 
 		switch (type) {
 		case EV_ABS:
-			print_description_abs(ctx, dev, code);
+			print_description_abs(fp, dev, code);
 			break;
 		case EV_LED:
 		case EV_SW:
-			print_description_state(ctx, dev, type, code);
+			print_description_state(fp, dev, type, code);
 			break;
 		}
 	}
 }
 
-static inline void
-print_description(struct record_context *ctx, struct libevdev *dev)
+static void
+print_description(FILE *fp, struct libevdev *dev)
 {
 	const struct input_absinfo *x, *y;
 
-	iprintf(ctx, "# Name: %s\n", libevdev_get_name(dev));
-	iprintf(ctx,
+	iprintf(fp, I_EVDEV, "# Name: %s\n", libevdev_get_name(dev));
+	iprintf(fp,
+		I_EVDEV,
 		"# ID: bus %#02x vendor %#02x product %#02x version %#02x\n",
 		libevdev_get_id_bustype(dev),
 		libevdev_get_id_vendor(dev),
@@ -1579,27 +1502,29 @@
 
 			w = (x->maximum - x->minimum)/x->resolution;
 			h = (y->maximum - y->minimum)/y->resolution;
-			iprintf(ctx, "# Size in mm: %dx%d\n", w, h);
+			iprintf(fp, I_EVDEV, "# Size in mm: %dx%d\n", w, h);
 		} else {
-			iprintf(ctx,
+			iprintf(fp,
+				I_EVDEV,
 				"# Size in mm: unknown, missing resolution\n");
 		}
 	}
 
-	iprintf(ctx, "# Supported Events:\n");
+	iprintf(fp, I_EVDEV, "# Supported Events:\n");
 
 	for (unsigned int type = 0; type < EV_CNT; type++) {
 		if (!libevdev_has_event_type(dev, type))
 			continue;
 
-		print_description_codes(ctx, dev, type);
+		print_description_codes(fp, dev, type);
 	}
 
-	iprintf(ctx, "# Properties:\n");
+	iprintf(fp, I_EVDEV, "# Properties:\n");
 
 	for (unsigned int prop = 0; prop < INPUT_PROP_CNT; prop++) {
 		if (libevdev_has_property(dev, prop)) {
-			iprintf(ctx,
+			iprintf(fp,
+				I_EVDEV,
 				"#    Property %d (%s)\n",
 				prop,
 				libevdev_property_get_name(prop));
@@ -1607,11 +1532,12 @@
 	}
 }
 
-static inline void
-print_bits_info(struct record_context *ctx, struct libevdev *dev)
+static void
+print_bits_info(FILE *fp, struct libevdev *dev)
 {
-	iprintf(ctx, "name: \"%s\"\n", libevdev_get_name(dev));
-	iprintf(ctx,
+	iprintf(fp, I_EVDEV, "name: \"%s\"\n", libevdev_get_name(dev));
+	iprintf(fp,
+		I_EVDEV,
 		"id: [%d, %d, %d, %d]\n",
 		libevdev_get_id_bustype(dev),
 		libevdev_get_id_vendor(dev),
@@ -1619,23 +1545,22 @@
 		libevdev_get_id_version(dev));
 }
 
-static inline void
-print_bits_absinfo(struct record_context *ctx, struct libevdev *dev)
+static void
+print_bits_absinfo(FILE *fp, struct libevdev *dev)
 {
 	const struct input_absinfo *abs;
 
 	if (!libevdev_has_event_type(dev, EV_ABS))
 		return;
 
-	iprintf(ctx, "absinfo:\n");
-	indent_push(ctx);
-
+	iprintf(fp, I_EVDEV, "absinfo:\n");
 	for (unsigned int code = 0; code < ABS_CNT; code++) {
 		abs = libevdev_get_abs_info(dev, code);
 		if (!abs)
 			continue;
 
-		iprintf(ctx,
+		iprintf(fp,
+			I_EVDEV_DATA,
 			"%d: [%d, %d, %d, %d, %d]\n",
 			code,
 			abs->minimum,
@@ -1644,127 +1569,128 @@
 			abs->flat,
 			abs->resolution);
 	}
-	indent_pop(ctx);
 }
 
-static inline void
-print_bits_codes(struct record_context *ctx,
-		 struct libevdev *dev,
-		 unsigned int type)
+static void
+print_bits_codes(FILE *fp, struct libevdev *dev, unsigned int type)
 {
 	int max;
-	bool first = true;
+	const char *sep = "";
 
 	max = libevdev_event_type_get_max(type);
 	if (max == -1)
 		return;
 
-	iprintf(ctx, "%d: [", type);
+	iprintf(fp, I_EVDEV_DATA, "%d: [", type);
 
 	for (unsigned int code = 0; code <= (unsigned int)max; code++) {
 		if (!libevdev_has_event_code(dev, type, code))
 			continue;
 
-		noiprintf(ctx, "%s%d", first ? "" : ", ", code);
-		first = false;
+		iprintf(fp, I_NONE, "%s%d", sep, code);
+		sep = ", ";
 	}
 
-	noiprintf(ctx, "] # %s\n", libevdev_event_type_get_name(type));
+	iprintf(fp, I_NONE, "] # %s\n", libevdev_event_type_get_name(type));
 }
 
-static inline void
-print_bits_types(struct record_context *ctx, struct libevdev *dev)
+static void
+print_bits_types(FILE *fp, struct libevdev *dev)
 {
-	iprintf(ctx, "codes:\n");
-	indent_push(ctx);
+	iprintf(fp, I_EVDEV, "codes:\n");
 	for (unsigned int type = 0; type < EV_CNT; type++) {
 		if (!libevdev_has_event_type(dev, type))
 			continue;
-		print_bits_codes(ctx, dev, type);
+		print_bits_codes(fp, dev, type);
 	}
-	indent_pop(ctx);
 }
 
-static inline void
-print_bits_props(struct record_context *ctx, struct libevdev *dev)
+static void
+print_bits_props(FILE *fp, struct libevdev *dev)
 {
-	bool first = true;
+	const char *sep = "";
 
-	iprintf(ctx, "properties: [");
+	iprintf(fp, I_EVDEV, "properties: [");
 	for (unsigned int prop = 0; prop < INPUT_PROP_CNT; prop++) {
 		if (libevdev_has_property(dev, prop)) {
-			noiprintf(ctx, "%s%d", first ? "" : ", ", prop);
-			first = false;
+			iprintf(fp, I_NONE, "%s%d", sep, prop);
+			sep = ", ";
 		}
 	}
-	noiprintf(ctx, "]\n"); /* last entry, no comma */
+	iprintf(fp, I_NONE, "]\n"); /* last entry, no comma */
 }
 
-static inline void
-print_evdev_description(struct record_context *ctx, struct record_device *dev)
+static void
+print_evdev_description(struct record_device *dev)
 {
 	struct libevdev *evdev = dev->evdev;
 
-	iprintf(ctx, "evdev:\n");
-	indent_push(ctx);
-
-	print_description(ctx, evdev);
-	print_bits_info(ctx, evdev);
-	print_bits_types(ctx, evdev);
-	print_bits_absinfo(ctx, evdev);
-	print_bits_props(ctx, evdev);
+	iprintf(dev->fp, I_DEVICE, "evdev:\n");
 
-	indent_pop(ctx);
+	print_description(dev->fp, evdev);
+	print_bits_info(dev->fp, evdev);
+	print_bits_types(dev->fp, evdev);
+	print_bits_absinfo(dev->fp, evdev);
+	print_bits_props(dev->fp, evdev);
 }
 
-static inline void
-print_hid_report_descriptor(struct record_context *ctx,
-			    struct record_device *dev)
+static void
+print_hid_report_descriptor(struct record_device *dev)
 {
 	const char *prefix = "/dev/input/event";
-	const char *node;
 	char syspath[PATH_MAX];
 	unsigned char buf[1024];
 	int len;
 	int fd;
-	bool first = true;
+	const char *sep = "";
 
 	/* we take the shortcut rather than the proper udev approach, the
 	   report_descriptor is available in sysfs and two devices up from
-	   our device. 2 digits for the event number should be enough.
+	   our device.
 	   This approach won't work for /dev/input/by-id devices. */
-	if (!strstartswith(dev->devnode, prefix) ||
-	    strlen(dev->devnode) > strlen(prefix) + 2)
+	if (!strstartswith(dev->devnode, prefix))
 		return;
 
-	node = &dev->devnode[strlen(prefix)];
 	len = snprintf(syspath,
 		       sizeof(syspath),
-		       "/sys/class/input/event%s/device/device/report_descriptor",
-		       node);
-	if (len < 55 || len > 56)
+		       "/sys/class/input/%s/device/device/report_descriptor",
+		       safe_basename(dev->devnode));
+	if (len <= 0)
 		return;
 
 	fd = open(syspath, O_RDONLY);
 	if (fd == -1)
 		return;
 
-	iprintf(ctx, "hid: [");
+	iprintf(dev->fp, I_DEVICE, "hid: [");
 
 	while ((len = read(fd, buf, sizeof(buf))) > 0) {
 		for (int i = 0; i < len; i++) {
-			/* YAML requires decimal */
-			noiprintf(ctx, "%s%u",first ? "" : ", ", buf[i]);
-			first = false;
+			/* We can't have a trailing comma, so our line-break
+			 * handling is awkward.
+			 * For a linebreak: print the comma, break, indent,
+			 *    then just the hex code.
+			 * For the other values: print the comma plus the
+			 *    hex code, unindented.
+			 */
+			if (i % 16 == 0) {
+				iprintf(dev->fp, I_NONE, "%s\n", sep);
+				iprintf(dev->fp, I_DEVICE, "  ");
+				iprintf(dev->fp, I_NONE, "0x%02x", buf[i]);
+			} else {
+				iprintf(dev->fp, I_NONE, "%s0x%02x", sep, buf[i]);
+			}
+			sep = ", ";
 		}
 	}
-	noiprintf(ctx, " ]\n");
+	iprintf(dev->fp, I_NONE, "\n");
+	iprintf(dev->fp, I_DEVICE, "]\n");
 
 	close(fd);
 }
 
-static inline void
-print_udev_properties(struct record_context *ctx, struct record_device *dev)
+static void
+print_udev_properties(struct record_device *dev)
 {
 	struct udev *udev = NULL;
 	struct udev_device *udev_device = NULL;
@@ -1782,11 +1708,9 @@
 	if (!udev_device)
 		goto out;
 
-	iprintf(ctx, "udev:\n");
-	indent_push(ctx);
+	iprintf(dev->fp, I_DEVICE, "udev:\n");
 
-	iprintf(ctx, "properties:\n");
-	indent_push(ctx);
+	iprintf(dev->fp, I_UDEV, "properties:\n");
 
 	entry = udev_device_get_properties_list_entry(udev_device);
 	while (entry) {
@@ -1800,14 +1724,12 @@
 		    strneq(key, "MOUSE_DPI", 9) ||
 		    strneq(key, "POINTINGSTICK_", 14)) {
 			value = udev_list_entry_get_value(entry);
-			iprintf(ctx, "- %s=%s\n", key, value);
+			iprintf(dev->fp, I_UDEV_DATA, "- %s=%s\n", key, value);
 		}
 
 		entry = udev_list_entry_get_next(entry);
 	}
 
-	indent_pop(ctx);
-	indent_pop(ctx);
 out:
 	udev_device_unref(udev_device);
 	udev_unref(udev);
@@ -1824,13 +1746,13 @@
 static void
 list_print(void *userdata, const char *val)
 {
-	struct record_context *ctx = userdata;
+	FILE *fp = userdata;
 
-	iprintf(ctx, "- %s\n", val);
+	iprintf(fp, I_QUIRKS, "- %s\n", val);
 }
 
-static inline void
-print_device_quirks(struct record_context *ctx, struct record_device *dev)
+static void
+print_device_quirks(struct record_device *dev)
 {
 	struct udev *udev = NULL;
 	struct udev_device *udev_device = NULL;
@@ -1872,20 +1794,16 @@
 	if (!udev_device)
 		goto out;
 
-	iprintf(ctx, "quirks:\n");
-	indent_push(ctx);
-
-	tools_list_device_quirks(quirks, udev_device, list_print, ctx);
-
-	indent_pop(ctx);
+	iprintf(dev->fp, I_DEVICE, "quirks:\n");
+	tools_list_device_quirks(quirks, udev_device, list_print, dev->fp);
 out:
 	udev_device_unref(udev_device);
 	udev_unref(udev);
 	quirks_context_unref(quirks);
 }
-static inline void
-print_libinput_description(struct record_context *ctx,
-			   struct record_device *dev)
+
+static void
+print_libinput_description(struct record_device *dev)
 {
 	struct libinput_device *device = dev->device;
 	double w, h;
@@ -1902,52 +1820,48 @@
 		{LIBINPUT_DEVICE_CAP_SWITCH, "switch"},
 	};
 	struct cap *cap;
-	bool is_first;
+	const char *sep = "";
 
 	if (!device)
 		return;
 
-	iprintf(ctx, "libinput:\n");
-	indent_push(ctx);
-
+	iprintf(dev->fp, I_DEVICE, "libinput:\n");
 	if (libinput_device_get_size(device, &w, &h) == 0)
-		iprintf(ctx, "size: [%.f, %.f]\n", w, h);
+		iprintf(dev->fp, I_LIBINPUTDEV, "size: [%.f, %.f]\n", w, h);
 
-	iprintf(ctx, "capabilities: [");
-	is_first = true;
+	iprintf(dev->fp, I_LIBINPUTDEV, "capabilities: [");
 	ARRAY_FOR_EACH(caps, cap) {
 		if (!libinput_device_has_capability(device, cap->cap))
 			continue;
-		noiprintf(ctx, "%s%s", is_first ? "" : ", ", cap->name);
-		is_first = false;
+		iprintf(dev->fp, I_NONE, "%s%s", sep, cap->name);
+		sep = ", ";
 	}
-	noiprintf(ctx, "]\n");
+	iprintf(dev->fp, I_NONE, "]\n");
 
 	/* Configuration options should be printed here, but since they
 	 * don't reflect the user-configured ones their usefulness is
 	 * questionable. We need the ability to specify the options like in
 	 * debug-events.
 	 */
-	indent_pop(ctx);
 }
 
-static inline void
-print_device_description(struct record_context *ctx, struct record_device *dev)
+static void
+print_device_description(struct record_device *dev)
 {
-	iprintf(ctx, "- node: %s\n", dev->devnode);
+	iprintf(dev->fp, I_DEVICE, "- node: %s\n", dev->devnode);
 
-	print_evdev_description(ctx, dev);
-	print_hid_report_descriptor(ctx, dev);
-	print_udev_properties(ctx, dev);
-	print_device_quirks(ctx, dev);
-	print_libinput_description(ctx, dev);
+	print_evdev_description(dev);
+	print_hid_report_descriptor(dev);
+	print_udev_properties(dev);
+	print_device_quirks(dev);
+	print_libinput_description(dev);
 }
 
 static int is_event_node(const struct dirent *dir) {
 	return strneq(dir->d_name, "event", 5);
 }
 
-static inline char *
+static char *
 select_device(void)
 {
 	struct dirent **namelist;
@@ -1956,12 +1870,16 @@
 	char *device_path;
 	bool has_eaccess = false;
 	int available_devices = 0;
+	const char *prefix = "";
+
+	if (!isatty(STDERR_FILENO))
+		prefix = "# ";
 
 	ndev = scandir("/dev/input", &namelist, is_event_node, versionsort);
 	if (ndev <= 0)
 		return NULL;
 
-	fprintf(stderr, "Available devices:\n");
+	fprintf(stderr, "%sAvailable devices:\n", prefix);
 	for (int i = 0; i < ndev; i++) {
 		struct libevdev *device;
 		char path[PATH_MAX];
@@ -1983,7 +1901,7 @@
 		if (rc != 0)
 			continue;
 
-		fprintf(stderr, "%s:	%s\n", path, libevdev_get_name(device));
+		fprintf(stderr, "%s%s:	%s\n", prefix, path, libevdev_get_name(device));
 		libevdev_free(device);
 		available_devices++;
 	}
@@ -1993,14 +1911,13 @@
 	free(namelist);
 
 	if (available_devices == 0) {
-		fprintf(stderr, "No devices available. ");
-		if (has_eaccess)
-				fprintf(stderr, "Please re-run as root.");
-		fprintf(stderr, "\n");
+		fprintf(stderr,
+			"No devices available.%s\n",
+			has_eaccess ? " Please re-run as root." : "");
 		return NULL;
 	}
 
-	fprintf(stderr, "Select the device event number: ");
+	fprintf(stderr, "%sSelect the device event number: ", prefix);
 	rc = scanf("%d", &selected_device);
 
 	if (rc != 1 || selected_device < 0)
@@ -2013,12 +1930,11 @@
 	return device_path;
 }
 
-static inline char **
+static char **
 all_devices(void)
 {
 	struct dirent **namelist;
 	int ndev;
-	int rc;
 	char **devices = NULL;
 
 	ndev = scandir("/dev/input", &namelist, is_event_node, versionsort);
@@ -2029,9 +1945,9 @@
 	for (int i = 0; i < ndev; i++) {
 		char *device_path;
 
-		rc = xasprintf(&device_path,
-			       "/dev/input/%s",
-			       namelist[i]->d_name);
+		int rc = xasprintf(&device_path,
+				   "/dev/input/%s",
+				   namelist[i]->d_name);
 		if (rc == -1)
 			goto error;
 
@@ -2041,6 +1957,9 @@
 	return devices;
 
 error:
+	for (int i = 0; i < ndev; i++)
+		free(namelist[i]);
+	free(namelist);
 	if (devices)
 		strv_free(devices);
 	return NULL;
@@ -2070,31 +1989,38 @@
 		snprintf(name, sizeof(name), "%s", file);
 	}
 
-	return strdup(name);
+	return safe_strdup(name);
 }
 
 static bool
-open_output_file(struct record_context *ctx, bool is_prefix)
+open_output_files(struct record_context *ctx, bool is_prefix)
 {
-	int out_fd;
+	FILE *out_file;
+	struct record_device *d;
 
-	if (ctx->outfile) {
-		char *fname = init_output_file(ctx->outfile, is_prefix);
-		ctx->output_file = fname;
-		out_fd = open(fname, O_WRONLY|O_CREAT|O_TRUNC, 0666);
-		if (out_fd < 0)
+	if (ctx->output_file.name) {
+		char *fname = init_output_file(ctx->output_file.name, is_prefix);
+		ctx->output_file.name_with_suffix = fname;
+		out_file = fopen(fname, "w");
+		if (!out_file)
 			return false;
 	} else {
-		ctx->output_file = safe_strdup("stdout");
-		out_fd = STDOUT_FILENO;
+		ctx->output_file.name_with_suffix = safe_strdup("stdout");
+		out_file = stdout;
 	}
 
-	ctx->out_fd = out_fd;
+	ctx->first_device->fp = out_file;
+
+	list_for_each(d, &ctx->devices, link) {
+		if (d->fp)
+			continue;
+		d->fp = tmpfile();
+	}
 
 	return true;
 }
 
-static inline void
+static void
 print_progress_bar(void)
 {
 	static uint8_t foo = 0;
@@ -2107,199 +2033,350 @@
 	fprintf(stderr, "\rReceiving events: [%*s%*s]", foo, "*", 21 - foo, " ");
 }
 
+static void
+print_wall_time(struct record_context *ctx)
+{
+	time_t t = time(NULL);
+	struct tm tm;
+	struct record_device *d;
+
+	localtime_r(&t, &tm);
+
+	list_for_each(d, &ctx->devices, link) {
+		iprintf(d->fp,
+			I_DEVICE,
+			"# Current time is %02d:%02d:%02d\n",
+			tm.tm_hour, tm.tm_min, tm.tm_sec);
+		fflush(d->fp);
+	}
+}
+
+static void
+arm_timer(int timerfd)
+{
+	time_t t = time(NULL);
+	struct tm tm;
+	struct itimerspec interval = {
+		.it_value = { 0, 0 },
+		.it_interval = { 5, 0 },
+	};
+
+	localtime_r(&t, &tm);
+	interval.it_value.tv_sec = 5 - (tm.tm_sec % 5);
+	timerfd_settime(timerfd, 0, &interval, NULL);
+}
+
+static struct source *
+add_source(struct record_context *ctx,
+	   int fd,
+	   source_dispatch_t dispatch,
+	   void *user_data)
+{
+	struct source *source;
+	struct epoll_event ep;
+
+	assert(fd != -1);
+
+	source = zalloc(sizeof *source);
+	source->dispatch = dispatch;
+	source->user_data = user_data;
+	source->fd = fd;
+	list_append(&ctx->sources, &source->link);
+
+	memset(&ep, 0, sizeof ep);
+	ep.events = EPOLLIN;
+	ep.data.ptr = source;
+
+	if (epoll_ctl(ctx->epoll_fd, EPOLL_CTL_ADD, fd, &ep) < 0) {
+		free(source);
+		return NULL;
+	}
+
+	return source;
+}
+
+static void
+destroy_source(struct record_context *ctx, struct source *source)
+{
+	list_remove(&source->link);
+	epoll_ctl(ctx->epoll_fd, EPOLL_CTL_DEL, source->fd, NULL);
+	close(source->fd);
+	free(source);
+}
+
+static void
+signalfd_dispatch(struct record_context *ctx, int fd, void *data)
+{
+	struct signalfd_siginfo fdsi;
+
+	(void)read(fd, &fdsi, sizeof(fdsi));
+
+	ctx->stop = true;
+}
+
+static void
+timefd_dispatch(struct record_context *ctx, int fd, void *data)
+{
+	char discard[64];
+
+	(void)read(fd, discard, sizeof(discard));
+
+	if (ctx->timestamps.had_events_since_last_time) {
+		print_wall_time(ctx);
+		ctx->timestamps.had_events_since_last_time = false;
+		ctx->timestamps.skipped_timer_print = false;
+	} else {
+		ctx->timestamps.skipped_timer_print = true;
+	}
+}
+
+static void
+evdev_dispatch(struct record_context *ctx, int fd, void *data)
+{
+	struct record_device *this_device = data;
+
+	if (ctx->timestamps.skipped_timer_print) {
+		print_wall_time(ctx);
+		ctx->timestamps.skipped_timer_print = false;
+	}
+
+	ctx->had_events = true;
+	ctx->timestamps.had_events_since_last_time = true;
+
+	handle_events(ctx, this_device);
+}
+
+static void
+libinput_ctx_dispatch(struct record_context *ctx, int fd, void *data)
+{
+	/* This function should only handle events caused by internal
+	 * timeouts etc. The real input events caused by the evdev devices
+	 * are already processed in handle_events */
+	libinput_dispatch(ctx->libinput);
+	handle_libinput_events(ctx, ctx->first_device, true);
+}
+
+static void
+hidraw_dispatch(struct record_context *ctx, int fd, void *data)
+{
+	struct hidraw *hidraw = data;
+
+	ctx->had_events = true;
+	ctx->timestamps.had_events_since_last_time = true;
+	handle_hidraw(hidraw);
+}
+
+static int
+dispatch_sources(struct record_context *ctx)
+{
+	struct source *source;
+	struct epoll_event ep[64];
+	int i, count;
+
+	count = epoll_wait(ctx->epoll_fd, ep, ARRAY_LENGTH(ep), ctx->timeout);
+	if (count < 0)
+		return -errno;
+
+	for (i = 0; i < count; ++i) {
+		source = ep[i].data.ptr;
+		if (source->fd == -1)
+			continue;
+		source->dispatch(ctx, source->fd, source->user_data);
+	}
+
+	return count;
+}
+
 static int
 mainloop(struct record_context *ctx)
 {
 	bool autorestart = (ctx->timeout > 0);
-	struct pollfd fds[ctx->ndevices + 2];
-	unsigned int nfds = 0;
+	struct source *source;
 	struct record_device *d = NULL;
-	struct record_device *first_device = NULL;
-	struct timespec ts;
 	sigset_t mask;
+	int sigfd, timerfd;
 
 	assert(ctx->timeout != 0);
 	assert(!list_empty(&ctx->devices));
 
+	ctx->epoll_fd = epoll_create1(0);
+	assert(ctx->epoll_fd >= 0);
+
 	sigemptyset(&mask);
 	sigaddset(&mask, SIGINT);
 	sigaddset(&mask, SIGQUIT);
 	sigprocmask(SIG_BLOCK, &mask, NULL);
 
-	fds[0].fd = signalfd(-1, &mask, SFD_NONBLOCK);
-	fds[0].events = POLLIN;
-	fds[0].revents = 0;
-	assert(fds[0].fd != -1);
-	nfds++;
+	sigfd = signalfd(-1, &mask, SFD_NONBLOCK);
+	add_source(ctx, sigfd, signalfd_dispatch, NULL);
 
-	if (ctx->libinput) {
-		fds[1].fd = libinput_get_fd(ctx->libinput);
-		fds[1].events = POLLIN;
-		fds[1].revents = 0;
-		nfds++;
-		assert(nfds == 2);
-	}
+	timerfd = timerfd_create(CLOCK_MONOTONIC, TFD_CLOEXEC|TFD_NONBLOCK);
+	add_source(ctx, timerfd, timefd_dispatch, NULL);
+	arm_timer(timerfd);
 
 	list_for_each(d, &ctx->devices, link) {
-		fds[nfds].fd = libevdev_get_fd(d->evdev);
-		fds[nfds].events = POLLIN;
-		fds[nfds].revents = 0;
-		assert(fds[nfds].fd != -1);
-		nfds++;
+		struct hidraw *hidraw;
+
+		add_source(ctx, libevdev_get_fd(d->evdev), evdev_dispatch, d);
+
+		list_for_each(hidraw, &d->hidraw_devices, link) {
+			add_source(ctx, hidraw->fd, hidraw_dispatch, hidraw);
+		}
+	}
+
+	if (ctx->libinput) {
+		/* See the note in the dispatch function */
+		add_source(ctx,
+			   libinput_get_fd(ctx->libinput),
+			   libinput_ctx_dispatch,
+			   NULL);
 	}
 
 	/* If we have more than one device, the time starts at recording
 	 * start time. Otherwise, the first event starts the recording time.
 	 */
 	if (ctx->ndevices > 1) {
+		struct timespec ts;
+
 		clock_gettime(CLOCK_MONOTONIC, &ts);
 		ctx->offset = s2us(ts.tv_sec) + ns2us(ts.tv_nsec);
 	}
 
 	do {
-		int rc;
-		bool had_events = false; /* we delete files without events */
+		struct record_device *d;
 
-		if (!open_output_file(ctx, autorestart)) {
+		if (!open_output_files(ctx, autorestart)) {
 			fprintf(stderr,
 				"Failed to open '%s'\n",
-				ctx->output_file);
+				ctx->output_file.name_with_suffix);
 			break;
 		}
-		fprintf(stderr, "Recording to '%s'.\n", ctx->output_file);
+		fprintf(stderr, "%sRecording to '%s'.\n",
+			isatty(STDERR_FILENO) ? "" : "# ",
+			ctx->output_file.name_with_suffix);
 
-		print_header(ctx);
+		ctx->had_events = false;
+
+		print_header(ctx->first_device->fp, ctx);
 		if (autorestart)
-			iprintf(ctx,
+			iprintf(ctx->first_device->fp,
+				I_NONE,
 				"# Autorestart timeout: %d\n",
 				ctx->timeout);
 
-		iprintf(ctx, "devices:\n");
-		indent_push(ctx);
+		iprintf(ctx->first_device->fp, I_TOPLEVEL, "devices:\n");
 
 		/* we only print the first device's description, the
 		 * rest is assembled after CTRL+C */
-		first_device = list_first_entry(&ctx->devices,
-						first_device,
-						link);
-		print_device_description(ctx, first_device);
-
-		iprintf(ctx, "events:\n");
-		indent_push(ctx);
+		list_for_each(d, &ctx->devices, link) {
+			print_device_description(d);
+			iprintf(d->fp, I_DEVICE, "events:\n");
+		}
+		print_wall_time(ctx);
 
 		if (ctx->libinput) {
-			size_t count;
 			libinput_dispatch(ctx->libinput);
-			count = handle_libinput_events(ctx, first_device);
-			print_cached_events(ctx, first_device, 0, count);
+			handle_libinput_events(ctx, ctx->first_device, true);
 		}
 
 		while (true) {
-			rc = poll(fds, nfds, ctx->timeout);
-			if (rc == -1) { /* error */
-				fprintf(stderr, "Error: %m\n");
-				autorestart = false;
+			int rc = dispatch_sources(ctx);
+			if (rc < 0) { /* error */
+				fprintf(stderr, "Error: %s\n", strerror(-rc));
+				ctx->stop = true;
+				break;
+			}
+
+			/* set by the signalfd handler */
+			if (ctx->stop)
 				break;
-			} else if (rc == 0) {
+
+			if (rc == 0) {
 				fprintf(stderr,
 					" ... timeout%s\n",
-					had_events ? "" : " (file is empty)");
+					ctx->had_events ? "" : " (file is empty)");
 				break;
-			} else if (fds[0].revents != 0) { /* signal */
-				autorestart = false;
-				break;
-			}
 
-			/* Pull off the evdev events first since they cause
-			 * libinput events.
-			 * handle_events de-queues libinput events so by the
-			 * time we finish that, we hopefully have all evdev
-			 * events and libinput events roughly in sync.
-			 */
-			had_events = true;
-			list_for_each(d, &ctx->devices, link)
-				handle_events(ctx, d, d == first_device);
-
-			/* This shouldn't pull any events off unless caused
-			 * by libinput-internal timeouts (e.g. tapping) */
-			if (ctx->libinput && fds[1].revents) {
-				size_t count, offset;
-
-				libinput_dispatch(ctx->libinput);
-				offset = first_device->nevents;
-				count = handle_libinput_events(ctx,
-							       first_device);
-				if (count) {
-					print_cached_events(ctx,
-							    first_device,
-							    offset,
-							    count);
-				}
-				rc--;
 			}
 
-			if (ctx->out_fd != STDOUT_FILENO)
+			if (ctx->first_device->fp != stdout)
 				print_progress_bar();
 
 		}
-		indent_pop(ctx); /* events: */
 
 		if (autorestart) {
-			noiprintf(ctx,
-				  "# Closing after %ds inactivity",
-				  ctx->timeout/1000);
+			list_for_each(d, &ctx->devices, link) {
+				iprintf(d->fp,
+					I_NONE,
+					"# Closing after %ds inactivity",
+					ctx->timeout/1000);
+			}
 		}
 
 		/* First device is printed, now append all the data from the
 		 * other devices, if any */
 		list_for_each(d, &ctx->devices, link) {
-			if (d == list_first_entry(&ctx->devices, d, link))
+			char buf[4096];
+			size_t n;
+
+			if (d == ctx->first_device)
 				continue;
 
-			print_device_description(ctx, d);
-			iprintf(ctx, "events:\n");
-			indent_push(ctx);
-			print_cached_events(ctx, d, 0, -1);
-			indent_pop(ctx);
-		}
+			rewind(d->fp);
+			do {
 
-		indent_pop(ctx); /* devices: */
-		assert(ctx->indent == 0);
+				n = fread(buf, 1, sizeof(buf), d->fp);
+				if (n > 0)
+					fwrite(buf, 1, n, ctx->first_device->fp);
+			} while (n == sizeof(buf));
 
-		fsync(ctx->out_fd);
+			fclose(d->fp);
+			d->fp = NULL;
+		}
 
 		/* If we didn't have events, delete the file. */
-		if (!isatty(ctx->out_fd)) {
-			if (!had_events && ctx->output_file) {
-				fprintf(stderr, "No events recorded, deleting '%s'\n", ctx->output_file);
-				unlink(ctx->output_file);
+		if (!isatty(fileno(ctx->first_device->fp))) {
+			struct record_device *d;
+
+			if (!ctx->had_events && ctx->output_file.name_with_suffix) {
+				fprintf(stderr,
+					"No events recorded, deleting '%s'\n",
+					ctx->output_file.name_with_suffix);
+				unlink(ctx->output_file.name_with_suffix);
 			}
 
-			close(ctx->out_fd);
-			ctx->out_fd = -1;
+			list_for_each(d, &ctx->devices, link) {
+				if (d->fp && d->fp != stdout) {
+					fclose(d->fp);
+					d->fp = NULL;
+				}
+			}
 		}
-		free(ctx->output_file);
-		ctx->output_file = NULL;
-	} while (autorestart);
-
-	close(fds[0].fd);
+		free(ctx->output_file.name_with_suffix);
+		ctx->output_file.name_with_suffix = NULL;
+	} while (autorestart && !ctx->stop);
 
 	sigprocmask(SIG_UNBLOCK, &mask, NULL);
 
+	list_for_each_safe(source, &ctx->sources, link) {
+		destroy_source(ctx, source);
+	}
+	close(ctx->epoll_fd);
+
 	return 0;
 }
 
-static inline bool
-init_device(struct record_context *ctx, char *path)
+static bool
+init_device(struct record_context *ctx, const char *path, bool grab)
 {
 	struct record_device *d;
 	int fd, rc;
 
 	d = zalloc(sizeof(*d));
-	d->devnode = path;
-	d->nevents = 0;
-	d->events_sz = 5000;
-	d->events = zalloc(d->events_sz * sizeof(*d->events));
+	d->ctx = ctx;
+	d->devnode = safe_strdup(path);
+
+	list_init(&d->hidraw_devices);
 
 	fd = open(d->devnode, O_RDONLY|O_NONBLOCK);
 	if (fd < 0) {
@@ -2320,12 +2397,25 @@
 		goto error;
 	}
 
+	if (grab) {
+		rc = libevdev_grab(d->evdev, LIBEVDEV_GRAB);
+		if (rc != 0) {
+			fprintf(stderr,
+				"Grab failed on %s: %s\n",
+				path,
+				strerror(-rc));
+			goto error;
+		}
+	}
+
 	libevdev_set_clock_id(d->evdev, CLOCK_MONOTONIC);
 
 	if (libevdev_get_num_slots(d->evdev) > 0)
 		d->touch.is_touch_device = true;
 
-	list_insert(&ctx->devices, &d->link);
+	list_append(&ctx->devices, &d->link);
+	if (!ctx->first_device)
+		ctx->first_device = d;
 	ctx->ndevices++;
 
 	return true;
@@ -2352,7 +2442,7 @@
 	.close_restricted = close_restricted,
 };
 
-static inline bool
+static bool
 init_libinput(struct record_context *ctx)
 {
 	struct record_device *dev;
@@ -2386,7 +2476,53 @@
 	return true;
 }
 
-static inline void
+static bool
+init_hidraw(struct record_context *ctx)
+{
+	struct record_device *dev;
+
+	list_for_each(dev, &ctx->devices, link) {
+		char syspath[PATH_MAX];
+		DIR *dir;
+		struct dirent *entry;
+
+		snprintf(syspath,
+			 sizeof(syspath),
+			 "/sys/class/input/%s/device/device/hidraw",
+			 safe_basename(dev->devnode));
+		dir = opendir(syspath);
+		if (!dir)
+			continue;
+
+		while ((entry = readdir(dir))) {
+			char hidraw_node[PATH_MAX];
+			int fd;
+			struct hidraw *hidraw = NULL;
+
+			if (!strstartswith(entry->d_name, "hidraw"))
+				continue;
+
+			snprintf(hidraw_node,
+				 sizeof(hidraw_node),
+				 "/dev/%s",
+				 entry->d_name);
+			fd = open(hidraw_node, O_RDONLY|O_NONBLOCK);
+			if (fd == -1)
+				continue;
+
+			hidraw = zalloc(sizeof(*hidraw));
+			hidraw->fd = fd;
+			hidraw->name = safe_strdup(entry->d_name);
+			hidraw->device = dev;
+			list_insert(&dev->hidraw_devices, &hidraw->link);
+		}
+		closedir(dir);
+	}
+
+	return true;
+}
+
+static void
 usage(void)
 {
 	printf("Usage: %s [--help] [--all] [--autorestart] [--output-file filename] [/dev/input/event0] [...]\n"
@@ -2417,7 +2553,8 @@
 	F_NOEXIST,
 };
 
-static inline enum ftype is_char_dev(const char *path)
+static enum ftype
+is_char_dev(const char *path)
 {
 	struct stat st;
 
@@ -2433,6 +2570,67 @@
 	return S_ISCHR(st.st_mode) ? F_DEVICE : F_FILE;
 }
 
+enum fposition {
+	ERROR,
+	NOFILE,
+	FIRST,
+	LAST,
+};
+
+static enum fposition
+find_output_file(int argc, char *argv[], const char **output_file)
+{
+	char *first, *last;
+	enum ftype ftype_first, ftype_last;
+
+	first = argv[0];
+
+	ftype_first = is_char_dev(first);
+	if (argc == 1) {
+		/* arg is *not* a char device, so let's assume it's
+		 * the output file */
+		if (ftype_first != F_DEVICE) {
+			*output_file = first;
+			return FIRST;
+		}
+	}
+
+	/* multiple arguments, yay */
+	last = argv[argc - 1];
+	ftype_last = is_char_dev(last);
+	/*
+	   first is device, last is file -> last
+	   first is device, last is device -> noop
+	   first is device, last !exist -> last
+	   first is file, last is device -> first
+	   first is file, last is file -> error
+	   first is file, last !exist -> error
+	   first !exist, last is device -> first
+	   first !exist, last is file -> error
+	   first !exit, last !exist -> error
+	 */
+#define _m(f, l) (((f) << 8) | (l))
+	switch (_m(ftype_first, ftype_last)) {
+	case _m(F_FILE,    F_DEVICE):
+	case _m(F_FILE,    F_NOEXIST):
+	case _m(F_NOEXIST, F_DEVICE):
+		*output_file = first;
+		return FIRST;
+	case _m(F_DEVICE,  F_FILE):
+	case _m(F_DEVICE,  F_NOEXIST):
+		*output_file = last;
+		return LAST;
+	case _m(F_DEVICE,  F_DEVICE):
+		break;
+	case _m(F_FILE,    F_FILE):
+	case _m(F_NOEXIST, F_FILE):
+	case _m(F_NOEXIST, F_NOEXIST):
+		return ERROR;
+	}
+#undef _m
+	return NOFILE;
+}
+
 enum options {
 	OPT_AUTORESTART,
 	OPT_HELP,
@@ -2441,6 +2639,8 @@
 	OPT_MULTIPLE,
 	OPT_ALL,
 	OPT_LIBINPUT,
+	OPT_HIDRAW,
+	OPT_GRAB,
 };
 
 int
@@ -2458,15 +2658,22 @@
 		{ "all", no_argument, 0, OPT_ALL },
 		{ "help", no_argument, 0, OPT_HELP },
 		{ "with-libinput", no_argument, 0, OPT_LIBINPUT },
+		{ "with-hidraw", no_argument, 0, OPT_HIDRAW },
+		{ "grab", no_argument, 0, OPT_GRAB },
 		{ 0, 0, 0, 0 },
 	};
-	struct record_device *d, *tmp;
+	struct record_device *d;
 	const char *output_arg = NULL;
-	bool all = false, with_libinput = false;
+	bool all = false,
+	     with_libinput = false,
+	     with_hidraw = false,
+	     grab = false;
 	int ndevices;
 	int rc = EXIT_FAILURE;
+	char **paths = NULL;
 
 	list_init(&ctx.devices);
+	list_init(&ctx.sources);
 
 	while (1) {
 		int c;
@@ -2506,6 +2713,13 @@
 		case OPT_LIBINPUT:
 			with_libinput = true;
 			break;
+		case OPT_HIDRAW:
+			with_hidraw = true;
+			fprintf(stderr, "# WARNING: do not type passwords while recording HID reports\n");
+			break;
+		case OPT_GRAB:
+			grab = true;
+			break;
 		default:
 			usage();
 			rc = EXIT_INVALID_USAGE;
@@ -2522,62 +2736,21 @@
 	 * because this will only backfire anyway.
 	 */
 	if (ndevices >= 1 && output_arg == NULL) {
-		char *first, *last;
-		enum ftype ftype_first;
-
-		first = argv[optind];
-		last = argv[argc - 1];
-
-		ftype_first = is_char_dev(first);
-		if (ndevices == 1) {
-			/* arg is *not* a char device, so let's assume it's
-			 * the output file */
-			if (ftype_first != F_DEVICE) {
-				output_arg = first;
-				optind++;
-				ndevices--;
-			}
-		/* multiple arguments, yay */
-		} else {
-			enum ftype ftype_last = is_char_dev(last);
-			/*
-			   first is device, last is file -> last
-			   first is device, last is device -> noop
-			   first is device, last !exist -> last
-			   first is file, last is device -> first
-			   first is file, last is file -> error
-			   first is file, last !exist -> error
-			   first !exist, last is device -> first
-			   first !exist, last is file -> error
-			   first !exit, last !exist -> error
-			 */
-#define _m(f, l) (((f) << 8) | (l))
-			switch (_m(ftype_first, ftype_last)) {
-			case _m(F_FILE,    F_DEVICE):
-			case _m(F_FILE,    F_NOEXIST):
-			case _m(F_NOEXIST, F_DEVICE):
-				output_arg = first;
-				optind++;
-				ndevices--;
-				break;
-			case _m(F_DEVICE,  F_FILE):
-			case _m(F_DEVICE,  F_NOEXIST):
-				output_arg = last;
-				ndevices--;
-				break;
-			case _m(F_DEVICE,  F_DEVICE):
-				break;
-			case _m(F_FILE,    F_FILE):
-			case _m(F_NOEXIST, F_FILE):
-			case _m(F_NOEXIST, F_NOEXIST):
-				fprintf(stderr, "Ambiguous device vs output file list. Please use --output-file.\n");
-				rc = EXIT_INVALID_USAGE;
-				goto out;
-			}
-#undef _m
+		enum fposition pos = find_output_file(argc - optind,
+						      &argv[optind],
+						      &output_arg);
+		if (pos == ERROR) {
+			fprintf(stderr,
+				"Ambiguous device vs output file list. "
+				"Please use --output-file.\n");
+			return EXIT_INVALID_USAGE;
 		}
-	}
 
+		if (pos == FIRST || pos == LAST)
+			ndevices--;
+		if (pos == FIRST)
+			optind++;
+	}
 
 	if (ctx.timeout > 0 && output_arg == NULL) {
 		fprintf(stderr,
@@ -2586,66 +2759,57 @@
 		goto out;
 	}
 
-	ctx.outfile = safe_strdup(output_arg);
-
-	if (all) {
-		char **devices; /* NULL-terminated */
-		char **d;
-
-		if (output_arg == NULL) {
-			fprintf(stderr,
-				"Option --all requires an output file\n");
-			rc = EXIT_INVALID_USAGE;
-			goto out;
-		}
-
-		devices = all_devices();
-		d = devices;
-
-		while (*d) {
-			if (!init_device(&ctx, safe_strdup(*d))) {
-				strv_free(devices);
-				goto out;
-			}
-			d++;
-		}
-
-		strv_free(devices);
-	} else if (ndevices > 1) {
-		if (ndevices > 1 && output_arg == NULL) {
-			fprintf(stderr,
-				"Recording multiple devices requires an output file\n");
-			rc = EXIT_INVALID_USAGE;
-			goto out;
-		}
+	ctx.output_file.name = safe_strdup(output_arg);
 
-		for (int i = ndevices; i > 0; i -= 1) {
-			char *devnode = safe_strdup(argv[optind + i - 1]);
+	if (output_arg == NULL && (all || ndevices > 1)) {
+		fprintf(stderr,
+			"Recording multiple devices requires an output file\n");
+		rc = EXIT_INVALID_USAGE;
+		goto out;
+	}
 
-			if (!init_device(&ctx, devnode))
-				goto out;
-		}
+	/* Now collect all device paths and init our device struct */
+	if (all) {
+		paths = all_devices();
+	} else if (ndevices >= 1) {
+		paths = strv_from_argv(ndevices, &argv[optind]);
 	} else {
-		char *path;
-
-		path = ndevices <= 0 ? select_device() : safe_strdup(argv[optind++]);
+		char *path = select_device();
 		if (path == NULL) {
 			goto out;
 		}
 
-		if (!init_device(&ctx, path))
+		paths = strv_from_argv(1, &path);
+		free(path);
+	}
+
+	for (char **p = paths; *p; p++) {
+		if (!init_device(&ctx, *p, grab)) {
 			goto out;
+		}
 	}
 
 	if (with_libinput && !init_libinput(&ctx))
 		goto out;
 
+	if (with_hidraw && !init_hidraw(&ctx))
+		goto out;
+
 	rc = mainloop(&ctx);
 out:
-	list_for_each_safe(d, tmp, &ctx.devices, link) {
+	strv_free(paths);
+	list_for_each_safe(d, &ctx.devices, link) {
+		struct hidraw *hidraw;
+
+		list_for_each_safe(hidraw, &d->hidraw_devices, link) {
+			close(hidraw->fd);
+			list_remove(&hidraw->link);
+			free(hidraw->name);
+			free(hidraw);
+		}
+
 		if (d->device)
 			libinput_device_unref(d->device);
-		free(d->events);
 		free(d->devnode);
 		libevdev_free(d->evdev);
 	}
diff -Naur third_party_libinput_bak/tools/libinput-record.man third_party_libinput_new/tools/libinput-record.man
--- third_party_libinput_bak/tools/libinput-record.man	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-record.man	2023-03-30 11:21:14.794021500 +0800
@@ -54,10 +54,14 @@
 .PD 1
 Specifies the output file to use. If \fB\-\-autorestart\fR is given,
 the filename is used as prefix only.
-Where \-\-output-file is not given and the first \fBor\fR last argument is 
+Where \-\-output-file is not given and the first \fBor\fR last argument is
 not an input device, the first \fBor\fR last argument will be the output
 file.
 .TP 8
+.B \-\-grab
+Exclusively grab all opened devices. This will prevent events from being
+delivered to the host system.
+.TP 8
 .B \-\-show\-keycodes
 Show keycodes as-is in the recording. By default, common keys are obfuscated
 and printed as \fBKEY_A\fR to avoid information leaks.
@@ -68,6 +72,13 @@
 See section
 .B RECORDING LIBINPUT EVENTS
 for more details.
+.TP 8
+.B \-\-with-hidraw
+Record hidraw events alongside device events.
+.B DO NOT TYPE SENSITIVE DATA.
+See
+.B RECORDING HID REPORTS
+for more details.
 
 .SH RECORDING MULTIPLE DEVICES
 Sometimes it is necessary to record the events from multiple devices
@@ -86,9 +97,9 @@
 immediately, all other devices and their events are printed on exit.
 
 .SH RECORDING LIBINPUT EVENTS
-When the \fB\-\-with-libinput\fR switch is provided, \fBlibinput\-record\fR
-initializes a libinput context for the devices being recorded. Events from
-these contexts are printed alongside the evdev events.
+When the \fB\-\-with-libinput\fR commandline option is given,
+\fBlibinput\-record\fR initializes a libinput context for the devices being
+recorded. Events from these contexts are printed alongside the evdev events.
 .B THIS FEATURE IS EXPERIMENTAL.
 .PP
 The primary purpose of this feature is debugging and event analysis, no
@@ -104,6 +115,15 @@
 affect the running desktop session and does not (can not!) copy any
 configuration options from that session.
 
+.SH RECORDING HID REPORTS
+When the \fB\-\-with-hidraw\fR commandline option is given,
+\fBlibinput\-record\fR searches for the hidraw node(s) of the given devices
+and prints any incoming HID reports from those devices.
+.PP
+HID reports are \fBnot obfuscated\fR and a sufficiently
+motivated person could recover the key strokes from the logs. Do not type
+passwords while recording HID reports.
+
 .SH FILE FORMAT
 The output file format is in YAML and intended to be both human-readable and
 machine-parseable. Below is a short example YAML file, all keys are detailed
@@ -163,6 +183,9 @@
       - ModelAppleTouchpad=1
       - AttrSizeHint=32x32
     events:
+      - hid:
+         time: [ 0, 0]
+	 hidraw0: [1, 2, 3, 4]
       - evdev:
         - [  0,      0,   3,  57,  1420] # EV_ABS / ABS_MT_TRACKING_ID   1420
         - [  0,      0,   3,  53,  1218] # EV_ABS / ABS_MT_POSITION_X    1218
@@ -281,12 +304,20 @@
 Information about the events. The content is a list of dictionaries, with
 the string identifying the type of event sequence.
 .TP 8
-.B { evdev: [ {"data": [sec, usec, type, code, value]}, ...] }
-Each \fBinput_event\fR dictionary contains the contents of a \fBstruct
+.B { evdev: [ [sec, usec, type, code, value], ...] }
+Each \fBevdev\fR dictionary contains the contents of a \fBstruct
 input_event\fR in decimal format. The last item in the list is always the
 \fBSYN_REPORT\fR of this event frame. The next event frame starts a new
 \fBevdev\fR dictionary entry in the parent \fBevents\fR list.
-
+.TP 8
+.B { hid: "hidrawX": [ 12, 34, 56 ], ...] }
+The \fBhid\fR dictionary contains the hid reports in decimal format, with
+the hidraw node as key. The special key \fBtime\fR denotes the current time
+when the report was read from the kernel.
+.PP
+Note that the kernel does not provide timestamps for hidraw events and the
+timestamps provided are from \fBclock_gettime(3)\fR. They may be greater
+than a subsequent evdev event's timestamp.
 .SH NOTES
 .PP
 This tool records events from the kernel and is independent of libinput. In
diff -Naur third_party_libinput_bak/tools/libinput-replay.man third_party_libinput_new/tools/libinput-replay.man
--- third_party_libinput_bak/tools/libinput-replay.man	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/libinput-replay.man	2023-03-30 11:25:10.456572500 +0800
@@ -21,6 +21,9 @@
 independent of libinput. In other words, updating or otherwise changing
 libinput will not alter the output from this tool. libinput itself does not
 need to be in use to replay events.
+.PP
+This tool does not replay kernel-emulated key repeat events (events of type
+\fIEV_KEY\fR with a value of 2).
 .SH LIBINPUT
 .PP
 Part of the
diff -Naur third_party_libinput_bak/tools/libinput-replay.py third_party_libinput_new/tools/libinput-replay.py
--- third_party_libinput_bak/tools/libinput-replay.py	1970-01-01 08:00:00.000000000 +0800
+++ third_party_libinput_new/tools/libinput-replay.py	2023-03-30 11:25:27.485629800 +0800
@@ -0,0 +1,389 @@
+#!/usr/bin/env python3
+# vim: set expandtab shiftwidth=4:
+# -*- Mode: python; coding: utf-8; indent-tabs-mode: nil -*- */
+#
+# Copyright © 2018 Red Hat, Inc.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice (including the next
+# paragraph) shall be included in all copies or substantial portions of the
+# Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+
+import os
+import sys
+import time
+import math
+import multiprocessing
+import argparse
+from pathlib import Path
+
+try:
+    import libevdev
+    import yaml
+    import pyudev
+except ModuleNotFoundError as e:
+    print("Error: {}".format(e), file=sys.stderr)
+    print(
+        "One or more python modules are missing. Please install those "
+        "modules and re-run this tool."
+    )
+    sys.exit(1)
+
+
+SUPPORTED_FILE_VERSION = 1
+
+
+def error(msg, **kwargs):
+    print(msg, **kwargs, file=sys.stderr)
+
+
+class YamlException(Exception):
+    pass
+
+
+def fetch(yaml, key):
+    """Helper function to avoid confusing a YAML error with a
+    normal KeyError bug"""
+    try:
+        return yaml[key]
+    except KeyError:
+        raise YamlException("Failed to get '{}' from recording.".format(key))
+
+
+def check_udev_properties(yaml_data, uinput):
+    """
+    Compare the properties our new uinput device has with the ones from the
+    recording and ring the alarm bell if one of them is off.
+    """
+    yaml_udev_section = fetch(yaml_data, "udev")
+    yaml_udev_props = fetch(yaml_udev_section, "properties")
+    yaml_props = {
+        k: v for (k, v) in [prop.split("=", maxsplit=1) for prop in yaml_udev_props]
+    }
+    try:
+        # We don't assign this one to virtual devices
+        del yaml_props["LIBINPUT_DEVICE_GROUP"]
+    except KeyError:
+        pass
+
+    # give udev some time to catch up
+    time.sleep(0.2)
+    context = pyudev.Context()
+    udev_device = pyudev.Devices.from_device_file(context, uinput.devnode)
+    for name, value in udev_device.properties.items():
+        if name in yaml_props:
+            if yaml_props[name] != value:
+                error(
+                    f"Warning: udev property mismatch: recording has {name}={yaml_props[name]}, device has {name}={value}"
+                )
+            del yaml_props[name]
+        else:
+            # The list of properties we add to the recording, see libinput-record.c
+            prefixes = (
+                "ID_INPUT",
+                "LIBINPUT",
+                "EVDEV_ABS",
+                "MOUSE_DPI",
+                "POINTINGSTICK_",
+            )
+            for prefix in prefixes:
+                if name.startswith(prefix):
+                    error(f"Warning: unexpected property: {name}={value}")
+
+    # the ones we found above were removed from the dict
+    for name, value in yaml_props.items():
+        error(f"Warning: device is missing recorded udev property: {name}={value}")
+
+
+def create(device):
+    evdev = fetch(device, "evdev")
+
+    d = libevdev.Device()
+    d.name = fetch(evdev, "name")
+
+    ids = fetch(evdev, "id")
+    if len(ids) != 4:
+        raise YamlException("Invalid ID format: {}".format(ids))
+    d.id = dict(zip(["bustype", "vendor", "product", "version"], ids))
+
+    codes = fetch(evdev, "codes")
+    for evtype, evcodes in codes.items():
+        for code in evcodes:
+            data = None
+            if evtype == libevdev.EV_ABS.value:
+                values = fetch(evdev, "absinfo")[code]
+                absinfo = libevdev.InputAbsInfo(
+                    minimum=values[0],
+                    maximum=values[1],
+                    fuzz=values[2],
+                    flat=values[3],
+                    resolution=values[4],
+                )
+                data = absinfo
+            elif evtype == libevdev.EV_REP.value:
+                if code == libevdev.EV_REP.REP_DELAY.value:
+                    data = 500
+                elif code == libevdev.EV_REP.REP_PERIOD.value:
+                    data = 20
+            d.enable(libevdev.evbit(evtype, code), data=data)
+
+    properties = fetch(evdev, "properties")
+    for prop in properties:
+        d.enable(libevdev.propbit(prop))
+
+    uinput = d.create_uinput_device()
+
+    check_udev_properties(device, uinput)
+
+    return uinput
+
+
+def print_events(devnode, indent, evs):
+    devnode = os.path.basename(devnode)
+    for e in evs:
+        print(
+            "{}: {}{:06d}.{:06d} {} / {:<20s} {:4d}".format(
+                devnode,
+                " " * (indent * 8),
+                e.sec,
+                e.usec,
+                e.type.name,
+                e.code.name,
+                e.value,
+            )
+        )
+
+
+def collect_events(frame):
+    evs = []
+    events_skipped = False
+    for (sec, usec, evtype, evcode, value) in frame:
+        if evtype == libevdev.EV_KEY.value and value == 2:  # key repeat
+            events_skipped = True
+            continue
+
+        e = libevdev.InputEvent(
+            libevdev.evbit(evtype, evcode), value=value, sec=sec, usec=usec
+        )
+        evs.append(e)
+
+    # If we skipped some events and now all we have left is the
+    # SYN_REPORTs, we drop the SYN_REPORTs as well.
+    if events_skipped and all(e for e in evs if e.matches(libevdev.EV_SYN.SYN_REPORT)):
+        return []
+    else:
+        return evs
+
+
+def replay(device, verbose):
+    events = fetch(device, "events")
+    if events is None:
+        return
+    uinput = device["__uinput"]
+
+    # The first event may have a nonzero offset but we want to replay
+    # immediately regardless. When replaying multiple devices, the first
+    # offset is the offset from the first event on any device.
+    offset = time.time() - device["__first_event_offset"]
+
+    if offset < 0:
+        error("WARNING: event time offset is in the future, refusing to replay")
+        return
+
+    # each 'evdev' set contains one SYN_REPORT so we only need to check for
+    # the time offset once per event
+    for event in events:
+        try:
+            evdev = fetch(event, "evdev")
+        except YamlException:
+            continue
+
+        evs = collect_events(evdev)
+        if not evs:
+            continue
+
+        evtime = evs[0].sec + evs[0].usec / 1e6 + offset
+        now = time.time()
+
+        if evtime - now > 150 / 1e6:  # 150 µs error margin
+            time.sleep(evtime - now - 150 / 1e6)
+
+        uinput.send_events(evs)
+        if verbose:
+            print_events(uinput.devnode, device["__index"], evs)
+
+
+def first_timestamp(device):
+    events = fetch(device, "events")
+    for e in events or []:
+        try:
+            evdev = fetch(e, "evdev")
+            (sec, usec, *_) = evdev[0]
+            return sec + usec / 1.0e6
+        except YamlException:
+            pass
+
+    return None
+
+
+def wrap(func, *args):
+    try:
+        func(*args)
+    except KeyboardInterrupt:
+        pass
+
+
+def loop(args, recording):
+    devices = fetch(recording, "devices")
+
+    first_timestamps = tuple(
+        filter(lambda x: x is not None, [first_timestamp(d) for d in devices])
+    )
+    # All devices need to start replaying at the same time, so let's find
+    # the very first event and offset everything by that timestamp.
+    toffset = min(first_timestamps or [math.inf])
+
+    for idx, d in enumerate(devices):
+        uinput = create(d)
+        print("{}: {}".format(uinput.devnode, uinput.name))
+        d["__uinput"] = uinput  # cheaper to hide it in the dict then work around it
+        d["__index"] = idx
+        d["__first_event_offset"] = toffset
+
+    if not first_timestamps:
+        input("No events in recording. Hit enter to quit")
+        return
+
+    while True:
+        input("Hit enter to start replaying")
+
+        processes = []
+        for d in devices:
+            p = multiprocessing.Process(target=wrap, args=(replay, d, args.verbose))
+            processes.append(p)
+
+        for p in processes:
+            p.start()
+
+        for p in processes:
+            p.join()
+
+        del processes
+
+
+def create_device_quirk(device):
+    try:
+        quirks = fetch(device, "quirks")
+        if not quirks:
+            return None
+    except YamlException:
+        return None
+    # Where the device has a quirk, we match on name, vendor and product.
+    # That's the best match we can assemble here from the info we have.
+    evdev = fetch(device, "evdev")
+    name = fetch(evdev, "name")
+    id = fetch(evdev, "id")
+    quirk = (
+        "[libinput-replay {name}]\n"
+        "MatchName={name}\n"
+        "MatchVendor=0x{id[1]:04X}\n"
+        "MatchProduct=0x{id[2]:04X}\n"
+    ).format(name=name, id=id)
+    quirk += "\n".join(quirks)
+    return quirk
+
+
+def setup_quirks(recording):
+    devices = fetch(recording, "devices")
+    overrides = None
+    quirks = []
+    for d in devices:
+        if "quirks" in d:
+            quirk = create_device_quirk(d)
+            if quirk:
+                quirks.append(quirk)
+    if not quirks:
+        return None
+
+    overrides = Path("/etc/libinput/local-overrides.quirks")
+    if overrides.exists():
+        print(
+            "{} exists, please move it out of the way first".format(overrides),
+            file=sys.stderr,
+        )
+        sys.exit(1)
+
+    overrides.parent.mkdir(exist_ok=True)
+    with overrides.open("w+") as fd:
+        fd.write("# This file was generated by libinput replay\n")
+        fd.write("# Unless libinput replay is running right now, remove this file.\n")
+        fd.write("\n\n".join(quirks))
+
+    return overrides
+
+
+def check_file(recording):
+    version = fetch(recording, "version")
+    if version != SUPPORTED_FILE_VERSION:
+        raise YamlException(
+            "Invalid file format: {}, expected {}".format(
+                version, SUPPORTED_FILE_VERSION
+            )
+        )
+
+    ndevices = fetch(recording, "ndevices")
+    devices = fetch(recording, "devices")
+    if ndevices != len(devices):
+        error(
+            "WARNING: truncated file, expected {} devices, got {}".format(
+                ndevices, len(devices)
+            )
+        )
+
+
+def main():
+    parser = argparse.ArgumentParser(description="Replay a device recording")
+    parser.add_argument(
+        "recording",
+        metavar="recorded-file.yaml",
+        type=str,
+        help="Path to device recording",
+    )
+    parser.add_argument("--verbose", action="store_true")
+    args = parser.parse_args()
+
+    quirks_file = None
+
+    try:
+        with open(args.recording) as f:
+            y = yaml.safe_load(f)
+            check_file(y)
+            quirks_file = setup_quirks(y)
+            loop(args, y)
+    except KeyboardInterrupt:
+        pass
+    except (PermissionError, OSError) as e:
+        error("Error: failed to open device: {}".format(e))
+    except YamlException as e:
+        error("Error: failed to parse recording: {}".format(e))
+    finally:
+        if quirks_file:
+            quirks_file.unlink()
+
+
+if __name__ == "__main__":
+    main()
diff -Naur third_party_libinput_bak/tools/shared.c third_party_libinput_new/tools/shared.c
--- third_party_libinput_bak/tools/shared.c	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/shared.c	2023-03-30 11:26:52.393915900 +0800
@@ -43,6 +43,15 @@
 #include "util-macros.h"
 #include "util-strings.h"
 
+static uint32_t dispatch_counter = 0;
+
+void
+tools_dispatch(struct libinput *libinput)
+{
+	dispatch_counter++;
+	libinput_dispatch(libinput);
+}
+
 LIBINPUT_ATTRIBUTE_PRINTF(3, 0)
 static void
 log_handler(struct libinput *li,
@@ -51,20 +60,38 @@
 	    va_list args)
 {
 	static int is_tty = -1;
+	static uint32_t last_dispatch_no = 0;
+	static bool color_toggle = false;
 
 	if (is_tty == -1)
 		is_tty = isatty(STDOUT_FILENO);
 
 	if (is_tty) {
-		if (priority >= LIBINPUT_LOG_PRIORITY_ERROR)
+		if (priority >= LIBINPUT_LOG_PRIORITY_ERROR) {
 			printf(ANSI_RED);
-		else if (priority >= LIBINPUT_LOG_PRIORITY_INFO)
+		} else if (priority >= LIBINPUT_LOG_PRIORITY_INFO) {
 			printf(ANSI_HIGHLIGHT);
+		} else if (priority == LIBINPUT_LOG_PRIORITY_DEBUG) {
+			if (dispatch_counter != last_dispatch_no)
+				color_toggle = !color_toggle;
+			uint8_t r = 0,
+				g = 135,
+				b = 95 + (color_toggle ? 80 :0);
+			printf("\x1B[38;2;%u;%u;%um", r, g, b);
+		}
 	}
 
+	if (priority < LIBINPUT_LOG_PRIORITY_INFO) {
+		if (dispatch_counter != last_dispatch_no) {
+			last_dispatch_no = dispatch_counter;
+			printf("%4u: ", dispatch_counter);
+		} else {
+			printf(" %4s ", "...");
+		}
+	}
 	vprintf(format, args);
 
-	if (is_tty && priority >= LIBINPUT_LOG_PRIORITY_INFO)
+	if (is_tty)
 		printf(ANSI_NORMAL);
 }
 
@@ -437,13 +464,16 @@
 find_device(const char *udev_tag)
 {
 	struct udev *udev;
-	struct udev_enumerate *e;
+	struct udev_enumerate *e = NULL;
 	struct udev_list_entry *entry = NULL;
 	struct udev_device *device;
 	const char *path, *sysname;
 	char *device_node = NULL;
 
 	udev = udev_new();
+	if (!udev)
+		goto out;
+
 	e = udev_enumerate_new(udev);
 	udev_enumerate_add_match_subsystem(e, "input");
 	udev_enumerate_scan_devices(e);
@@ -455,7 +485,7 @@
 			continue;
 
 		sysname = udev_device_get_sysname(device);
-		if (strncmp("event", sysname, 5) != 0) {
+		if (!strneq("event", sysname, 5)) {
 			udev_device_unref(device);
 			continue;
 		}
@@ -468,6 +498,7 @@
 		if (device_node)
 			break;
 	}
+out:
 	udev_enumerate_unref(e);
 	udev_unref(udev);
 
@@ -499,6 +530,9 @@
 		return false;
 
 	udev = udev_new();
+	if (!udev)
+		goto out;
+
 	dev = udev_device_new_from_devnum(udev, 'c', st.st_rdev);
 	if (!dev)
 		goto out;
@@ -564,27 +598,26 @@
 				"libinput: %s is not installed\n",
 				command);
 			return EXIT_INVALID_USAGE;
-		} else {
-			fprintf(stderr,
-				"Failed to execute '%s' (%s)\n",
-				command,
-				strerror(errno));
 		}
+		fprintf(stderr,
+			"Failed to execute '%s' (%s)\n",
+			command,
+			strerror(errno));
 	}
 
 	return EXIT_FAILURE;
 }
 
 static void
-sprintf_event_codes(char *buf, size_t sz, struct quirks *quirks)
+sprintf_event_codes(char *buf, size_t sz, struct quirks *quirks, enum quirk q)
 {
 	const struct quirk_tuples *t;
 	size_t off = 0;
 	int printed;
 	const char *name;
 
-	quirks_get_tuples(quirks, QUIRK_ATTR_EVENT_CODE_DISABLE, &t);
-	name = quirk_get_name(QUIRK_ATTR_EVENT_CODE_DISABLE);
+	quirks_get_tuples(quirks, q, &t);
+	name = quirk_get_name(q);
 	printed = snprintf(buf, sz, "%s=", name);
 	assert(printed != -1);
 	off += printed;
@@ -600,6 +633,29 @@
 	}
 }
 
+static void
+sprintf_input_props(char *buf, size_t sz, struct quirks *quirks, enum quirk q)
+{
+	const uint32_t *properties;
+	size_t nprops = 0;
+	size_t off = 0;
+	int printed;
+	const char *name;
+
+	quirks_get_uint32_array(quirks, q, &properties, &nprops);
+	name = quirk_get_name(q);
+	printed = snprintf(buf, sz, "%s=", name);
+	assert(printed != -1);
+	off += printed;
+
+	for (size_t i = 0; off < sz && i < nprops; i++) {
+		const char *name = libevdev_property_get_name(properties[i]);
+		printed = snprintf(buf + off, sz - off, "%s;", name);
+		assert(printed != -1);
+		off += printed;
+	}
+}
+
 void
 tools_list_device_quirks(struct quirks_context *ctx,
 			 struct udev_device *device,
@@ -676,11 +732,18 @@
 				callback(userdata, buf);
 				break;
 			case QUIRK_ATTR_USE_VELOCITY_AVERAGING:
+			case QUIRK_ATTR_TABLET_SMOOTHING:
 				snprintf(buf, sizeof(buf), "%s=1", name);
 				callback(userdata, buf);
 				break;
 			case QUIRK_ATTR_EVENT_CODE_DISABLE:
-				sprintf_event_codes(buf, sizeof(buf), quirks);
+			case QUIRK_ATTR_EVENT_CODE_ENABLE:
+				sprintf_event_codes(buf, sizeof(buf), quirks, q);
+				callback(userdata, buf);
+				break;
+			case QUIRK_ATTR_INPUT_PROP_DISABLE:
+			case QUIRK_ATTR_INPUT_PROP_ENABLE:
+				sprintf_input_props(buf, sizeof(buf), quirks, q);
 				callback(userdata, buf);
 				break;
 			default:
diff -Naur third_party_libinput_bak/tools/shared.h third_party_libinput_new/tools/shared.h
--- third_party_libinput_bak/tools/shared.h	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/shared.h	2023-03-30 11:26:59.240504900 +0800
@@ -132,4 +132,6 @@
 			 void (*callback)(void *userdata, const char *str),
 			 void *userdata);
 
+void
+tools_dispatch(struct libinput *libinput);
 #endif
diff -Naur third_party_libinput_bak/tools/test_tool_option_parsing.py third_party_libinput_new/tools/test_tool_option_parsing.py
--- third_party_libinput_bak/tools/test_tool_option_parsing.py	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/tools/test_tool_option_parsing.py	2023-03-30 11:28:06.649749900 +0800
@@ -32,15 +32,15 @@
 try:
     import pytest
 except ImportError:
-    print('Failed to import pytest. Skipping.', file=sys.stderr)
+    print("Failed to import pytest. Skipping.", file=sys.stderr)
     sys.exit(77)
 
 
-logger = logging.getLogger('test')
+logger = logging.getLogger("test")
 logger.setLevel(logging.DEBUG)
 
-if '@DISABLE_WARNING@' != 'yes':
-    print('This is the source file, run the one in the meson builddir instead')
+if "@DISABLE_WARNING@" != "yes":
+    print("This is the source file, run the one in the meson builddir instead")
     sys.exit(1)
 
 
@@ -49,9 +49,13 @@
 
 
 def run_command(args):
-    logger.debug('run command: {}'.format(' '.join(args)))
-    with subprocess.Popen(args, preexec_fn=_disable_coredump,
-                          stdout=subprocess.PIPE, stderr=subprocess.PIPE) as p:
+    logger.debug("run command: {}".format(" ".join(args)))
+    with subprocess.Popen(
+        args,
+        preexec_fn=_disable_coredump,
+        stdout=subprocess.PIPE,
+        stderr=subprocess.PIPE,
+    ) as p:
         try:
             p.wait(0.7)
         except subprocess.TimeoutExpired:
@@ -59,11 +63,11 @@
         stdout, stderr = p.communicate(timeout=5)
         if p.returncode == -3:
             p.returncode = 0
-        return p.returncode, stdout.decode('UTF-8'), stderr.decode('UTF-8')
+        return p.returncode, stdout.decode("UTF-8"), stderr.decode("UTF-8")
 
 
 class LibinputTool(object):
-    libinput_tool = 'libinput'
+    libinput_tool = "libinput"
     subtool = None
 
     def __init__(self, subtool=None):
@@ -92,43 +96,43 @@
     def run_command_unrecognized_option(self, args):
         rc, stdout, stderr = self.run_command(args)
         assert rc == 2, (rc, stdout, stderr)
-        assert stdout.startswith('Usage') or stdout == ''
-        assert 'unrecognized option' in stderr
+        assert stdout.startswith("Usage") or stdout == ""
+        assert "unrecognized option" in stderr
 
     def run_command_missing_arg(self, args):
         rc, stdout, stderr = self.run_command(args)
         assert rc == 2, (rc, stdout, stderr)
-        assert stdout.startswith('Usage') or stdout == ''
-        assert 'requires an argument' in stderr
+        assert stdout.startswith("Usage") or stdout == ""
+        assert "requires an argument" in stderr
 
     def run_command_unrecognized_tool(self, args):
         rc, stdout, stderr = self.run_command(args)
         assert rc == 2, (rc, stdout, stderr)
-        assert stdout.startswith('Usage') or stdout == ''
-        assert 'is not installed' in stderr
+        assert stdout.startswith("Usage") or stdout == ""
+        assert "is not installed" in stderr
 
 
 class LibinputDebugGui(LibinputTool):
-    def __init__(self, subtool='debug-gui'):
-        assert subtool == 'debug-gui'
+    def __init__(self, subtool="debug-gui"):
+        assert subtool == "debug-gui"
         super().__init__(subtool)
 
-        debug_gui_enabled = '@MESON_ENABLED_DEBUG_GUI@' == 'True'
+        debug_gui_enabled = "@MESON_ENABLED_DEBUG_GUI@" == "True"
         if not debug_gui_enabled:
             pytest.skip()
 
-        if not os.getenv('DISPLAY') and not os.getenv('WAYLAND_DISPLAY'):
+        if not os.getenv("DISPLAY") and not os.getenv("WAYLAND_DISPLAY"):
             pytest.skip()
 
         # 77 means gtk_init() failed, which is probably because you can't
         # connect to the display server.
-        rc, _, _ = self.run_command(['--help'])
+        rc, _, _ = self.run_command(["--help"])
         if rc == 77:
             pytest.skip()
 
 
 def get_tool(subtool=None):
-    if subtool == 'debug-gui':
+    if subtool == "debug-gui":
         return LibinputDebugGui()
     else:
         return LibinputTool(subtool)
@@ -139,110 +143,110 @@
     return get_tool()
 
 
-@pytest.fixture(params=['debug-events', 'debug-gui'])
+@pytest.fixture(params=["debug-events", "debug-gui"])
 def libinput_debug_tool(request):
     yield get_tool(request.param)
 
 
 @pytest.fixture
 def libinput_debug_events():
-    return get_tool('debug-events')
+    return get_tool("debug-events")
 
 
 @pytest.fixture
 def libinput_debug_gui():
-    return get_tool('debug-gui')
+    return get_tool("debug-gui")
 
 
 @pytest.fixture
 def libinput_record():
-    return get_tool('record')
+    return get_tool("record")
 
 
 def test_help(libinput):
-    stdout, stderr = libinput.run_command_success(['--help'])
-    assert stdout.startswith('Usage:')
-    assert stderr == ''
+    stdout, stderr = libinput.run_command_success(["--help"])
+    assert stdout.startswith("Usage:")
+    assert stderr == ""
 
 
 def test_version(libinput):
-    stdout, stderr = libinput.run_command_success(['--version'])
-    assert stdout.startswith('1')
-    assert stderr == ''
+    stdout, stderr = libinput.run_command_success(["--version"])
+    assert stdout.startswith("1")
+    assert stderr == ""
 
 
-@pytest.mark.parametrize('argument', ['--banana', '--foo', '--quiet', '--verbose'])
+@pytest.mark.parametrize("argument", ["--banana", "--foo", "--quiet", "--verbose"])
 def test_invalid_arguments(libinput, argument):
     libinput.run_command_unrecognized_option([argument])
 
 
-@pytest.mark.parametrize('tool', [['foo'], ['debug'], ['foo', '--quiet']])
+@pytest.mark.parametrize("tool", [["foo"], ["debug"], ["foo", "--quiet"]])
 def test_invalid_tool(libinput, tool):
     libinput.run_command_unrecognized_tool(tool)
 
 
 def test_udev_seat(libinput_debug_tool):
-    libinput_debug_tool.run_command_missing_arg(['--udev'])
-    libinput_debug_tool.run_command_success(['--udev', 'seat0'])
-    libinput_debug_tool.run_command_success(['--udev', 'seat1'])
+    libinput_debug_tool.run_command_missing_arg(["--udev"])
+    libinput_debug_tool.run_command_success(["--udev", "seat0"])
+    libinput_debug_tool.run_command_success(["--udev", "seat1"])
 
 
-@pytest.mark.skipif(os.environ.get('UDEV_NOT_AVAILABLE'), reason='udev required')
+@pytest.mark.skipif(os.environ.get("UDEV_NOT_AVAILABLE"), reason="udev required")
 def test_device_arg(libinput_debug_tool):
-    libinput_debug_tool.run_command_missing_arg(['--device'])
-    libinput_debug_tool.run_command_success(['--device', '/dev/input/event0'])
-    libinput_debug_tool.run_command_success(['--device', '/dev/input/event1'])
-    libinput_debug_tool.run_command_success(['/dev/input/event0'])
+    libinput_debug_tool.run_command_missing_arg(["--device"])
+    libinput_debug_tool.run_command_success(["--device", "/dev/input/event0"])
+    libinput_debug_tool.run_command_success(["--device", "/dev/input/event1"])
+    libinput_debug_tool.run_command_success(["/dev/input/event0"])
 
 
 options = {
-    'pattern': ['sendevents'],
+    "pattern": ["sendevents"],
     # enable/disable options
-    'enable-disable': [
-        'tap',
-        'drag',
-        'drag-lock',
-        'middlebutton',
-        'natural-scrolling',
-        'left-handed',
-        'dwt'
+    "enable-disable": [
+        "tap",
+        "drag",
+        "drag-lock",
+        "middlebutton",
+        "natural-scrolling",
+        "left-handed",
+        "dwt",
     ],
     # options with distinct values
-    'enums': {
-        'set-click-method': ['none', 'clickfinger', 'buttonareas'],
-        'set-scroll-method': ['none', 'twofinger', 'edge', 'button'],
-        'set-profile': ['adaptive', 'flat'],
-        'set-tap-map': ['lrm', 'lmr'],
+    "enums": {
+        "set-click-method": ["none", "clickfinger", "buttonareas"],
+        "set-scroll-method": ["none", "twofinger", "edge", "button"],
+        "set-profile": ["adaptive", "flat"],
+        "set-tap-map": ["lrm", "lmr"],
     },
     # options with a range
-    'ranges': {
-        'set-speed': (float, -1.0, +1.0),
-    }
+    "ranges": {
+        "set-speed": (float, -1.0, +1.0),
+    },
 }
 
 
 # Options that allow for glob patterns
-@pytest.mark.parametrize('option', options['pattern'])
+@pytest.mark.parametrize("option", options["pattern"])
 def test_options_pattern(libinput_debug_tool, option):
-    libinput_debug_tool.run_command_success(['--disable-{}'.format(option), '*'])
-    libinput_debug_tool.run_command_success(['--disable-{}'.format(option), 'abc*'])
+    libinput_debug_tool.run_command_success(["--disable-{}".format(option), "*"])
+    libinput_debug_tool.run_command_success(["--disable-{}".format(option), "abc*"])
 
 
-@pytest.mark.parametrize('option', options['enable-disable'])
+@pytest.mark.parametrize("option", options["enable-disable"])
 def test_options_enable_disable(libinput_debug_tool, option):
-    libinput_debug_tool.run_command_success(['--enable-{}'.format(option)])
-    libinput_debug_tool.run_command_success(['--disable-{}'.format(option)])
+    libinput_debug_tool.run_command_success(["--enable-{}".format(option)])
+    libinput_debug_tool.run_command_success(["--disable-{}".format(option)])
 
 
-@pytest.mark.parametrize('option', options['enums'].items())
+@pytest.mark.parametrize("option", options["enums"].items())
 def test_options_enums(libinput_debug_tool, option):
     name, values = option
     for v in values:
-        libinput_debug_tool.run_command_success(['--{}'.format(name), v])
-        libinput_debug_tool.run_command_success(['--{}={}'.format(name, v)])
+        libinput_debug_tool.run_command_success(["--{}".format(name), v])
+        libinput_debug_tool.run_command_success(["--{}={}".format(name, v)])
 
 
-@pytest.mark.parametrize('option', options['ranges'].items())
+@pytest.mark.parametrize("option", options["ranges"].items())
 def test_options_ranges(libinput_debug_tool, option):
     name, values = option
     range_type, minimum, maximum = values
@@ -250,114 +254,130 @@
     step = (maximum - minimum) / 10.0
     value = minimum
     while value < maximum:
-        libinput_debug_tool.run_command_success(['--{}'.format(name), str(value)])
-        libinput_debug_tool.run_command_success(['--{}={}'.format(name, value)])
+        libinput_debug_tool.run_command_success(["--{}".format(name), str(value)])
+        libinput_debug_tool.run_command_success(["--{}={}".format(name, value)])
         value += step
-    libinput_debug_tool.run_command_success(['--{}'.format(name), str(maximum)])
-    libinput_debug_tool.run_command_success(['--{}={}'.format(name, maximum)])
+    libinput_debug_tool.run_command_success(["--{}".format(name), str(maximum)])
+    libinput_debug_tool.run_command_success(["--{}={}".format(name, maximum)])
 
 
 def test_apply_to(libinput_debug_tool):
-    libinput_debug_tool.run_command_missing_arg(['--apply-to'])
-    libinput_debug_tool.run_command_success(['--apply-to', '*foo*'])
-    libinput_debug_tool.run_command_success(['--apply-to', 'foobar'])
-    libinput_debug_tool.run_command_success(['--apply-to', 'any'])
+    libinput_debug_tool.run_command_missing_arg(["--apply-to"])
+    libinput_debug_tool.run_command_success(["--apply-to", "*foo*"])
+    libinput_debug_tool.run_command_success(["--apply-to", "foobar"])
+    libinput_debug_tool.run_command_success(["--apply-to", "any"])
 
 
-@pytest.mark.parametrize('args', [['--verbose'], ['--quiet'],
-                                  ['--verbose', '--quiet'],
-                                  ['--quiet', '--verbose']])
+@pytest.mark.parametrize(
+    "args",
+    [["--verbose"], ["--quiet"], ["--verbose", "--quiet"], ["--quiet", "--verbose"]],
+)
 def test_debug_events_verbose_quiet(libinput_debug_events, args):
     libinput_debug_events.run_command_success(args)
 
 
-@pytest.mark.parametrize('arg', ['--banana', '--foo', '--version'])
+@pytest.mark.parametrize("arg", ["--banana", "--foo", "--version"])
 def test_invalid_args(libinput_debug_tool, arg):
     libinput_debug_tool.run_command_unrecognized_option([arg])
 
 
 def test_libinput_debug_events_multiple_devices(libinput_debug_events):
-    libinput_debug_events.run_command_success(['--device', '/dev/input/event0', '/dev/input/event1'])
+    libinput_debug_events.run_command_success(
+        ["--device", "/dev/input/event0", "/dev/input/event1"]
+    )
     # same event path multiple times? meh, your problem
-    libinput_debug_events.run_command_success(['--device', '/dev/input/event0', '/dev/input/event0'])
-    libinput_debug_events.run_command_success(['/dev/input/event0', '/dev/input/event1'])
+    libinput_debug_events.run_command_success(
+        ["--device", "/dev/input/event0", "/dev/input/event0"]
+    )
+    libinput_debug_events.run_command_success(
+        ["/dev/input/event0", "/dev/input/event1"]
+    )
 
 
 def test_libinput_debug_events_too_many_devices(libinput_debug_events):
     # Too many arguments just bails with the usage message
-    rc, stdout, stderr = libinput_debug_events.run_command(['/dev/input/event0'] * 61)
+    rc, stdout, stderr = libinput_debug_events.run_command(["/dev/input/event0"] * 61)
     assert rc == 2, (stdout, stderr)
 
 
-@pytest.mark.parametrize('arg', ['--quiet'])
+@pytest.mark.parametrize("arg", ["--quiet"])
 def test_libinput_debug_gui_invalid_arg(libinput_debug_gui, arg):
     libinput_debug_gui.run_command_unrecognized_option([arg])
 
 
 def test_libinput_debug_gui_verbose(libinput_debug_gui):
-    libinput_debug_gui.run_command_success(['--verbose'])
+    libinput_debug_gui.run_command_success(["--verbose"])
 
 
-@pytest.mark.parametrize('arg', ['--help', '--show-keycodes', '--with-libinput'])
+@pytest.mark.parametrize(
+    "arg", ["--help", "--show-keycodes", "--with-libinput", "--with-hidraw"]
+)
 def test_libinput_record_args(libinput_record, arg):
     libinput_record.run_command_success([arg])
 
 
 def test_libinput_record_multiple_arg(libinput_record):
     # this arg is deprecated and a noop
-    libinput_record.run_command_success(['--multiple'])
+    libinput_record.run_command_success(["--multiple"])
 
 
 @pytest.fixture
 def recording(tmp_path):
-    return str((tmp_path / 'record.out').resolve())
+    return str((tmp_path / "record.out").resolve())
 
 
 def test_libinput_record_all(libinput_record, recording):
-    libinput_record.run_command_success(['--all', '-o', recording])
-    libinput_record.run_command_success(['--all', recording])
+    libinput_record.run_command_success(["--all", "-o", recording])
+    libinput_record.run_command_success(["--all", recording])
 
 
 def test_libinput_record_outfile(libinput_record, recording):
-    libinput_record.run_command_success(['-o', recording])
-    libinput_record.run_command_success(['--output-file', recording])
-    libinput_record.run_command_success(['--output-file={}'.format(recording)])
+    libinput_record.run_command_success(["-o", recording])
+    libinput_record.run_command_success(["--output-file", recording])
+    libinput_record.run_command_success(["--output-file={}".format(recording)])
 
 
 def test_libinput_record_single(libinput_record, recording):
-    libinput_record.run_command_success(['/dev/input/event0'])
-    libinput_record.run_command_success(['-o', recording, '/dev/input/event0'])
-    libinput_record.run_command_success(['/dev/input/event0', recording])
-    libinput_record.run_command_success([recording, '/dev/input/event0'])
+    libinput_record.run_command_success(["/dev/input/event0"])
+    libinput_record.run_command_success(["-o", recording, "/dev/input/event0"])
+    libinput_record.run_command_success(["/dev/input/event0", recording])
+    libinput_record.run_command_success([recording, "/dev/input/event0"])
 
 
 def test_libinput_record_multiple(libinput_record, recording):
-    libinput_record.run_command_success(['-o', recording, '/dev/input/event0', '/dev/input/event1'])
-    libinput_record.run_command_success([recording, '/dev/input/event0', '/dev/input/event1'])
-    libinput_record.run_command_success(['/dev/input/event0', '/dev/input/event1', recording])
+    libinput_record.run_command_success(
+        ["-o", recording, "/dev/input/event0", "/dev/input/event1"]
+    )
+    libinput_record.run_command_success(
+        [recording, "/dev/input/event0", "/dev/input/event1"]
+    )
+    libinput_record.run_command_success(
+        ["/dev/input/event0", "/dev/input/event1", recording]
+    )
 
 
 def test_libinput_record_autorestart(libinput_record, recording):
-    libinput_record.run_command_invalid(['--autorestart'])
-    libinput_record.run_command_invalid(['--autorestart=2'])
-    libinput_record.run_command_success(['-o', recording, '--autorestart=2'])
+    libinput_record.run_command_invalid(["--autorestart"])
+    libinput_record.run_command_invalid(["--autorestart=2"])
+    libinput_record.run_command_success(["-o", recording, "--autorestart=2"])
 
 
 def main():
-    args = ['-m', 'pytest']
+    args = ["-m", "pytest"]
     try:
         import xdist  # noqa
-        args += ['-n', 'auto']
+
+        args += ["-n", "auto"]
     except ImportError:
-        logger.info('python-xdist missing, this test will be slow')
+        logger.info("python-xdist missing, this test will be slow")
         pass
 
-    args += ['@MESON_BUILD_ROOT@']
+    args += ["@MESON_BUILD_ROOT@"]
 
-    os.environ['LIBINPUT_RUNNING_TEST_SUITE'] = '1'
+    os.environ["LIBINPUT_RUNNING_TEST_SUITE"] = "1"
 
     return subprocess.run([sys.executable] + args).returncode
 
 
-if __name__ == '__main__':
+if __name__ == "__main__":
     raise SystemExit(main())
diff -Naur third_party_libinput_bak/udev/libinput-device-group.c third_party_libinput_new/udev/libinput-device-group.c
--- third_party_libinput_bak/udev/libinput-device-group.c	2023-03-28 10:49:59.336627000 +0800
+++ third_party_libinput_new/udev/libinput-device-group.c	2023-03-29 17:27:03.427231900 +0800
@@ -30,7 +30,7 @@
 
 #include "libinput-util.h"
 
-#if HAVE_LIBWACOM_GET_PAIRED_DEVICE
+#if HAVE_LIBWACOM
 #include <libwacom/libwacom.h>
 
 static void
@@ -139,7 +139,7 @@
 				best_dist = dist;
 
 				free(*phys_attr);
-				*phys_attr = strdup(phys);
+				*phys_attr = safe_strdup(phys);
 			}
 		}
 
@@ -209,7 +209,7 @@
 	} else {
 	    char *physmatch = NULL;
 
-#if HAVE_LIBWACOM_GET_PAIRED_DEVICE
+#if HAVE_LIBWACOM
 	    if (vendor_id == VENDOR_ID_WACOM) {
 		    if (product_id == PRODUCT_ID_WACOM_EKR)
 			    wacom_handle_ekr(device,
